import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as b,a as e,t as g,b as l,w as n,n as v,g as k,d as s,e as r,r as c,o as f}from"./app-U_bew1in.js";const _={},w={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},C=e("hr",null,null,-1),A=e("hr",null,null,-1),N=e("p",null,"This chapter will discuss some of the often made beginner mistakes, corner cases as well as a few tricks to improve performance.",-1),$={class:"hint-container info"},F=e("p",{class:"hint-container-title"},"Info",-1),T={href:"https://github.com/learnbyexample/learn_gnuawk/tree/master/example_files",target:"_blank",rel:"noopener noreferrer"},j=r('<hr><h2 id="prefixing-for-variables" tabindex="-1"><a class="header-anchor" href="#prefixing-for-variables"><span>Prefixing <code>$</code> for variables</span></a></h2><p>Some scripting languages like <code>bash</code> require a <code>$</code> prefix when you need the value stored in a variable. For example, if you declare <code>name=&#39;Joe&#39;</code> you&#39;d need <code>echo &quot;$name&quot;</code> to print the value. This may result in using <code>$</code> prefix and other bashisms in <code>awk</code> as well when you are a beginner. To make it a bit worse, <code>awk</code> has the <code>$N</code> syntax for accessing field contents, which could result in false comprehension that all variables need the <code>$</code> prefix to access their values. See also <a href="https://unix.stackexchange.com/q/291126/109046" target="_blank" rel="noopener noreferrer">unix.stackexchange: Why does awk print the whole line when I want it to print a variable?</a>.</p>',3),I=e("p",null,[s("silently fails, "),e("code",null,"$word"),s(" becomes "),e("code",null,"$0"),s(" because of string to numeric conversion")],-1),E=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token parameter variable"},"-v"),s(),e("span",{class:"token assign-left variable"},"word"),e("span",{class:"token operator"},"="),e("span",{class:"token string"},'"cake"'),s(),e("span",{class:"token string"},"'$2==$word'"),s(" table.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# works when the variable is used correctly")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token parameter variable"},"-v"),s(),e("span",{class:"token assign-left variable"},"word"),e("span",{class:"token operator"},"="),e("span",{class:"token string"},'"cake"'),s(),e("span",{class:"token string"},"'$2==word'"),s(" table.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# blue cake mug shirt -7")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),S=e("p",null,[s("here 'field' gets replaced with '2' and hence "),e("code",null,"$2"),s(" is printed")],-1),L=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token parameter variable"},"-v"),s(),e("span",{class:"token assign-left variable"},"field"),e("span",{class:"token operator"},"="),e("span",{class:"token number"},"2"),s(),e("span",{class:"token string"},"'{print $field}'"),s(" table.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# bread")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# cake")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# banana")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),D=e("hr",null,null,-1),R=e("h2",{id:"dos-style-line-endings",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#dos-style-line-endings"},[e("span",null,"DOS style line endings")])],-1),G=e("p",null,[s("As mentioned before, line endings differ from one platform to another. On Windows, it is typically a combination of carriage return and the newline character and referred as DOS style line endings. Since "),e("code",null,"GNU awk"),s(" allows multicharacter "),e("code",null,"RS"),s(", it is easy to handle. See "),e("a",{href:"https://stackoverflow.com/q/45772525/4082052",target:"_blank",rel:"noopener noreferrer"},"stackoverflow: Why does my tool output overwrite itself and how do I fix it?"),s(" for a detailed discussion and various mitigation methods.")],-1),q=e("p",null,"no issue with Unix style line ending",-1),z=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token builtin class-name"},"printf"),s(),e("span",{class:"token string"},"'mat dog\\n123 789\\n'"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'{print $2, $1}'")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# dog mat")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 789 123")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),P=e("p",null,"DOS style line ending causes trouble",-1),U=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token builtin class-name"},"printf"),s(),e("span",{class:"token string"},"'mat dog\\r\\n123 789\\r\\n'"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'{print $2, $1}'")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# mat")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 123")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token builtin class-name"},"printf"),s(),e("span",{class:"token string"},"'mat dog\\r\\n123 789\\r\\n'"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'{sub(/$/, ".")} 1'`)]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# .at dog")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# .23 789")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),W=e("p",null,[s("use "),e("code",null,"\\r?\\n"),s(" if you want to handle both Unix and DOS style with the same command and use "),e("code",null,"ORS=RT"),s(" to preserve the line ending style")],-1),O=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token builtin class-name"},"printf"),s(),e("span",{class:"token string"},"'mat dog\\r\\n123 789\\r\\n'"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token parameter variable"},"-v"),s(),e("span",{class:"token assign-left variable"},"RS"),e("span",{class:"token operator"},"="),e("span",{class:"token string"},"'\\r\\n'"),s(),e("span",{class:"token string"},"'{print $2, $1}'")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# dog mat")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 789 123")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token builtin class-name"},"printf"),s(),e("span",{class:"token string"},"'mat dog\\r\\n123 789\\r\\n'"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token parameter variable"},"-v"),s(),e("span",{class:"token assign-left variable"},"RS"),e("span",{class:"token operator"},"="),e("span",{class:"token string"},"'\\r\\n'"),s(),e("span",{class:"token string"},`'{sub(/$/, ".")} 1'`)]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# mat dog.")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 123 789.")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),M=r('<h2 id="behavior-of-and-when-string-contains-newline" tabindex="-1"><a class="header-anchor" href="#behavior-of-and-when-string-contains-newline"><span>Behavior of <code>^</code> and <code>$</code> when string contains newline</span></a></h2><p>In some regular expression implementations, <code>^</code> matches the start of a line and <code>$</code> matches the end of a line (with newline as the line separator). In <code>awk</code>, these anchors always match the start of the entire string and end of the entire string respectively. This comes into play when <code>RS</code> is other than the newline character, or if you have a string value containing newline characters.</p>',2),V=e("p",null,[e("code",null,"'apple\\n'"),s(" doesn't match as there's a newline character")],-1),B=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token builtin class-name"},"printf"),s(),e("span",{class:"token string"},"'apple\\n,mustard,grape,\\nmango'"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token parameter variable"},"-v"),s(),e("span",{class:"token assign-left variable"},"RS"),e("span",{class:"token operator"},"="),s(", "),e("span",{class:"token string"},"'/e$/'")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# grape")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),H=e("p",null,[e("code",null,"'\\nmango'"),s(" doesn't match as there's a newline character")],-1),K=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token builtin class-name"},"printf"),s(),e("span",{class:"token string"},"'apple\\n,mustard,grape,\\nmango'"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token parameter variable"},"-v"),s(),e("span",{class:"token assign-left variable"},"RS"),e("span",{class:"token operator"},"="),s(", "),e("span",{class:"token string"},"'/^m/'")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# mustard")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Z=r('<hr><h2 id="word-boundary-differences" tabindex="-1"><a class="header-anchor" href="#word-boundary-differences"><span>Word boundary differences</span></a></h2><p>The word boundary <code>\\y</code> matches both the start and end of word locations. Whereas, <code>\\&lt;</code> and <code>\\&gt;</code> will match exactly the start and end of word locations respectively. This leads to cases where you have to choose which of these word boundaries to use depending on the results desired. Consider <code>I have 12, he has 2!</code> as a sample text, shown below as an image with vertical bars marking the word boundaries. The last character <code>!</code> doesn&#39;t have the end of word boundary marker as it is not a word character.</p><figure><img src="https://learnbyexample.github.io/learn_gnuawk/images/word_boundary.png" alt="word boundary" tabindex="0" loading="lazy"><figcaption>word boundary</figcaption></figure>',4),J=e("p",null,[e("code",null,"\\y"),s(" matches both the start and end of word boundaries.")],-1),Y=e("p",null,[s("The first match here used starting boundary of '"),e("code",null,"I"),s("' and '"),e("code",null,"have"),s("'")],-1),Q=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token builtin class-name"},"echo"),s(),e("span",{class:"token string"},"'I have 12, he has 2!'"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'{gsub(/\\y..\\y/, "[&]")} 1'`)]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# [I ]have [12][, ][he] has[ 2]!")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),X=e("p",null,[e("code",null,"\\<"),s(" and "),e("code",null,"\\>"),s(" only matches the start and end word boundaries respectively")],-1),ee=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token builtin class-name"},"echo"),s(),e("span",{class:"token string"},"'I have 12, he has 2!'"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'{gsub(/\\<..\\>/, "[&]")} 1'`)]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# I have [12], [he] has 2!")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),se=e("p",null,"Here's another example to show the difference between the two types of word boundaries.",-1),ne=e("p",null,"add something to both the start/end of word",-1),ae=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token builtin class-name"},"echo"),s(),e("span",{class:"token string"},"'hi log_42 12b'"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'{gsub(/\\y/, ":")} 1'`)]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# :hi: :log_42: :12b:")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),te=e("p",null,"add something only at the start of word",-1),le=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token builtin class-name"},"echo"),s(),e("span",{class:"token string"},"'hi log_42 12b'"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'{gsub(/\\</, ":")} 1'`)]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# :hi :log_42 :12b")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ie=e("p",null,"add something only at the end of word",-1),oe=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token builtin class-name"},"echo"),s(),e("span",{class:"token string"},"'hi log_42 12b'"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'{gsub(/\\>/, ":")} 1'`)]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# hi: log_42: 12b:")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ce=e("hr",null,null,-1),re=e("h2",{id:"relying-on-the-default-initial-value",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#relying-on-the-default-initial-value"},[e("span",null,"Relying on the default initial value")])],-1),de=e("p",null,"Uninitialized variables are useful, but sometimes they don't translate well if you are converting a command from single file input to multiple files. You have to workout which ones would need a reset at the beginning of each file being processed.",-1),ue=e("p",null,"step 1: works for single file",-1),pe=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'{sum += $NF} END{print sum}'"),s(" table.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 38.14")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),he=e("p",null,"step 2: prepare code to work for multiple file",-1),me=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'{sum += $NF} ENDFILE{print FILENAME ":" sum}'`),s(" table.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# table.txt:38.14")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),be=e("p",null,"step 3: check with multiple file input",-1),ge=e("blockquote",null,[e("p",null,"oops, default numerical value '0' for sum works only once")],-1),ve=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'{sum += $NF} ENDFILE{print FILENAME ":" sum}'`),s(" table.txt marks.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# table.txt:38.14")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# marks.txt:530.14")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ke=e("p",null,"step 4: correctly initialize variables",-1),fe=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'{sum += $NF} ENDFILE{print FILENAME ":" sum; sum=0}'`),s(" table.txt marks.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# table.txt:38.14")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# marks.txt:492")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),_e=e("hr",null,null,-1),we=e("h2",{id:"code-in-the-replacement-section",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#code-in-the-replacement-section"},[e("span",null,"Code in the replacement section")])],-1),ye=e("p",null,"The replacement section in the substitution functions can accept any expression, which are converted to string whenever necessary. What happens if the regexp doesn't match the input string but the expression can change the value of a variable, such as increment/decrement operators? Well, the expression is still executed, which may or may not be what you need.",-1),xe=e("p",null,[s("no match for the second line, but '"),e("code",null,"c"),s("' was still modified")],-1),Ce=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'{sub(/^(br|ye)/, ++c ") &")} 1'`),s(" table.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 1) brown bread mat hair 42")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# blue cake mug shirt -7")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 3) yellow banana window shoes 3.14")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Ae=e("p",null,"Check for a match before applying the substitution. This may also help to simplify the regexp for substitution or, you could save the regexp in a variable to avoid duplication.",-1),Ne=e("blockquote",null,[e("p",null,[s("can also use: "),e("code",null,`awk '/^(br|ye)/{$0 = ++c ") " $0} 1' table.txt`)])],-1),$e=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'/^(br|ye)/{sub(/^/, ++c ") ")} 1'`),s(" table.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 1) brown bread mat hair 42")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# blue cake mug shirt -7")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 2) yellow banana window shoes 3.14")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Fe=e("p",null,"Another important point to note is that the expression is executed only once per function call, not for every match.",-1),Te=e("p",null,[s("the first line has two matches but '"),e("code",null,"c"),s("' is modified only once")],-1),je=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'{gsub(/\\<b/, ++c ") &")} 1'`),s(" table.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 1) brown 1) bread mat hair 42")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 2) blue cake mug shirt -7")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# yellow 3) banana window shoes 3.14")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Ie=e("h2",{id:"forcing-numeric-context",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#forcing-numeric-context"},[e("span",null,"Forcing numeric context")])],-1),Ee=e("p",null,[s("You can use the unary operator "),e("code",null,"+"),s(" to force numeric conversion. A variable might have numeric operations but still not get assigned a number if there's no input to read. So, when printing a variable that should be a number, use unary "),e("code",null,"+"),s(" to ensure it prints 0 instead of an empty string.")],-1),Se=e("p",null,"numbers present in the last column, so no issues",-1),Le=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'{sum += $NF} END{print sum}'"),s(" table.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 38.14")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),De=e("p",null,"strings in the first column, gets treated as 0",-1),Re=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'{sum += $1} END{print sum}'"),s(" table.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 0")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Ge=e("p",null,"no input at all, an empty string is printed",-1),qe=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'{sum += $1} END{print sum}'"),s(" /dev/null")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1),ze=e("p",null,"forced conversion to number, 0 is printed",-1),Pe=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'{sum += $1} END{print +sum}'"),s(" /dev/null")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 0")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Ue=e("hr",null,null,-1),We=e("h2",{id:"locale-based-numbers",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#locale-based-numbers"},[e("span",null,"Locale based numbers")])],-1),Oe=e("p",null,[s("The "),e("code",null,"-N"),s(" option (or "),e("code",null,"--use-lc-numeric"),s(") is useful to work with floating-point numbers based on the current locale.")],-1),Me=e("p",null,[s("my locale uses "),e("code",null,"."),s(" for the decimal point")],-1),Ve=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token builtin class-name"},"echo"),s(),e("span",{class:"token string"},"'3.14'"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'{$0++} 1'")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 4.14")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Be=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token builtin class-name"},"echo"),s(),e("span",{class:"token string"},"'3,14'"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'{$0++} 1'")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 4")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token builtin class-name"},"echo"),s(),e("span",{class:"token string"},"'3,14'"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token assign-left variable"},[e("span",{class:"token environment constant"},"LC_NUMERIC")]),e("span",{class:"token operator"},"="),s("de_DE "),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token parameter variable"},"-N"),s(),e("span",{class:"token string"},"'{$0++} 1'")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 4,14")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),He=e("hr",null,null,-1),Ke=e("h2",{id:"forcing-string-context",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#forcing-string-context"},[e("span",null,"Forcing string context")])],-1),Ze=e("p",null,"Concatenate an empty string to force string comparison.",-1),Je=e("ul",null,[e("li",null,"parentheses around the first argument to print used for clarity"),e("li",null,"fields get compared as numbers here")],-1),Ye=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token builtin class-name"},"echo"),s(),e("span",{class:"token string"},"'5 5.0'"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'{print ($1==$2 ? "same" : "different"), "number"}'`)]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# same number")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Qe=e("p",null,"fields get compared as strings here",-1),Xe=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token builtin class-name"},"echo"),s(),e("span",{class:"token string"},"'5 5.0'"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'{print ($1""==$2 ? "same" : "different"), "string"}'`)]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# different string")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),es=r(`<hr><h2 id="negative-nf" tabindex="-1"><a class="header-anchor" href="#negative-nf"><span>Negative <code>NF</code></span></a></h2><p>Manipulating <code>NF</code> sometimes leads to a negative value. Fortunately, <code>awk</code> throws an error instead of failing silently.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> varying.txt</span>
<span class="line"><span class="token comment"># parrot</span></span>
<span class="line"><span class="token comment"># good cool awesome</span></span>
<span class="line"><span class="token comment"># blue sky</span></span>
<span class="line"><span class="token comment"># 12 34 56 78 90</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),ss=e("p",null,"delete the last two fields",-1),ns=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'{NF -= 2} 1'"),s(" varying.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# awk: cmd. line:1: (FILENAME=varying.txt FNR=1) fatal: NF set to negative value")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),as=e("p",null,"add a condition to check the number of fields assumes that lines with less than 3 fields shouldn't be modified",-1),ts=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'NF>2{NF -= 2} 1'"),s(" varying.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# parrot")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# good")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# blue sky")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 12 34 56")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ls=e("p",null,"Here's another example. Goal is to access the third field from the end.",-1),is=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'{print $(NF-2)}'"),s(" varying.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# awk: cmd. line:1: (FILENAME=varying.txt FNR=1) fatal: attempt to access field -1")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),os=e("p",null,"print only if there are minimum 3 fields",-1),cs=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'NF>2{print $(NF-2)}'"),s(" varying.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# good")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 56")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),rs=r('<hr><h2 id="faster-execution" tabindex="-1"><a class="header-anchor" href="#faster-execution"><span>Faster execution</span></a></h2><p>Changing the locale to ASCII (assuming that the default is not ASCII) can give a significant speed boost. Using <code>mawk</code> is another way to speed up the execution, provided you are not using GNU <code>awk</code> specific features. There are many feature differences, for example, <code>mawk</code> doesn&#39;t support the <code>{}</code> form of quantifiers (see <a href="https://unix.stackexchange.com/q/506119/109046" target="_blank" rel="noopener noreferrer">unix.stackexchange: How to specify regex quantifiers with <code>mawk</code>?</a> for details). See also <a href="https://en.wikipedia.org/wiki/AWK_programming_language#Versions_and_implementations" target="_blank" rel="noopener noreferrer">wikipedia: <code>awk</code> Versions and implementations</a>.</p>',3),ds=e("p",null,"time shown is the best result from multiple runs speed benefit will vary depending on computing resources, input, etc",-1),us=e("code",null,"words.txt",-1),ps=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"time"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'/^([a-d][r-z]){3}$/'"),s(" words.txt "),e("span",{class:"token operator"},">"),s(" f1")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# real    0m0.029s")]),s(`
`),e("span",{class:"line"}),s(`
`),e("span",{class:"line"},[e("span",{class:"token function"},"time"),s(),e("span",{class:"token assign-left variable"},[e("span",{class:"token environment constant"},"LC_ALL")]),e("span",{class:"token operator"},"="),s("C "),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'/^([a-d][r-z]){3}$/'"),s(" words.txt "),e("span",{class:"token operator"},">"),s(" f2")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# real    0m0.017s")]),s(`
`),e("span",{class:"line"}),s(`
`),e("span",{class:"line"},[e("span",{class:"token function"},"time"),s(" mawk "),e("span",{class:"token string"},"'/^[a-d][r-z][a-d][r-z][a-d][r-z]$/'"),s(" words.txt "),e("span",{class:"token operator"},">"),s(" f3")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# real    0m0.009s")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),hs=e("p",null,"check that the results are the same",-1),ms=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"diff"),s(),e("span",{class:"token parameter variable"},"-s"),s(" f1 f2")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Files f1 and f2 are identical")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token function"},"diff"),s(),e("span",{class:"token parameter variable"},"-s"),s(" f2 f3")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Files f2 and f3 are identical")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# clean up temporary files")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token function"},"rm"),s(" f"),e("span",{class:"token punctuation"},"["),e("span",{class:"token number"},"123"),e("span",{class:"token punctuation"},"]")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),bs=e("p",null,"Here's another example.",-1),gs=e("p",null,[s("count words containing exactly 3 lowercase '"),e("code",null,"a"),s("' characters")],-1),vs=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"time"),s(),e("span",{class:"token function"},"awk"),s(" -F"),e("span",{class:"token string"},"'a'"),s(),e("span",{class:"token string"},"'NF==4{cnt++} END{print +cnt}'"),s(" words.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 1019")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# real    0m0.032s")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token function"},"time"),s(),e("span",{class:"token assign-left variable"},[e("span",{class:"token environment constant"},"LC_ALL")]),e("span",{class:"token operator"},"="),s("C "),e("span",{class:"token function"},"awk"),s(" -F"),e("span",{class:"token string"},"'a'"),s(),e("span",{class:"token string"},"'NF==4{cnt++} END{print +cnt}'"),s(" words.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 1019")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# real    0m0.021s")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token function"},"time"),s(" mawk -F"),e("span",{class:"token string"},"'a'"),s(),e("span",{class:"token string"},"'NF==4{cnt++} END{print +cnt}'"),s(" words.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 1019")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# real    0m0.014s")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ks={class:"hint-container info"},fs=e("p",{class:"hint-container-title"},"Info",-1),_s={href:"https://github.com/ezrosent/frawk",target:"_blank",rel:"noopener noreferrer"},ws={href:"https://github.com/koraa/huniq",target:"_blank",rel:"noopener noreferrer"},ys=e("hr",null,null,-1);function xs(u,Cs){const o=c("router-link"),p=c("VPCard"),d=c("FontIcon"),i=c("Tabs"),h=c("TagLinks");return f(),b("div",null,[e("h1",w,[e("a",y,[e("span",null,g(u.$frontmatter.title)+" 관련",1)])]),e("nav",x,[e("ul",null,[e("li",null,[l(o,{to:"#prefixing-for-variables"},{default:n(()=>[s("Prefixing $ for variables")]),_:1})]),e("li",null,[l(o,{to:"#dos-style-line-endings"},{default:n(()=>[s("DOS style line endings")]),_:1})]),e("li",null,[l(o,{to:"#behavior-of-and-when-string-contains-newline"},{default:n(()=>[s("Behavior of ^ and $ when string contains newline")]),_:1})]),e("li",null,[l(o,{to:"#word-boundary-differences"},{default:n(()=>[s("Word boundary differences")]),_:1})]),e("li",null,[l(o,{to:"#relying-on-the-default-initial-value"},{default:n(()=>[s("Relying on the default initial value")]),_:1})]),e("li",null,[l(o,{to:"#code-in-the-replacement-section"},{default:n(()=>[s("Code in the replacement section")]),_:1})]),e("li",null,[l(o,{to:"#forcing-numeric-context"},{default:n(()=>[s("Forcing numeric context")]),_:1})]),e("li",null,[l(o,{to:"#locale-based-numbers"},{default:n(()=>[s("Locale based numbers")]),_:1})]),e("li",null,[l(o,{to:"#negative-nf"},{default:n(()=>[s("Negative NF")]),_:1})]),e("li",null,[l(o,{to:"#faster-execution"},{default:n(()=>[s("Faster execution")]),_:1})])])]),C,l(p,v(k({title:"15. Gotchas and Tips",desc:"CLI Text Processing with GNU awk",link:"https://learnbyexample.github.io/learn_gnuawk/gotchas-and-tips.html",logo:"https://learnbyexample.github.io/favicon.svg",background:"rgba(22,25,35,0.2)"})),null,16),A,N,e("div",$,[F,e("p",null,[s("The "),e("a",T,[l(d,{icon:"iconfont icon-github"}),s(" example_files")]),s(" directory has all the files used in the examples.")])]),j,l(i,{id:"24",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:t})=>[s("Case 1")]),title1:n(({value:a,isActive:t})=>[s("Case 2")]),tab0:n(({value:a,isActive:t})=>[I,E]),tab1:n(({value:a,isActive:t})=>[S,L]),_:1}),D,R,G,l(i,{id:"45",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:n(({value:a,isActive:t})=>[s("Case 1")]),title1:n(({value:a,isActive:t})=>[s("Case 2")]),title2:n(({value:a,isActive:t})=>[s("Case 3")]),tab0:n(({value:a,isActive:t})=>[q,z]),tab1:n(({value:a,isActive:t})=>[P,U]),tab2:n(({value:a,isActive:t})=>[W,O]),_:1}),M,l(i,{id:"71",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:t})=>[s("Case 1")]),title1:n(({value:a,isActive:t})=>[s("Case 2")]),tab0:n(({value:a,isActive:t})=>[V,B]),tab1:n(({value:a,isActive:t})=>[H,K]),_:1}),Z,l(i,{id:"95",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:t})=>[s("Case 1")]),title1:n(({value:a,isActive:t})=>[s("Case 2")]),tab0:n(({value:a,isActive:t})=>[J,Y,Q]),tab1:n(({value:a,isActive:t})=>[X,ee]),_:1}),se,l(i,{id:"115",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:n(({value:a,isActive:t})=>[s("Case 1")]),title1:n(({value:a,isActive:t})=>[s("Case 2")]),title2:n(({value:a,isActive:t})=>[s("Case 3")]),tab0:n(({value:a,isActive:t})=>[ne,ae]),tab1:n(({value:a,isActive:t})=>[te,le]),tab2:n(({value:a,isActive:t})=>[ie,oe]),_:1}),ce,re,de,l(i,{id:"142",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"},{id:"Case 4"}],active:0},{title0:n(({value:a,isActive:t})=>[s("Case 1")]),title1:n(({value:a,isActive:t})=>[s("Case 2")]),title2:n(({value:a,isActive:t})=>[s("Case 3")]),title3:n(({value:a,isActive:t})=>[s("Case 4")]),tab0:n(({value:a,isActive:t})=>[ue,pe]),tab1:n(({value:a,isActive:t})=>[he,me]),tab2:n(({value:a,isActive:t})=>[be,ge,ve]),tab3:n(({value:a,isActive:t})=>[ke,fe]),_:1}),_e,we,ye,l(i,{id:"180",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:t})=>[s("Case 1")]),title1:n(({value:a,isActive:t})=>[s("Case 2")]),tab0:n(({value:a,isActive:t})=>[xe,Ce]),tab1:n(({value:a,isActive:t})=>[Ae,Ne,$e]),_:1}),Fe,l(i,{id:"202",data:[{id:"Case 1"}],active:0},{title0:n(({value:a,isActive:t})=>[s("Case 1")]),tab0:n(({value:a,isActive:t})=>[Te,je]),_:1}),Ie,Ee,l(i,{id:"216",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"},{id:"Case 4"}],active:0},{title0:n(({value:a,isActive:t})=>[s("Case 1")]),title1:n(({value:a,isActive:t})=>[s("Case 2")]),title2:n(({value:a,isActive:t})=>[s("Case 3")]),title3:n(({value:a,isActive:t})=>[s("Case 4")]),tab0:n(({value:a,isActive:t})=>[Se,Le]),tab1:n(({value:a,isActive:t})=>[De,Re]),tab2:n(({value:a,isActive:t})=>[Ge,qe]),tab3:n(({value:a,isActive:t})=>[ze,Pe]),_:1}),Ue,We,Oe,l(i,{id:"249",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:t})=>[s("Case 1")]),title1:n(({value:a,isActive:t})=>[s("Case 2")]),title2:n(({value:a,isActive:t})=>[s("Case 1")]),title3:n(({value:a,isActive:t})=>[s("Case 2")]),tab0:n(({value:a,isActive:t})=>[Me,Ve]),tab1:n(({value:a,isActive:t})=>[Be,He,Ke,Ze,l(i,{id:"265",data:[]})]),tab2:n(({value:a,isActive:t})=>[Je,Ye]),tab3:n(({value:a,isActive:t})=>[Qe,Xe]),_:1}),es,l(i,{id:"298",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:t})=>[s("Case 1")]),title1:n(({value:a,isActive:t})=>[s("Case 2")]),tab0:n(({value:a,isActive:t})=>[ss,ns]),tab1:n(({value:a,isActive:t})=>[as,ts]),_:1}),ls,l(i,{id:"315",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:t})=>[s("Case 1")]),title1:n(({value:a,isActive:t})=>[s("Case 2")]),tab0:n(({value:a,isActive:t})=>[is]),tab1:n(({value:a,isActive:t})=>[os,cs]),_:1}),rs,l(i,{id:"333",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:t})=>[s("Case 1")]),title1:n(({value:a,isActive:t})=>[s("Case 2")]),tab0:n(({value:a,isActive:t})=>[ds,e("p",null,[s("."),l(d,{icon:"fas fa-file-lines"}),us,s(" contains dictionary words, one word per line")]),ps]),tab1:n(({value:a,isActive:t})=>[hs,ms]),_:1}),bs,l(i,{id:"353",data:[{id:"Case 1"}],active:0},{title0:n(({value:a,isActive:t})=>[s("Case 1")]),tab0:n(({value:a,isActive:t})=>[gs,vs]),_:1}),e("div",ks,[fs,e("p",null,[s("See also "),e("a",_s,[l(d,{icon:"iconfont icon-github"}),s(" ezrosent/frawk")]),s(", an efficient awk-like language implemented in Rust. And "),e("a",ws,[l(d,{icon:"iconfont icon-github"}),s(" koraa/huniq")]),s(", a faster alternative for removing line based duplicates.")])]),ys,l(h)])}const $s=m(_,[["render",xs],["__file","15-gotchas-and-tips.html.vue"]]),Fs=JSON.parse('{"path":"/cli/text-processing-w-gnu-awk/15-gotchas-and-tips.html","title":"15. Gotchas and Tips","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"15. Gotchas and Tips","description":"Text Processing with GNU awk > 15. Gotchas and Tips","category":["CLI","Linux"],"tag":["crashcourse","cli","sh","shell","gnu","linux","awk"],"head":[[{"meta":null},{"property":"og:title","content":"Text Processing with GNU awk > 15. Gotchas and Tips"},{"property":"og:description","content":"15. Gotchas and Tips"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/cli/text-processing-w-gnu-awk/15-gotchas-and-tips.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/cli/text-processing-w-gnu-awk/15-gotchas-and-tips.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"15. Gotchas and Tips"}],["meta",{"property":"og:description","content":"Text Processing with GNU awk > 15. Gotchas and Tips"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://learnbyexample.github.io/learn_gnuawk/images/word_boundary.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-04-24T07:16:44.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"cli"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:tag","content":"shell"}],["meta",{"property":"article:tag","content":"gnu"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:tag","content":"awk"}],["meta",{"property":"article:modified_time","content":"2024-04-24T07:16:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"15. Gotchas and Tips\\",\\"image\\":[\\"https://learnbyexample.github.io/learn_gnuawk/images/word_boundary.png\\"],\\"dateModified\\":\\"2024-04-24T07:16:44.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Prefixing $ for variables","slug":"prefixing-for-variables","link":"#prefixing-for-variables","children":[]},{"level":2,"title":"DOS style line endings","slug":"dos-style-line-endings","link":"#dos-style-line-endings","children":[]},{"level":2,"title":"Behavior of ^ and $ when string contains newline","slug":"behavior-of-and-when-string-contains-newline","link":"#behavior-of-and-when-string-contains-newline","children":[]},{"level":2,"title":"Word boundary differences","slug":"word-boundary-differences","link":"#word-boundary-differences","children":[]},{"level":2,"title":"Relying on the default initial value","slug":"relying-on-the-default-initial-value","link":"#relying-on-the-default-initial-value","children":[]},{"level":2,"title":"Code in the replacement section","slug":"code-in-the-replacement-section","link":"#code-in-the-replacement-section","children":[]},{"level":2,"title":"Forcing numeric context","slug":"forcing-numeric-context","link":"#forcing-numeric-context","children":[]},{"level":2,"title":"Locale based numbers","slug":"locale-based-numbers","link":"#locale-based-numbers","children":[]},{"level":2,"title":"Negative NF","slug":"negative-nf","link":"#negative-nf","children":[]},{"level":2,"title":"Faster execution","slug":"faster-execution","link":"#faster-execution","children":[]}],"git":{"createdTime":1703642364000,"updatedTime":1713943004000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":6}]},"readingTime":{"minutes":6.83,"words":2050},"filePathRelative":"cli/text-processing-w-gnu-awk/15-gotchas-and-tips.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{$s as comp,Fs as data};
