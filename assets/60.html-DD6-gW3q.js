import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as s,t as m,b as a,w as o,n as i,g as p,d as n,e as l,r as c,o as k}from"./app-U_bew1in.js";const w={},y={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},v=s("hr",null,null,-1),b=s("h2",{id:"milestone-projects-10-12",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#milestone-projects-10-12"},[s("span",null,"Milestone: Projects 10-12")])],-1),S=l('<p>That’s another three projects done, and more really important techniques under your belt. No matter how beautiful your design or how clever your app idea, it’s nearly always the case that handling your users’ data <em>well</em> is the most important thing for any good app.</p><p>Of course, the real discussion is what “well” means. At the very least I hope it means “with respect” – you don’t share anything without their consent, you don’t track their activity without permission, and you store any personal data carefully. Beyond that, you might want to add searching or filtering, you might want cloud synchronization so their data is shared across devices, you might want to let them browse or modify the raw data, and so on.</p><p>Regardless of what you do with it, learning to work with user data is a great skill to have, and you’ve taken lots of steps forward in these last three projects.</p><p>Now it’s time for a challenge, and unsurprisingly it will involve fetching, processing, and displaying lots of data. You already have all the skills you need to make this a great app, so all that remains is for you to crack open a new Xcode project and get stuck in.</p><p>Will you make mistakes? Yes – and that’s OK. British author Neil Gaiman had some advice that I hope will serve you well:</p><blockquote><p>I hope that in this year to come, you make mistakes. Because if you are making mistakes, then you are making new things, trying new things, learning, living, pushing yourself, changing yourself, changing your world. You&#39;re doing things you&#39;ve never done before, and more importantly, you&#39;re doing something.</p></blockquote><p><strong>Today you have three topics to work through, one of which of is your challenge.</strong></p><h3 id="what-you-learned" tabindex="-1"><a class="header-anchor" href="#what-you-learned"><span>What you learned</span></a></h3>',8),q={class:"hint-container details"},N=s("summary",null,"What you learned",-1),_=l("<p>These last three projects have really pushed hard on data, starting first with sending and receiving data using the internet, then going into SwiftData so you can see how real apps manage their data. The skills you’ve learned in this projects are perhaps more important than you realize, because if you put them all together you can now fetch data from the internet, store it locally, and let users filter to find the stuff they care about.</p><p>Here’s a quick recap of all the new things we covered in the last three projects:</p><ul><li>Building custom <code>Codable</code> conformance</li><li>Sending and receiving data using <code>URLSession</code></li><li>The <code>disabled()</code> modifier for views</li><li>Building custom UI components using <code>@Binding</code></li><li>Adding multiple buttons to an alert</li><li>Editing SwiftData objects using <code>@Bindable</code>.</li><li>Using <code>@Query</code> to query SwiftData objects</li><li>Sorting SwiftData results using <code>SortDescriptor</code></li><li>Filtering data using <code>#Predicate</code></li><li>Creating relationships between SwiftData models</li><li>Syncing SwiftData with iCloud</li></ul><p>That’s a comparatively short list compared to some other projects, but I think it’s fair to say these topics have been a real step up: SwiftData is hard in places, particularly in the way we need to work to get dynamic sorting and filtering, but it&#39;s definitely worth it!</p>",4),C=s("h3",{id:"key-points",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#key-points"},[s("span",null,"Key points")])],-1),j={class:"hint-container details"},D=s("summary",null,"Key points",-1),K=l(`<p>Although we’ve covered a lot in these last three projects, there is one thing in particular I’d like to cover in more detail: advanced usages of <code>Codable</code>. We already looked at this a little in our projects, but it&#39;s a topic that deserves some additional time as you’ll see…</p><p>Tip: If you want to know how to make SwiftData models work with <code>Codable</code>, you should read this fully.</p><h4 id="custom-codable-keys" tabindex="-1"><a class="header-anchor" href="#custom-codable-keys"><span>Custom Codable keys</span></a></h4><p>When we have JSON data that matches the way we’ve designed our types, <code>Codable</code> works perfectly. In fact, we often don’t need to do anything other than add <code>Codable</code> conformance – the Swift compiler will synthesize everything we need automatically.</p><p>However, a lot of the time things aren’t so straightforward, and there are three options for working with more complex data:</p><ol><li>Asking Swift to convert property names automatically.</li><li>Creating custom property name conversions.</li><li>Creating completely custom encoding and decoding.</li></ol><p>Generally speaking you should prefer them in that order, with option 1 being most preferable and option 3 being least.</p><p>Let&#39;s work through the first two, one at a time. I&#39;ll leave option 3 for the time being, because it&#39;s comparatively tricky!</p><p>Asking Swift to convert property names automatically is useful when our incoming JSON uses a different naming convention for its properties. For example, we might receive JSON property names in snake case (<em>e.g.</em> <code>first_name</code>) whereas our Swift code uses property names in camel case (<em>e.g.</em> <code>firstName</code>).</p><p><code>Codable</code> is able to translate between these two as long as it knows what to expect: we need to set a property on our decoder called <code>keyDecodingStrategy</code>.</p><p>To demonstrate this, here’s a <code>User</code> struct with two properties:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">User</span><span class="token punctuation">:</span> <span class="token class-name">Codable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> firstName<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> lastName<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That uses the naming convention typically used in Swift code, called camel case because the practice of uppercasing the first letters of words is a bit like humps on a camels back.</p><p>Now here is some JSON data with the same two properties:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;&quot;</span>
<span class="line">{</span>
<span class="line">    &quot;first_name&quot;: &quot;Andrew&quot;,</span>
<span class="line">    &quot;last_name&quot;: &quot;Glouberman&quot;</span>
<span class="line">}</span>
<span class="line">&quot;&quot;&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token class-name">Data</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>utf8<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That JSON data uses snake case, which is a naming convention where property names are written all in lowercase with words separated by underscores.</p><p>If we try to decode that JSON into a <code>User</code> instance, it won’t work because the two properties have different naming styles:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> decoder <span class="token operator">=</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">try</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> data<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hi, I&#39;m </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user<span class="token punctuation">.</span>firstName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user<span class="token punctuation">.</span>lastName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Whoops: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">error<span class="token punctuation">.</span>localizedDescription</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, if we modify the key decoding strategy before we call <code>decode()</code>, we can ask Swift to convert snake case to and from camel case. So, this will succeed:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> decoder <span class="token operator">=</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    decoder<span class="token punctuation">.</span>keyDecodingStrategy <span class="token operator">=</span> <span class="token punctuation">.</span>convertFromSnakeCase</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">try</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> data<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hi, I&#39;m </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user<span class="token punctuation">.</span>firstName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user<span class="token punctuation">.</span>lastName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Whoops: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">error<span class="token punctuation">.</span>localizedDescription</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That works great when we’re converting snake_case to and from camelCase, but what if our property names are completely different? This is where we need to rely on the second option: creating custom property name conversions.</p><p>As an example, take a look at this JSON:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;&quot;</span>
<span class="line">{</span>
<span class="line">    &quot;first&quot;: &quot;Andrew&quot;,</span>
<span class="line">    &quot;last&quot;: &quot;Glouberman&quot;</span>
<span class="line">}</span>
<span class="line">&quot;&quot;&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It still has the first and last name of a user, but the property names don’t match our struct at all.</p><p>When we were looking at <code>Codable</code> I said that we can create an enum of coding keys that describe which keys should be encoded and decoded. At the time I said “this enum is conventionally called <code>CodingKeys</code>, with an S on the end, but you can call it something else if you want,” and while that’s true it’s not the whole story.</p><p>You see, the reason we conventionally use <code>CodingKeys</code> for the name is that this name has super powers: if a <code>CodingKeys</code> enum exists, Swift will automatically use it to decide how to encode and decode an object for times we don’t provide custom <code>Codable</code> implementations.</p><p>I realize that’s a lot to take in, so it’s best demonstrated with some code. Try changing the <code>User</code> struct to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">User</span><span class="token punctuation">:</span> <span class="token class-name">Codable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">enum</span> <span class="token class-name">ZZZCodingKeys</span><span class="token punctuation">:</span> <span class="token class-name">CodingKey</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> firstName</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> firstName<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> lastName<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That code will compile just fine, because the name <code>ZZZCodingKeys</code> is meaningless to Swift – it’s just a nested enum. But if you rename the enum to just <code>CodingKeys</code> you’ll find the code no longer builds: we’re now instructing Swift to encode and decode just the <code>firstName</code> property, which means there is no initializer that handles setting the <code>lastName</code> property - and that’s not allowed.</p><p>All this matters because <code>CodingKeys</code> has a second super power: when we attach raw value strings to our properties, Swift will use those for the JSON property names. That is, the case names should match our Swift property names, and the case <em>values</em> should match the JSON property names.</p><p>So, let’s return to our example JSON:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;&quot;</span>
<span class="line">{</span>
<span class="line">    &quot;first&quot;: &quot;Andrew&quot;,</span>
<span class="line">    &quot;last&quot;: &quot;Glouberman&quot;</span>
<span class="line">}</span>
<span class="line">&quot;&quot;&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That uses “first” and “last” for property names, whereas our <code>User</code> struct uses <code>firstName</code> and <code>lastName</code>. This is a great place where <code>CodingKeys</code> can come to the rescue: we don’t need to write a custom <code>Codable</code> conformance, because we can just add coding keys that marry up our Swift property names to the JSON property names, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">User</span><span class="token punctuation">:</span> <span class="token class-name">Codable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">enum</span> <span class="token class-name">CodingKeys</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">CodingKey</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> firstName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;first&quot;</span></span></span>
<span class="line">        <span class="token keyword">case</span> lastName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;last&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> firstName<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> lastName<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now that we have specifically told Swift how to convert between JSON and Swift naming, we no longer need to use <code>keyDecodingStrategy</code> – just adding that enum is enough.</p><p>So, while you <em>do</em> need to know how to create custom <code>Codable</code> conformance, it’s generally best practice to do without it if these other options are possible.</p><h4 id="completely-custom-codable-implementations" tabindex="-1"><a class="header-anchor" href="#completely-custom-codable-implementations"><span>Completely custom <code>Codable</code> implementations</span></a></h4><p>So far you&#39;ve seen how to let Swift map between snake case and camel case, and how we can specify mappings when JSON has one name and Swift uses an entirely different one.</p><p>This last option is for times when the changes are even bigger, such as if the JSON data provides a number as a string. However, it&#39;s also useful when you want to make SwiftData models conform to <code>Codable</code>, as you&#39;ll see.</p><p>First, let&#39;s try some new JSON that demonstrates the problem:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;&quot;</span>
<span class="line">{</span>
<span class="line">    &quot;first&quot;: &quot;Andrew&quot;,</span>
<span class="line">    &quot;last&quot;: &quot;Glouberman&quot;,</span>
<span class="line">    &quot;age&quot;: &quot;13&quot;</span>
<span class="line">}</span>
<span class="line">&quot;&quot;&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, that has unhelpful names for first name and last, but also stores a number inside a string. While there&#39;s very little we can do to fix up JSON data coming from an external server, we certainly don&#39;t want its weirdness to infect our code – that&#39;s an integer, and we want it to be stored as one in our Swift code.</p><p>So, we might define a <code>User</code> struct like this, so we correct the first and last name properties, and store <code>age</code> as an integer:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">User</span><span class="token punctuation">:</span> <span class="token class-name">Codable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">enum</span> <span class="token class-name">CodingKeys</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">CodingKey</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> firstName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;first&quot;</span></span></span>
<span class="line">        <span class="token keyword">case</span> lastName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;last&quot;</span></span></span>
<span class="line">        <span class="token keyword">case</span> age</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> firstName<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> lastName<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But now we have a problem: while Swift can convert the property names for us, it can&#39;t handle different data types.</p><p>For this we need to create a completely custom <code>Codable</code> implementation which means adding two things to the <code>User</code> struct:</p><ol><li>A new initializer that accepts a <code>Decoder</code> instance and knows how to read our properties from it.</li><li>A new <code>encode(to:)</code> method that accepts an <code>Encoder</code> instance and knows how to write our properties to it.</li></ol><p><strong>Tip</strong>: Swift uses <code>Decoder</code> and <code>Encoder</code> here because there are lots of ways of converting data to and from Swift objects – JSON is just one of several options.</p><p>Both of these take quite a bit of code, but helpfully Xcode can <em>sometimes</em> help. In this case it will actually fill in all the code required to make both these work: type <code>init</code> in the space below the properties, then press return with <code>init(from decoder: Decoder)</code> selected, then type <code>encode</code> and press return with <code>encode(to encoder: Encoder)</code> selected.</p><p>Your finished <code>User</code> struct should look like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">User</span><span class="token punctuation">:</span> <span class="token class-name">Codable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">enum</span> <span class="token class-name">CodingKeys</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">CodingKey</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> firstName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;first&quot;</span></span></span>
<span class="line">        <span class="token keyword">case</span> lastName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;last&quot;</span></span></span>
<span class="line">        <span class="token keyword">case</span> age</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> firstName<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> lastName<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>from decoder<span class="token punctuation">:</span> <span class="token class-name">Decoder</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> container <span class="token operator">=</span> <span class="token keyword">try</span> decoder<span class="token punctuation">.</span><span class="token function">container</span><span class="token punctuation">(</span>keyedBy<span class="token punctuation">:</span> <span class="token class-name">CodingKeys</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> <span class="token keyword">try</span> container<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token punctuation">.</span>firstName<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> <span class="token keyword">try</span> container<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token punctuation">.</span>lastName<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token keyword">try</span> container<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token punctuation">.</span>age<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">encode</span><span class="token punctuation">(</span>to encoder<span class="token punctuation">:</span> <span class="token class-name">Encoder</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">var</span> container <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">container</span><span class="token punctuation">(</span>keyedBy<span class="token punctuation">:</span> <span class="token class-name">CodingKeys</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">try</span> container<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>firstName<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token punctuation">.</span>firstName<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">try</span> container<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>lastName<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token punctuation">.</span>lastName<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">try</span> container<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token punctuation">.</span>age<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Tip</strong>: If this were a class rather than a struct, the new initializer would need to be marked with <code>required</code> so that any subclasses are required to implement it.</p><p>That&#39;s a lot of code, but really only four lines matter: two from the initializer, and two from <code>encode(to:)</code>.</p><p>The first line that matters is this, from the initializer:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> container <span class="token operator">=</span> <span class="token keyword">try</span> decoder<span class="token punctuation">.</span><span class="token function">container</span><span class="token punctuation">(</span>keyedBy<span class="token punctuation">:</span> <span class="token class-name">CodingKeys</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That uses <code>CodingKeys</code> to read all the possible keys that can be loaded from the JSON file. This looks in the <code>CodingKeys</code> enum, so we can refer to things like <code>.firstName</code> and <code>.age</code>.</p><p>The second line that matters is this, also from the initializer:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">self</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> <span class="token keyword">try</span> container<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token punctuation">.</span>firstName<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That reads a string from the key <code>.firstName</code>, and assigns it to the <code>firstName</code> property of our struct. This part might be a bit confusing because we have <code>firstName</code> twice, so let me rephrase what the line of code does: &quot;look in the JSON to find the property matching <code>CodingKeys.firstName</code>, and assign it to our local <code>firstName</code> value.&quot;</p><p>This little dance matters, because <code>CodingKeys.firstName</code> isn&#39;t actually called <code>firstName</code> because we renamed it to match our JSON. So, in practice this line <em>actually</em> means &quot;find the <code>first</code> property in the JSON and assign it to <code>firstName</code> in our struct&quot; – it makes sure all the automatic renaming still happens.</p><p>If it helps, imagine reading the code like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">self</span><span class="token punctuation">.</span>structFirstName <span class="token operator">=</span> <span class="token keyword">try</span> container<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token punctuation">.</span>jsonFirstName<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That&#39;s the first two interesting lines of code. The <em>second</em> two are effectively inverses of the first two. These are both in the <code>encode(to:)</code> method:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> container <span class="token operator">=</span> encoder<span class="token punctuation">.</span><span class="token function">container</span><span class="token punctuation">(</span>keyedBy<span class="token punctuation">:</span> <span class="token class-name">CodingKeys</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">try</span> container<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>firstName<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token punctuation">.</span>firstName<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>That first line means we want to create a place where we can store all our <code>CodingKeys</code> values, and the second one writes the current <code>firstName</code> property to whatever is specified in <code>CodingKeys.firstName</code> – again, that&#39;s important so we get the automatic renaming to <code>first</code>.</p><p>At this point, chances are you&#39;re wondering how you&#39;ll ever remember this code, because it&#39;s not exactly something you can guess. So, here&#39;s my #1 tip:</p><p><strong>When you need to implement a custom <code>Codable</code> implementation and Xcode can&#39;t generate it for you, just create a new, simple struct with one property and a one-case <code>CodingKeys</code> enum, have Xcode generate <em>that</em>, then use its implementation to help you build your own for the bigger type.</strong></p><p>This is particularly important when working with SwiftData, where adding <code>Codable</code> support means create a custom implementation. It&#39;s annoying to have to remember all the code above, and Xcode almost certainly won&#39;t help, so just create a temporary struct that Xcode <em>can</em> generate a <code>Codable</code> implementation for, then use its structure to make your SwiftData model class <code>Codable</code>.</p><p>Anyway, we got to this point because we were trying to load a string into an integer, which means making two changes to the code Xcode generated for us.</p><p>First, this line of code needs to change:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">self</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token keyword">try</span> container<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token punctuation">.</span>age<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That attempts to read the <code>age</code> property as an integer, which will fail. Instead, we need to read it as a string, then convert that to an integer or provide a default value if conversion fails. Replace the code with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> stringAge <span class="token operator">=</span> <span class="token keyword">try</span> container<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token punctuation">.</span>age<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">self</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token class-name">Int</span><span class="token punctuation">(</span>stringAge<span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>The second thing that needs to change is in <code>encode(to:)</code>, so if we need to write any JSON we keep the existing format. Here, this line needs to change:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">try</span> container<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token punctuation">.</span>age<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That writes an integer, but it needs to write a string like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">try</span> container<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token punctuation">.</span>age<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>I know creating the custom implementation seems like a lot of hassle, but as you can see it gives us exact control over what happens: we can add any kind of logic to our loading and saving, changing names, changing types, providing default values, and more.</p>`,78),x=s("h3",{id:"challenge",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#challenge"},[s("span",null,"Challenge")])],-1),T={class:"hint-container details"},I=s("summary",null,"Challenge",-1),O=s("p",null,[n("It’s time for you to build an app from scratch, and it’s a particularly expansive challenge today: your job is to use "),s("code",null,"URLSession"),n(" to download some JSON from the internet, use Codab"),s("code",null,"le to convert it to Swift types, then use "),n("NavigationStack"),s("code",null,", "),n("List`, and more to display it to the user.")],-1),U={href:"https://www.hackingwithswift.com/samples/friendface.json",target:"_blank",rel:"noopener noreferrer"},J=l("<p>As you can see, there is an array of people, and each person has an ID, name, age, email address, and more. They also have an array of tag strings, and an array of friends, where each friend has a name and ID.</p><p>How far you implement this is down to you, but at the very least you should:</p><ul><li>Fetch the data and parse it into <code>User</code> and <code>Friend</code> structs.</li><li>Display a list of users with a little information about them, such as their name and whether they are active right now.</li><li>Create a detail view shown when a user is tapped, presenting more information about them, including the names of their friends.</li><li>Before you start your download, check that your <code>User</code> array is empty so that you don’t keep starting the download every time the view is shown.</li></ul><p>If you’re not sure where to begin, start by designing your types: build a <code>User</code> struct with properties for <code>name</code>, <code>age</code>, <code>company</code>, and so on, then a <code>Friend</code> struct with <code>id</code> and <code>name</code>. After that, move onto some <code>URLSession</code> code to fetch the data and decode it into your types.</p><p>You might notice that the date each user registered has a very specific format: 2015-11-10T01:47:18-00:00. This is known as ISO-8601, and is so common that there’s a built-in <code>dateDecodingStrategy</code> called <code>.iso8601</code> that decodes it automatically.</p><p>While you’re building this, I want you to keep one thing in mind: this kind of app is the bread and butter of iOS app development – if you can nail this with confidence, you’re well on your way to a full-time job as an app developer.</p><p>Tip: As always, the best way to solve this challenge is to keep it simple – write as little code as you can to solve the challenge, and for you to feel comfortable that it works well.</p>",7),A=s("div",{class:"hint-container tip"},[s("p",{class:"hint-container-title"},"Note"),s("p",null,"Don’t worry if you don’t complete challenges in the day they were assigned – in future days you’ll find you have some time to spare here and there, so challenges are something you can return back to in the future.")],-1),B=s("hr",null,null,-1);function W(r,z){const e=c("router-link"),t=c("VPCard"),d=c("FontIcon");return k(),h("div",null,[s("h1",y,[s("a",g,[s("span",null,m(r.$frontmatter.title)+" 관련",1)])]),s("nav",f,[s("ul",null,[s("li",null,[a(e,{to:"#milestone-projects-10-12"},{default:o(()=>[n("Milestone: Projects 10-12")]),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#what-you-learned"},{default:o(()=>[n("What you learned")]),_:1})]),s("li",null,[a(e,{to:"#key-points"},{default:o(()=>[n("Key points")]),_:1})]),s("li",null,[a(e,{to:"#challenge"},{default:o(()=>[n("Challenge")]),_:1})])])])])]),v,b,a(t,i(p({title:"100 Days of SwiftUI - Day 60",desc:"Milestone: Projects 10-12",link:"https://www.hackingwithswift.com/100/swiftui/60",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),S,s("details",q,[N,a(t,i(p({title:"100 Days of SwiftUI - Day 60 - What you learned",desc:"What you learned",link:"https://hackingwithswift.com/guide/ios-swiftui/5/1/what-you-learned",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),_]),C,s("details",j,[D,a(t,i(p({title:"100 Days of SwiftUI - Day 60 - Key points",desc:"Key points",link:"https://hackingwithswift.com/guide/ios-swiftui/5/2/key-points",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),K]),x,s("details",T,[I,a(t,i(p({title:"100 Days of SwiftUI - Day 60 - Challenge",desc:"Challenge",link:"https://hackingwithswift.com/guide/ios-swiftui/5/3/challenge",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),O,s("p",null,[n("Your first step should be to examine the JSON. The URL you want to use is this: "),s("a",U,[a(d,{icon:"iconfont icon-json"}),n("https://www.hackingwithswift.com/samples/friendface.json")]),n(" – that’s a massive collection of randomly generated data for example users.")]),J]),A,B])}const R=u(w,[["render",W],["__file","60.html.vue"]]),Z=JSON.parse('{"path":"/swift/100-days-of-swiftui/60.html","title":"Day 60","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 60","description":"100 Days of SwiftUI > Day 60","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 60"},{"property":"og:description","content":"Day 60"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/60.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/60.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 60"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 60"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 60\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Milestone: Projects 10-12","slug":"milestone-projects-10-12","link":"#milestone-projects-10-12","children":[{"level":3,"title":"What you learned","slug":"what-you-learned","link":"#what-you-learned","children":[]},{"level":3,"title":"Key points","slug":"key-points","link":"#key-points","children":[]},{"level":3,"title":"Challenge","slug":"challenge","link":"#challenge","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":8}]},"readingTime":{"minutes":10.84,"words":3253},"filePathRelative":"swift/100-days-of-swiftui/60.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n<h2>Milestone: Projects 10-12</h2>\\n"}');export{R as comp,Z as data};
