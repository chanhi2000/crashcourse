import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,a as e,t as m,b as n,w as t,n as u,g as h,d as a,e as l,r as i,o as b}from"./app-U_bew1in.js";const g={},v={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},k=e("hr",null,null,-1),_=l(`<p>The Clumsy Bird Game has already been installed in the setup and We can&#39;t start with Building the Containers</p><h2 id="step-1" tabindex="-1"><a class="header-anchor" href="#step-1"><span>Step 1</span></a></h2><p>We&#39;ll use UBI9 as the base image for our container. We&#39;ll use the following Buildah command to create the container:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">buildah from registry.access.redhat.com/ubi9/ubi</span>
<span class="line"><span class="token comment"># ubi-working-container-1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Buildah adds <code>-working-container-1</code> for unique name to avoid duplication after creating a container</p><h2 id="step-2" tabindex="-1"><a class="header-anchor" href="#step-2"><span>Step 2</span></a></h2><p>Now that the container is ready, install Apache and enable it as a service:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">buildah run ubi-working-container-1 -- dnf <span class="token parameter variable">-y</span> <span class="token function">install</span> httpd</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="step-3" tabindex="-1"><a class="header-anchor" href="#step-3"><span>Step 3</span></a></h2><p>Enable Apache service in container for start automatically after boot:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">buildah run ubi-working-container-1 -- systemctl <span class="token builtin class-name">enable</span> httpd</span>
<span class="line"><span class="token comment"># Created symlink /etc/systemd/system/multi-user.target.wants/httpd.service → /usr/lib/systemd/system/httpd.service.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="step-4" tabindex="-1"><a class="header-anchor" href="#step-4"><span>Step 4</span></a></h2>`,12),w=e("code",null,"/var/www/html",-1),C=l(`<p>To copy the content, we&#39;ll use the following command:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">buildah copy ubi-working-container-1 clumsy-bird /var/www/html</span>
<span class="line"><span class="token comment"># 54246f8c1c828958d56ab873d8db8a890eaa29b88646b1177785495d285afb07</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="step-5" tabindex="-1"><a class="header-anchor" href="#step-5"><span>Step 5</span></a></h2><p>Start container with web app running as a background service:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">buildah config <span class="token parameter variable">--port</span> <span class="token number">80</span> <span class="token parameter variable">--cmd</span> <span class="token string">&quot;/usr/sbin/init&quot;</span> ubi-working-container-1</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>This command configures the container to:</p><ol><li>accept connections on port 80 (for HTTP access via web browser)</li><li>run &#39;<code>/usr/sbin/init</code>&#39; at startup to start system services (such as Apache) in the background.</li></ol><h2 id="step-6" tabindex="-1"><a class="header-anchor" href="#step-6"><span>Step 6</span></a></h2><p>Commit container changes using the command:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">buildah commit ubi-working-container-1 clumsy-bird</span>
<span class="line"><span class="token comment"># Getting image source signatures</span></span>
<span class="line"><span class="token comment"># Copying blob c662a0c69917 skipped: already exists  </span></span>
<span class="line"><span class="token comment"># Copying blob 82541ac8604d done  </span></span>
<span class="line"><span class="token comment"># Copying config ad90e161ba done  </span></span>
<span class="line"><span class="token comment"># Writing manifest to image destination</span></span>
<span class="line"><span class="token comment"># Storing signatures</span></span>
<span class="line"><span class="token comment"># ad90e161bab65f9e034613771004e6a3952eaca78279f9bc7d2bdaa7c9ce2bd2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="step-7" tabindex="-1"><a class="header-anchor" href="#step-7"><span>Step 7</span></a></h2><p>Now it&#39;s time to run the container. We&#39;ll use the following command to run the container:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">podman</span> run <span class="token parameter variable">--name</span> clumsy-bird <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80 clumsy-bird</span>
<span class="line"><span class="token comment"># 57e85d42b6df9382d038bdd814368c7d92ef95b4da3ba2068ae84eb45af28920</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>This command starts new container &#39;clumsy-bird&#39; from image, run in detached mode with port mapping (<code>-p 8080:80</code>) to route incoming connections to container&#39;s port 80.</p><h2 id="step-8" tabindex="-1"><a class="header-anchor" href="#step-8"><span>Step 8</span></a></h2><p>Now that it&#39;s running, we can go over to the next instruqt tab where we’ll see the JavaScript application up and running at http://localhost:8080 You can also verify that the container is running with the command</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">podman</span> <span class="token function">ps</span></span>
<span class="line"><span class="token comment"># CONTAINER ID  IMAGE                         COMMAND               CREATED         STATUS         PORTS                 NAMES</span></span>
<span class="line"><span class="token comment"># 60232d68c3b4  localhost/moon-buggy:latest   /usr/bin/moon-bug...  7 minutes ago   Up 7 minutes                         moon-buggy</span></span>
<span class="line"><span class="token comment"># 57e85d42b6df  localhost/clumsy-bird:latest  /usr/sbin/init        13 seconds ago  Up 13 seconds  0.0.0.0:8080-&gt;80/tcp  clumsy-bird</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,18);function S(o,x){const s=i("router-link"),r=i("VPCard"),p=i("FontIcon");return b(),d("div",null,[e("h1",v,[e("a",y,[e("span",null,m(o.$frontmatter.title)+" 관련",1)])]),e("nav",f,[e("ul",null,[e("li",null,[n(s,{to:"#step-1"},{default:t(()=>[a("Step 1")]),_:1})]),e("li",null,[n(s,{to:"#step-2"},{default:t(()=>[a("Step 2")]),_:1})]),e("li",null,[n(s,{to:"#step-3"},{default:t(()=>[a("Step 3")]),_:1})]),e("li",null,[n(s,{to:"#step-4"},{default:t(()=>[a("Step 4")]),_:1})]),e("li",null,[n(s,{to:"#step-5"},{default:t(()=>[a("Step 5")]),_:1})]),e("li",null,[n(s,{to:"#step-6"},{default:t(()=>[a("Step 6")]),_:1})]),e("li",null,[n(s,{to:"#step-7"},{default:t(()=>[a("Step 7")]),_:1})]),e("li",null,[n(s,{to:"#step-8"},{default:t(()=>[a("Step 8")]),_:1})])])]),k,n(r,u(h({title:"Containerize Your Application With Buildah And Podman",desc:"Intro",link:"https://developers.redhat.com/courses/containerize-your-application-buildah-and-podman",logo:"https://developers.redhat.com/themes/custom/rhdp2/images/branding/2023_RHDLogo_black_text.svg",background:"rgba(255,255,255,0.2)"})),null,16),_,e("p",null,[a("Now that Apache is running in a container, copy Clumsy-bird game to Apache's document root ("),n(p,{icon:"fas fa-folder-open"}),w,a(") for access.")]),C])}const z=c(g,[["render",S],["__file","02.html.vue"]]),T=JSON.parse('{"path":"/devops/red-hat-containerize-your-application-w-buildah-and-podman/02.html","title":"2. Containerizing and playing Clumsy-Bird","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"2. Containerizing and playing Clumsy-Bird","description":"Containerize Your Application With Buildah And Podman > 2. Containerizing and playing Clumsy-Bird","category":["RedHat"],"tag":["crashcourse","redhat","buildah","podman","skopeo","sesearch","semodule"],"head":[[{"meta":null},{"property":"og:title","content":"Containerize Your Application With Buildah And Podman > 2. Containerizing and playing Clumsy-Bird"},{"property":"og:description","content":"2. Containerizing and playing Clumsy-Bird"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/devops/red-hat-containerize-your-application-w-buildah-and-podman/02.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/devops/red-hat-containerize-your-application-w-buildah-and-podman/02.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"2. Containerizing and playing Clumsy-Bird"}],["meta",{"property":"og:description","content":"Containerize Your Application With Buildah And Podman > 2. Containerizing and playing Clumsy-Bird"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"redhat"}],["meta",{"property":"article:tag","content":"buildah"}],["meta",{"property":"article:tag","content":"podman"}],["meta",{"property":"article:tag","content":"skopeo"}],["meta",{"property":"article:tag","content":"sesearch"}],["meta",{"property":"article:tag","content":"semodule"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2. Containerizing and playing Clumsy-Bird\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Step 1","slug":"step-1","link":"#step-1","children":[]},{"level":2,"title":"Step 2","slug":"step-2","link":"#step-2","children":[]},{"level":2,"title":"Step 3","slug":"step-3","link":"#step-3","children":[]},{"level":2,"title":"Step 4","slug":"step-4","link":"#step-4","children":[]},{"level":2,"title":"Step 5","slug":"step-5","link":"#step-5","children":[]},{"level":2,"title":"Step 6","slug":"step-6","link":"#step-6","children":[]},{"level":2,"title":"Step 7","slug":"step-7","link":"#step-7","children":[]},{"level":2,"title":"Step 8","slug":"step-8","link":"#step-8","children":[]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":8}]},"readingTime":{"minutes":1.74,"words":522},"filePathRelative":"devops/red-hat-containerize-your-application-w-buildah-and-podman/02.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{z as comp,T as data};
