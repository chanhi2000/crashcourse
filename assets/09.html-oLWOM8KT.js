import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as s,t as m,b as n,w as i,n as l,g as p,e as a,d as e,r,o as k}from"./app-U_bew1in.js";const f={},w={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},v=s("hr",null,null,-1),b=a('<h2 id="closures" tabindex="-1"><a class="header-anchor" href="#closures"><span>Closures</span></a></h2><p>Brace yourself, because today we’re covering the first thing in Swift that many people have a hard time understanding. Please keep in mind Flip Wilson&#39;s law: “you can&#39;t expect to hit the jackpot if you don&#39;t put a few nickels in the machine.”</p><p>Today the topic is <em>closures</em>, which are a bit like anonymous functions – functions we can create and assign directly to a variable, or pass into other functions to customize how they work. Yes, you read that right: passing one function into another as a parameter.</p><p><strong>Closures are really difficult</strong>. I’m not saying that to put you off, only so that you know in advance if you’re finding closures hard to understand or hard to remember, it’s okay – we’ve all been there!</p><p>Sometimes the syntax for closures can be a bit hard on your eyes, and this will really be apparent as you work through today’s lessons. If you find it a bit overwhelming – if you’re staring at some code and aren’t 100% sure of what it means – just go back one video and watch it again to give your memory a little nudge. You’ll find there are more tests and optional reading links than usual below, hopefully helping to solidify your knowledge.</p><p>SwiftUI uses closures extensively so it’s worth taking the time to understand what’s going on here. Yes, closures are probably the most complex feature of Swift, but it’s a bit like cycling up a hill – once you’ve reached the top, once you’ve mastered closures, it all gets much easier.</p><p><strong>Today you have three tutorials to follow, plus a summary and another checkpoint.</strong> As always once you’ve completed each video there’s some optional extra reading and short tests to help make sure you’ve understood what was taught. This time you’ll notice there’s quite a bit of each of those because closures really can take some time to understand, so don’t be afraid to explore!</p><h3 id="_1-how-to-create-and-use-closures" tabindex="-1"><a class="header-anchor" href="#_1-how-to-create-and-use-closures"><span>1. How to create and use closures</span></a></h3>',8),x={class:"hint-container details"},_=s("summary",null,"1. How to create and use closures",-1),q=a(`<p>Functions are powerful things in Swift. Yes, you’ve seen how you can call them, pass in values, and return data, but you can also assign them to variables, pass functions into functions, and even return functions from functions.</p><p>For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">greetUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hi there!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">greetUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> greetCopy <span class="token operator">=</span> greetUser</span>
<span class="line"><span class="token function">greetCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That creates a trivial function and calls it, but then creates a <em>copy</em> of that function and calls the copy. As a result, it will print the same message twice.</p><p><strong>Important</strong>: When you’re copying a function, you don’t write the parentheses after it – it’s <code>var greetCopy = greetUser</code> and not <code>var greetCopy = greetUser()</code>. If you put the parentheses there you are <em>calling</em> the function and assigning its return value back to something else.</p><p>But what if you wanted to <em>skip</em> creating a separate function, and just assign the functionality directly to a constant or variable? Well, it turns out you can do that too:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> sayHello <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hi there!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Swift gives this the grandiose name <em>closure expression</em>, which is a fancy way of saying we just created a closure – a chunk of code we can pass around and call whenever we want. This one doesn’t have a name, but otherwise it’s effectively a function that takes no parameters and doesn’t return a value.</p><p>If you want the closure to accept parameters, they need to be written in a special way. You see, the closure starts and ends with the braces, which means we can’t put code outside those braces to control parameters or return value. So, Swift has a neat workaround: we can put that same information <em>inside</em> the braces, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> sayHello <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token keyword">in</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Hi </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I added an extra keyword there – did you spot it? It’s the <code>in</code> keyword, and it comes directly after the parameters and return type of the closure. Again, with a regular function the parameters and return type would come <em>outside</em> the braces, but we can’t do that with closures. So, <code>in</code> is used to mark the end of the parameters and return type – everything after that is the body of the closure itself. There’s a reason for this, and you’ll see it for yourself soon enough.</p><p>In the meantime, you might have a more fundamental question: “why would I ever need these things?” I know, closures do seem awfully obscure. Worse, they seem obscure <em>and</em> complicated – many, many people really struggle with closures when they first meet them, because they are complex beasts and seem like they are never going to be useful.</p><p>However, as you’ll see this gets used <em>extensively</em> in Swift, and almost <em>everywhere</em> in SwiftUI. Seriously, you’ll use them in every SwiftUI app you write, sometimes hundreds of times – maybe not necessarily in the form you see above, but you’re going to be using it a <em>lot</em>.</p><p>To get an idea of why closures are so useful, I first want to introduce you to function <em>types</em>. You’ve seen how integers have the type <code>Int</code>, and decimals have the type <code>Double</code>, etc, and now I want you to think about how functions have types too.</p><p>Let’s take the <code>greetUser()</code> function we wrote earlier: it accepts no parameters, returns no value, and does not throw errors. If we were to write that as a type annotation for <code>greetCopy</code>, we’d write this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> greetCopy<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span> <span class="token operator">=</span> greetUser</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Let’s break that down…</p><ol><li>The empty parentheses marks a function that takes no parameters.</li><li>The arrow means just what it means when creating a function: we’re about to declare the return type for the function.</li><li><code>Void</code> means “nothing” – this function returns nothing. Sometimes you might see this written as <code>()</code>, but we usually avoid that because it can be confused with the empty parameter list.</li></ol><p>Every function’s type depends on the data it receives and sends back. That might sound simple, but it hides an important catch: the <em>names</em> of the data it receives are <em>not</em> part of the function’s type.</p><p>We can demonstrate this with some more code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">getUserData</span><span class="token punctuation">(</span><span class="token keyword">for</span> id<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> id <span class="token operator">==</span> <span class="token number">1989</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;Taylor Swift&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;Anonymous&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> data<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token operator">=</span> getUserData</span>
<span class="line"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token number">1989</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That starts off easily enough: it’s a function that accepts an integer and returns a string. But when we take a <em>copy</em> of the function the type of function doesn’t include the <code>for</code> external parameter name, so when the copy is called we use <code>data(1989)</code> rather than <code>data(for: 1989)</code>.</p><p>Cunningly this same rule applies to all closures – you might have noticed that I didn’t actually <em>use</em> the <code>sayHello</code> closure we wrote earlier, and that’s because I didn’t want to leave you questioning the lack of a parameter name at the call site. Let’s call it now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Taylor&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That uses no parameter name, just like when we copy functions. So, again: external parameter names only matter when we’re calling a function directly, not when we create a closure or when we take a copy of the function first.</p><p>You’re probably still wondering why all this matters, and it’s all about to become clear. Do you remember I said we can use <code>sorted()</code> with an array to have it sort its elements?</p><p>It means we can write code like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> team <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Gloria&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Suzanne&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Piper&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Tiffany&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Tasha&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">let</span> sortedTeam <span class="token operator">=</span> team<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>sortedTeam<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That’s really neat, but what if we wanted to <em>control</em> that sort – what if we always wanted one person to come first because they were the team captain, with the rest being sorted alphabetically?</p><p>Well, <code>sorted()</code> actually allows us to pass in a custom sorting function to control exactly that. This function must accept two strings, and return true if the first string should be sorted before the second, or false if the first string should be sorted <em>after</em> the second.</p><p>If Suzanne were the captain, the function would look like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">captainFirstSorted</span><span class="token punctuation">(</span>name1<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> name2<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Bool</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> name1 <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;Suzanne&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> name2 <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;Suzanne&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> name1 <span class="token operator">&lt;</span> name2</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So, if the first name is Suzanne, return true so that <code>name1</code> is sorted before <code>name2</code>. On the other hand, if <code>name2</code> is Suzanne, return false so that <code>name1</code> is sorted <em>after</em> <code>name2</code>. If <em>neither</em> name is Suzanne, just use <code>&lt;</code> to do a normal alphabetical sort.</p><p>Like I said, <code>sorted()</code> can be passed a function to create a custom sort order, and as long as that function a) accepts two strings, and b) returns a Boolean, <code>sorted()</code> can use it.</p><p>That’s exactly what our new <code>captainFirstSorted()</code> function does, so we can use it straight away:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> captainFirstTeam <span class="token operator">=</span> team<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> captainFirstSorted<span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>captainFirstTeam<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>When that runs it will print <code>[&quot;Suzanne&quot;, &quot;Gloria&quot;, &quot;Piper&quot;, &quot;Tasha&quot;, &quot;Tiffany&quot;]</code>, exactly as we wanted.</p><p>We’ve now covered two seemingly very different things. First, we can create closures as anonymous functions, storing them inside constants and variables:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> sayHello <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hi there!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And we’re also able to pass functions into other functions, just like we passed <code>captainFirstSorted()</code> into <code>sorted()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> captainFirstTeam <span class="token operator">=</span> team<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> captainFirstSorted<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The power of closures is that we can put these two together: <code>sorted()</code> wants a function that will accept two strings and return a Boolean, and it doesn’t care if that function was created formally using <code>func</code> or whether it’s provided using a closure.</p><p>So, we could call <code>sorted()</code> again, but rather than passing in the <code>captainFirstTeam()</code> function, instead start a new closure: write an open brace, list its parameters and return type, write <code>in</code>, then put our standard function code.</p><p><strong>This is going to hurt your brain at first.</strong> It’s not because you’re not smart enough to understand closures or not cut out for Swift programming, only that <em>closures are really hard</em>. Don’t worry – we’re going to look at ways to make this easier!</p><p>Okay, let’s write some new code that calls <code>sorted()</code> using a closure:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> captainFirstTeam <span class="token operator">=</span> team<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>name1<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> name2<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Bool</span> <span class="token keyword">in</span></span>
<span class="line">    <span class="token keyword">if</span> name1 <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;Suzanne&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> name2 <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;Suzanne&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> name1 <span class="token operator">&lt;</span> name2</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That’s a big chunk of syntax all at once, and again I want to say it’s going to get easier – in the very next chapter we’re going to look at ways to reduce the amount of code so it’s easier to see what’s going on.</p><p>But first I want to break down what’s happening there:</p><ol><li>We’re calling the <code>sorted()</code> function as before.</li><li>Rather than passing in a function, we’re passing a closure – everything from the opening brace after <code>by:</code> down to the closing brace on the last line is part of the closure.</li><li>Directly inside the closure we list the two parameters <code>sorted()</code> will pass us, which are two strings. We also say that our closure will return a Boolean, then mark the start of the closure’s code by using <code>in</code>.</li><li>Everything else is just normal function code.</li></ol><p>Again, there’s a lot of syntax in there and I wouldn’t blame you if you felt a headache coming on, but I hope you can see the benefit of closures at least a little: functions like <code>sorted()</code> let us pass in custom code to adjust how they work, and do so directly – we don’t need to write out a new function just for that one usage.</p><p>Now you understand what closures are, let’s see if we can make them easier to read…</p>`,51),S=a('<div class="hint-container info"><p class="hint-container-title">1. How to create and use closures - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/what-the-heck-are-closures-and-why-does-swift-love-them-so-much" target="_blank" rel="noopener noreferrer">What the heck are closures and why does Swift love them so much?</a></li><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-are-swifts-closure-parameters-inside-the-braces" target="_blank" rel="noopener noreferrer">Why are Swift’s closure parameters inside the braces?</a></li><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/how-do-you-return-a-value-from-a-closure-that-takes-no-parameters" target="_blank" rel="noopener noreferrer">How do you return a value from a closure that takes no parameters?</a></li><li>Test: <a href="https:hackingwithswift.com/review/sixty/creating-basic-closures" target="_blank" rel="noopener noreferrer">Creating basic closures</a></li><li>Test: <a href="https/review/sixty/accepting-parameters-in-a-closure">Accepting parameters in a closure</a></li><li>Test: <a href="https/review/sixty/returning-values-from-a-closure">Returning values from a closure</a></li></ul></div><h3 id="_2-how-to-use-trailing-closures-and-shorthand-syntax" tabindex="-1"><a class="header-anchor" href="#_2-how-to-use-trailing-closures-and-shorthand-syntax"><span>2. How to use trailing closures and shorthand syntax</span></a></h3>',2),T={class:"hint-container details"},I=s("summary",null,"2. How to use trailing closures and shorthand syntax",-1),j=a(`<p>Swift has a few tricks up its sleeve to reduce the amount of syntax that comes with closures, but first let’s remind ourselves of the problem. Here’s the code we ended up with at the end of the previous chapter:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> team <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Gloria&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Suzanne&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Piper&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Tiffany&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Tasha&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> captainFirstTeam <span class="token operator">=</span> team<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>name1<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> name2<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Bool</span> <span class="token keyword">in</span></span>
<span class="line">    <span class="token keyword">if</span> name1 <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;Suzanne&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> name2 <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;Suzanne&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> name1 <span class="token operator">&lt;</span> name2</span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>captainFirstTeam<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you remember, <code>sorted()</code> can accept any kind of function to do custom sorting, with one rule: that function must accept two items from the array in question (that’s two strings here), and return a Boolean set to true if the first string should be sorted before the second.</p><p>To be clear, the function <em>must</em> behave like that – if it returned nothing, or if it only accepted one string, then Swift would refuse to build our code.</p><p>Think it through: in this code, the function we provide to <code>sorted()</code> must provide two strings and return a Boolean, so why do we need to repeat ourselves in our closure?</p><p>The answer is: <em>we don’t</em>. We don’t need to specify the types of our two parameters because they <em>must</em> be strings, and we don’t need to specify a return type because it <em>must</em> be a Boolean. So, we can rewrite the code to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> captainFirstTeam <span class="token operator">=</span> team<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token punctuation">{</span> name1<span class="token punctuation">,</span> name2 <span class="token keyword">in</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That’s already reduced the amount of clutter in the code, but we can go a step further: when one function accepts another as its parameter, like <code>sorted()</code> does, Swift allows special syntax called <em>trailing closure syntax</em>. It looks like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> captainFirstTeam <span class="token operator">=</span> team<span class="token punctuation">.</span>sorted <span class="token punctuation">{</span> name1<span class="token punctuation">,</span> name2 <span class="token keyword">in</span></span>
<span class="line">    <span class="token keyword">if</span> name1 <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;Suzanne&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> name2 <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;Suzanne&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> name1 <span class="token operator">&lt;</span> name2</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Rather than passing the closure in as a parameter, we just go ahead and start the closure directly – and in doing so remove <code>(by:</code> from the start, and a closing parenthesis at the end. Hopefully you can now see why the parameter list and <code>in</code> come <em>inside</em> the closure, because if they were outside it would look even weirder!</p><p>There’s one last way Swift can make closures less cluttered: Swift can automatically provide parameter names for us, using <em>shorthand syntax</em>. With this syntax we don’t even write <code>name1, name2 in</code> any more, and instead rely on specially named values that Swift provides for us: <code>$0</code> and <code>$1</code>, for the first and second strings respectively.</p><p>Using this syntax our code becomes even shorter:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> captainFirstTeam <span class="token operator">=</span> team<span class="token punctuation">.</span>sorted <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token short-argument">$0</span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;Suzanne&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token short-argument">$1</span> <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;Suzanne&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token short-argument">$0</span> <span class="token operator">&lt;</span> <span class="token short-argument">$1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I left this one to last because it’s not as clear cut as the others – some people see that syntax and hate it because it’s less clear, and that’s okay.</p><p>Personally I <em>wouldn’t</em> use it here because we’re using each value more than once, but if our <code>sorted()</code> call was simpler – e.g., if we just wanted to do a reverse sort – then I would:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> reverseTeam <span class="token operator">=</span> team<span class="token punctuation">.</span>sorted <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token short-argument">$0</span> <span class="token operator">&gt;</span> <span class="token short-argument">$1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So, <code>in</code> is used to mark the end of the parameters and return type – everything after that is the body of the closure itself. There’s a reason for this, and you’ll see it for yourself soon enough.</p><p>There I’ve flipped the comparison from <code>&lt;</code> to <code>&gt;</code> so we get a reverse sort, but now that we’re down to a single line of code we can remove the <code>return</code> and get it down to almost nothing:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> reverseTeam <span class="token operator">=</span> team<span class="token punctuation">.</span>sorted <span class="token punctuation">{</span> <span class="token short-argument">$0</span> <span class="token operator">&gt;</span> <span class="token short-argument">$1</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>There are no fixed rules about when to use shorthand syntax and when not to, but in case it’s helpful I use shorthand syntax unless any of the following are true:</p><ol><li>The closure’s code is long.</li><li><code>$0</code> and friends are used more than once each.</li><li>You get three or more parameters (e.g. <code>$2</code>, <code>$3</code>, etc).</li></ol><p>If you’re still unconvinced about the power of closures, let’s take a look at two more examples.</p><p>First up, the <code>filter()</code> function lets us run some code on every item in the array, and will send back a new array containing every item that returns true for the function. So, we could find all team players whose name begins with T like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> tOnly <span class="token operator">=</span> team<span class="token punctuation">.</span>filter <span class="token punctuation">{</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span><span class="token function">hasPrefix</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;T&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>tOnly<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>That will print <code>[&quot;Tiffany&quot;, &quot;Tasha&quot;]</code>, because those are the only two team members whose name begins with T.</p><p>And second, the <code>map()</code> function lets us transform every item in the array using some code of our choosing, and sends back a new array of all the transformed items:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> uppercaseTeam <span class="token operator">=</span> team<span class="token punctuation">.</span>map <span class="token punctuation">{</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span><span class="token function">uppercased</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>uppercaseTeam<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>That will print <code>[&quot;GLORIA&quot;, &quot;SUZANNE&quot;, &quot;PIPER&quot;, &quot;TIFFANY&quot;, &quot;TASHA&quot;]</code>, because it has uppercased every name and produced a new array from the result.</p><p>Tip: When working with <code>map()</code>, the type you return doesn’t have to be the same as the type you started with – you could convert an array of integers to an array of strings, for example.</p><p>Like I said, you’re going to be using closures a <em>lot</em> with SwiftUI:</p><ol><li>When you create a list of data on the screen, SwiftUI will ask you to provide a function that accepts one item from the list and converts it something it can display on-screen.</li><li>When you create a button, SwiftUI will ask you to provide one function to execute when the button is pressed, and another to generate the contents of the button – a picture, or some text, and so on.</li><li>Even just putting stacking pieces of text vertically is done using a closure.</li></ol><p>Yes, you can create individual functions every time SwiftUI does this, but trust me: you won’t. Closures make this kind of code completely natural, and I think you’ll be amazed at how SwiftUI uses them to produce remarkably simple, clean code.</p>`,32),H=a('<div class="hint-container info"><p class="hint-container-title">2. How to use trailing closures and shorthand syntax - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-have-trailing-closure-syntax" target="_blank" rel="noopener noreferrer">Why does Swift have trailing closure syntax?</a></li><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-should-you-use-shorthand-parameter-names" target="_blank" rel="noopener noreferrer">When should you use shorthand parameter names?</a></li><li>Test: <a href="https/review/sixty/shorthand-parameter-names">Shorthand parameter names</a></li></ul></div><h3 id="_3-how-to-accept-functions-as-parameters" tabindex="-1"><a class="header-anchor" href="#_3-how-to-accept-functions-as-parameters"><span>3. How to accept functions as parameters</span></a></h3>',2),C={class:"hint-container details"},A=s("summary",null,"3. How to accept functions as parameters",-1),U=a(`<p>There’s one last closure-related topic I want to look at, which is how to write functions that accept other functions as parameters. This is particularly important for closures because of trailing closure syntax, but it’s a useful skill to have regardless.</p><p>Previously we looked at this code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">greetUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hi there!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">greetUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> greetCopy<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span> <span class="token operator">=</span> greetUser</span>
<span class="line"><span class="token function">greetCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I’ve added the type annotation in there intentionally, because that’s exactly what we use when specifying functions as parameters: we tell Swift what parameters the function accepts, as well its return type.</p><p>Once again, brace yourself: the syntax for this is a little hard on the eyes at first! Here’s a function that generates an array of integers by repeating a function a certain number of times:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">makeArray</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> using generator<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..&lt;</span>size <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> newNumber <span class="token operator">=</span> <span class="token function">generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        numbers<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>newNumber<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> numbers</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let’s break that down…</p><ol><li>The function is called <code>makeArray()</code>. It takes two parameters, one of which is the number of integers we want, and also returns an array of integers.</li><li>The second parameter is a function. This accepts no parameters itself, but will return one integer every time it’s called.</li><li>Inside <code>makeArray()</code> we create a new empty array of integers, then loop as many times as requested.</li><li>Each time the loop goes around we call the <code>generator</code> function that was passed in as a parameter. This will return one new integer, so we put that into the <code>numbers</code> array.</li><li>Finally the finished array is returned.</li></ol><p>The body of the <code>makeArray()</code> is mostly straightforward: repeatedly call a function to generate an integer, adding each value to an array, then send it all back.</p><p>The <em>complex</em> part is the very first line:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">makeArray</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> using generator<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>There we have two sets of parentheses and two sets of return types, so it can be a bit of a jumble at first. If you split it up you should be able to read it linearly:</p><ol><li>We’re creating a new function.</li><li>The function is called <code>makeArray()</code>.</li><li>The first parameter is an integer called <code>size</code>.</li><li>The second parameter is a function called <code>generator</code>, which itself accepts no parameters and returns an integer.</li><li>The whole thing – <code>makeArray()</code> – returns an array of integers.</li></ol><p>The result is that we can now make arbitrary-sized integer arrays, passing in a function that should be used to generate each number:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> rolls <span class="token operator">=</span> <span class="token function">makeArray</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">20</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>rolls<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And remember, this same functionality works with dedicated functions too, so we could write something like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">generateNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">20</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> newRolls <span class="token operator">=</span> <span class="token function">makeArray</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> using<span class="token punctuation">:</span> generateNumber<span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>newRolls<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That will call <code>generateNumber()</code> 50 times to fill the array.</p><p>While you’re learning Swift and SwiftUI, there will only be a handful of times when you need to know how to accept functions as parameters, but at least now you have an inkling of how it works and why it matters.</p><p>There’s one last thing before we move on: you can make your function accept <em>multiple</em> function parameters if you want, in which case you can specify multiple trailing closures. The syntax here is very common in SwiftUI, so it’s important to at least show you a taste of it here.</p><p>To demonstrate this here’s a function that accepts three function parameters, each of which accept no parameters and return nothing:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">doImportantWork</span><span class="token punctuation">(</span>first<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">,</span> second<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">,</span> third<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;About to start first work&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;About to start second work&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">second</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;About to start third work&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">third</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Done!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I’ve added extra <code>print()</code> calls in there to simulate specific work being done in between <code>first</code>, <code>second</code>, and <code>third</code> being called.</p><p>When it comes to calling that, the first trailing closure is identical to what we’ve used already, but the second and third are formatted differently: you end the brace from the previous closure, then write the external parameter name and a colon, then start another brace.</p><p>Here’s how that looks:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">doImportantWork <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;This is the first work&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> second<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;This is the second work&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> third<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;This is the third work&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Having three trailing closures is not as uncommon as you might expect. For example, making a section of content in SwiftUI is done with three trailing closures: one for the content itself, one for a head to be put above, and one for a footer to be put below.</p>`,27),D=a('<div class="hint-container info"><p class="hint-container-title">3. How to accept functions as parameters - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-would-you-want-to-use-closures-as-parameters" target="_blank" rel="noopener noreferrer">Why would you want to use closures as parameters?</a></li><li>Test: <a href="https://hackingwithswift.com/review/sixty/closures-as-parameters" target="_blank" rel="noopener noreferrer">Closures as parameters</a></li><li>Test: <a href="https://hackingwithswift.com/review/sixty/trailing-closure-syntax" target="_blank" rel="noopener noreferrer">Trailing closure syntax</a></li></ul></div><h3 id="_4-summary-closures" tabindex="-1"><a class="header-anchor" href="#_4-summary-closures"><span>4. Summary: Closures</span></a></h3>',2),z={class:"hint-container details"},W=s("summary",null,"4. Summary: Closures",-1),F=a("<p>We’ve covered a lot about closures in the previous chapters, so let’s recap:</p><ul><li>You can copy functions in Swift, and they work the same as the original except they lose their external parameter names.</li><li>All functions have types, just like other data types. This includes the parameters they receive along with their return type, which might be <code>Void</code> – also known as “nothing”.</li><li>You can create closures directly by assigning to a constant or variable.</li><li>Closures that accept parameters or return a value must declare this <em>inside</em> their braces, followed by the keyword <code>in</code>.</li><li>Functions are able to accept other functions as parameters. They must declare up front exactly what data those functions must use, and Swift will ensure the rules are followed.</li><li>In this situation, instead of passing a dedicated function you can also pass a closure – you can make one directly. Swift allows both approaches to work.</li><li>When passing a closure as a function parameter, you don’t need to explicitly write out the types inside your closure if Swift can figure it out automatically. The same is true for the return value – if Swift can figure it out, you don’t need to specify it.</li><li>If one or more of a function’s final parameters are functions, you can use trailing closure syntax.</li><li>You can also use shorthand parameter names such as <code>$0</code> and <code>$1</code>, but I would recommend doing that only under some conditions.</li><li>You can make your own functions that accept functions as parameters, although in practice it’s much more important to know how to <em>use</em> them than how to <em>create</em> them.</li></ul><p>Of all the various parts of the Swift language, I’d say closures are the single toughest thing to learn. Not only is the syntax a little hard on your eyes at first, but the very concept of passing a function into a function takes a little time to sink in.</p><p>So, if you’ve read through these chapters and feel like your head is about to explode, that’s great – it means you’re half way to understanding closures!</p>",4),Y=s("h3",{id:"_5-checkpoint-5",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_5-checkpoint-5"},[s("span",null,"5. Checkpoint 5")])],-1),N={class:"hint-container details"},$=s("summary",null,"5. Checkpoint 5",-1),B=a(`<p>With closures under your belt, it’s time to try a little coding challenge using them.</p><p>You’ve already met <code>sorted()</code>, <code>filter()</code>, <code>map()</code>, so I’d like you to put them together in a chain – call one, then the other, then the other back to back without using temporary variables.</p><p>Your input is this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> luckyNumbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Your job is to:</p><ol><li>Filter out any numbers that are even</li><li>Sort the array in ascending order</li><li>Map them to strings in the format “7 is a lucky number”</li><li>Print the resulting array, one item per line</li></ol><p>So, your output should be as follows:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">7 is a lucky number</span>
<span class="line">15 is a lucky number</span>
<span class="line">21 is a lucky number</span>
<span class="line">31 is a lucky number</span>
<span class="line">33 is a lucky number</span>
<span class="line">49 is a lucky number</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you need hints they are below, but honestly you should be able to tackle this one either from memory or by referencing recent chapters in this book.</p><p>Still here? Okay, here are some hints:</p><ol><li>You need to use the <code>filter()</code>, <code>sorted()</code>, and <code>map()</code> functions.</li><li>The order you run the functions matters – if you convert the array to a string first, <code>sorted()</code> will do a string sort rather than an integer sort. That means 15 will come before 7, because Swift will compare the “1” in “15” against “7”.</li><li>To chain these functions, use <code>luckyNumbers.first { }.second { }</code>, obviously putting the real function calls in there.</li><li>You should use <code>isMultiple(of:)</code> to remove even numbers.</li></ol>`,11),O=s("p",null,[e("That’s "),s("em",null,"another"),e(" key Swift topic under your belt – good job! Now do the smart thing and post your progress online: it forces you to write about these things in your own words, and also encourages you to continue on to tomorrow.")],-1),P=s("hr",null,null,-1);function V(u,R){const t=r("router-link"),o=r("VPCard"),c=r("VidStack");return k(),h("div",null,[s("h1",w,[s("a",g,[s("span",null,m(u.$frontmatter.title)+" 관련",1)])]),s("nav",y,[s("ul",null,[s("li",null,[n(t,{to:"#closures"},{default:i(()=>[e("Closures")]),_:1}),s("ul",null,[s("li",null,[n(t,{to:"#_1-how-to-create-and-use-closures"},{default:i(()=>[e("1. How to create and use closures")]),_:1})]),s("li",null,[n(t,{to:"#_2-how-to-use-trailing-closures-and-shorthand-syntax"},{default:i(()=>[e("2. How to use trailing closures and shorthand syntax")]),_:1})]),s("li",null,[n(t,{to:"#_3-how-to-accept-functions-as-parameters"},{default:i(()=>[e("3. How to accept functions as parameters")]),_:1})]),s("li",null,[n(t,{to:"#_4-summary-closures"},{default:i(()=>[e("4. Summary: Closures")]),_:1})]),s("li",null,[n(t,{to:"#_5-checkpoint-5"},{default:i(()=>[e("5. Checkpoint 5")]),_:1})])])])])]),v,n(o,l(p({title:"100 Days of SwiftUI - Day 9",desc:"Closures",link:"https://www.hackingwithswift.com/100/swiftui/9",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,s("details",x,[_,n(o,l(p({title:"100 Days of SwfitUI - Day 9 - 1. How to create and use closures",desc:"1. How to create and use closures",link:"https://hackingwithswift.com/quick-start/beginners/how-to-create-and-use-closures",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(c,{src:"youtube/F68lyXkkfCY"}),q]),S,s("details",T,[I,n(o,l(p({title:"100 Days of SwfitUI - Day 9 - 2. How to use trailing closures and shorthand syntax",desc:"2. How to use trailing closures and shorthand syntax",link:"https://hackingwithswift.com/quick-start/beginners/how-to-use-trailing-closures-and-shorthand-syntax",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(c,{src:"youtube/HnIID4W3a_o"}),j]),H,s("details",C,[A,n(o,l(p({title:"100 Days of SwfitUI - Day 9 - 3. How to accept functions as parameters",desc:"3. How to accept functions as parameters",link:"https://hackingwithswift.com/quick-start/beginners/how-to-accept-functions-as-parameters",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(c,{src:"youtube/1Ho_GhA70zw"}),U]),D,s("details",z,[W,n(o,l(p({title:"100 Days of SwfitUI - Day 9 - 4. Summary: Closures",desc:"4. Summary: Closures",link:"https://hackingwithswift.com/quick-start/beginners/summary-closures",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(c,{src:"youtube/dRAuKT2Gtn0"}),F]),Y,s("details",N,[$,n(o,l(p({title:"100 Days of SwfitUI - Day 9 - 5. Checkpoint 5",desc:"5. Checkpoint 5",link:"https://hackingwithswift.com/quick-start/beginners/checkpoint-5",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(c,{src:"youtube/x9jpeZpmsbA"}),B]),O,P])}const G=d(f,[["render",V],["__file","09.html.vue"]]),Z=JSON.parse('{"path":"/swift/100-days-of-swiftui/09.html","title":"Day 09","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 09","description":"100 Days of SwiftUI > Day 09","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 09"},{"property":"og:description","content":"Day 09"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/09.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/09.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 09"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 09"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 09\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Closures","slug":"closures","link":"#closures","children":[{"level":3,"title":"1. How to create and use closures","slug":"_1-how-to-create-and-use-closures","link":"#_1-how-to-create-and-use-closures","children":[]},{"level":3,"title":"2. How to use trailing closures and shorthand syntax","slug":"_2-how-to-use-trailing-closures-and-shorthand-syntax","link":"#_2-how-to-use-trailing-closures-and-shorthand-syntax","children":[]},{"level":3,"title":"3. How to accept functions as parameters","slug":"_3-how-to-accept-functions-as-parameters","link":"#_3-how-to-accept-functions-as-parameters","children":[]},{"level":3,"title":"4. Summary: Closures","slug":"_4-summary-closures","link":"#_4-summary-closures","children":[]},{"level":3,"title":"5. Checkpoint 5","slug":"_5-checkpoint-5","link":"#_5-checkpoint-5","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":8}]},"readingTime":{"minutes":17.1,"words":5131},"filePathRelative":"swift/100-days-of-swiftui/09.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{G as comp,Z as data};
