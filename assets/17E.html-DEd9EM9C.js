import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as g,a as s,t as h,b as a,n as p,g as r,d as n,w as i,e as t,r as l,o as m}from"./app-U_bew1in.js";const k={},f={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"},y=s("nav",{class:"table-of-contents"},[s("ul")],-1),_=s("hr",null,null,-1),b=s("code",null,"app.js",-1),C=s("code",null,"app.js",-1),A=t(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/index.html&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;EC2 Primary&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;token number&quot;</span><span class="token operator">&gt;</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>파일 저장이 끝났으면 다음 명령을 입력하여 서버를 실행합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">node</span> app.js</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter17/43_.png" alt="EC2 인스턴스 목록에서 EC2 인스턴스(Primary)의 공인 IP 주소를 확인합니다." tabindex="0" loading="lazy"><figcaption>EC2 인스턴스 목록에서 EC2 인스턴스(Primary)의 공인 IP 주소를 확인합니다.</figcaption></figure>`,4),S=s("code",null,"app.js",-1),E=s("code",null,"app.js",-1),T=t(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/index.html&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;EC2 Secondary&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;token number&quot;</span><span class="token operator">&gt;</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>파일 저장이 끝났으면 다음 명령을 입력하여 서버를 실행합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">node</span> app.js</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter17/44_.png" alt="EC2 인스턴스 목록에서 EC2 인스턴스(Secondary)의 공인 IP 주소를 확인합니다." tabindex="0" loading="lazy"><figcaption>EC2 인스턴스 목록에서 EC2 인스턴스(Secondary)의 공인 IP 주소를 확인합니다.</figcaption></figure>`,4),P=s("img",{src:"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter17/45_.png",alt:'Route 53 메인 페이지에서 왼쪽 <FontIcon icon="iconfont icon-select"/>를 클릭하고, <FontIcon icon="iconfont icon-select"/> 버튼을 클릭합니다.',tabindex:"0",loading:"lazy"},null,-1),z=s("code",null,"[Health Checks]",-1),F=s("code",null,"[Create Health Check]",-1),I=t("<p>EC2 인스턴스(Primary)에 대한 Health Check를 생성합니다.</p><ul><li><strong>Name</strong>: 서버 동작 상태 체크의 이름입니다. 기본값 그대로 비워둡니다.</li><li><strong>Protocol</strong>: 서버 동작 상태를 체크할 프로토콜을 설정합니다. HTTP, HTTPS, TCP를 선택할 수 있습니다. 기본값 그대로 사용합니다.</li><li><strong>Specify Endpoint By</strong>: 서버 동작 상태를 체크할 때 IP 주소로 할지, 도메인으로 할지 설정합니다. 기본값 그대로 사용합니다.</li><li><strong>IP Address</strong>: 서버 동작 상태를 체크할 때 접근할 IP 주소를 설정합니다. EC2 인스턴스(Primary)의 공인 IP 주소를 입력합니다.</li><li><strong>Host Name</strong>: 동작 상태를 체크하는 서버의 이름입니다. 입력하지 않아도 상관 없습니다.</li><li><strong>Port</strong>: 서버 동작 상태를 체크할 때 접근할 포트 번호입니다. 기본값 그대로 사용합니다.</li><li><strong>Path</strong>: 서버 동작 상태를 체크할 때 접근할 파일의 URL입니다. /index.html, /hello/healthckeck.html과 같이 입력하면 됩니다. 기본값 그대로 비워둡니다.</li><li><strong>Request Interval</strong>: 서버 동작 상태 체크 주기를 설정합니다. 30초와 10초를 선택할 수 있습니다. 여기서는 10초를 선택합니다.</li><li><strong>Failure Threshold</strong>: 서버 접근에 실패했을 때 재시도 횟수입니다. 기본값 그대로 사용합니다.</li><li><strong>Enable String Match</strong>: 서버에서 출력하는 파일의 내용(body)에서 특정 문자열로 상태를 판단할지 설정합니다. 기본값 그대로 사용합니다. <ul><li><strong>Search String</strong>: 파일 내용에서 검색할 문자열을 설정합니다.</li></ul></li><li><strong>URL</strong>: 서버 동작 상태를 체크할 때 접근할 URL 입니다. 위에서 설정한 내용대로 자동 생성됩니다.</li><li><strong>Health Check Type</strong>: 서버 동작 상태 체크 종류입니다. 위에서 설정한 내용대로 자동 생성됩니다. 요금에 관해서는 View Pricing 링크를 참조해주십시오.</li></ul>",2),x=s("img",{src:"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter17/46_.png",alt:'설정이 완료되었으면 <FontIcon icon="iconfont icon-select"/> 버튼을 클릭합니다.',tabindex:"0",loading:"lazy"},null,-1),w=s("code",null,"[Create]",-1),R=s("figure",null,[s("img",{src:"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter17/47_.png",alt:"Route 53 Health Check 목록에 Health Check가 생성되었습니다.",tabindex:"0",loading:"lazy"}),s("figcaption",null,"Route 53 Health Check 목록에 Health Check가 생성되었습니다.")],-1),O=s("img",{src:"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter17/48_.png",alt:'왼쪽 메뉴에서 Hosted Zones를 클릭하여 Hosted Zone 목록으로 이동합니다. 그리고 도메인을 선택하고 위쪽 <FontIcon icon="iconfont icon-select"/> 버튼을 클릭합니다.',tabindex:"0",loading:"lazy"},null,-1),W=s("code",null,"[Go to Record Sets]",-1),N=s("img",{src:"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter17/49_.png",alt:'도메인의 레코드 목록이 표시됩니다. 위쪽 <FontIcon icon="iconfont icon-select"/> 버튼을 클릭합니다.',tabindex:"0",loading:"lazy"},null,-1),j=s("code",null,"[Create Record Set]",-1),H=t("<p>EC2 인스턴스(Primary)에 대한 A 레코드를 생성합니다.</p><ul><li><strong>Name</strong>: 생성할 도메인 이름을 설정합니다. examplefailover를 입력합니다.</li><li><strong>Type</strong>: 레코드 종류를 설정합니다. 기본값 그대로 A - IPv4 address를 선택합니다.</li><li><strong>Alias</strong>: IP 주소를 사용할 것이므로 기본값 그대로 사용합니다.</li><li><strong>TTL</strong>: Time To Live의 약자이며 A 레코드가 갱신되는 주기를 설정합니다. 초 단위로 설정합니다. DNS Failover 기능은 60초를 권장하고 있으므로 60을 입력합니다.</li><li><strong>Value</strong>: 도메인 네임을 쿼리했을 때 알려줄 IP 주소를 설정합니다. EC2 인스턴스(Primary)의 공인 IP 주소를 입력합니다.</li><li><strong>Routing Policy</strong>: 라우팅 정책을 설정합니다. Failover를 선택합니다.</li><li><strong>Failover Record Type</strong>: 현재 레코드가 Primary인지, Secondary인지 설정합니다. Primary이므로 기본값 그대로 사용합니다.</li><li><strong>Set ID</strong>: Failover 레코드끼리 서로 구분하는 ID입니다. 기본값 그대로 사용합니다.</li><li><strong>Associate with Health Check</strong>: Health Check 설정과 연동할지 설정합니다. Yes를 선택합니다.</li><li><strong>Health Check to Associate</strong>: 현재 생성되어 있는 모든 Health Check 목록이 표시됩니다. 방금 생성한 EC2 인스턴스(Primary) Health Check를 선택합니다.</li></ul>",2),D=s("img",{src:"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter17/50_.png",alt:'설정이 완료되었으면 <FontIcon icon="iconfont icon-select"/> 버튼을 클릭합니다.',tabindex:"0",loading:"lazy"},null,-1),L=s("code",null,"[Create]",-1),q=s("p",null,"도메인의 Primary A 레코드가 생성되었습니다.",-1),V=s("img",{src:"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter17/51_.png",alt:'위쪽 <FontIcon icon="iconfont icon-select"/> 버튼을 클릭하여 Secondary A 레코드를 생성합니다.',tabindex:"0",loading:"lazy"},null,-1),B=s("code",null,"[Create Record Set]",-1),Z=t("<p>EC2 인스턴스(Secondary) 대한 A 레코드를 생성합니다.</p><ul><li><strong>Name</strong>: 생성할 도메인 이름을 설정합니다. examplefailover를 입력합니다.</li><li><strong>Type</strong>: 레코드 종류를 설정합니다. 기본값 그대로 A - IPv4 address를 선택합니다.</li><li><strong>Alias</strong>: IP 주소를 사용할 것이므로 기본값 그대로 사용합니다.</li><li><strong>TTL</strong>: Time To Live의 약자이며 A 레코드가 갱신되는 주기를 설정합니다. 초 단위로 설정합니다. DNS Failover 기능은 60초를 권장하고 있으므로 60을 입력합니다.</li><li><strong>Value</strong>: 도메인 네임을 쿼리했을 때 알려줄 IP 주소를 설정합니다. EC2 인스턴스(Secondary)의 공인 IP 주소를 입력합니다.</li><li><strong>Routing Policy</strong>: 라우팅 정책을 설정합니다. Failover를 선택합니다.</li><li><strong>Failover Record Type</strong>: 현재 레코드가 Primary인지, Secondary인지 설정합니다. Secondary이므로 Secondary를 선택합니다.</li><li><strong>Set ID</strong>: Failover 레코드끼리 서로 구분하는 ID입니다. 기본값 그대로 사용합니다.</li><li><strong>Associate with Health Check</strong>: Health Check 설정과 연동할지 설정합니다. Secondary는 Health Check가 필요 없으므로 기본값 그대로 No를 선택합니다.</li></ul>",2),K=s("img",{src:"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter17/52_.png",alt:'설정이 완료되었으면 <FontIcon icon="iconfont icon-select"/> 버튼을 클릭합니다.',tabindex:"0",loading:"lazy"},null,-1),M=s("code",null,"[Create]",-1),U=s("figure",null,[s("img",{src:"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter17/53_.png",alt:"도메인의 Secondary A 레코드가 생성되었습니다.",tabindex:"0",loading:"lazy"}),s("figcaption",null,"도메인의 Secondary A 레코드가 생성되었습니다.")],-1),G=s("figure",null,[s("img",{src:"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter17/54_.png",alt:"이제 웹 브라우저로 Failover 기능을 설정한 도메인에 접속합니다. EC2 인스턴스(Primary)의 내용이 표시됩니다.",tabindex:"0",loading:"lazy"}),s("figcaption",null,"이제 웹 브라우저로 Failover 기능을 설정한 도메인에 접속합니다. EC2 인스턴스(Primary)의 내용이 표시됩니다.")],-1),J=s("figure",null,[s("img",{src:"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter17/55_.png",alt:"Failover 기능이 동작하여 EC2 인스턴스(Secondary)에 접속",tabindex:"0",loading:"lazy"}),s("figcaption",null,"Failover 기능이 동작하여 EC2 인스턴스(Secondary)에 접속")],-1),Y=s("p",null,"접속이 안 될 때는 EC2 인스턴스의 Security Group에 80번 포트가 열려있는지 확인합니다. 웹 브라우저에서 각각의 IP 주소로 접속해서 확인하면 됩니다.",-1),$=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"DNS Failover와 ELB"),s("p",null,"ELB를 사용할 때는 A 레코드의 Alias를 사용하면 됩니다. ELB 접속 주소는 IP 주소가 아닌 도메인으로 제공됩니다. A 레코드 Alias는 IP 주소 대신 도메인에 연결하는 기능입니다.")],-1),Q=s("hr",null,null,-1);function X(u,ss){const c=l("VPCard"),o=l("RouteLink"),e=l("FontIcon");return m(),g("div",null,[s("h1",f,[s("a",v,[s("span",null,h(u.$frontmatter.title)+" 관련",1)])]),a(c,p(r({title:"목차",desc:"아마존 웹 서비스를 다루는 기술",link:"/aws/art-of-aws/README.md",logo:"https://pyrasis.com/assets/images/pyrasis.png",background:"rgba(31,41,55,0.2)"})),null,16),y,_,a(c,p(r({title:"17장 - 5. Route 53 DNS Failover 활용하기",desc:"아마존 웹 서비스를 다루는 기술",link:"https://pyrasis.com/book/TheArtOfAmazonWebServices/Chapter17/05",logo:"https://pyrasis.com/favicon.ico",background:"rgba(31,41,55,0.2)"})),null,16),s("p",null,[n("Route 53의 DNS Failover 기능을 활용해보겠습니다. DNS Failover 기능이 동작하는지 확인하기 위해 EC2 인스턴스 2개가 필요합니다. "),a(o,{to:"/aws/art-of-aws/04C.html"},{default:i(()=>[n("'4.3 EC2 인스턴스 생성하기'")]),_:1}),n("를 참조하여 EC2 인스턴스를 2개 생성합니다. 그리고 "),a(o,{to:"/aws/art-of-aws/06.html"},{default:i(()=>[n("'6장 고정 IP를 제공하는 Elastic IP'")]),_:1}),n("를 참조하여 EC2 인스턴스에 Elastic IP를 연결합니다.")]),s("p",null,[n("이미 EC2 인스턴스(Example Server)를 만들어놓았다면 추가로 하나 더 생성합니다. 그리고 "),a(o,{to:"/aws/art-of-aws/12C.html"},{default:i(()=>[n("'12.3.1 EC2와 CloudFront 연동하기'")]),_:1}),n("를 참조하여 EC2 인스턴스에 "),a(e,{icon:"fa-brands fa-node"}),n("Node.js를 설치하고 웹 서버를 실행할 수 있도록 준비합니다. 이번 실습은 EC2 인스턴스 생성, 웹 서버 설치 등 생략되는 부분이 많기 때문에 앞 부분을 학습한 뒤 진행하는 것을 권장합니다.")]),s("p",null,[n("첫 번째 EC2 인스턴스를 Primary로 사용하겠습니다. EC2 인스턴스(Primary)에 접속하여 텍스트 편집기를 열고 아래와 같이 작성한 뒤 "),a(e,{icon:"fa-brands fa-js"}),b,n("로 저장합니다.")]),s("blockquote",null,[a(e,{icon:"fa-brands fa-js"}),C]),A,s("p",null,[n("두 번째 인스턴스는 Failover 기능을 위한 Secondary로 사용하겠습니다. EC2 인스턴스(Secondary)에 접속하여 텍스트 편집기를 열고 아래와 같이 작성한 뒤 "),a(e,{icon:"fa-brands fa-js"}),S,n("로 저장합니다.")]),s("blockquote",null,[a(e,{icon:"fa-brands fa-js"}),E]),T,s("figure",null,[P,s("figcaption",null,[n("Route 53 메인 페이지에서 왼쪽 "),a(e,{icon:"iconfont icon-select"}),z,n("를 클릭하고, "),a(e,{icon:"iconfont icon-select"}),F,n(" 버튼을 클릭합니다.")])]),I,s("figure",null,[x,s("figcaption",null,[n("설정이 완료되었으면 "),a(e,{icon:"iconfont icon-select"}),w,n(" 버튼을 클릭합니다.")])]),R,s("figure",null,[O,s("figcaption",null,[n("왼쪽 메뉴에서 Hosted Zones를 클릭하여 Hosted Zone 목록으로 이동합니다. 그리고 도메인을 선택하고 위쪽 "),a(e,{icon:"iconfont icon-select"}),W,n(" 버튼을 클릭합니다.")])]),s("figure",null,[N,s("figcaption",null,[n("도메인의 레코드 목록이 표시됩니다. 위쪽 "),a(e,{icon:"iconfont icon-select"}),j,n(" 버튼을 클릭합니다.")])]),H,s("figure",null,[D,s("figcaption",null,[n("설정이 완료되었으면 "),a(e,{icon:"iconfont icon-select"}),L,n(" 버튼을 클릭합니다.")])]),q,s("figure",null,[V,s("figcaption",null,[n("위쪽 "),a(e,{icon:"iconfont icon-select"}),B,n(" 버튼을 클릭하여 Secondary A 레코드를 생성합니다.")])]),Z,s("figure",null,[K,s("figcaption",null,[n("설정이 완료되었으면 "),a(e,{icon:"iconfont icon-select"}),M,n(" 버튼을 클릭합니다.")])]),U,G,s("p",null,[n("이제 EC2 인스턴스(Primary)의 웹 서버("),a(e,{icon:"fa-brands fa-node"}),n("Node.js)를 종료하고, 약 1분 정도 후에 새로고침을 해봅니다. Failover 기능이 잘 동작하여 EC2 인스턴스(Secondary)의 내용이 표시됩니다.")]),J,Y,$,Q])}const es=d(k,[["render",X],["__file","17E.html.vue"]]),ts=JSON.parse('{"path":"/aws/art-of-aws/17E.html","title":"17E. Route 53 DNS Failover 활용하기","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"17E. Route 53 DNS Failover 활용하기","description":"아마존 웹 서비스를 다루는 기술 > 17E. Route 53 DNS Failover 활용하기","category":["AWS"],"tag":["crashcourse","pyrasis","aws","amazon-web-services"],"head":[[{"meta":null},{"property":"og:title","content":"아마존 웹 서비스를 다루는 기술 > 17E. Route 53 DNS Failover 활용하기"},{"property":"og:description","content":"17E. Route 53 DNS Failover 활용하기"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/aws/art-of-aws/17E.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/aws/art-of-aws/17E.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"17E. Route 53 DNS Failover 활용하기"}],["meta",{"property":"og:description","content":"아마존 웹 서비스를 다루는 기술 > 17E. Route 53 DNS Failover 활용하기"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter17/43_.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"pyrasis"}],["meta",{"property":"article:tag","content":"aws"}],["meta",{"property":"article:tag","content":"amazon-web-services"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"17E. Route 53 DNS Failover 활용하기\\",\\"image\\":[\\"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter17/43_.png\\",\\"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter17/44_.png\\",\\"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter17/45_.png\\",\\"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter17/46_.png\\",\\"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter17/47_.png\\",\\"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter17/48_.png\\",\\"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter17/49_.png\\",\\"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter17/50_.png\\",\\"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter17/51_.png\\",\\"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter17/52_.png\\",\\"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter17/53_.png\\",\\"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter17/54_.png\\",\\"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter17/55_.png\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1712541541000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":3}]},"readingTime":{"minutes":2.12,"words":636},"filePathRelative":"aws/art-of-aws/17E.md","localizedDate":"2024년 4월 8일","excerpt":"\\n"}');export{es as comp,ts as data};
