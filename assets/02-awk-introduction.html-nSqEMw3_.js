import{_ as b}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,a as e,t as g,b as i,w as n,n as k,g as f,d as s,e as r,r as d,o as x}from"./app-U_bew1in.js";const w={},_={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},A={class:"table-of-contents"},E=e("hr",null,null,-1),T=r('<hr><p>This chapter will give an overview of awk syntax and some examples to show what kind of problems you could solve using awk. These features will be covered in depth in later, but you shouldn&#39;t skip this chapter.</p><hr><h2 id="filtering" tabindex="-1"><a class="header-anchor" href="#filtering"><span>Filtering</span></a></h2><p><code>awk</code> provides filtering capabilities like those supported by the <code>grep</code> and <code>sed</code> commands. As a programming language, there are additional nifty features as well. Similar to many command line utilities, <code>awk</code> can accept input from both stdin and files.</p>',5),I=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token builtin class-name"},"printf"),s(),e("span",{class:"token string"},"'gate\\napple\\nwhat\\nkite\\n'")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# gate")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# apple")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# what")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# kite")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),q=e("blockquote",null,[e("p",null,[s("same as: "),e("code",null,"grep 'at'"),s(" and "),e("code",null,"sed -n '/at/p'")])],-1),N=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token builtin class-name"},"printf"),s(),e("span",{class:"token string"},"'gate\\napple\\nwhat\\nkite\\n'"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'/at/'")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# gate")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# what")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),j=e("blockquote",null,[e("p",null,[s("same as: "),e("code",null,"grep -v 'e'"),s(" and "),e("code",null,"sed -n '/e/!p'")])],-1),B=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token builtin class-name"},"printf"),s(),e("span",{class:"token string"},"'gate\\napple\\nwhat\\nkite\\n'"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'!/e/'")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# what")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),F=e("p",null,[s("By default, "),e("code",null,"awk"),s(" automatically loops over the input content line by line. You can then use programming instructions to process those lines. As "),e("code",null,"awk"),s(" is often used from the command line, many shortcuts are available to reduce the amount of typing needed.")],-1),$=e("code",null,"string ~ /regexp/",-1),S=e("code",null,"string !~ /regexp/",-1),G=r("<p>Also, in the above examples, only the filtering condition was given. By default, when the condition evaluates to <code>true</code>, the contents of <code>$0</code> is printed. Thus:</p><ul><li><code>awk &#39;/regexp/&#39;</code> is a shortcut for <code>awk &#39;$0 ~ /regexp/{print $0}&#39;</code></li><li><code>awk &#39;!/regexp/&#39;</code> is a shortcut for <code>awk &#39;$0 !~ /regexp/{print $0}&#39;</code></li></ul>",2),Q=e("blockquote",null,[e("p",null,[s("same as: "),e("code",null,"awk '/at/'")])],-1),C=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token builtin class-name"},"printf"),s(),e("span",{class:"token string"},"'gate\\napple\\nwhat\\nkite\\n'"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'$0 ~ /at/{print $0}'")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# gate")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# what")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),H=e("blockquote",null,[e("p",null,[s("same as: "),e("code",null,"awk '!/e/'")])],-1),Y=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token builtin class-name"},"printf"),s(),e("span",{class:"token string"},"'gate\\napple\\nwhat\\nkite\\n'"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'$0 !~ /e/{print $0}'")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# what")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),P=r(`<p>In the above examples, <code>{}</code> is used to specify a block of code to be executed when the condition that precedes the block evaluates to <code>true</code>. One or more statements can be given separated by the <code>;</code> character. You&#39;ll see such examples and learn more about <code>awk</code> syntax later.</p><hr><h2 id="idiomatic-use-of-1" tabindex="-1"><a class="header-anchor" href="#idiomatic-use-of-1"><span>Idiomatic use of 1</span></a></h2><p>In a conditional expression, non-zero numeric values and non-empty string values are evaluated as true. Idiomatically, 1 is used to denote a true condition in one-liners as a shortcut to print the contents of $0.</p><blockquote><p>same as: <code>printf &#39;gate\\napple\\nwhat\\nkite\\n&#39; | cat</code></p><p>same as: <code>awk &#39;{print $0}&#39;</code></p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">printf</span> <span class="token string">&#39;gate\\napple\\nwhat\\nkite\\n&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;1&#39;</span></span>
<span class="line"><span class="token comment"># gate</span></span>
<span class="line"><span class="token comment"># apple</span></span>
<span class="line"><span class="token comment"># what</span></span>
<span class="line"><span class="token comment"># kite</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="substitution" tabindex="-1"><a class="header-anchor" href="#substitution"><span>Substitution</span></a></h2><p><code>awk</code> has three functions to cover search and replace requirements. Two of them are shown below. The sub function replaces only the first match, whereas the gsub function replaces all the matching occurrences. By default, these functions operate on $0 when the input string isn&#39;t provided. Both sub and gsub modifies the input source on successful substitution.</p>`,9),R=e("blockquote",null,[e("p",null,[s("same as: "),e("code",null,"sed 's/:/-/'")])],-1),W=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token builtin class-name"},"printf"),s(),e("span",{class:"token string"},"'1:2:3:4\\na:b:c:d\\n'"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'{sub(/:/, "-")} 1'`)]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 1-2:3:4")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# a-b:c:d")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),z=e("blockquote",null,[e("p",null,[s("same as: "),e("code",null,"sed 's/:/-/g'")])],-1),L=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token builtin class-name"},"printf"),s(),e("span",{class:"token string"},"'1:2:3:4\\na:b:c:d\\n'"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'{gsub(/:/, "-")} 1'`)]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 1-2-3-4")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# a-b-c-d")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),V=r('<p>The first argument to the <code>sub</code> and <code>gsub</code> functions is the regexp to be matched against the input content. The second argument is the replacement string. String literals are specified within double quotes. In the above examples, <code>sub</code> and <code>gsub</code> are used inside a block as they aren&#39;t intended to be used as a conditional expression. The <code>1</code> after the block is treated as a conditional expression as it is used outside a block. You can also use the variations presented below to get the same results:</p><ul><li><code>awk &#39;{sub(/:/, &quot;-&quot;)} 1&#39;</code> is same as <code>awk &#39;{sub(/:/, &quot;-&quot;); print $0}&#39;</code></li><li>You can also just use <code>print</code> instead of <code>print $0</code> as <code>$0</code> is the default string</li></ul><div class="hint-container info"><p class="hint-container-title">Info</p><p>You might wonder why to use or learn <code>grep</code> and <code>sed</code> when you can achieve the same results with <code>awk</code>. It depends on the problem you are trying to solve. A simple line filtering will be faster with <code>grep</code> compared to <code>sed</code> or <code>awk</code> because grep is optimized for such cases. Similarly, sed will be faster than <code>awk</code> for substitution cases. Also, not all features easily translate among these tools. For example, <code>grep -o</code> requires lot more steps to code with <code>sed</code> or <code>awk</code>. Only <code>grep</code> offers recursive search. And so on. See also <a href="https://unix.stackexchange.com/q/303044/109046" target="_blank" rel="noopener noreferrer">unix.stackexchange: When to use <code>grep</code>, <code>sed</code>, <code>awk</code>, <code>perl</code>, etc</a>.</p></div><hr><h2 id="field-processing" tabindex="-1"><a class="header-anchor" href="#field-processing"><span>Field processing</span></a></h2><p>As mentioned before, <code>awk</code> is primarily used for field based processing. Consider the sample input file shown below with fields separated by a single space character.</p>',6),D={class:"hint-container info"},O=e("p",{class:"hint-container-title"},"Info",-1),U={href:"https://github.com/learnbyexample/learn_gnuawk/tree/master/example_files",target:"_blank",rel:"noopener noreferrer"},K=r(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> table.txt</span>
<span class="line"><span class="token comment"># brown bread mat hair 42</span></span>
<span class="line"><span class="token comment"># blue cake mug shirt -7</span></span>
<span class="line"><span class="token comment"># yellow banana window shoes 3.14</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here are some examples that are based on a specific field rather than the entire line. By default, <code>awk</code> splits the input line based on spaces and the field contents can be accessed using <code>$N</code> where <code>N</code> is the field number required. A special variable <code>NF</code> is updated with the total number of fields for each input line. There are many more details and nuances to cover regarding the default field splitting, but for now this is enough to proceed.</p>`,2),J=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'{print $2}'"),s(" table.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# bread")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# cake")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# banana")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Z=e("blockquote",null,[e("p",null,[s("recall that the default action is to print the contents of "),e("code",null,"$0")])],-1),X=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'$NF<0'"),s(" table.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# blue cake mug shirt -7")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),M=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'{gsub(/b/, "B", $1)} 1'`),s(" table.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Brown bread mat hair 42")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Blue cake mug shirt -7")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# yellow banana window shoes 3.14")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ee=r(`<hr><h2 id="awk-one-liner-structure" tabindex="-1"><a class="header-anchor" href="#awk-one-liner-structure"><span>awk one-liner structure</span></a></h2><p>The examples in the previous sections have used a few different ways to construct a typical <code>awk</code> one-liner. If you haven&#39;t yet grasped the syntax, this generic structure might help:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">awk</span> <span class="token string">&#39;cond1{action1} cond2{action2} ... condN{actionN}&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>When a condition isn&#39;t provided, the action is always executed. Within a block, you can provide multiple statements separated by the semicolon character. If an action isn&#39;t provided, then by default, contents of <code>$0</code> variable is printed if the condition evaluates to <code>true</code>. When action isn&#39;t present, you can use a semicolon to terminate a condition and start another <code>condX{actionX}</code> snippet.</p><p>Note that multiple blocks are just a syntactical sugar. It helps to avoid explicit use of <code>if</code> control structure for most one-liners. The below snippet shows the same code with and without <code>if</code> structure.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">awk</span> <span class="token string">&#39;{</span>
<span class="line">       if($NF &lt; 0){</span>
<span class="line">          print $0</span>
<span class="line">       }</span>
<span class="line">     }&#39;</span> table.txt</span>
<span class="line"><span class="token comment"># blue cake mug shirt -7</span></span>
<span class="line"></span>
<span class="line"><span class="token function">awk</span> <span class="token string">&#39;$NF&lt;0&#39;</span> table.txt</span>
<span class="line"><span class="token comment"># blue cake mug shirt -7</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can use a <code>BEGIN{}</code> block when you need to execute something before the input is read and an <code>END{}</code> block to execute something after all of the input has been processed.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">seq</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;BEGIN{print &quot;---&quot;} 1; END{print &quot;%%%&quot;}&#39;</span></span>
<span class="line"><span class="token comment"># ---</span></span>
<span class="line"><span class="token comment"># 1</span></span>
<span class="line"><span class="token comment"># 2</span></span>
<span class="line"><span class="token comment"># %%%</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are some more types of blocks that can be used, you&#39;ll see them in coming chapters. See <a href="https://www.gnu.org/software/gawk/manual/gawk.html#All-Operators" target="_blank" rel="noopener noreferrer">gawk manual: Operators</a> for details about operators and <a href="https://www.gnu.org/software/gawk/manual/gawk.html#Truth-Values-and-Conditions" target="_blank" rel="noopener noreferrer">gawk manual: Truth Values and Conditions</a> for conditional expressions.</p><hr><h2 id="strings-and-numbers" tabindex="-1"><a class="header-anchor" href="#strings-and-numbers"><span>Strings and Numbers</span></a></h2><p>Some examples so far have already used string and numeric literals. As mentioned earlier, <code>awk</code> tries to provide a concise way to construct a solution from the command line. The data type of a value is determined based on the syntax used. String literals are represented inside double quotes. Numbers can be integers or floating-point. Scientific notation is allowed as well. See <a href="https://www.gnu.org/software/gawk/manual/gawk.html#Constants" target="_blank" rel="noopener noreferrer">gawk manual: Constant Expressions</a> for more details.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># BEGIN{} is also useful to write an awk program without any external input</span></span>
<span class="line"><span class="token function">awk</span> <span class="token string">&#39;BEGIN{print &quot;hi&quot;}&#39;</span></span>
<span class="line"><span class="token comment"># hi</span></span>
<span class="line"></span>
<span class="line"><span class="token function">awk</span> <span class="token string">&#39;BEGIN{print 42}&#39;</span></span>
<span class="line"><span class="token comment"># 42</span></span>
<span class="line"></span>
<span class="line"><span class="token function">awk</span> <span class="token string">&#39;BEGIN{print 3.14}&#39;</span></span>
<span class="line"><span class="token comment"># 3.14</span></span>
<span class="line"></span>
<span class="line"><span class="token function">awk</span> <span class="token string">&#39;BEGIN{print 34.23e4}&#39;</span></span>
<span class="line"><span class="token comment"># 342300</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also save these literals in variables for later use. Some variables are predefined, <code>NF</code> for example.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">awk</span> <span class="token string">&#39;BEGIN{a=5; b=2.5; print a+b}&#39;</span></span>
<span class="line"><span class="token comment"># 7.5</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># strings placed next to each other are concatenated</span></span>
<span class="line"><span class="token function">awk</span> <span class="token string">&#39;BEGIN{s1=&quot;con&quot;; s2=&quot;cat&quot;; print s1 s2}&#39;</span></span>
<span class="line"><span class="token comment"># concat</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If an uninitialized variable is used, it will act as an empty string in string context and <code>0</code> in numeric context. You can force a string to behave as a number by simply using it in an expression with numeric values. You can also use unary <code>+</code> or <code>-</code> operators. If the string doesn&#39;t start with a valid number (ignoring any starting whitespaces), it will be treated as <code>0</code>. Similarly, concatenating a string to a number will automatically change the number to string. See <a href="https://www.gnu.org/software/gawk/manual/gawk.html#Strings-And-Numbers" target="_blank" rel="noopener noreferrer">gawk manual: How awk Converts Between Strings and Numbers</a> for more details.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># same as: \`awk &#39;BEGIN{sum=0} {sum += $NF} END{print sum}&#39;\`</span></span>
<span class="line"><span class="token function">awk</span> <span class="token string">&#39;{sum += $NF} END{print sum}&#39;</span> table.txt</span>
<span class="line"><span class="token comment"># 38.14</span></span>
<span class="line"></span>
<span class="line"><span class="token function">awk</span> <span class="token string">&#39;BEGIN{n1=&quot;5.0&quot;; n2=5; if(n1==n2) print &quot;equal&quot;}&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">awk</span> <span class="token string">&#39;BEGIN{n1=&quot;5.0&quot;; n2=5; if(+n1==n2) print &quot;equal&quot;}&#39;</span></span>
<span class="line"><span class="token comment"># equal</span></span>
<span class="line"></span>
<span class="line"><span class="token function">awk</span> <span class="token string">&#39;BEGIN{n1=&quot;5.0&quot;; n2=5; if(n1==n2&quot;.0&quot;) print &quot;equal&quot;}&#39;</span></span>
<span class="line"><span class="token comment"># equal</span></span>
<span class="line"></span>
<span class="line"><span class="token function">awk</span> <span class="token string">&#39;BEGIN{print 5 + &quot;abc 2 xyz&quot;}&#39;</span></span>
<span class="line"><span class="token comment"># 5</span></span>
<span class="line"></span>
<span class="line"><span class="token function">awk</span> <span class="token string">&#39;BEGIN{print 5 + &quot; \\t 2 xyz&quot;}&#39;</span></span>
<span class="line"><span class="token comment"># 7</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="arrays" tabindex="-1"><a class="header-anchor" href="#arrays"><span>Arrays</span></a></h2><p>Arrays in <code>awk</code> are associative, meaning they are key-value pairs. The keys can be numbers or strings, but numbers get converted to strings internally. They can be multi-dimensional as well. There will be plenty of array examples in later chapters in relevant context. See <a href="https://www.gnu.org/software/gawk/manual/gawk.html#Arrays" target="_blank" rel="noopener noreferrer">gawk manual: Arrays</a> for complete details and gotchas.</p>`,20),se=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'BEGIN{student["id"] = 101; student["name"] = "Joe";`),s(`
`),e("span",{class:"line"},`       print student["name"]}'`)]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Joe")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ne=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'BEGIN{student["id"] = 101; student["name"] = "Joe";`),s(`
`),e("span",{class:"line"},`       if("id" in student) print "Key found"}'`)]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Key found")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ae=r('<hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>In my early days of getting used to the Linux command line, I was intimidated by <code>sed</code> and <code>awk</code> examples and didn&#39;t even try to learn them. Hopefully, this gentler introduction works for you and the various syntactical magic has been explained adequately. Try to experiment with the given examples, for example change field numbers to something other than the number used. Be curious, like what happens if a field number is negative or a floating-point number. Read the manual. Practice a lot. And so on.</p><p>The next chapter is dedicated solely for regular expressions. The features introduced in this chapter would be used in the examples, so make sure you are comfortable with <code>awk</code> syntax before proceeding. Solving the exercises to follow will help test your understanding.</p><hr><h2 id="interactive-exercises" tabindex="-1"><a class="header-anchor" href="#interactive-exercises"><span>Interactive exercises</span></a></h2>',6),te={href:"https://github.com/learnbyexample/TUI-apps/tree/main/AwkExercises",target:"_blank",rel:"noopener noreferrer"},ie={href:"https://github.com/learnbyexample/TUI-apps/blob/main/AwkExercises/app_guide.md",target:"_blank",rel:"noopener noreferrer"},le=e("p",null,"Here's a sample screenshot:",-1),ce=e("figure",null,[e("img",{src:"https://learnbyexample.github.io/learn_gnuawk/images/awk_exercises.png",alt:"AwkExercises example",tabindex:"0",loading:"lazy"}),e("figcaption",null,"AwkExercises example")],-1),oe=e("h2",{id:"exercises",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#exercises"},[e("span",null,"Exercises")])],-1),re={class:"hint-container info"},de=e("p",{class:"hint-container-title"},"Info",-1),ue={href:"https://github.com/learnbyexample/learn_gnuawk/blob/master/exercises/Exercises.md",target:"_blank",rel:"noopener noreferrer"},pe={href:"https://github.com/learnbyexample/learn_gnuawk/blob/master/exercises/Exercise_solutions.md",target:"_blank",rel:"noopener noreferrer"},me=e("p",null,"The exercises directory has all the files used in this section.",-1),he=r(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> addr.txt</span>
<span class="line"><span class="token comment"># Hello World</span></span>
<span class="line"><span class="token comment"># How are you</span></span>
<span class="line"><span class="token comment"># This game is good</span></span>
<span class="line"><span class="token comment"># Today is sunny</span></span>
<span class="line"><span class="token comment"># 12345</span></span>
<span class="line"><span class="token comment"># You are funny</span></span>
<span class="line"></span>
<span class="line"><span class="token function">cat</span> table.txt</span>
<span class="line"><span class="token comment"># brown bread mat hair 42</span></span>
<span class="line"><span class="token comment"># blue cake mug shirt -7</span></span>
<span class="line"><span class="token comment"># yellow banana window shoes 3.14</span></span>
<span class="line"></span>
<span class="line"><span class="token function">cat</span> hex.txt</span>
<span class="line"><span class="token comment"># start address: 0xA0, func1 address: 0xA0</span></span>
<span class="line"><span class="token comment"># end address: 0xFF, func2 address: 0xB0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="exercise-1" tabindex="-1"><a class="header-anchor" href="#exercise-1"><span>Exercise 1</span></a></h3><p>For the input file <code>addr.txt</code>, display all lines containing <code>is</code>.</p>`,3),be=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token comment"},"#### add your solution here ####")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# This game is good")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Today is sunny")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ve=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'/is/'"),s(" addr.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# This game is good")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Today is sunn")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ge=e("h3",{id:"exercise-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#exercise-2"},[e("span",null,"Exercise 2")])],-1),ke=e("code",null,"addr.txt",-1),fe=e("code",null,"y",-1),xe=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token comment"},"##### add your solution here ####")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Hello")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# This")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 12345")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),we=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'!/y/{print $1}'"),s(" addr.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Hello")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# This")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 12345")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),_e=e("h3",{id:"exercise-3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#exercise-3"},[e("span",null,"Exercise 3")])],-1),ye=e("code",null,"addr.txt",-1),Ae=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token comment"},"##### add your solution here")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Hello World")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 12345")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Ee=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'NF<3'"),s(" addr.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Hello World")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 12345")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Te=e("h3",{id:"exercise-4",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#exercise-4"},[e("span",null,"Exercise 4")])],-1),Ie=e("code",null,"addr.txt",-1),qe=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token comment"},"##### add your solution here")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Today is sunny")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Ne=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'$2 ~ /is/'"),s(" addr.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Today is sunny")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),je=e("h3",{id:"exercise-5",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#exercise-5"},[e("span",null,"Exercise 5")])],-1),Be=e("code",null,"addr.txt",-1),Fe=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token comment"},"##### add your solution here")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Hell0 World")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# H0w are you")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# This game is g0od")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# T0day is sunny")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 12345")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Y0u are funny")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),$e=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'{sub(/o/, "0")} 1'`),s(" addr.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Hell0 World")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# H0w are you")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# This game is g0od")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# T0day is sunny")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 12345")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Y0u are funny")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Se=e("h3",{id:"exercise-6",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#exercise-6"},[e("span",null,"Exercise 6")])],-1),Ge=e("code",null,"table.txt",-1),Qe=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token comment"},"##### add your solution here")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# -923.16")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Ce=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'BEGIN{p = 1} {p *= $NF} END{print p}'"),s(" table.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# -923.16")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),He=e("h3",{id:"exercise-7",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#exercise-7"},[e("span",null,"Exercise 7")])],-1),Ye=e("p",null,[s("Append "),e("code",null,"."),s(" to all the input lines for the given stdin data.")],-1),Pe=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token builtin class-name"},"printf"),s(),e("span",{class:"token string"},"'last\\nappend\\nstop\\ntail\\n'"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token comment"},"##### add your solution here")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# last.")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# append.")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# stop.")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# tail.")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Re=e("blockquote",null,[e("p",null,[s("can also use: "),e("code",null,`awk '{$0 = $0 "."} 1'`)])],-1),We=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token builtin class-name"},"printf"),s(),e("span",{class:"token string"},"'last\\nappend\\nstop\\ntail\\n'"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'{print $0 "."}'`)]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# last.")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# append.")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# stop.")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# tail.")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ze=e("h3",{id:"exercise-8",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#exercise-8"},[e("span",null,"Exercise 8")])],-1),Le=e("code",null,"0xA0",-1),Ve=e("code",null,"0x50",-1),De=e("code",null,"0xFF",-1),Oe=e("code",null,"0x7F",-1),Ue=e("code",null,"hex.txt",-1),Ke=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token comment"},"##### add your solution here")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# start address: 0x50, func1 address: 0x50")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# end address: 0x7F, func2 address: 0xB0")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Je=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'{gsub(/0xA0/, "0x50"); gsub(/0xFF/, "0x7F")} 1'`),s(" hex.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# start address: 0x50, func1 address: 0x50")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# end address: 0x7F, func2 address: 0xB0")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Ze=e("hr",null,null,-1);function Xe(p,Me){const l=d("router-link"),m=d("VPCard"),c=d("Tabs"),u=d("RouteLink"),o=d("FontIcon"),h=d("TagLinks");return x(),v("div",null,[e("h1",_,[e("a",y,[e("span",null,g(p.$frontmatter.title)+" 관련",1)])]),e("nav",A,[e("ul",null,[e("li",null,[i(l,{to:"#filtering"},{default:n(()=>[s("Filtering")]),_:1})]),e("li",null,[i(l,{to:"#idiomatic-use-of-1"},{default:n(()=>[s("Idiomatic use of 1")]),_:1})]),e("li",null,[i(l,{to:"#substitution"},{default:n(()=>[s("Substitution")]),_:1})]),e("li",null,[i(l,{to:"#field-processing"},{default:n(()=>[s("Field processing")]),_:1})]),e("li",null,[i(l,{to:"#awk-one-liner-structure"},{default:n(()=>[s("awk one-liner structure")]),_:1})]),e("li",null,[i(l,{to:"#strings-and-numbers"},{default:n(()=>[s("Strings and Numbers")]),_:1})]),e("li",null,[i(l,{to:"#arrays"},{default:n(()=>[s("Arrays")]),_:1})]),e("li",null,[i(l,{to:"#summary"},{default:n(()=>[s("Summary")]),_:1})]),e("li",null,[i(l,{to:"#interactive-exercises"},{default:n(()=>[s("Interactive exercises")]),_:1})]),e("li",null,[i(l,{to:"#exercises"},{default:n(()=>[s("Exercises")]),_:1}),e("ul",null,[e("li",null,[i(l,{to:"#exercise-1"},{default:n(()=>[s("Exercise 1")]),_:1})]),e("li",null,[i(l,{to:"#exercise-2"},{default:n(()=>[s("Exercise 2")]),_:1})]),e("li",null,[i(l,{to:"#exercise-3"},{default:n(()=>[s("Exercise 3")]),_:1})]),e("li",null,[i(l,{to:"#exercise-4"},{default:n(()=>[s("Exercise 4")]),_:1})]),e("li",null,[i(l,{to:"#exercise-5"},{default:n(()=>[s("Exercise 5")]),_:1})]),e("li",null,[i(l,{to:"#exercise-6"},{default:n(()=>[s("Exercise 6")]),_:1})]),e("li",null,[i(l,{to:"#exercise-7"},{default:n(()=>[s("Exercise 7")]),_:1})]),e("li",null,[i(l,{to:"#exercise-8"},{default:n(()=>[s("Exercise 8")]),_:1})])])])])]),E,i(m,k(f({title:"2. awk Introduction",desc:"CLI Text Processing with GNU awk",link:"https://learnbyexample.github.io/learn_gnuawk/awk-introduction.html",logo:"https://learnbyexample.github.io/favicon.svg",background:"rgba(22,25,35,0.2)"})),null,16),T,i(c,{id:"19",data:[{id:"sample stdin data"},{id:"filter lines containing 'at'"},{id:"filter lines NOT containing 'e'"}],active:0},{title0:n(({value:a,isActive:t})=>[s("sample stdin data")]),title1:n(({value:a,isActive:t})=>[s("filter lines containing 'at'")]),title2:n(({value:a,isActive:t})=>[s("filter lines NOT containing 'e'")]),tab0:n(({value:a,isActive:t})=>[I]),tab1:n(({value:a,isActive:t})=>[q,N]),tab2:n(({value:a,isActive:t})=>[j,B]),_:1}),F,e("p",null,[s("In the above examples, a regular expression (defined by the pattern between a pair of forward slashes) has been used to filter the input. Regular expressions (regexp) will be covered in detail in the "),i(u,{to:"/cli/text-processing-w-gnu-awk/03-regular-expressions.html"},{default:n(()=>[s("next chapter")]),_:1}),s(". String values without any special regexp characters are used in this chapter. The full syntax is "),$,s(" to check if the given string matches the regexp and "),S,s(" to check if doesn't match. When the string isn't specified, the test is performed against a special variable $0, which has the contents of the input line. The correct term would be input record, but that's a discussion for a "),i(u,{to:"/cli/text-processing-w-gnu-awk/05-record-separators.html"},{default:n(()=>[s("later chapter")]),_:1}),s(".")]),G,i(c,{id:"61",data:[{id:"Example 1"},{id:"Example 2"}]},{title0:n(({value:a,isActive:t})=>[s("Example 1")]),title1:n(({value:a,isActive:t})=>[s("Example 2")]),tab0:n(({value:a,isActive:t})=>[Q,C]),tab1:n(({value:a,isActive:t})=>[H,Y]),_:1}),P,i(c,{id:"105",data:[{id:"for each input line, change only the first ':' to '-'"},{id:"for each input line, change all ':' to '-'"}],active:0},{title0:n(({value:a,isActive:t})=>[s("for each input line, change only the first ':' to '-'")]),title1:n(({value:a,isActive:t})=>[s("for each input line, change all ':' to '-'")]),tab0:n(({value:a,isActive:t})=>[R,W]),tab1:n(({value:a,isActive:t})=>[z,L]),_:1}),V,e("div",D,[O,e("p",null,[s("The "),e("a",U,[i(o,{icon:"iconfont icon-github"}),s(" example_files")]),s(" directory has all the files used in the examples.")])]),K,i(c,{id:"159",data:[{id:"print the second field of each input line"},{id:"print lines only if the last field is a negative number"},{id:"change 'b' to 'B' only for the first field"}],active:0},{title0:n(({value:a,isActive:t})=>[s("print the second field of each input line")]),title1:n(({value:a,isActive:t})=>[s("print lines only if the last field is a negative number")]),title2:n(({value:a,isActive:t})=>[s("change 'b' to 'B' only for the first field")]),tab0:n(({value:a,isActive:t})=>[J]),tab1:n(({value:a,isActive:t})=>[Z,X]),tab2:n(({value:a,isActive:t})=>[M]),_:1}),ee,i(c,{id:"219",data:[{id:"assigning an array and accessing an element based on string keys"},{id:"checking if a key exists"}],active:0},{title0:n(({value:a,isActive:t})=>[s("assigning an array and accessing an element based on string keys")]),title1:n(({value:a,isActive:t})=>[s("checking if a key exists")]),tab0:n(({value:a,isActive:t})=>[se]),tab1:n(({value:a,isActive:t})=>[ne]),_:1}),ae,e("p",null,[s("I wrote a TUI app to help you solve some of the exercises from this book interactively. See "),e("a",te,[i(o,{icon:"iconfont icon-github"}),s(" AwkExercises")]),s(" repo for installation steps and "),e("a",ie,[i(o,{icon:"fas fa-file-lines"}),s(" app_guide.md")]),s(" for instructions on using this app.")]),le,ce,oe,e("div",re,[de,e("p",null,[s("All the exercises are also collated together in one place at "),e("a",ue,[i(o,{icon:"fas fa-file-lines"}),s(" Exercises.md")]),s(". For solutions, see "),e("a",pe,[i(o,{icon:"fas fa-file-lines"}),s(" Exercise_solutions.md")]),s(".")]),me]),he,i(c,{id:"268",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[s("Question")]),title1:n(({value:a,isActive:t})=>[s("Answer")]),tab0:n(({value:a,isActive:t})=>[be]),tab1:n(({value:a,isActive:t})=>[ve]),_:1}),ge,e("p",null,[s("For the input file "),i(o,{icon:"fas fa-file-lines"}),s(),ke,s(", display the first field of lines not containing "),fe,s(". Consider space as the field separator for this file.")]),i(c,{id:"282",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[s("Question")]),title1:n(({value:a,isActive:t})=>[s("Answer")]),tab0:n(({value:a,isActive:t})=>[xe]),tab1:n(({value:a,isActive:t})=>[we]),_:1}),_e,e("p",null,[s("For the input file "),i(o,{icon:"fas fa-file-lines"}),s(),ye,s(", display all lines containing no more than 2 fields.")]),i(c,{id:"296",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[s("Question")]),title1:n(({value:a,isActive:t})=>[s("Answer")]),tab0:n(({value:a,isActive:t})=>[Ae]),tab1:n(({value:a,isActive:t})=>[Ee]),_:1}),Te,e("p",null,[s("For the input file "),i(o,{icon:"fas fa-file-lines"}),s(),Ie,s(", display all lines containing is in the second field.")]),i(c,{id:"310",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[s("Question")]),title1:n(({value:a,isActive:t})=>[s("Answer")]),tab0:n(({value:a,isActive:t})=>[qe]),tab1:n(({value:a,isActive:t})=>[Ne]),_:1}),je,e("p",null,[s("For each line of the input file "),i(o,{icon:"fas fa-file-lines"}),s(),Be,s(", replace the first occurrence of o with 0.")]),i(c,{id:"324",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[s("Question")]),title1:n(({value:a,isActive:t})=>[s("Answer")]),tab0:n(({value:a,isActive:t})=>[Fe]),tab1:n(({value:a,isActive:t})=>[$e]),_:1}),Se,e("p",null,[s("For the input file "),i(o,{icon:"fas fa-file-lines"}),s(),Ge,s(", calculate and display the product of numbers in the last field of each line. Consider space as the field separator for this file.")]),i(c,{id:"338",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[s("Question")]),title1:n(({value:a,isActive:t})=>[s("Answer")]),tab0:n(({value:a,isActive:t})=>[Qe]),tab1:n(({value:a,isActive:t})=>[Ce]),_:1}),He,Ye,i(c,{id:"352",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[s("Question")]),title1:n(({value:a,isActive:t})=>[s("Answer")]),tab0:n(({value:a,isActive:t})=>[Pe]),tab1:n(({value:a,isActive:t})=>[Re,We]),_:1}),ze,e("p",null,[s("Replace all occurrences of "),Le,s(" with "),Ve,s(" and "),De,s(" with "),Oe,s(" for the given input file ("),i(o,{icon:"fas fa-file-lines"}),s(),Ue,s(").")]),i(c,{id:"371",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[s("Question")]),title1:n(({value:a,isActive:t})=>[s("Answer")]),tab0:n(({value:a,isActive:t})=>[Ke]),tab1:n(({value:a,isActive:t})=>[Je]),_:1}),Ze,i(h)])}const ns=b(w,[["render",Xe],["__file","02-awk-introduction.html.vue"]]),as=JSON.parse('{"path":"/cli/text-processing-w-gnu-awk/02-awk-introduction.html","title":"2. awk Introduction","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"2. awk Introduction","description":"Text Processing with GNU awk > 2. awk Introduction","category":["CLI","Linux"],"tags":["crashcourse","cli","sh","shell","gnu","linux","awk"],"head":[[{"meta":null},{"property":"og:title","content":"Text Processing with GNU awk > 2. awk Introduction"},{"property":"og:description","content":"2. awk Introduction"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/cli/text-processing-w-gnu-awk/02-awk-introduction.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/cli/text-processing-w-gnu-awk/02-awk-introduction.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"2. awk Introduction"}],["meta",{"property":"og:description","content":"Text Processing with GNU awk > 2. awk Introduction"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://learnbyexample.github.io/learn_gnuawk/images/awk_exercises.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-04-24T07:16:44.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"cli"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:tag","content":"shell"}],["meta",{"property":"article:tag","content":"gnu"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:tag","content":"awk"}],["meta",{"property":"article:modified_time","content":"2024-04-24T07:16:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2. awk Introduction\\",\\"image\\":[\\"https://learnbyexample.github.io/learn_gnuawk/images/awk_exercises.png\\"],\\"dateModified\\":\\"2024-04-24T07:16:44.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Filtering","slug":"filtering","link":"#filtering","children":[]},{"level":2,"title":"Idiomatic use of 1","slug":"idiomatic-use-of-1","link":"#idiomatic-use-of-1","children":[]},{"level":2,"title":"Substitution","slug":"substitution","link":"#substitution","children":[]},{"level":2,"title":"Field processing","slug":"field-processing","link":"#field-processing","children":[]},{"level":2,"title":"awk one-liner structure","slug":"awk-one-liner-structure","link":"#awk-one-liner-structure","children":[]},{"level":2,"title":"Strings and Numbers","slug":"strings-and-numbers","link":"#strings-and-numbers","children":[]},{"level":2,"title":"Arrays","slug":"arrays","link":"#arrays","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]},{"level":2,"title":"Interactive exercises","slug":"interactive-exercises","link":"#interactive-exercises","children":[]},{"level":2,"title":"Exercises","slug":"exercises","link":"#exercises","children":[{"level":3,"title":"Exercise 1","slug":"exercise-1","link":"#exercise-1","children":[]},{"level":3,"title":"Exercise 2","slug":"exercise-2","link":"#exercise-2","children":[]},{"level":3,"title":"Exercise 3","slug":"exercise-3","link":"#exercise-3","children":[]},{"level":3,"title":"Exercise 4","slug":"exercise-4","link":"#exercise-4","children":[]},{"level":3,"title":"Exercise 5","slug":"exercise-5","link":"#exercise-5","children":[]},{"level":3,"title":"Exercise 6","slug":"exercise-6","link":"#exercise-6","children":[]},{"level":3,"title":"Exercise 7","slug":"exercise-7","link":"#exercise-7","children":[]},{"level":3,"title":"Exercise 8","slug":"exercise-8","link":"#exercise-8","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1713943004000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":6}]},"readingTime":{"minutes":8.84,"words":2651},"filePathRelative":"cli/text-processing-w-gnu-awk/02-awk-introduction.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{ns as comp,as as data};
