import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as w,a as e,t as f,b as a,w as c,n as l,g as r,d as t,e as s,r as n,o as m}from"./app-U_bew1in.js";const y={},k={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},b={class:"table-of-contents"},v=e("hr",null,null,-1),_=s('<h2 id="project-12-part-two" tabindex="-1"><a class="header-anchor" href="#project-12-part-two"><span>Project 12, part two</span></a></h2><p>Alan Perlis once said “fools ignore complexity; pragmatists suffer it; some can avoid it; geniuses remove it.” Today you’re going to see that in Swift code: rather than try to simplify the code for <code>NSCoding</code>, the Swift team found a way to <em>remove it entirely</em> using the <code>Codable</code> protocol.</p><p>Sometimes you won’t have a choice and need to use <code>NSCoding</code>, but where possible <code>Codable</code> is both easier and safer to use. You <em>do</em> need to know them both, though, and by seeing them both used to solve the same problem hopefully you’ll able to decide for yourself which you prefer.</p><p>Before you get down to work, here’s another fun Swift in-joke for you: sometimes you might see T-shirts with a picture of a fish followed by “able”, but before you scratch your head wondering what “fishable” might mean please remember that “COD” is a type of fish!</p><p><strong>Today you should work through the <code>Codable</code> chapter and wrap up for project 12, complete its review, then work through all three of its challenges.</strong></p><h3 id="fixing-project-10-codable" tabindex="-1"><a class="header-anchor" href="#fixing-project-10-codable"><span>Fixing Project 10: <code>Codable</code></span></a></h3>',6),j={class:"hint-container details"},S=e("summary",null,"Fixing Project 10: Codable",-1),C=s(`<p><code>NSCoding</code> is a great way to read and write data when using <code>UserDefaults</code>, and is the most common option when you must write Swift code that lives alongside Objective-C code.</p><p>However, if you’re <em>only</em> writing Swift, the <code>Codable</code> protocol is much easier. We already used it to load petition JSON back in project 7, but now we’ll be loading <em>and</em> saving JSON.</p><p>There are three primary differences between the two solutions:</p><ol><li>The <code>Codable</code> system works on both classes and structs. We made <code>Person</code> a class because <code>NSCoding</code> only works with classes, but if you didn’t care about Objective-C compatibility you could make it a struct and use <code>Codable</code> instead.</li><li>When we implemented <code>NSCoding</code> in the previous chapter we had to write <code>encode()</code> and <code>init()</code> calls ourself. With <code>Codable</code> this isn’t needed unless you need more precise control - it does the work for you.</li><li>When you encode data using <code>Codable</code> you can save to the same format that <code>NSCoding</code> uses if you want, but a much more pleasant option is JSON – <code>Codable</code> reads and writes JSON natively.</li></ol><p>All three of those combined means that you can define a struct to hold data, and have Swift create instances of that struct directly from JSON with no extra work from you.</p><p>Anyway, to demonstrate more of <code>Codable</code> in action I’d like you to close project12a and open project12b – this should be identical to project 10, because it doesn’t contain any of the <code>NSCoding</code> changes.</p><p>First, let’s modify the <code>Person</code> class so that it conforms to <code>Codable</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span> <span class="token class-name">NSObject</span><span class="token punctuation">,</span> <span class="token class-name">Codable</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,8),D=e("code",null,"Codable",-1),x=e("code",null,"ViewController.swift",-1),P=s("<p>As with <code>NSCoding</code> we’re going to create a single <code>save()</code> method we can use anywhere that&#39;s needed. This time it’s going to use the <code>JSONEncoder</code> class to convert our <code>people</code> array into a <code>Data</code> object, which can then be saved to <code>UserDefaults</code>. This conversion might fail, so we’re going to use <code>if let</code> and <code>try?</code> so that we save data only when the JSON conversion was successful.</p>",1),N=e("code",null,"ViewController.swift",-1),O=s(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> jsonEncoder <span class="token operator">=</span> <span class="token class-name">JSONEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> savedData <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> jsonEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> defaults <span class="token operator">=</span> <span class="token class-name">UserDefaults</span><span class="token punctuation">.</span>standard</span>
<span class="line">        defaults<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>savedData<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;people&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Failed to save people.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Just like with the <code>NSCoding</code> example you need to modify our collection view&#39;s <code>didSelectItemAt</code> method so that you call <code>self?.save()</code> just after calling <code>self.collectionView.reloadData()</code>. Again, remember that adding <code>self</code> is required because we&#39;re inside a closure. You then need to modify the image picker&#39;s <code>didFinishPickingMediaWithInfo</code> method so that it calls <code>save()</code> just before the end of the method.</p><p>Finally, we need to load the array back from disk when the app runs, so add this code to <code>viewDidLoad()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> defaults <span class="token operator">=</span> <span class="token class-name">UserDefaults</span><span class="token punctuation">.</span>standard</span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> savedPeople <span class="token operator">=</span> defaults<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>forKey<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;people&quot;</span></span><span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">Data</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> jsonDecoder <span class="token operator">=</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">        people <span class="token operator">=</span> <span class="token keyword">try</span> jsonDecoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Person</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> savedPeople<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Failed to load people&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This code is effectively the <code>save()</code> method in reverse: we use the <code>object(forKey:)</code> method to pull out an optional <code>Data</code>, using <code>if let</code> and <code>as?</code> to unwrap it. We then give that to an instance of <code>JSONDecoder</code> to convert it back to an object graph – i.e., our array of <code>Person</code> objects.</p><p>Once again, note the interesting syntax for <code>decode()</code> method: its first parameter is <code>[Person].self</code>, which is Swift’s way of saying “attempt to create an array of <code>Person</code> objects.” This is why we don’t need a typecast when assigning to <code>people</code> – that method will automatically return <code>[People],</code> or if the conversion fails then the <code>catch</code> block will be executed instead.</p>`,6),T=e("h3",{id:"wrap-up",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#wrap-up"},[e("span",null,"Wrap up")])],-1),J={class:"hint-container details"},W=e("summary",null,"Details",-1),F=s('<p>You <em>will</em> use <code>UserDefaults</code> in your projects. That isn&#39;t some sort of command, just a statement of inevitability. If you want to save any user settings, or if you want to save program settings, it&#39;s just the best place for it. And I hope you&#39;ll agree it is (continuing a trend!) easy to use and flexible, particularly when your own classes conform to <code>Codable</code>.</p><p>As you saw, the <code>NSCoding</code> protocol is also available. Yes, it takes extra work to use, and can be quite annoying when your data types have lots of properties you need to save, but it does have the added benefit of Objective-C compatibility if you have a mixed codebase.</p><p>One proviso you ought to be aware of: please don&#39;t consider <code>UserDefaults</code> to be safe, because it isn&#39;t. If you have user information that is private, you should consider writing to the keychain instead – something we&#39;ll look at in project 28.</p><h4 id="review-what-you-learned" tabindex="-1"><a class="header-anchor" href="#review-what-you-learned"><span>Review what you learned</span></a></h4><p>Anyone can sit through a tutorial, but it takes actual work to remember what was taught. It’s my job to make sure you take as much from these tutorials as possible, so I’ve prepared a short review to help you check your learning.</p><p><a href="https://hackingwithswift.com/review/hws/project-12-userdefaults" target="_blank" rel="noopener noreferrer">Click here to review what you learned in project 12.</a></p><h4 id="challenge" tabindex="-1"><a class="header-anchor" href="#challenge"><span>Challenge</span></a></h4><p>One of the best ways to learn is to write your own code as often as possible, so here are three ways you should try your new knowledge to make sure you fully understand what’s going on:</p><ol><li>Modify project 1 so that it remembers how many times each storm image was shown – you don’t need to show it anywhere, but you’re welcome to try modifying your original copy of project 1 to show the view count as a subtitle below each image name in the table view.</li><li>Modify project 2 so that it saves the player’s highest score, and shows a special message if their new score beat the previous high score.</li><li>Modify project 5 so that it saves the current word and all the player’s entries to <code>UserDefaults</code>, then loads them back when the app launches.</li></ol>',9),A=e("div",{class:"hint-container info"},[e("p",{class:"hint-container-title"},"Wrap up - Additional"),e("ul",null,[e("li",null,[e("a",{href:"https://hackingwithswift.com/review/hws/project-12-userdefaults",target:"_blank",rel:"noopener noreferrer"},[t("Review for Project 12: "),e("code",null,"UserDefaults")])])])],-1),V=e("hr",null,null,-1);function q(u,I){const o=n("router-link"),i=n("VPCard"),p=n("VidStack"),d=n("FontIcon");return m(),w("div",null,[e("h1",k,[e("a",g,[e("span",null,f(u.$frontmatter.title)+" 관련",1)])]),e("nav",b,[e("ul",null,[e("li",null,[a(o,{to:"#project-12-part-two"},{default:c(()=>[t("Project 12, part two")]),_:1}),e("ul",null,[e("li",null,[a(o,{to:"#fixing-project-10-codable"},{default:c(()=>[t("Fixing Project 10: Codable")]),_:1})]),e("li",null,[a(o,{to:"#wrap-up"},{default:c(()=>[t("Wrap up")]),_:1})])])])])]),v,a(i,l(r({title:"100 Days of Swift - Day 49",desc:"Project 12, part two",link:"https://www.hackingwithswift.com/100/49",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),_,e("details",j,[S,a(i,l(r({title:"100 Days of Swift - Day 49 - Fixing Project 10: Codable",desc:"Fixing Project 10: Codable",link:"https://hackingwithswift.com/read/12/4/fixing-project-10-codable",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(p,{src:"youtube/Jr6YcWlGHvg"}),C,e("p",null,[t("…and that’s it. Yes, just adding "),D,t(" to the class definition is enough to tell Swift we want to read and write this thing. So, now we can go back to "),a(d,{icon:"fa-brands fa-swift"}),x,t(" and add code to load and save the people array.")]),P,e("p",null,[t("Add this method to "),a(d,{icon:"fa-brands fa-swift"}),N,t(" now:")]),O]),T,e("details",J,[W,a(i,l(r({title:"100 Days of Swift - Day 49 - Wrap up",desc:"Wrap up",link:"https://hackingwithswift.com/read/12/5/wrap-up",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(p,{src:"youtube/7vQJ35_df9U"}),F]),A,V])}const K=h(y,[["render",q],["__file","49.html.vue"]]),Y=JSON.parse('{"path":"/swift/100-days-of-swift/49.html","title":"Day 49","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 49","description":"100 Days of Swift > Day 49","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of Swift > Day 49"},{"property":"og:description","content":"Day 49"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swift/49.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swift/49.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 49"}],["meta",{"property":"og:description","content":"100 Days of Swift > Day 49"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 49\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 12, part two","slug":"project-12-part-two","link":"#project-12-part-two","children":[{"level":3,"title":"Fixing Project 10: Codable","slug":"fixing-project-10-codable","link":"#fixing-project-10-codable","children":[]},{"level":3,"title":"Wrap up","slug":"wrap-up","link":"#wrap-up","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":10}]},"readingTime":{"minutes":4.62,"words":1387},"filePathRelative":"swift/100-days-of-swift/49.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{K as comp,Y as data};
