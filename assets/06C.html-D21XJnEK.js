import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,a as n,t as u,b as a,n as o,g as i,d as s,e as t,r as p,o as k}from"./app-U_bew1in.js";const m={},v={id:"frontmatter-title-관련",tabindex:"-1"},b={class:"header-anchor",href:"#frontmatter-title-관련"},g=n("nav",{class:"table-of-contents"},[n("ul")],-1),h=n("hr",null,null,-1),_=n("code",null,"Vagrantfile",-1),f={href:"https://github.com/pyrasis/jHLsKubernetes/blob/main/Unit06/Vagrantfile",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"pyrasis/jHLsKubernetes",-1),w=n("code",null,"/Unit06/",-1),q=n("code",null,"Vagrantfile",-1),E=n("code",null,"Vagrantfile",-1),O=t(`<div class="language-ruby line-numbers-mode" data-highlighter="prismjs" data-ext="rb" data-title="rb"><pre><code><span class="line">Vagrant<span class="token punctuation">.</span>configure<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;2&quot;</span></span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>config<span class="token operator">|</span></span>
<span class="line">  config<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>boot_timeout <span class="token operator">=</span> <span class="token number">3000</span></span>
<span class="line"></span>
<span class="line">  config<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>define <span class="token string-literal"><span class="token string">&quot;master&quot;</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>master<span class="token operator">|</span></span>
<span class="line">    master<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>box <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;ubuntu/jammy64&quot;</span></span></span>
<span class="line">    master<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>network <span class="token string-literal"><span class="token string">&quot;private_network&quot;</span></span><span class="token punctuation">,</span> <span class="token symbol">ip</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">&quot;192.168.56.10&quot;</span></span></span>
<span class="line">    master<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>hostname <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;master&quot;</span></span></span>
<span class="line"></span>
<span class="line">    master<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>provider <span class="token string-literal"><span class="token string">&quot;virtualbox&quot;</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>v<span class="token operator">|</span></span>
<span class="line">      v<span class="token punctuation">.</span>memory <span class="token operator">=</span> <span class="token number">4096</span></span>
<span class="line">      v<span class="token punctuation">.</span>cpus <span class="token operator">=</span> <span class="token number">4</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">    master<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>provision <span class="token string-literal"><span class="token string">&quot;0&quot;</span></span><span class="token punctuation">,</span> <span class="token symbol">type</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">&quot;shell&quot;</span></span><span class="token punctuation">,</span> <span class="token symbol">preserve_order</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token symbol">privileged</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token symbol">inline</span><span class="token operator">:</span> <span class="token string-literal heredoc-string"><span class="token delimiter"><span class="token punctuation">&lt;&lt;-</span><span class="token symbol">EOC</span></span><span class="token string"></span>
<span class="line">cat &lt;&lt;-&#39;EOF&#39; &gt;/etc/modules-load.d/kubernetes.conf</span>
<span class="line">br_netfilter</span>
<span class="line">EOF</span>
<span class="line"></span>
<span class="line">sudo modprobe br_netfilter</span>
<span class="line"></span>
<span class="line">cat &lt;&lt;-&#39;EOF&#39; &gt;/etc/sysctl.d/kubernetes.conf</span>
<span class="line">net.bridge.bridge-nf-call-iptables = 1</span>
<span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span>
<span class="line">net.ipv4.ip_forward = 1</span>
<span class="line">EOF</span>
<span class="line"></span>
<span class="line">sudo sysctl --system</span>
<span class="line"></span>
<span class="line">sudo apt update</span>
<span class="line">sudo apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates</span>
<span class="line"></span>
<span class="line">sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/docker.gpg</span>
<span class="line">sudo add-apt-repository -y &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;</span>
<span class="line"></span>
<span class="line">sudo apt update</span>
<span class="line">sudo apt install -y containerd.io</span>
<span class="line"></span>
<span class="line">containerd config default | sudo tee /etc/containerd/config.toml &gt;/dev/null 2&gt;&amp;1</span>
<span class="line">sudo sed -i &#39;s/SystemdCgroup \\= false/SystemdCgroup \\= true/g&#39; /etc/containerd/config.toml</span>
<span class="line"></span>
<span class="line">sudo systemctl restart containerd</span>
<span class="line">sudo systemctl enable containerd</span>
<span class="line"></span>
<span class="line">cat &lt;&lt;-&#39;EOF&#39; &gt;/etc/default/kubelet</span>
<span class="line">KUBELET_EXTRA_ARGS=--node-ip=192.168.56.10</span>
<span class="line">EOF</span>
<span class="line"></span>
<span class="line">curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg</span>
<span class="line">echo &#39;deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /&#39; | sudo tee /etc/apt/sources.list.d/kubernetes.list</span>
<span class="line">sudo apt-get update</span>
<span class="line">sudo apt-get install -y kubelet kubeadm kubectl</span>
<span class="line">sudo apt-mark hold kubelet kubeadm kubectl</span>
<span class="line"></span>
<span class="line">OUTPUT_FILE=/vagrant/join.sh</span>
<span class="line">rm -rf $OUTPUT_FILE</span>
<span class="line">rm -rf /vagrant/.kube</span>
<span class="line">sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --control-plane-endpoint=192.168.56.10 --apiserver-advertise-address=192.168.56.10</span>
<span class="line">sudo kubeadm token create --print-join-command &gt; $OUTPUT_FILE</span>
<span class="line">chmod +x $OUTPUT_FILE</span>
<span class="line"></span>
<span class="line">mkdir -p $HOME/.kube</span>
<span class="line">sudo cp /etc/kubernetes/admin.conf $HOME/.kube/config</span>
<span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span>
<span class="line">cp -R $HOME/.kube /vagrant/.kube</span>
<span class="line">cp -R $HOME/.kube /home/vagrant/.kube</span>
<span class="line">sudo chown -R vagrant:vagrant /home/vagrant/.kube</span>
<span class="line">kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml</span>
<span class="line">kubectl completion bash &gt;/etc/bash_completion.d/kubectl</span>
<span class="line">echo &#39;alias k=kubectl&#39; &gt;&gt;/home/vagrant/.bashrc</span>
<span class="line">    </span><span class="token delimiter"><span class="token symbol">EOC</span></span></span></span>
<span class="line">  <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">  <span class="token punctuation">(</span><span class="token number">1.</span><span class="token number">.3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>i<span class="token operator">|</span></span>
<span class="line">    config<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>define <span class="token string-literal"><span class="token string">&quot;worker</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">i</span><span class="token delimiter punctuation">}</span></span><span class="token string">&quot;</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>worker<span class="token operator">|</span></span>
<span class="line">      worker<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>box <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;ubuntu/jammy64&quot;</span></span></span>
<span class="line">      worker<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>network <span class="token string-literal"><span class="token string">&quot;private_network&quot;</span></span><span class="token punctuation">,</span> <span class="token symbol">ip</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">&quot;192.168.56.1</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">i</span><span class="token delimiter punctuation">}</span></span><span class="token string">&quot;</span></span></span>
<span class="line">      worker<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>hostname <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;worker</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">i</span><span class="token delimiter punctuation">}</span></span><span class="token string">&quot;</span></span></span>
<span class="line"></span>
<span class="line">      worker<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>provider <span class="token string-literal"><span class="token string">&quot;virtualbox&quot;</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>v<span class="token operator">|</span></span>
<span class="line">        v<span class="token punctuation">.</span>memory <span class="token operator">=</span> <span class="token number">2048</span></span>
<span class="line">        v<span class="token punctuation">.</span>cpus <span class="token operator">=</span> <span class="token number">2</span></span>
<span class="line">      <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">      worker<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>provision <span class="token string-literal"><span class="token string">&quot;0&quot;</span></span><span class="token punctuation">,</span> <span class="token symbol">type</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">&quot;shell&quot;</span></span><span class="token punctuation">,</span> <span class="token symbol">preserve_order</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token symbol">privileged</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token symbol">inline</span><span class="token operator">:</span> <span class="token string-literal heredoc-string"><span class="token delimiter"><span class="token punctuation">&lt;&lt;-</span><span class="token symbol">EOC</span></span><span class="token string"></span>
<span class="line">cat &lt;&lt;-&#39;EOF&#39; &gt;/etc/modules-load.d/kubernetes.conf</span>
<span class="line">br_netfilter</span>
<span class="line">EOF</span>
<span class="line"></span>
<span class="line">sudo modprobe br_netfilter</span>
<span class="line"></span>
<span class="line">cat &lt;&lt;-&#39;EOF&#39; &gt;/etc/sysctl.d/kubernetes.conf</span>
<span class="line">net.bridge.bridge-nf-call-iptables = 1</span>
<span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span>
<span class="line">net.ipv4.ip_forward = 1</span>
<span class="line">EOF</span>
<span class="line"></span>
<span class="line">sudo sysctl --system</span>
<span class="line"></span>
<span class="line">sudo apt update</span>
<span class="line">sudo apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates</span>
<span class="line"></span>
<span class="line">sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/docker.gpg</span>
<span class="line">sudo add-apt-repository -y &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;</span>
<span class="line"></span>
<span class="line">sudo apt update</span>
<span class="line">sudo apt install -y containerd.io</span>
<span class="line"></span>
<span class="line">containerd config default | sudo tee /etc/containerd/config.toml &gt;/dev/null 2&gt;&amp;1</span>
<span class="line">sudo sed -i &#39;s/SystemdCgroup \\= false/SystemdCgroup \\= true/g&#39; /etc/containerd/config.toml</span>
<span class="line"></span>
<span class="line">sudo systemctl restart containerd</span>
<span class="line">sudo systemctl enable containerd</span>
<span class="line"></span>
<span class="line">cat &lt;&lt;-&#39;EOF&#39; &gt;/etc/default/kubelet</span>
<span class="line">KUBELET_EXTRA_ARGS=--node-ip=192.168.56.1</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">i</span><span class="token delimiter punctuation">}</span></span><span class="token string"></span>
<span class="line">EOF</span>
<span class="line"></span>
<span class="line">curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg</span>
<span class="line">echo &#39;deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /&#39; | sudo tee /etc/apt/sources.list.d/kubernetes.list</span>
<span class="line">sudo apt-get update</span>
<span class="line">sudo apt-get install -y kubelet kubeadm kubectl</span>
<span class="line">sudo apt-mark hold kubelet kubeadm kubectl</span>
<span class="line">      </span><span class="token delimiter"><span class="token symbol">EOC</span></span></span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line">  <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),x=n("code",null,"Vagrantfile",-1),C=n("code",null,"Vagrantfile",-1),T=n("code",null,"Vagrantfile",-1),V=n("code",null,'Vagrant.configure("2") do |config|',-1),U=n("code",null,'"2"',-1),$=n("code",null,"Vagrant.configure",-1),F=t(`<div class="language-ruby line-numbers-mode" data-highlighter="prismjs" data-ext="rb" data-title="rb"><pre><code><span class="line">Vagrant<span class="token punctuation">.</span>configure<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;2&quot;</span></span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>config<span class="token operator">|</span></span>
<span class="line">  config<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>boot_timeout <span class="token operator">=</span> <span class="token number">3000</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>config.vm.boot_timeout</code>: 가상머신 부팅 대기 시간입니다. 이 값을 짧게 설정하면 부팅이 끝나기 전에 <code>vagrant up</code> 명령이 실패할 수 있습니다.</li></ul><p>이제 master 노드 설정 부분입니다. <code>config.vm.define &quot;master&quot; do |master|</code>으로 마스터 노드 정의하고 그 아래에 설정을 넣게 됩니다.</p><div class="language-ruby line-numbers-mode" data-highlighter="prismjs" data-ext="rb" data-title="rb"><pre><code><span class="line">  config<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>define <span class="token string-literal"><span class="token string">&quot;master&quot;</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>master<span class="token operator">|</span></span>
<span class="line">    master<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>box <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;ubuntu/jammy64&quot;</span></span></span>
<span class="line">    master<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>network <span class="token string-literal"><span class="token string">&quot;private_network&quot;</span></span><span class="token punctuation">,</span> <span class="token symbol">ip</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">&quot;192.168.56.10&quot;</span></span></span>
<span class="line">    master<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>hostname <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;master&quot;</span></span></span>
<span class="line"></span>
<span class="line">    master<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>provider <span class="token string-literal"><span class="token string">&quot;virtualbox&quot;</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>v<span class="token operator">|</span></span>
<span class="line">      v<span class="token punctuation">.</span>memory <span class="token operator">=</span> <span class="token number">4096</span></span>
<span class="line">      v<span class="token punctuation">.</span>cpus <span class="token operator">=</span> <span class="token number">4</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),j=n("code",null,"master.vm.box",-1),I=n("code",null,'"ubuntu/jammy64"',-1),P=n("code",null,"master.vm.network",-1),R=n("code",null,'"private_network"',-1),L=n("code",null,'"192.168.56.10"',-1),S=n("code",null,"master.vm.hostname",-1),H=n("code",null,'"master"',-1),M=n("code",null,'master.vm.provider "virtualbox" do |v|',-1),K=n("ul",null,[n("li",null,[n("code",null,"v.memory"),s(": 가상머신의 메모리 크기입니다. 여기서는 4096(4Gi)을 설정했습니다.")]),n("li",null,[n("code",null,"v.cpus"),s(": 가상머신의 CPU 개수입니다. 여기서는 4개로 설정했습니다.")])],-1),B=n("code",null,"provision",-1),N=t(`<p>master 노드의 <code>provision</code> 설정은 이렇게 시작합니다. <code>master.vm.provision &quot;0&quot;, type: &quot;shell&quot;, preserve_order: true, privileged: true, inline: &lt;&lt;-EOC</code>에서 <code>&quot;0&quot;</code>은 provision의 이름, <code>&quot;shell&quot;</code>은 셸 스크립트, <code>preserve_order: true</code>는 실행 순서를 유지하겠다는 뜻입니다. <code>privileged: true</code>는 현재 스크립트를 root 권한으로 실행하겠다는 뜻입니다. 마지막으로 <code>inline: &lt;&lt;-EOC</code> 다음 줄부터 스크립트가 시작됩니다.</p><p>다음은 <code>kubeadm</code> 실행에 필요한 커널 모듈을 로딩하고, 커널 설정값을 변경하는 부분입니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> <span class="token operator">&lt;&lt;-</span><span class="token string">&#39;EOF&#39;<span class="token bash punctuation"> <span class="token operator">&gt;</span>/etc/modules-load.d/kubernetes.conf</span></span>
<span class="line">br_netfilter</span>
<span class="line">EOF</span></span>
<span class="line"></span>
<span class="line"><span class="token function">sudo</span> modprobe br_netfilter</span>
<span class="line"></span>
<span class="line"><span class="token function">cat</span> <span class="token operator">&lt;&lt;-</span><span class="token string">&#39;EOF&#39;<span class="token bash punctuation"> <span class="token operator">&gt;</span>/etc/sysctl.d/kubernetes.conf</span></span>
<span class="line">net.bridge.bridge-nf-call-iptables = 1</span>
<span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span>
<span class="line">net.ipv4.ip_forward = 1</span>
<span class="line">EOF</span></span>
<span class="line"></span>
<span class="line"><span class="token function">sudo</span> <span class="token function">sysctl</span> <span class="token parameter variable">--system</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),A=n("code",null,"br_netfilter",-1),D=n("code",null,"/etc/modules-load.d/",-1),G=n("code",null,"kubernetes.conf",-1),X=n("code",null,"sudo modprobe br_netfilter",-1),Z=n("code",null,"br_netfilter",-1),z=n("code",null,"net.ipv4.ip_forward = 1",-1),J=n("code",null,"net.bridge.bridge-nf-call-iptables = 1",-1),Q=n("code",null,"net.bridge.bridge-nf-call-ip6tables = 1",-1),W=n("code",null,"/etc/sysctl.d/",-1),Y=n("code",null,"kubernetes.conf",-1),nn=n("code",null,"sudo sysctl --system",-1),sn=n("code",null,"kubelet",-1),an=n("code",null,"Vagrantfile",-1),en=n("code",null,'master.vm.network "private_network", ip: "192.168.56.10"',-1),tn=n("code",null,"192.168.56.10",-1),ln=n("code",null,"--node-ip",-1),on=t(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> <span class="token operator">&lt;&lt;-</span><span class="token string">&#39;EOF&#39;<span class="token bash punctuation"> <span class="token operator">&gt;</span>/etc/default/kubelet</span></span>
<span class="line">KUBELET_EXTRA_ARGS=--node-ip=192.168.56.10</span>
<span class="line">EOF</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>containerd</strong> 설치 및 설정 부분입니다. 우리는 쿠버네티스의 컨테이너 런타임 인터페이스(CRI)로 <strong>containerd</strong>를 사용할 것이므로 다음과 같이 작성했습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">apt</span> update</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">curl</span> gnupg2 software-properties-common apt-transport-https ca-certificates</span>
<span class="line"></span>
<span class="line"><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> gpg <span class="token parameter variable">--dearmour</span> <span class="token parameter variable">-o</span> /etc/apt/trusted.gpg.d/docker.gpg</span>
<span class="line"><span class="token function">sudo</span> add-apt-repository <span class="token parameter variable">-y</span> <span class="token string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span> stable&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">sudo</span> <span class="token function">apt</span> update</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> containerd.io</span>
<span class="line"></span>
<span class="line">containerd config default <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/containerd/config.toml <span class="token operator">&gt;</span>/dev/null <span class="token operator">&lt;</span>span <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">&quot;token file-descriptor important&quot;</span><span class="token operator">&gt;</span><span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token operator">&lt;</span>span <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">&quot;token file-descriptor important&quot;</span><span class="token operator">&gt;</span><span class="token file-descriptor important">&amp;1</span></span>
<span class="line"><span class="token function">sudo</span> <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&#39;s/SystemdCgroup \\= false/SystemdCgroup \\= true/g&#39;</span> /etc/containerd/config.toml</span>
<span class="line"></span>
<span class="line"><span class="token function">sudo</span> systemctl restart containerd</span>
<span class="line"><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> containerd</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),pn=n("code",null,"sudo apt update",-1),cn=n("code",null,"sudo apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates",-1),rn=n("code",null,"sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/docker.gpg",-1),dn=n("code",null,'sudo add-apt-repository -y "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"',-1),un=n("li",null,[s("다시 "),n("code",null,"sudo apt update"),s("로 apt 패키지 목록을 업데이트해주고, "),n("code",null,"sudo apt install -y containerd.io"),s("로 "),n("strong",null,"containerd"),s("를 설치합니다. 이 과정없이 "),n("code",null,"sudo apt install -y containerd"),s("로 우분투에 내장된 containerd를 설치하면 "),n("code",null,"kubeadm"),s("이 제대로 실행되지 않으므로 주의해야 합니다.")],-1),kn=n("code",null,"containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1",-1),mn=n("code",null,"sudo sed -i 's/SystemdCgroup \\= false/SystemdCgroup \\= true/g' /etc/containerd/config.toml",-1),vn=n("code",null,"SystemdCgroup",-1),bn=n("code",null,"true",-1),gn=n("strong",null,"Cgroups",-1),hn=n("strong",null,"systemd",-1),_n=n("code",null,"sudo systemctl restart containerd",-1),fn=n("code",null,"sudo systemctl enable containerd",-1),yn=n("code",null,"kubeadm init",-1),wn=t(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token assign-left variable">OUTPUT_FILE</span><span class="token operator">=</span>/vagrant/join.sh</span>
<span class="line"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token variable">$OUTPUT_FILE</span></span>
<span class="line"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /vagrant/.kube</span>
<span class="line"><span class="token function">sudo</span> kubeadm init --pod-network-cidr<span class="token operator">=</span><span class="token number">10.244</span>.0.0/16 --control-plane-endpoint<span class="token operator">=</span><span class="token number">192.168</span>.56.10 --apiserver-advertise-address<span class="token operator">=</span><span class="token number">192.168</span>.56.10</span>
<span class="line"><span class="token function">sudo</span> kubeadm token create --print-join-command <span class="token operator">&gt;</span> <span class="token variable">$OUTPUT_FILE</span></span>
<span class="line"><span class="token function">chmod</span> +x <span class="token variable">$OUTPUT_FILE</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),qn=n("code",null,"OUTPUT_FILE=/vagrant/join.sh",-1),En=n("code",null,"kubeadm init",-1),On=n("code",null,"kubeadm join",-1),xn=n("code",null,"/vagrant",-1),Cn=n("code",null,"Vagrantfile",-1),Tn=n("code",null,"rm -rf $OUTPUT_FILE",-1),Vn=n("code",null,"rm -rf /vagrant/.kube",-1),Un=n("code",null,".kube",-1),$n=n("code",null,"sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --control-plane-endpoint=192.168.56.10 --apiserver-advertise-address=192.168.56.10",-1),Fn=t("<ul><li><code>--pod-network-cidr=10.244.0.0/16</code>: 우리는 쿠버네티스 컨테이너 네트워크 인터페이스(CNI)로 <strong>flannel</strong>을 사용할 것이므로 <code>--pod-network-cidr</code>를 <code>10.244.0.0/16</code>로 설정해줍니다.</li><li><code>--control-plane-endpoint=192.168.56.10</code>: 로컬 환경이라 도메인이 필요없으므로 제어 플레인 엔드포인트를 master 노드의 IP 주소 <code>192.168.56.10</code>으로 설정합니다.</li><li><code>--apiserver-advertise-address=192.168.56.10</code>: apiserver 주소도 master 노드의 IP 주소 <code>192.168.56.10</code>으로 설정합니다.</li></ul>",1),jn=n("code",null,"kubeadm init",-1),In=n("code",null,"kubeadm join",-1),Pn=n("code",null,"sudo kubeadm token create --print-join-command > $OUTPUT_FILE",-1),Rn=n("code",null,"chmod +x $OUTPUT_FILE",-1),Ln=n("code",null,".kube",-1),Sn=n("strong",null,"flannel",-1),Hn=n("code",null,"kubectl",-1),Mn=n("code",null,"k",-1),Kn=t(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token environment constant">$HOME</span>/.kube</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">cp</span> /etc/kubernetes/admin.conf <span class="token environment constant">$HOME</span>/.kube/config</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-u</span><span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> <span class="token parameter variable">-g</span><span class="token variable">)</span></span> <span class="token environment constant">$HOME</span>/.kube/config</span>
<span class="line"><span class="token function">cp</span> <span class="token parameter variable">-R</span> <span class="token environment constant">$HOME</span>/.kube /vagrant/.kube</span>
<span class="line"><span class="token function">cp</span> <span class="token parameter variable">-R</span> <span class="token environment constant">$HOME</span>/.kube /home/vagrant/.kube</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">chown</span> <span class="token parameter variable">-R</span> vagrant:vagrant /home/vagrant/.kube</span>
<span class="line">kubectl apply <span class="token parameter variable">-f</span> https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml</span>
<span class="line">kubectl completion <span class="token function">bash</span> <span class="token operator">&gt;</span>/etc/bash_completion.d/kubectl</span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;alias k=kubectl&#39;</span> <span class="token operator">&gt;&gt;</span>/home/vagrant/.bashrc</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Bn=n("code",null,"mkdir -p $HOME/.kube",-1),Nn=n("code",null,".kube",-1),An=n("code",null,"sudo cp /etc/kubernetes/admin.conf $HOME/.kube/config",-1),Dn=n("code",null,"/etc/kubernetes/",-1),Gn=n("code",null,"admin.conf",-1),Xn=n("code",null,".kube",-1),Zn=n("code",null,"config",-1),zn=n("code",null,"sudo chown $(id -u):$(id -g) $HOME/.kube/config",-1),Jn=n("code",null,"config",-1),Qn=n("code",null,"$HOME",-1),Wn=n("code",null,"/root",-1),Yn=n("code",null,"root",-1),ns=n("code",null,"kubectl",-1),ss=n("strong",null,"flannel",-1),as=t("<li>가상머신 바깥에서 <code>.kube</code> 디렉터리를 가져갈 수 있도록 <code>cp -R $HOME/.kube /vagrant/.kube</code>를 실행합니다.</li><li>root가 아닌 vagrant 일반 계정에서도 <code>kubectl</code>을 실행할 수 있도록 <code>cp -R $HOME/.kube /home/vagrant/.kube</code>을 실행하여 <code>.kube</code> 디렉터리를 복사하고 <code>sudo chown -R vagrant:vagrant /home/vagrant/.kube</code>로 소유자와 그룹을 vagrant로 변경합니다.</li>",2),es=n("code",null,"kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml",-1),ts=n("strong",null,"flannel",-1),ls=n("strong",null,"flannel",-1),os=n("code",null,"kubectl completion bash >/etc/bash_completion.d/kubectl",-1),is=n("code",null,"echo 'alias k=kubectl' >>/home/vagrant/.bashrc",-1),ps=n("code",null,"kubectl",-1),cs=n("code",null,"k",-1),rs=t(`<p>다음은 worker 노드 부분입니다. worker 노드는 <code>(1..3)</code>으로 1부터 3까지 루프를 돌면서 노드 3개를 생성합니다.</p><div class="language-ruby line-numbers-mode" data-highlighter="prismjs" data-ext="rb" data-title="rb"><pre><code><span class="line">  <span class="token punctuation">(</span><span class="token number">1.</span><span class="token number">.3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>i<span class="token operator">|</span></span>
<span class="line">    config<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>define <span class="token string-literal"><span class="token string">&quot;worker</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">i</span><span class="token delimiter punctuation">}</span></span><span class="token string">&quot;</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>worker<span class="token operator">|</span></span>
<span class="line">      worker<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>box <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;ubuntu/jammy64&quot;</span></span></span>
<span class="line">      worker<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>network <span class="token string-literal"><span class="token string">&quot;private_network&quot;</span></span><span class="token punctuation">,</span> <span class="token symbol">ip</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">&quot;192.168.56.1</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">i</span><span class="token delimiter punctuation">}</span></span><span class="token string">&quot;</span></span></span>
<span class="line">      worker<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>hostname <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;worker</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">i</span><span class="token delimiter punctuation">}</span></span><span class="token string">&quot;</span></span></span>
<span class="line"></span>
<span class="line">      worker<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>provider <span class="token string-literal"><span class="token string">&quot;virtualbox&quot;</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>v<span class="token operator">|</span></span>
<span class="line">        v<span class="token punctuation">.</span>memory <span class="token operator">=</span> <span class="token number">2048</span></span>
<span class="line">        v<span class="token punctuation">.</span>cpus <span class="token operator">=</span> <span class="token number">2</span></span>
<span class="line">      <span class="token keyword">end</span></span>
<span class="line"></span>
<span class="line">      worker<span class="token punctuation">.</span>vm<span class="token punctuation">.</span>provision <span class="token string-literal"><span class="token string">&quot;0&quot;</span></span><span class="token punctuation">,</span> <span class="token symbol">type</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">&quot;shell&quot;</span></span><span class="token punctuation">,</span> <span class="token symbol">preserve_order</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token symbol">privileged</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token symbol">inline</span><span class="token operator">:</span> <span class="token operator">&lt;&lt;</span><span class="token operator">-</span><span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">&quot;token constant&quot;</span></span><span class="token operator">&gt;</span><span class="token constant">EOC</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),ds=n("code",null,"worker.vm.box",-1),us=n("code",null,'"ubuntu/jammy64"',-1),ks=t("<li><code>worker.vm.network</code>: 네트워크 설정입니다. <code>&quot;private_network&quot;</code>로 내부 네트워크를 사용하도록 했고 worker 노드의 IP 주소는 <code>&quot;192.168.56.1#{i}&quot;</code>로 설정해서 11부터 13까지 사용하도록 합니다.</li><li><code>worker.vm.hostname</code>: 가상머신의 호스트 이름입니다. <code>&quot;worker#{i}&quot;</code>로 설정하여 <strong>worker1</strong>부터 <strong>3</strong>까지 사용하도록 합니다.</li>",2),ms=n("code",null,'worker.vm.provider "virtualbox" do |v|',-1),vs=n("ul",null,[n("li",null,[n("code",null,"v.memory"),s(": 가상머신의 메모리 크기입니다. 여기서는 2048(2Gi)을 설정했습니다.")]),n("li",null,[n("code",null,"v.cpus"),s(": 가상머신의 CPU 개수입니다. 여기서는 2개로 설정했습니다.")])],-1),bs=t("<li><code>worker.vm.provision</code>: <code>join.sh</code> 스크립트 생성 부분, <code>kubeadm init</code>으로 master 노드를 생성하는 부분, <strong>flannel</strong>을 설치하는 부분, <code>.kube</code> 디렉터리 복사 부분 등을 제외하면 스크립트는 master와 동일하게 <strong>containerd</strong>와 <code>kubeadm</code>을 설치합니다.</li>",1),gs=n("code",null,"Vagrantfile",-1),hs=n("p",null,"다음 장에서는 이 쿠버네티스 클러스터에서 Nginx 디플로이먼트와 서비스를 생성한 뒤 인그레스도 설정해보겠습니다.",-1),_s=n("hr",null,null,-1);function fs(c,ys){const l=p("VPCard"),e=p("FontIcon");return k(),d("div",null,[n("h1",v,[n("a",b,[n("span",null,u(c.$frontmatter.title)+" 관련",1)])]),a(l,o(i({title:"목차",desc:"언제나 최신 Kubernetes",link:"/k8s/always-up-to-date-kubernetes/README.md",logo:"https://pyrasis.com/assets/images/pyrasis.png",background:"rgba(31,41,55,0.2)"})),null,16),g,h,a(l,o(i({title:"Unit 6.3. Vagrantfile 살펴보기",desc:"언제나 최신 Kubernetes",link:"https://pyrasis.com/jHLsAlwaysUpToDateKubernetes/Unit06/03",logo:"https://pyrasis.com/assets/images/pyrasis.png",background:"rgba(31,41,55,0.2)"})),null,16),n("p",null,[s("이번에는 앞에서 실행했던 "),a(e,{icon:"iconfont icon-vagrant"}),_,s("의 내용을 살펴보겠습니다. 양이 많은 것 같지만 그렇게 복잡하지는 않습니다.")]),n("ul",null,[n("li",null,[n("a",f,[a(e,{icon:"iconfont icon-github"}),y,s(" - "),w,a(e,{icon:"iconfont icon-vagrant"}),q])])]),n("blockquote",null,[a(e,{icon:"iconfont icon-vagrant"}),E]),O,n("p",null,[s("먼저 "),a(e,{icon:"iconfont icon-vagrant"}),x,s("의 첫 부분입니다(참고로 "),a(e,{icon:"iconfont icon-vagrant"}),C,s("은 Ruby 언어로 작성이 되어 있습니다). "),a(e,{icon:"iconfont icon-vagrant"}),T,s("은 "),V,s("로 시작하며 그 아래에 각종 설정을 넣게 됩니다. 여기서 "),U,s("는 "),$,s(" 버전 2라는 뜻이며 가상머신을 2개 만들겠다는 뜻이 아닙니다.")]),F,n("p",null,[j,s(": "),a(e,{icon:"iconfont icon-vagrant"}),s("Vagrant는 가상머신 이미지를 box라고 부릅니다. 여기서는 "),a(e,{icon:"fa-brands fa-ubuntu"}),s("Ubuntu 22.04 버전인 "),I,s("를 사용하도록 설정했습니다. "),P,s(": 네트워크 설정입니다. "),R,s("로 내부 네트워크를 사용하도록 했고 master 노드의 IP 주소는 "),L,s("으로 설정했습니다. "),S,s(": 가상머신의 호스트 이름입니다. master 노드이므로 "),H,s("로 설정했습니다. "),M,s(": 우리는 가상머신 프로그램으로 "),a(e,{icon:"iconfont icon-virtualbox"}),s("VirtualBox를 사용하기로 했으므로 "),a(e,{icon:"iconfont icon-virtualbox"}),s("VirtualBox 관련 설정을 해줍니다.")]),K,n("p",null,[s("여기서부터는 "),B,s("이라고 해서 "),a(e,{icon:"iconfont icon-vagrant"}),s("Vagrant가 가상머신을 생성한 뒤 실행할 스크립트를 정의하는 부분입니다. 이 부분의 내용이 많은데, 부분 부분 나눠서 설명하겠습니다.")]),N,n("ul",null,[n("li",null,[A,s(": iptables를 사용하기 위해 필요한 커널 모듈입니다. 부팅할 때 로딩할 수 있도록 "),a(e,{icon:"fas fa-folder-open"}),D,a(e,{icon:"fas fa-file-lines"}),G,s(" 파일 안에도 넣어줍니다. 그리고 "),X,s(" 명령으로 "),Z,s(" 커널 모듈을 지금 즉시 로딩해줍니다.")]),n("li",null,[z,s("은 IPv4 포워딩 기능을 활성화합니다. "),J,s("과 "),Q,s("은 컨테이너의 네트워크 패킷을 호스트의 iptables 설정에 따라 제어되도록 합니다. 부팅할 때 설정값을 반영할 수 있도록 "),a(e,{icon:"fas fa-folder-open"}),W,a(e,{icon:"fas fa-file-lines"}),Y,s(" 파일 안에도 넣어줍니다. 그리고 "),a(e,{icon:"iconfont icon-shell"}),nn,s(" 명령을 실행하여 설정값을 지금 즉시 반영해줍니다.")])]),n("p",null,[sn,s(" 설정입니다. 이 "),a(e,{icon:"iconfont icon-vagrant"}),an,s("에서 생성한 "),a(e,{icon:"iconfont icon-virtualbox"}),s("VirtualBox 가상머신은 네트워크 인터페이스가 2개 생성됩니다. 여기서 "),en,s("으로 생성한 두 번째 네트워크 인터페이스의 IP 주소인 "),tn,s("을 "),ln,s("에 설정해줍니다.")]),on,n("ul",null,[n("li",null,[s("."),a(e,{icon:"iconfont icon-shell"}),pn,s("로 apt 패키지 목록을 업데이트해주고 "),a(e,{icon:"iconfont icon-shell"}),cn,s("로 필요한 패키지들을 설치합니다.")]),n("li",null,[s("."),a(e,{icon:"iconfont icon-shell"}),rn,s("로 Docker 인증서를 설치하고, "),a(e,{icon:"iconfont icon-shell"}),dn,s("로 apt 저장소 목록에 Docker 저장소를 추가해줍니다.")]),un,n("li",null,[s("."),a(e,{icon:"iconfont icon-shell"}),kn,s("로 containerd 기본 설정값을 만들어내고, "),a(e,{icon:"iconfont icon-shell"}),mn,s("로 "),vn,s("을 "),bn,s("로 변경해줍니다. 우리는 쿠버네티스의 "),gn,s("로 "),hn,s("를 사용할 것이기 때문입니다.")]),n("li",null,[s("."),a(e,{icon:"iconfont icon-shell"}),_n,s("로 containerd 서비스를 재시작하여 바뀐 설정을 반영해주고, "),a(e,{icon:"iconfont icon-shell"}),fn,s("로 부팅했을 때 containerd 서비스가 실행되도록 설정해줍니다.")])]),n("p",null,[s("이 부분이 핵심입니다. "),a(e,{icon:"iconfont icon-shell"}),yn,s("으로 쿠버네티스 클러스터의 master 노드를 생성합니다.")]),wn,n("ul",null,[n("li",null,[qn,s("은 "),a(e,{icon:"iconfont icon-shell"}),En,s(" 명령 실행 후 출력되는 "),a(e,{icon:"iconfont icon-shell"}),On,s(" 명령을 일일이 복사해서 붙여넣기 번거로우므로 스크립트 파일로 저장하기 위한 부분입니다. 특히 "),xn,s(" 디렉터리는 "),a(e,{icon:"iconfont icon-vagrant"}),s("Vagrant로 생성한 모든 가상머신에서 공유하는 디렉터리이며 "),a(e,{icon:"iconfont icon-vagrant"}),Cn,s("이 있는 로컬 폴더(디렉터리)와도 공유되는 곳입니다. "),a(e,{icon:"iconfont icon-shell"}),Tn,s("로 이전 스크립트 파일을 삭제하고, "),a(e,{icon:"iconfont icon-shell"}),Vn,s("로 이전 "),a(e,{icon:"fas fa-folder-open"}),Un,s(" 디렉터리도 삭제합니다.")]),n("li",null,[s("."),a(e,{icon:"iconfont icon-shell"}),$n,s("으로 쿠버네티스 클러스터의 master 노드를 생성합니다. "),Fn]),n("li",null,[s("."),a(e,{icon:"iconfont icon-shell"}),jn,s(" 실행 후에도 "),a(e,{icon:"iconfont icon-shell"}),In,s(" 명령이 나오지만 스크립트 파일에 저장하기 위해 "),a(e,{icon:"iconfont icon-shell"}),Pn,s("를 실행해줍니다. 그리고 "),a(e,{icon:"iconfont icon-shell"}),Rn,s("로 스크립트 파일에 실행 권한을 부여합니다.")])]),n("p",null,[s("이제 클러스터 바깥에서 클러스터를 제어할 수 있도록 "),a(e,{icon:"fas fa-folder-open"}),Ln,s(" 디렉터리와 설정파일을 만들어주고, CNI인 >"),Sn,s("을 설치합니다. 그리고 bash 자동 완성 설정과 "),Hn,s("을 "),Mn,s("로 약칭(alias)을 만들어줍니다.")]),Kn,n("ul",null,[n("li",null,[s("."),a(e,{icon:"iconfont icon-shell"}),Bn,s("로 홈 디렉터리에 "),a(e,{icon:"fas fa-folder-open"}),Nn,s(" 디렉터리를 생성합니다. 그리고 "),a(e,{icon:"iconfont icon-shell"}),An,s("로 "),a(e,{icon:"fas fa-folder-open"}),Dn,s(" 안에 있는 "),a(e,{icon:"fas fa-file-lines"}),Gn,s("를 "),a(e,{icon:"fas fa-folder-open"}),Xn,s(" 아래에 "),a(e,{icon:"fas fa-file-lines"}),Zn,s(" 파일로 복사해줍니다. 마지막으로 "),a(e,{icon:"iconfont icon-shell"}),zn,s("로 "),a(e,{icon:"fas fa-file-lines"}),Jn,s(" 파일의 소유자와 그룹을 현재 사용자와 그룹으로 변경해줍니다. 이때 "),Qn,s("은 "),Wn,s("이고 사용자와 그룹은 "),Yn,s("입니다. 이렇게 해야 "),ns,s("을 실행하여 "),ss,s("을 설치할 수 있습니다.")]),as,n("li",null,[s("."),a(e,{icon:"iconfont icon-shell"}),es,s("를 실행하여 CNI "),ts,s("을 설치합니다. CNI는 여러 종류가 있지만 여기서는 "),ls,s("을 설치하겠습니다.")]),n("li",null,[s("."),a(e,{icon:"iconfont icon-shell"}),os,s("를 실행하여 bash 자동 완성 설정을 해주고, "),a(e,{icon:"iconfont icon-shell"}),is,s("를 실행하여 "),ps,s("을 "),cs,s("로 약칭(alias)을 만들어줍니다.")])]),rs,n("ul",null,[n("li",null,[ds,s(": master 노드와 마찬가지로 "),a(e,{icon:"fa-brands fa-ubuntu"}),s("Ubuntu 22.04 버전인 "),us,s("를 사용하도록 설정했습니다.")]),ks,n("li",null,[ms,s(": worker 가상머신의 "),a(e,{icon:"iconfont icon-virtualbox"}),s("VirtualBox 설정입니다. "),vs]),bs]),n("p",null,[s("지금까지 "),a(e,{icon:"iconfont icon-vagrant"}),gs,s("로 가상머신을 생성하는 부분과 쿠버네티스 클러스터를 생성하기 위한 스크립트들을 알아보았습니다. Vagrant 없이 수동으로 가상머신을 생성하고, 스크립트를 입력해도 동일하게 쿠버네티스 클러스터를 만들 수 있습니다.")]),hs,_s])}const Es=r(m,[["render",fs],["__file","06C.html.vue"]]),Os=JSON.parse('{"path":"/k8s/always-up-to-date-kubernetes/06C.html","title":"06C. Vagrantfile 살펴보기","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"06C. Vagrantfile 살펴보기","description":"언제나 최신 Kubernetes > 06C. Vagrantfile 살펴보기","category":["Kubernetes"],"tag":["crashcourse","digitalocean","kubernetes","minkube","kubctl"],"head":[[{"meta":null},{"property":"og:title","content":"언제나 최신 Kubernetes > 06C. Vagrantfile 살펴보기"},{"property":"og:description","content":"06C. Vagrantfile 살펴보기"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/k8s/always-up-to-date-kubernetes/06C.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/k8s/always-up-to-date-kubernetes/06C.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"06C. Vagrantfile 살펴보기"}],["meta",{"property":"og:description","content":"언제나 최신 Kubernetes > 06C. Vagrantfile 살펴보기"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"digitalocean"}],["meta",{"property":"article:tag","content":"kubernetes"}],["meta",{"property":"article:tag","content":"minkube"}],["meta",{"property":"article:tag","content":"kubctl"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"06C. Vagrantfile 살펴보기\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1712118043000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":5.63,"words":1688},"filePathRelative":"k8s/always-up-to-date-kubernetes/06C.md","localizedDate":"2024년 4월 3일","excerpt":"\\n"}');export{Es as comp,Os as data};
