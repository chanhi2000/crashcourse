import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,a as n,t as h,b as a,w as p,n as i,g as l,d as s,e,r as u,o as v}from"./app-U_bew1in.js";const b={},w={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},y=n("hr",null,null,-1),S=e('<h2 id="project-23-part-one" tabindex="-1"><a class="header-anchor" href="#project-23-part-one"><span>Project 23, part one</span></a></h2><p>Are you ready to start one of the longest projects in this series? I’m not trying to put you off, honest – in fact, if anything I think you’ll be inspired to continue once you see how good the finished product looks.</p><p>Winston Churchill once said, “success is not final, failure is not fatal: it is the courage to continue that counts.” So, don’t worry if you’ve hit a few difficult patches in previous days because it’s perfectly natural and won’t hold you back from success today.</p><p>In this new project you’re going to get a chance to return to <code>UIBezierPath</code>, <code>SKSpriteNode</code>, physics, and more, but there’s also a lot new to learn. I hope you’re getting a sense of how my “three steps forward, one step back” approach works: we’re constantly learning new things, but also constantly bringing back older things to keep them fresh in your memory.</p><p>When these 100 days finish (in just over 20 days from now!), I hope you’ll be so used to UIKit, SpriteKit, and more that you’ll be able to make something new without thinking twice.</p><p><strong>Today you have four topics to work through, and you’ll learn about <code>SKShapeNode</code>, <code>touchesEnded()</code>, <code>AVAudioPlayer</code>, and more.</strong></p><h3 id="setting-up" tabindex="-1"><a class="header-anchor" href="#setting-up"><span>Setting up</span></a></h3>',7),_={class:"hint-container details"},I=n("summary",null,"Setting up",-1),A=e("<p>I don&#39;t want to put you off, but this is by far the longest project in the series. It&#39;s not the most <em>complicated</em>, but it&#39;s long, coming in just short of 500 lines in total. That said, I hope it&#39;ll be worth it, because the end result is great: we&#39;re going to make a Fruit Ninja-style game, where slicing penguins is good and slicing bombs is bad. I think I must unconsciously have something against penguins…</p><p>Anyway, in this project you&#39;re going to meet <code>SKShapeNode</code> and <code>AVAudioPlayer</code>, you&#39;re going to create <code>SKAction</code> groups, you&#39;re going to create shapes with <code>UIBezierPath</code>, and more. So, it&#39;s the usual recipe: make something cool, and learn at the same time.</p><p>This project is hard because you need to write a lot of code before you can start to see results, which I personally find frustrating. I much prefer it when I can write a few lines, see the result, write a few lines more, see the result again, and so on. That isn&#39;t possible here, so I suggest you make some coffee before you begin.</p><p>Still here? OK!</p>",4),P=n("code",null,"didMove(to:)",-1),x=n("code",null,"touchesBegan()",-1),q=n("code",null,"GameScene.sks",-1),j={href:"https://github.com/twostraws/HackingWithSwift",target:"_blank",rel:"noopener noreferrer"},N=n("code",null,"twostraws/HackingWithSwift",-1),C=n("p",null,"Please force the app to run only on landscape iPads before continuing.",-1),B=n("p",null,[n("strong",null,"Reminder"),s(": Don’t forget to use a real device for this project, or, if you must, the lowest-spec iPad in the simulator.")],-1),K=n("h3",{id:"basics-quick-start-skshapenode",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#basics-quick-start-skshapenode"},[n("span",null,[s("Basics quick start: "),n("code",null,"SKShapeNode")])])],-1),T={class:"hint-container details"},G=n("summary",null,"Basics quick start: SKShapeNode",-1),E=n("p",null,"The only way we can get through this project with our sanity intact is by whizzing through the things you know already so I can spend more time focusing on the new bits. So, be prepared for abrupt changes of pace: fast, slow, fast, slow, as appropriate.",-1),V=n("code",null,"GameScene.swift",-1),z=n("code",null,"didMove(to:)",-1),F=e(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> background <span class="token operator">=</span> <span class="token class-name">SKSpriteNode</span><span class="token punctuation">(</span>imageNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;sliceBackground&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">background<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">512</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">384</span><span class="token punctuation">)</span></span>
<span class="line">background<span class="token punctuation">.</span>blendMode <span class="token operator">=</span> <span class="token punctuation">.</span>replace</span>
<span class="line">background<span class="token punctuation">.</span>zPosition <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span></span>
<span class="line"><span class="token function">addChild</span><span class="token punctuation">(</span>background<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">physicsWorld<span class="token punctuation">.</span>gravity <span class="token operator">=</span> <span class="token class-name">CGVector</span><span class="token punctuation">(</span>dx<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> dy<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line">physicsWorld<span class="token punctuation">.</span>speed <span class="token operator">=</span> <span class="token number">0.85</span></span>
<span class="line"></span>
<span class="line"><span class="token function">createScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">createLives</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">createSlices</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The last three are all methods we&#39;ll create in a moment, but first there are two new lines in there. The default gravity of our physics world is -0.98, which is roughly equivalent to Earth&#39;s gravity. I&#39;m using a slightly lower value so that items stay up in the air a bit longer.</p><p>I&#39;m also telling the physics world to adjust its speed downwards, which causes all movement to happen at a slightly slower rate.</p><p>The first two new methods are easy and require little explanation, but you will need to add some properties to the <code>GameScene</code> class to support them:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> gameScore<span class="token punctuation">:</span> <span class="token class-name">SKLabelNode</span><span class="token operator">!</span> </span>
<span class="line"><span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">didSet</span> <span class="token punctuation">{</span></span>
<span class="line">        gameScore<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Score: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">score</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> livesImages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">SKSpriteNode</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">var</span> lives <span class="token operator">=</span> <span class="token number">3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That&#39;s all old news for you – if nothing else, this should show how far you&#39;ve come! Now here are the two new methods:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">createScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    gameScore <span class="token operator">=</span> <span class="token class-name">SKLabelNode</span><span class="token punctuation">(</span>fontNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Chalkduster&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    gameScore<span class="token punctuation">.</span>horizontalAlignmentMode <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token keyword">left</span></span>
<span class="line">    gameScore<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token number">48</span></span>
<span class="line">    <span class="token function">addChild</span><span class="token punctuation">(</span>gameScore<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    gameScore<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span></span>
<span class="line">    score <span class="token operator">=</span> <span class="token number">0</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">createLives</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span> <span class="token operator">..&lt;</span> <span class="token number">3</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> spriteNode <span class="token operator">=</span> <span class="token class-name">SKSpriteNode</span><span class="token punctuation">(</span>imageNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;sliceLife&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        spriteNode<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span><span class="token punctuation">(</span><span class="token number">834</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">720</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">addChild</span><span class="token punctuation">(</span>spriteNode<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        livesImages<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>spriteNode<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You&#39;ll notice I&#39;m adding the lives images to the <code>livesImages</code> array, which is done so that we can cross off lives when the player loses.</p><figure><img src="https://www.hackingwithswift.com/img/books/hws/23-1.png" alt="Our game interface is quite simple: score on the bottom left, lives on the top right, and a big empty area in the middle where we can smite penguins." tabindex="0" loading="lazy"><figcaption>Our game interface is quite simple: score on the bottom left, lives on the top right, and a big empty area in the middle where we can smite penguins.</figcaption></figure><p>That leaves the <code>createSlices()</code> method, and this bit <em>is</em> new. In this game, swiping around the screen will lead a glowing trail of slice marks that fade away when you let go or keep on moving. To make this work, we&#39;re going to do three things:</p><ol><li>Track all player moves on the screen, recording an array of all their swipe points.</li><li>Draw two slice shapes, one in white and one in yellow to make it look like there&#39;s a hot glow.</li><li>Use the <code>zPosition</code> property to make sure the slices go above everything else in the game.</li></ol><p>Drawing a shape in SpriteKit is easy thanks to a special node type called <code>SKShapeNode</code>. This lets you define any kind of shape you can draw, along with line width, stroke color and more, and it will render it to the screen. We&#39;re going to draw two lines – one for a yellow glow, and one for a white glow in the middle of the yellow glow – so we&#39;re going to need two <code>SKShapeNode</code> properties:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> activeSliceBG<span class="token punctuation">:</span> <span class="token class-name">SKShapeNode</span><span class="token operator">!</span></span>
<span class="line"><span class="token keyword">var</span> activeSliceFG<span class="token punctuation">:</span> <span class="token class-name">SKShapeNode</span><span class="token operator">!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>And here&#39;s the code for the <code>createSlices()</code> method:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">createSlices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    activeSliceBG <span class="token operator">=</span> <span class="token class-name">SKShapeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    activeSliceBG<span class="token punctuation">.</span>zPosition <span class="token operator">=</span> <span class="token number">2</span></span>
<span class="line"></span>
<span class="line">    activeSliceFG <span class="token operator">=</span> <span class="token class-name">SKShapeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    activeSliceFG<span class="token punctuation">.</span>zPosition <span class="token operator">=</span> <span class="token number">3</span></span>
<span class="line"></span>
<span class="line">    activeSliceBG<span class="token punctuation">.</span>strokeColor <span class="token operator">=</span> <span class="token class-name">UIColor</span><span class="token punctuation">(</span>red<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> green<span class="token punctuation">:</span> <span class="token number">0.9</span><span class="token punctuation">,</span> blue<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> alpha<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    activeSliceBG<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">9</span></span>
<span class="line"></span>
<span class="line">    activeSliceFG<span class="token punctuation">.</span>strokeColor <span class="token operator">=</span> <span class="token class-name">UIColor</span><span class="token punctuation">.</span>white</span>
<span class="line">    activeSliceFG<span class="token punctuation">.</span>lineWidth <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">addChild</span><span class="token punctuation">(</span>activeSliceBG<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">addChild</span><span class="token punctuation">(</span>activeSliceFG<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that the background slice has a thicker line width than the foreground, and has a higher Z position than the background slice. I&#39;m using Z positions 2 and 3 for the slice shapes, because I&#39;ll be using Z position 1 for bombs and Z position 0 for everything else – this ensures the slice shapes are on top, then bombs, then everything else.</p>`,16),D=n("h3",{id:"shaping-up-for-action-cgpath-and-uibezierpath",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#shaping-up-for-action-cgpath-and-uibezierpath"},[n("span",null,[s("Shaping up for action: "),n("code",null,"CGPath"),s(" and "),n("code",null,"UIBezierPath")])])],-1),U={class:"hint-container details"},W=n("summary",null,"Shaping up for action: CGPath and UIBezierPath",-1),M=e(`<p>Like I already explained, we&#39;re going to keep an array of the user&#39;s swipe points so that we can draw a shape resembling their slicing. To make this work, we&#39;re going to need four new methods, two of which you&#39;ve met already. They are: <code>touchesBegan()</code>, <code>touchesMoved()</code>, <code>touchesEnded()</code> and <code>redrawActiveSlice()</code>. You already know how <code>touchesBegan()</code> and <code>touchesMoved()</code> works, and the other &quot;touches&quot; methods all work the same way.</p><p>First things first: add this new property to your class so that we can store swipe points:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> activeSlicePoints <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">CGPoint</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We&#39;re going to tackle the two easiest methods first: <code>touchesMoved()</code> and <code>touchesEnded()</code>. All the <code>touchesMoved()</code> method needs to do is figure out where in the scene the user touched, add that location to the slice points array, then redraw the slice shape, so that&#39;s easy enough:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">touchesMoved</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> touches<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">UITouch</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> with event<span class="token punctuation">:</span> <span class="token class-name">UIEvent</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">guard</span> <span class="token keyword">let</span> touch <span class="token operator">=</span> touches<span class="token punctuation">.</span>first <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">let</span> location <span class="token operator">=</span> touch<span class="token punctuation">.</span><span class="token function">location</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line">    activeSlicePoints<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">redrawActiveSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When the user finishes touching the screen, <code>touchesEnded()</code> will be called. I&#39;m going to make this method fade out the slice shapes over a quarter of a second. We <em>could</em> remove them immediately but that looks ugly, and leaving them sitting there for no reason would rather destroy the effect. So, fading it is – add this <code>touchesEnded()</code> method:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">touchesEnded</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> touches<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">UITouch</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> with event<span class="token punctuation">:</span> <span class="token class-name">UIEvent</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    activeSliceBG<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SKAction</span><span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span>withDuration<span class="token punctuation">:</span> <span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    activeSliceFG<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SKAction</span><span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span>withDuration<span class="token punctuation">:</span> <span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You haven&#39;t used the <code>fadeOut(withDuration:)</code> action before, but I think it&#39;s pretty obvious what it does!</p><p>So far this is all easy stuff, but we&#39;re going to look at an interesting method now: <code>touchesBegan()</code>. One we’ve read out the touch from the <code>UITouch</code> set, this needs to do several things:</p><ol><li>Remove all existing points in the <code>activeSlicePoints</code> array, because we&#39;re starting fresh.</li><li>Get the touch location and add it to the <code>activeSlicePoints</code> array.</li><li>Call the (as yet unwritten) <code>redrawActiveSlice()</code> method to clear the slice shapes.</li><li>Remove any actions that are currently attached to the slice shapes. This will be important if they are in the middle of a <code>fadeOut(withDuration:)</code> action.</li><li>Set both slice shapes to have an alpha value of 1 so they are fully visible.</li></ol><p>We can convert that to code with ease – in fact, I&#39;ve put numbered comments in the code below so you can match them up to the points above:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">touchesBegan</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> touches<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">UITouch</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> with event<span class="token punctuation">:</span> <span class="token class-name">UIEvent</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">guard</span> <span class="token keyword">let</span> touch <span class="token operator">=</span> touches<span class="token punctuation">.</span>first <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 1  </span></span>
<span class="line">    activeSlicePoints<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>keepingCapacity<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 2</span></span>
<span class="line">    <span class="token keyword">let</span> location <span class="token operator">=</span> touch<span class="token punctuation">.</span><span class="token function">location</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line">    activeSlicePoints<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 3</span></span>
<span class="line">    <span class="token function">redrawActiveSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 4</span></span>
<span class="line">    activeSliceBG<span class="token punctuation">.</span><span class="token function">removeAllActions</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    activeSliceFG<span class="token punctuation">.</span><span class="token function">removeAllActions</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 5</span></span>
<span class="line">    activeSliceBG<span class="token punctuation">.</span>alpha <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">    activeSliceFG<span class="token punctuation">.</span>alpha <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So, there&#39;s some challenge there but not a whole lot. Where it gets interesting is the <code>redrawActiveSlice()</code> method, because this is going to use a <code>UIBezierPath</code> that will be used to connect our swipe points together into a single line.</p><p>As with the previous method, let&#39;s take a look at what <code>redrawActiveSlice()</code> needs to do:</p><ol><li>If we have fewer than two points in our array, we don&#39;t have enough data to draw a line so it needs to clear the shapes and exit the method.</li><li>If we have more than 12 slice points in our array, we need to remove the oldest ones until we have at most 12 – this stops the swipe shapes from becoming too long.</li><li>It needs to start its line at the position of the first swipe point, then go through each of the others drawing lines to each point.</li><li>Finally, it needs to update the slice shape paths so they get drawn using their designs – i.e., line width and color.</li></ol><p>To make this work, you&#39;re going to need to know that an <code>SKShapeNode</code> object has a property called <code>path</code> which describes the shape we want to draw. When it&#39;s <code>nil</code>, there&#39;s nothing to draw; when it&#39;s set to a valid path, that gets drawn with the <code>SKShapeNode</code>&#39;s settings. <code>SKShapeNode</code> expects you to use a data type called <code>CGPath</code>, but we can easily create that from a <code>UIBezierPath</code>.</p><p>Drawing a complex path using <code>UIBezierPath</code> is a cinch: we&#39;ll use its <code>move(to:)</code> method to position the start of our lines, then loop through our <code>activeSlicePoints</code> array and call the path&#39;s <code>addLine(to:)</code> method for each point.</p><p>To stop the array storing more than 12 slice points, we’re going new method called <code>removeFirst()</code>, which lets us remove a certain number of items from the start of an array. In this case we know we want at most 12, so we can subtract 12 from our current count to see how many excess we have, and pass that to <code>removeFirst()</code>.</p><p>I&#39;m going to insert numbered comments into the code again to help you match up the goals with the code more easily:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">redrawActiveSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 1</span></span>
<span class="line">    <span class="token keyword">if</span> activeSlicePoints<span class="token punctuation">.</span>count <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token punctuation">{</span></span>
<span class="line">        activeSliceBG<span class="token punctuation">.</span>path <span class="token operator">=</span> <span class="token nil constant">nil</span></span>
<span class="line">        activeSliceFG<span class="token punctuation">.</span>path <span class="token operator">=</span> <span class="token nil constant">nil</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 2</span></span>
<span class="line">    <span class="token keyword">if</span> activeSlicePoints<span class="token punctuation">.</span>count <span class="token operator">&gt;</span> <span class="token number">12</span> <span class="token punctuation">{</span></span>
<span class="line">        activeSlicePoints<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span>activeSlicePoints<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">12</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 3</span></span>
<span class="line">    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token class-name">UIBezierPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    path<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> activeSlicePoints<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span> <span class="token operator">..&lt;</span> activeSlicePoints<span class="token punctuation">.</span>count <span class="token punctuation">{</span></span>
<span class="line">        path<span class="token punctuation">.</span><span class="token function">addLine</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> activeSlicePoints<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 4</span></span>
<span class="line">    activeSliceBG<span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">.</span>cgPath</span>
<span class="line">    activeSliceFG<span class="token punctuation">.</span>path <span class="token operator">=</span> path<span class="token punctuation">.</span>cgPath</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>At this point, we have something you can run: press <kbd>Cmd</kbd>+<kbd>R</kbd> to run the game, then tap and swipe around on the screen to see the slice effect – I think you&#39;ll agree that <code>SKShapeNode</code> is pretty powerful!</p><figure><img src="https://www.hackingwithswift.com/img/books/hws/23-2.png" alt="As the player swipes, their slices light up the screen in a bright yellow curve." tabindex="0" loading="lazy"><figcaption>As the player swipes, their slices light up the screen in a bright yellow curve.</figcaption></figure><p>Before we&#39;re done with the slice effect, we&#39;re going to add one more thing: a &quot;swoosh&quot; sound that plays as you swipe around. You&#39;ve already seen the <code>playSoundFileNamed()</code> method of <code>SKAction</code>, but we&#39;re going to use it a little differently here.</p><p>You see, if we just played a swoosh every time the player moved, there would be 100 sounds playing at any given time – one for every small movement they made. Instead, we want only one swoosh to play at once, so we&#39;re going to set to true a property called <code>isSwooshSoundActive</code>, make the <code>waitForCompletion</code> of our <code>SKAction</code> true, then use a completion closure for <code>runAction()</code> so that <code>isSwooshSoundActive</code> is set to false.</p><p>So, when the player first swipes we set <code>isSwooshSoundActive</code> to be true, and only when the swoosh sound has finished playing do we set it back to false again. This will allow us to ensure only one swoosh sound is playing at a time.</p><p>First, give your class this new property:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> isSwooshSoundActive <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now we need to check whether that&#39;s false when <code>touchesMoved()</code> is called, and, if it is false, call a new method called <code>playSwooshSound()</code>. Add this to code just before the end of <code>touchesMoved()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token operator">!</span>isSwooshSoundActive <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">playSwooshSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I&#39;ve provided you with three different swoosh sounds, all of which are effectively the same just at varying pitches. The <code>playSwooshSound()</code> method needs to set <code>isSwooshSoundActive</code> to be true (so that no other swoosh sounds are played until we&#39;re ready), play one of the three sounds, then when the sound has finished set <code>isSwooshSoundActive</code> to be false again so that another swoosh sound can play.</p><p>By playing our sound with <code>waitForCompletion</code> set to true, SpriteKit automatically ensures the completion closure given to <code>runAction()</code> isn&#39;t called until the sound has finished, so this solution is perfect.</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">playSwooshSound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    isSwooshSoundActive <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> randomNumber <span class="token operator">=</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> soundName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;swoosh</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">randomNumber</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.caf&quot;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> swooshSound <span class="token operator">=</span> <span class="token class-name">SKAction</span><span class="token punctuation">.</span><span class="token function">playSoundFileNamed</span><span class="token punctuation">(</span>soundName<span class="token punctuation">,</span> waitForCompletion<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">run</span><span class="token punctuation">(</span>swooshSound<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token keyword">weak</span> <span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token keyword">in</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span>isSwooshSoundActive <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you try running the game now you should hear only one swipe sound at a time.</p>`,33),Y=n("h3",{id:"enemy-or-bomb-avaudioplayer",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#enemy-or-bomb-avaudioplayer"},[n("span",null,"Enemy or bomb: AVAudioPlayer")])],-1),O={class:"hint-container details"},R=n("summary",null,"Enemy or bomb: AVAudioPlayer",-1),L=e("<p>In this section we&#39;re going to look at just one method, which should tell you immediately that this is a <em>complicated</em> method. This method is called <code>createEnemy()</code>, and is responsible for launching either a penguin or a bomb into the air for the player to swipe. That&#39;s it – that&#39;s all it does. And yet it&#39;s going to take quite a lot of code because it takes quite a lot of functionality in order to make the game complete:</p><ol><li>Should this enemy be a penguin or a bomb?</li><li>Where should be it created on the screen?</li><li>What direction should it be moving in?</li></ol><p>It should be obvious that 3) relies on 2) – if you create something on the left edge of the screen, having it move to the left would make the game impossible for players!</p><p>An additional complexity is that in the early stages of the game we sometimes want to force a bomb, and sometimes force a penguin, in order to build a smooth learning curve. For example, it wouldn&#39;t be fair to make the very first enemy a bomb, because the player would swipe it and lose immediately.</p><p>We&#39;re going to specify what kind of enemy we want using an enum. You&#39;ve used enums already (not least in project 2), but you&#39;ve never created one before. To make <code>createEnemy()</code> work, we need to declare a new enum that tracks what kind of enemy should be created: should we force a bomb always, should we force a bomb never, or use the default randomization?</p>",5),X=n("em",null,"above",-1),Z=n("code",null,"GameScene.swift",-1),H=e(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">ForceBomb</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> never<span class="token punctuation">,</span> always<span class="token punctuation">,</span> random</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can now use those values in your code, for example like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> forceBomb <span class="token operator">==</span> <span class="token punctuation">.</span>never <span class="token punctuation">{</span></span>
<span class="line">    enemyType <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> forceBomb <span class="token operator">==</span> <span class="token punctuation">.</span>always <span class="token punctuation">{</span></span>
<span class="line">    enemyType <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>OK, it&#39;s time to start looking at the <code>createEnemy()</code> method. I say &quot;start&quot; because we&#39;re going to look at it in three passes: the code required to create bombs, the code to position enemies and set up their physics, and the code required to do everything else. Your code probably won&#39;t run until all three parts are in place, so don&#39;t worry!</p><p>We&#39;re going to need to track enemies that are currently active in the scene, so please add this array as a property of your class:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> activeEnemies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">SKSpriteNode</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And now let&#39;s look at the core of the <code>createEnemy()</code> method. It needs to:</p><ol><li>Accept a parameter of whether we want to force a bomb, not force a bomb, or just be random.</li><li>Decide whether to create a bomb or a penguin (based on the parameter input) then create the correct thing.</li><li>Add the new enemy to the scene, and also to our <code>activeEnemies</code> array.</li></ol><p>That&#39;s it. Not too much, I hope. To decide whether to create a bomb or a player, I&#39;ll choose a random number from 0 to 6, and consider 0 to mean &quot;bomb&quot;. Here&#39;s the code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">createEnemy</span><span class="token punctuation">(</span>forceBomb<span class="token punctuation">:</span> <span class="token class-name">ForceBomb</span> <span class="token operator">=</span> <span class="token punctuation">.</span>random<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> enemy<span class="token punctuation">:</span> <span class="token class-name">SKSpriteNode</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> enemyType <span class="token operator">=</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> forceBomb <span class="token operator">==</span> <span class="token punctuation">.</span>never <span class="token punctuation">{</span></span>
<span class="line">        enemyType <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> forceBomb <span class="token operator">==</span> <span class="token punctuation">.</span>always <span class="token punctuation">{</span></span>
<span class="line">        enemyType <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> enemyType <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// bomb code goes here</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        enemy <span class="token operator">=</span> <span class="token class-name">SKSpriteNode</span><span class="token punctuation">(</span>imageNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;penguin&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SKAction</span><span class="token punctuation">.</span><span class="token function">playSoundFileNamed</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;launch.caf&quot;</span></span><span class="token punctuation">,</span> waitForCompletion<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        enemy<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;enemy&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// position code goes here</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">addChild</span><span class="token punctuation">(</span>enemy<span class="token punctuation">)</span></span>
<span class="line">    activeEnemies<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>enemy<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Note</strong>: Xcode will show you a compiler error for now, but don’t worry – we’re going to fix it.</p><p>There&#39;s nothing complicated in there, but I <em>have</em> taken out two fairly meaty chunks of code. That <code>// position code goes here</code> comment masks a lot of missing functionality that really makes the game come alive, so we&#39;re going to fill that in now.</p><p>I&#39;m going to use numbered comments again so you can see exactly how this code matches up with what it should do. So, here is what that missing position code needs to do:</p><ol><li>Give the enemy a random position off the bottom edge of the screen.</li><li>Create a random angular velocity, which is how fast something should spin.</li><li>Create a random X velocity (how far to move horizontally) that takes into account the enemy&#39;s position.</li><li>Create a random Y velocity just to make things fly at different speeds.</li><li>Give all enemies a circular physics body where the <code>collisionBitMask</code> is set to 0 so they don&#39;t collide.</li></ol><p>The only thing that might catch you out in the actual code is my use of magic numbers, which is what programmers call seemingly random (but actually important) numbers appearing in code. Ideally you don&#39;t want these, because it&#39;s better to make them constants with names, but then how would I be able to give you any homework?</p><p>Turning those five points into code is easy enough – just replace the <code>// position code goes here</code> with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token comment">// 1</span></span>
<span class="line"><span class="token keyword">let</span> randomPosition <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">64</span><span class="token operator">...</span><span class="token number">960</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">)</span></span>
<span class="line">enemy<span class="token punctuation">.</span>position <span class="token operator">=</span> randomPosition</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2</span></span>
<span class="line"><span class="token keyword">let</span> randomAngularVelocity <span class="token operator">=</span> <span class="token class-name">CGFloat</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">3</span><span class="token operator">...</span><span class="token number">3</span> <span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> randomXVelocity<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3</span></span>
<span class="line"><span class="token keyword">if</span> randomPosition<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> <span class="token number">256</span> <span class="token punctuation">{</span></span>
<span class="line">    randomXVelocity <span class="token operator">=</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token operator">...</span><span class="token number">15</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> randomPosition<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> <span class="token number">512</span> <span class="token punctuation">{</span></span>
<span class="line">    randomXVelocity <span class="token operator">=</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token operator">...</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> randomPosition<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> <span class="token number">768</span> <span class="token punctuation">{</span></span>
<span class="line">    randomXVelocity <span class="token operator">=</span> <span class="token operator">-</span><span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token operator">...</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    randomXVelocity <span class="token operator">=</span> <span class="token operator">-</span><span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token operator">...</span><span class="token number">15</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 4</span></span>
<span class="line"><span class="token keyword">let</span> randomYVelocity <span class="token operator">=</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">24</span><span class="token operator">...</span><span class="token number">32</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 5</span></span>
<span class="line">enemy<span class="token punctuation">.</span>physicsBody <span class="token operator">=</span> <span class="token class-name">SKPhysicsBody</span><span class="token punctuation">(</span>circleOfRadius<span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">)</span></span>
<span class="line">enemy<span class="token punctuation">.</span>physicsBody<span class="token operator">?</span><span class="token punctuation">.</span>velocity <span class="token operator">=</span> <span class="token class-name">CGVector</span><span class="token punctuation">(</span>dx<span class="token punctuation">:</span> randomXVelocity <span class="token operator">*</span> <span class="token number">40</span><span class="token punctuation">,</span> dy<span class="token punctuation">:</span> randomYVelocity <span class="token operator">*</span> <span class="token number">40</span><span class="token punctuation">)</span></span>
<span class="line">enemy<span class="token punctuation">.</span>physicsBody<span class="token operator">?</span><span class="token punctuation">.</span>angularVelocity <span class="token operator">=</span> randomAngularVelocity</span>
<span class="line">enemy<span class="token punctuation">.</span>physicsBody<span class="token operator">?</span><span class="token punctuation">.</span>collisionBitMask <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The last missing part of the <code>createEnemy()</code> method is about creating bombs, and I&#39;ve left it separate because it requires some thinking. A &quot;bomb&quot; node in our game is actually going to be made up of three parts: the bomb image, a bomb fuse particle emitter, and a container that puts the two together so we can move and spin them around together.</p><p>The reason we need to keep the bomb image and bomb fuse separate is because tapping on a bomb is a fatal move that causes the player to lose all their lives immediately. If the fuse particle emitter were inside the bomb image, then the user could accidentally tap a stray fuse particle and lose unfairly.</p><p>As a reminder, we&#39;re going to force the Z position of bombs to be 1, which is higher than the default value of 0. This is so that bombs always appear in front of penguins, because hours of play testing has made it clear to me that it&#39;s awful if you don&#39;t realize there&#39;s a bomb lurking behind something when you swipe it!</p><p>Creating a bomb also needs to play a fuse sound, but that has its own complexity. You&#39;ve already seen that <code>SKAction</code> has a very simple way to play sounds, but it&#39;s so simple that it&#39;s not useful here because we want to be able to stop the sound and <code>SKAction</code> sounds don&#39;t let you do that. It would be confusing for the fuse sound to be playing when no bombs are visible, so we need a better solution.</p><p>That solution is called <code>AVAudioPlayer</code>, and it&#39;s not a SpriteKit class – it&#39;s available to use in your UIKit apps too if you want. We&#39;re going to have an <code>AVAudioPlayer</code> property for our class that will store a sound just for bomb fuses so that we can stop it as needed.</p><p>Let&#39;s put numbers to the tasks this chunk of code needs to perform:</p><ol><li>Create a new <code>SKSpriteNode</code> that will hold the fuse and the bomb image as children, setting its Z position to be 1.</li><li>Create the bomb image, name it &quot;bomb&quot;, and add it to the container.</li><li>If the bomb fuse sound effect is playing, stop it and destroy it.</li><li>Create a new bomb fuse sound effect, then play it.</li><li>Create a particle emitter node, position it so that it&#39;s at the end of the bomb image&#39;s fuse, and add it to the container.</li></ol><p>That&#39;s all you need to know in order to continue. We need to start by importing the AVFoundation framework, so add this line now next to <code>import SpriteKit</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token class-name">AVFoundation</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You&#39;ll also need to declare the <code>bombSoundEffect</code> property, so put this just after the declaration of <code>isSwooshSoundActive</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> bombSoundEffect<span class="token punctuation">:</span> <span class="token class-name">AVAudioPlayer</span><span class="token operator">?</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now for the real work. Please replace the <code>// bomb code goes here</code> comment with this, watching out for my numbered comments to help you match code against meaning:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token comment">// 1</span></span>
<span class="line">enemy <span class="token operator">=</span> <span class="token class-name">SKSpriteNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">enemy<span class="token punctuation">.</span>zPosition <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">enemy<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;bombContainer&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2</span></span>
<span class="line"><span class="token keyword">let</span> bombImage <span class="token operator">=</span> <span class="token class-name">SKSpriteNode</span><span class="token punctuation">(</span>imageNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;sliceBomb&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">bombImage<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;bomb&quot;</span></span></span>
<span class="line">enemy<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>bombImage<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3</span></span>
<span class="line"><span class="token keyword">if</span> bombSoundEffect <span class="token operator">!=</span> <span class="token nil constant">nil</span> <span class="token punctuation">{</span></span>
<span class="line">    bombSoundEffect<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    bombSoundEffect <span class="token operator">=</span> <span class="token nil constant">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 4</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token class-name">Bundle</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>forResource<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;sliceBombFuse&quot;</span></span><span class="token punctuation">,</span> withExtension<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;caf&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> sound <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span>  <span class="token class-name">AVAudioPlayer</span><span class="token punctuation">(</span>contentsOf<span class="token punctuation">:</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        bombSoundEffect <span class="token operator">=</span> sound</span>
<span class="line">        sound<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 5</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> emitter <span class="token operator">=</span> <span class="token class-name">SKEmitterNode</span><span class="token punctuation">(</span>fileNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;sliceFuse&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    emitter<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">76</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">64</span><span class="token punctuation">)</span></span>
<span class="line">    enemy<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>emitter<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>After all that work, you&#39;re almost done with bombs. But there&#39;s one small bug that we can either fix now or fix when you can see it, but we might as well fix it now because your brain is thinking about all that bomb code.</p><p>The bug is this: we&#39;re using <code>AVAudioPlayer</code> so that we can stop the bomb fuse when bombs are no longer on the screen. But where do we actually stop the sound? Well, we don&#39;t yet – but we need to.</p><p>To fix the bug, we need to modify the <code>update()</code> method, which is something we haven&#39;t touched before – in fact, so far we’ve just been deleting it! This method is called every frame before it&#39;s drawn, and gives you a chance to update your game state as you want. We&#39;re going to use this method to count the number of bomb containers that exist in our game, and stop the fuse sound if the answer is 0.</p><p>Change your <code>update()</code> method to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">update</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> currentTime<span class="token punctuation">:</span> <span class="token class-name">TimeInterval</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> bombCount <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> node <span class="token keyword">in</span> activeEnemies <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> node<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;bombContainer&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">            bombCount <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">            <span class="token keyword">break</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> bombCount <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// no bombs – stop the fuse sound!</span></span>
<span class="line">        bombSoundEffect<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        bombSoundEffect <span class="token operator">=</span> <span class="token nil constant">nil</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35),J=n("hr",null,null,-1);function Q(d,$){const t=u("router-link"),o=u("VPCard"),c=u("VidStack"),r=u("FontIcon");return v(),m("div",null,[n("h1",w,[n("a",g,[n("span",null,h(d.$frontmatter.title)+" 관련",1)])]),n("nav",f,[n("ul",null,[n("li",null,[a(t,{to:"#project-23-part-one"},{default:p(()=>[s("Project 23, part one")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#setting-up"},{default:p(()=>[s("Setting up")]),_:1})]),n("li",null,[a(t,{to:"#basics-quick-start-skshapenode"},{default:p(()=>[s("Basics quick start: SKShapeNode")]),_:1})]),n("li",null,[a(t,{to:"#shaping-up-for-action-cgpath-and-uibezierpath"},{default:p(()=>[s("Shaping up for action: CGPath and UIBezierPath")]),_:1})]),n("li",null,[a(t,{to:"#enemy-or-bomb-avaudioplayer"},{default:p(()=>[s("Enemy or bomb: AVAudioPlayer")]),_:1})])])])])]),y,a(o,i(l({title:"100 Days of Swift - Day 77",desc:"Project 23, part one",link:"https://www.hackingwithswift.com/100/77",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),S,n("details",_,[I,a(o,i(l({title:"100 Days of Swift - Day 77 - Setting up",desc:"Setting up",link:"https://www.hackingwithswift.com/read/23/1/setting-up",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/JNg1kLsttLY"}),A,n("p",null,[s("Create a new SpriteKit project in Xcode, name it Project23, then do the usual cleaning job to create a completely empty SpriteKit project: remove all the code from "),P,s(" and "),x,s(", change the anchor point and size of "),a(r,{icon:"fas fa-file-lines"}),q,s(", and so on.")]),n("p",null,[s("You should also download the files for this project from "),n("a",j,[a(r,{icon:"iconfont icon-github"}),N]),s(", then copy its Content folder into your Xcode project.")]),C,B]),K,n("details",T,[G,a(o,i(l({title:"100 Days of Swift - Day 77 - Basics quick start: SKShapeNode",desc:"Basics quick start: SKShapeNode",link:"https://www.hackingwithswift.com/read/23/2/basics-quick-start-skshapenode",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/CK9OwMyJQDY"}),E,n("p",null,[s("Open up "),a(r,{icon:"fa-brands fa-swift"}),V,s(" and put this into "),z,s(":")]),F]),D,n("details",U,[W,a(o,i(l({title:"100 Days of Swift - Day 77 - Shaping up for action: CGPath and UIBezierPath",desc:"Shaping up for action: CGPath and UIBezierPath",link:"https://www.hackingwithswift.com/read/23/3/shaping-up-for-action-cgpath-and-uibezierpath",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/ztVwxIpMwiI"}),M]),Y,n("details",O,[R,a(o,i(l({title:"100 Days of Swift - Day 77 - Enemy or bomb: AVAudioPlayer",desc:"Enemy or bomb: AVAudioPlayer",link:"https://www.hackingwithswift.com/read/23/4/enemy-or-bomb-avaudioplayer",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/4R6rbsWLRoM"}),L,n("p",null,[s("Add this "),X,s(" your class definition in "),a(r,{icon:"fa-brands fa-swift"}),Z,s(":")]),H]),J])}const an=k(b,[["render",Q],["__file","77.html.vue"]]),en=JSON.parse('{"path":"/swift/100-days-of-swift/77.html","title":"Day 77","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 77","description":"100 Days of Swift > Day 77","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of Swift > Day 77"},{"property":"og:description","content":"Day 77"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swift/77.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swift/77.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 77"}],["meta",{"property":"og:description","content":"100 Days of Swift > Day 77"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.hackingwithswift.com/img/books/hws/23-1.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 77\\",\\"image\\":[\\"https://www.hackingwithswift.com/img/books/hws/23-1.png\\",\\"https://www.hackingwithswift.com/img/books/hws/23-2.png\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 23, part one","slug":"project-23-part-one","link":"#project-23-part-one","children":[{"level":3,"title":"Setting up","slug":"setting-up","link":"#setting-up","children":[]},{"level":3,"title":"Basics quick start: SKShapeNode","slug":"basics-quick-start-skshapenode","link":"#basics-quick-start-skshapenode","children":[]},{"level":3,"title":"Shaping up for action: CGPath and UIBezierPath","slug":"shaping-up-for-action-cgpath-and-uibezierpath","link":"#shaping-up-for-action-cgpath-and-uibezierpath","children":[]},{"level":3,"title":"Enemy or bomb: AVAudioPlayer","slug":"enemy-or-bomb-avaudioplayer","link":"#enemy-or-bomb-avaudioplayer","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":14}]},"readingTime":{"minutes":14.72,"words":4415},"filePathRelative":"swift/100-days-of-swift/77.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{an as comp,en as data};
