import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,a as t,t as d,b as e,w as n,n as h,g as u,e as k,r as o,o as m,d as a}from"./app-U_bew1in.js";const K={},v={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},_={class:"table-of-contents"},f=t("hr",null,null,-1),b=t("p",null,"Kotlin의 테스팅 프레임워크에 대해 소개한다.",-1),T=t("hr",null,null,-1),D=t("h2",{id:"kotest란",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#kotest란"},[t("span",null,"Kotest란?")])],-1),x=t("p",null,"Kotlin은 현대적이고 강력한 언어로서 개발자들이 안정적이고 견고한 소프트웨어를 개발할 수 있게 해준다. 이에 품질을 유지하고 기능을 보장하기 위해서는 효과적인 테스트가 필수적인데, 이를 위해 Kotlin 개발자들은 Kotest와 같은 강력한 테스트 프레임워크를 사용한다.",-1),y=t("p",null,"Java에서는 예전부터 JUnit을 테스트에 많이 사용해 왔다. Kotlin에서도 JUnit으로 테스트를 사용하는 것이 가능하고 많이 사용되기도 한다. JUnit은 Java로 구현 테스팅 프레임워크이지만, Kotest는 순정 Kotlin으로 구현된 테스팅 프레임워크이다. Kotest를 사용하면 JUnit에 비해 Kotlin의 Syntax를 사용할 수 있으므로 코드 양을 줄일 수 있다. 그리고 하나의 테스트 케이스 내에 다른 테스트 케이스를 포함하여 중첩(Nested)되게 작성할 수 있는 이점이 있다. 이는 테스트를 더욱 모듈화하고 구조화하여 표현할 수 있는 방법을 제공한다.",-1),w=t("p",null,"Kotest는 Kotlin으로 작성된 유연하고 강력한 테스트 프레임워크이다. Kotest는 Kotlin의 강력한 기능을 활용하여 테스트 작성 및 관리를 쉽고 효과적으로 수행할 수 있도록 지원한다. 이 프레임워크는 다양한 테스트 스타일과 구성 옵션을 제공하여 다양한 테스트 요구사항을 충족시킬 수 있다.",-1),A=t("p",null,"자세한 내용은 공식 사이트에서 정리되어 있는데, 여기서 간단히 소개를 하자면, 큰 특징으로서는 10가지 종류의 Spec이라고 하는 클래스가 준비되어 있고, 원하는 Spec를 선택해 테스트를 쓰는 것이 수 있다. Spec은 각각 다양한 언어, 테스팅 프레임워크의 영향을 받아 만들어지고 있으며 다른 언어에서 Kotlin을 시작한 사람은 자신의 모국어 테스트 Spec을 선택할 수 있다.",-1),S=k(`<p>그 밖에도 실험적인 기능을 포함한 많은 기능과 Assertion, Extension이 준비되어 있다.</p><p>여기에서는 Kotest의 기본 구문에 대해 정리하고, Kotest를 지원하는 라이브러리에 대해서도 설명한다.</p><div class="hint-container info"><p class="hint-container-title">원래 Kotest는?</p><p>Kotlin에서 사용할 수 있는 테스팅 프레임워크으로 이전에는 KotlinTest라는 이름이었지만, 릴리스 4.0부터는 Jetbrains 제공 패키지와의 혼동을 피하기 위해 Kotest로 이름이 변경되었다.</p></div><p>먼저 예제 코드를 살펴보겠다. 아래 코드는 공식 샘플 테스트 코드이다.</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">class</span> MyTests <span class="token operator">:</span> <span class="token function">StringSpec</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-literal singleline"><span class="token string">&quot;length should return size of string&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string-literal singleline"><span class="token string">&quot;hello&quot;</span></span><span class="token punctuation">.</span>length shouldBe <span class="token number">5</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token string-literal singleline"><span class="token string">&quot;startsWith should test for a prefix&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string-literal singleline"><span class="token string">&quot;world&quot;</span></span> should <span class="token function">startWith</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;wor&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>코드에 대해서는 나중에 더 자세히 살펴 보겠지만, 여기서 간단히 살펴 보면, <code>StringSpec</code> 클래스를 상속을 받은 것을 볼 수 있다. 그리고, 테스트에 설명을 문자열로 작성을 하였고, <code>shouldBe</code>와 <code>should</code>으로 검증을 하고 있다.</p><p>이렇게 Kotest는 Kotlin의 Syntax으로 2개의 테스트 코드를 중첩되게 작성할 수 있는 것을 확인할 수 있다.</p><hr><h2 id="kotest의-장점과-특징" tabindex="-1"><a class="header-anchor" href="#kotest의-장점과-특징"><span>Kotest의 장점과 특징</span></a></h2><p>Kotest는 다양한 장점과 특징을 가지고 있다.</p><h3 id="kotest-장점" tabindex="-1"><a class="header-anchor" href="#kotest-장점"><span>KoTest 장점</span></a></h3><ul><li>Kotest는 Kotlin 언어와 완벽하게 통합되어 있으며, Kotlin의 강력한 기능을 최대한 활용할 수 있다.</li><li>Kotest는 다양한 테스트 스타일을 지원하여, 개발자가 자신의 취향에 맞는 스타일을 선택할 수 있다.</li><li>Kotest는 다양한 기능을 제공하여, 테스트 작성과 관리를 향상시킨다.</li></ul><p>이러한 기능은 Assertion과 Matchers, 모킹 및 스텁, 테스트 데이터 관리 등이 있다. 마지막으로, Kotest는 확장 가능한 플러그인 아키텍처를 제공하여 사용자가 필요에 따라 라이브러리를 확장할 수 있다.</p><p>Kotest는 Kotlin 기반 프로젝트에서 테스트를 작성하는 데 필요한 모든 도구와 기능을 제공하며, 개발자들이 안정적이고 품질 높은 소프트웨어를 개발하는 데 큰 도움이 된다.</p><h3 id="kotest-특징" tabindex="-1"><a class="header-anchor" href="#kotest-특징"><span>KoTest 특징</span></a></h3><ul><li>Kotest DSL을 사용</li><li>여러 TestStyle을 사용하여 간단하고 아름다운 테스트 작성</li><li>데이터 기반 테스트로 많은 양의 매개변수도 테스트 가능</li><li>모든 테스트에 대해 호출수, 병렬 처리, 시간제한, 테스트 그룹화, 조건부 비활성 등의 미세 조정 테스트 가능</li><li>중첩 테스트기능 제공</li><li>동적 테스트 제공 (런타임에 조건부로 테스트를 추가 가능)</li><li>테스트 수명주기에 맞는 다양한 콜백을 제공</li></ul><hr><h2 id="테스트-주도-개발-소개" tabindex="-1"><a class="header-anchor" href="#테스트-주도-개발-소개"><span>테스트 주도 개발 소개</span></a></h2><p>Kotest는 테스트 주도 개발(Test-driven development, TDD)를 지원하는 데 매우 유용한 도구이다. TDD는 소프트웨어 개발 방법론 중 하나로, 테스트를 작성하고 이를 기반으로 코드를 작성하는 방식이다. 이를 통해 코드의 품질을 향상시키고 버그를 미리 발견할 수 있다.</p><div class="hint-container info"><p class="hint-container-title">테스트 주도 개발(Test-driven development, TDD)</p><p>은 소프트웨어 개발 방법론 중 하나로, 테스트 케이스를 먼저 작성하고 그 테스트 케이스를 통과시키는 코드를 작성하는 과정을 반복하여 소프트웨어를 개발하는 방법론이다. 이 방법론은 코드의 품질을 향상시키고 버그를 줄이는 데 도움을 준다.</p></div><h3 id="kotest는-tdd를-지원한다" tabindex="-1"><a class="header-anchor" href="#kotest는-tdd를-지원한다"><span>Kotest는 TDD를 지원한다.</span></a></h3><p>Kotest는 TDD를 지원하기 위해 다음과 같은 기능을 제공한다:</p><h4 id="_1-간편한-테스트-작성" tabindex="-1"><a class="header-anchor" href="#_1-간편한-테스트-작성"><span>1. 간편한 테스트 작성</span></a></h4><p>Kotest는 간단하고 직관적인 API를 제공하여 테스트를 작성하기 쉽게 만든다. 다양한 스타일과 Matchers를 활용하여 코드를 더욱 효과적으로 테스트할 수 있다.</p><h4 id="_2-테스트-자동-실행" tabindex="-1"><a class="header-anchor" href="#_2-테스트-자동-실행"><span>2. 테스트 자동 실행</span></a></h4><p>Kotest는 테스트가 변경될 때마다 자동으로 실행되는 기능을 제공한다. 이를 통해 테스트를 지속적으로 실행하고 코드 변경에 따른 영향을 빠르게 확인할 수 있다.</p><h4 id="_3-테스트-커버리지-도구와-통합" tabindex="-1"><a class="header-anchor" href="#_3-테스트-커버리지-도구와-통합"><span>3. 테스트 커버리지 도구와 통합</span></a></h4><p>Kotest는 코드 커버리지 도구와의 통합을 지원하여 테스트 커버리지를 측정하고 테스트되지 않은 코드를 식별할 수 있다. 이를 통해 테스트의 완성도를 높일 수 있다. 4. 모의 객체 및 스텁 지원: Kotest는 MockK와 같은 모의 객체 및 스텁 라이브러리를 지원하여 테스트 중에 외부 의존성을 대체할 수 있다. 이를 통해 테스트를 더욱 격리시키고 테스트의 안정성을 높일 수 있다.</p><h3 id="tdd의-핵심-원칙" tabindex="-1"><a class="header-anchor" href="#tdd의-핵심-원칙"><span>TDD의 핵심 원칙</span></a></h3><p>TDD의 핵심 원칙으로 “Red, Green, Refactor&quot;는 소프트웨어 개발 과정에서 지켜야 할 접근 방식을 말한다. 이 원칙은 테스트를 작성하고 코드를 구현하며 코드를 개선하는 일련의 단계를 나타낸다.</p><h4 id="_1-red-빨강" tabindex="-1"><a class="header-anchor" href="#_1-red-빨강"><span>1. Red (빨강)</span></a></h4><p>빨간 상태는 테스트가 실패한 상태를 의미한다. 새로운 기능을 구현하기 전에 빨간 상태를 만들어야 한다. Kotest에서는 테스트를 작성하고 실행하여 테스트가 실패하도록 만들어야 한다. 이 단계에서는 테스트가 존재하지 않거나 기대한 결과를 반환하지 않는 코드를 작성한다.</p><h4 id="_2-green-초록" tabindex="-1"><a class="header-anchor" href="#_2-green-초록"><span>2. Green (초록)</span></a></h4><p>초록 상태는 테스트가 성공한 상태를 의미한다. Red 상태에서 실패한 테스트를 통과할 수 있도록 코드를 작성한다. Kotest에서는 실패한 테스트를 통과할 수 있도록 코드를 수정하고, 테스트를 다시 실행하여 초록 상태로 만들어야 한다.</p><h4 id="_3-refactor-리팩터" tabindex="-1"><a class="header-anchor" href="#_3-refactor-리팩터"><span>3. Refactor (리팩터)</span></a></h4><p>리팩터 단계는 코드를 개선하고 테스트를 통해 코드의 동작을 보존하는 단계이다. 초록 상태에서는 테스트를 통과하지만 코드가 여전히 개선될 여지가 있다. Kotest에서는 코드를 리팩터링하여 코드의 가독성, 유지 보수성, 성능 등을 향상시킬 수 있다. 이때 테스트를 통해 코드 변경으로 인해 기존 동작이 변하지 않았음을 확인해야 한다.</p><p>이러한 “Red, Green, Refactor” 접근 방식을 따르면서 Kotest를 사용하면 소프트웨어 개발 과정에서 테스트 주도 개발을 보다 효과적으로 수행할 수 있다. 테스트가 실패한 후 성공하도록 코드를 작성하고, 이후 코드를 개선하면서도 테스트를 통해 코드의 안정성을 보장할 수 있다.</p><p>TDD는 소프트웨어의 설계, 품질, 유지보수성을 향상시키는 데 도움이 되며, Kotest와 같은 테스트 라이브러리를 사용하여 효과적으로 적용할 수 있다. TDD를 사용하여 소프트웨어를 개발할 때 Kotest를 활용하면 더욱 효과적으로 테스트를 작성하고 유지할 수 있다.</p><hr>`,39);function R(l,q){const s=o("router-link"),i=o("VPCard"),r=o("SiteInfo");return m(),c("div",null,[t("h1",v,[t("a",g,[t("span",null,d(l.$frontmatter.title)+" 관련",1)])]),t("nav",_,[t("ul",null,[t("li",null,[e(s,{to:"#kotest란"},{default:n(()=>[a("Kotest란?")]),_:1})]),t("li",null,[e(s,{to:"#kotest의-장점과-특징"},{default:n(()=>[a("Kotest의 장점과 특징")]),_:1}),t("ul",null,[t("li",null,[e(s,{to:"#kotest-장점"},{default:n(()=>[a("KoTest 장점")]),_:1})]),t("li",null,[e(s,{to:"#kotest-특징"},{default:n(()=>[a("KoTest 특징")]),_:1})])])]),t("li",null,[e(s,{to:"#테스트-주도-개발-소개"},{default:n(()=>[a("테스트 주도 개발 소개")]),_:1}),t("ul",null,[t("li",null,[e(s,{to:"#kotest는-tdd를-지원한다"},{default:n(()=>[a("Kotest는 TDD를 지원한다.")]),_:1})]),t("li",null,[e(s,{to:"#tdd의-핵심-원칙"},{default:n(()=>[a("TDD의 핵심 원칙")]),_:1})])])])])]),f,e(i,h(u({title:"Kotest 개요(overview)",desc:"Kotlin의 테스팅 프레임워크에 대해 소개한다.",link:"https://devkuma.com/docs/kotest/framework/overview/",logo:"https://devkuma.com/favicons/favicon.ico",background:"rgba(48,99,142,0.2)"})),null,16),b,T,D,x,y,w,A,e(r,{name:"Kotest | Kotest",desc:"Flexible, powerful and elegant kotlin test framework with multiplatform support",url:"https://kotest.io/",logo:"https://kotest.io/img/logo.png",preview:"https://devkuma.com/docs/kotest/kotest-site.png"}),S])}const N=p(K,[["render",R],["__file","01A.html.vue"]]),P=JSON.parse('{"path":"/java/devkuma-kotest/01-kotest-framework/01A.html","title":"01A. Kotest 개요(overview)","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"01A. Kotest 개요(overview)","description":"코틀린 테스팅 프레임워크 - Kotest > 01A. Kotest 개요(overview)","category":["Kotlin","Test","Kotest"],"tag":["crashcourse","kotlin","test","kotest"],"head":[[{"meta":null},{"property":"og:title","content":"코틀린 테스팅 프레임워크 - Kotest > 01A. Kotest 개요(overview)"},{"property":"og:description","content":"01A. Kotest 개요(overview)"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/java/devkuma-kotest/01-kotest-framework/01A.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/java/devkuma-kotest/01-kotest-framework/01A.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"01A. Kotest 개요(overview)"}],["meta",{"property":"og:description","content":"코틀린 테스팅 프레임워크 - Kotest > 01A. Kotest 개요(overview)"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"kotlin"}],["meta",{"property":"article:tag","content":"test"}],["meta",{"property":"article:tag","content":"kotest"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"01A. Kotest 개요(overview)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Kotest란?","slug":"kotest란","link":"#kotest란","children":[]},{"level":2,"title":"Kotest의 장점과 특징","slug":"kotest의-장점과-특징","link":"#kotest의-장점과-특징","children":[{"level":3,"title":"KoTest 장점","slug":"kotest-장점","link":"#kotest-장점","children":[]},{"level":3,"title":"KoTest 특징","slug":"kotest-특징","link":"#kotest-특징","children":[]}]},{"level":2,"title":"테스트 주도 개발 소개","slug":"테스트-주도-개발-소개","link":"#테스트-주도-개발-소개","children":[{"level":3,"title":"Kotest는 TDD를 지원한다.","slug":"kotest는-tdd를-지원한다","link":"#kotest는-tdd를-지원한다","children":[]},{"level":3,"title":"TDD의 핵심 원칙","slug":"tdd의-핵심-원칙","link":"#tdd의-핵심-원칙","children":[]}]}],"git":{"createdTime":1711976583000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":3}]},"readingTime":{"minutes":0.97,"words":291},"filePathRelative":"java/devkuma-kotest/01-kotest-framework/01A.md","localizedDate":"2024년 4월 1일","excerpt":"\\n\\n<hr>\\n"}');export{N as comp,P as data};
