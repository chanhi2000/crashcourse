import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as e,t as d,b as s,n as m,g as u,d as a,e as o,r as n,o as h}from"./app-U_bew1in.js";const g={},k={id:"frontmatter-title-관련",tabindex:"-1"},_={class:"header-anchor",href:"#frontmatter-title-관련"},v=e("nav",{class:"table-of-contents"},[e("ul")],-1),b=e("hr",null,null,-1),f=e("p",null,"앞에서 데이터 볼륨을 사용하는 방법을 알아보았습니다. 데이터 볼륨 컨테이너는 데이터 볼륨을 설정한 컨테이너를 뜻합니다. 일반 컨테이너에서 데이터 볼륨 컨테이너를 연결하면 데이터 볼륨 컨테이너 안의 데이터 볼륨 디렉터리에 접근할 수 있습니다.",-1),y=e("figure",null,[e("img",{src:"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/7.png",alt:"strong> Docker 데이터 볼륨 컨테이너",tabindex:"0",loading:"lazy"}),e("figcaption",null,"strong> Docker 데이터 볼륨 컨테이너")],-1),D=e("code",null,"docker rm",-1),E=e("code",null,"/data",-1),w=e("code",null,"hello2",-1),T=e("kbd",null,"Ctrl",-1),x=e("kbd",null,"P",-1),j=e("kbd",null,"Ctrl",-1),P=e("kbd",null,"Q",-1),B=o(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-i</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">--name</span> hello-volume <span class="token parameter variable">-v</span> /root/data:/data ubuntu /bin/bash</span>
<span class="line"><span class="token builtin class-name">cd</span> /data</span>
<span class="line"><span class="token function">touch</span> hello2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),C=e("code",null,"hello-volume",-1),R=e("code",null,"/data",-1),U=o(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-i</span> <span class="token parameter variable">-t</span> --volumes-from hello-volume <span class="token parameter variable">--name</span> hello ubuntu /bin/bash</span>
<span class="line"><span class="token function">ls</span> /data</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># hello2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>데이터 볼륨 컨테이너를 연결하는 옵션은 <code>--volumes-from &lt;데이터 볼륨 컨테이너&gt;</code> 형식입니다.</p>`,2),V=e("code",null,"/root/data",-1),Z=e("p",null,"지금은 일반 컨테이너를 하나만 연결했지만 데이터 볼륨 컨테이너에 일반 컨테이너를 여러 개 연결해도 됩니다.",-1),A=e("code",null,"/data",-1),N=o(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-i</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">--name</span> hello-volume <span class="token parameter variable">-v</span> /data ubuntu /bin/bash</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr>`,2);function S(r,I){const l=n("VPCard"),c=n("SiteInfo"),t=n("FontIcon");return h(),p("div",null,[e("h1",k,[e("a",_,[e("span",null,d(r.$frontmatter.title)+" 관련",1)])]),s(l,m(u({title:"목차",desc:"언제나 최신 Docker",link:"/docker/always-up-to-date-docker/README.md",logo:"https://pyrasis.com/assets/images/pyrasis.png",background:"rgba(31,41,55,0.2)"})),null,16),v,b,s(c,{name:"6장 - 5. Docker 데이터 볼륨 컨테이너 사용하기",desc:"언제나 최신 Docker",url:"https://pyrasis.com/jHLsAlwaysUpToDateDocker/Unit06/05",logo:"https://pyrasis.com/assets/images/pyrasis.png",preview:"https://pyrasis.com/assets/images/profile1.png"}),f,y,e("p",null,[a("다음 명령을 입력하여 데이터 볼륨 컨테이너를 생성합니다(컨테이너 이름이 중복되면 기존 컨테이너는 "),D,a(" 명령으로 삭제합니다). 컨테이너의 Bash 셸이 실행되면 "),s(t,{icon:"fas fa-folder-open"}),E,a(" 디렉터리로 이동한 뒤 "),s(t,{icon:"fas fa-file-lines"}),w,a("라는 빈 파일을 생성합니다. 그리고 "),T,a("+"),x,a(", "),j,a("+"),P,a("를 차례대로 입력하여 컨테이너를 정지하지 않고 Bash 셸에서 빠져나옵니다.")]),B,e("p",null,[a("일반 컨테이너를 생성하면서 방금 생성한 "),C,a(" 데이터 볼륨 컨테이너를 연결합니다. 컨테이너의 Bash 셸이 실행되면 "),s(t,{icon:"fas fa-folder-open"}),R,a(" 디렉터리의 파일 목록을 출력합니다.")]),U,e("p",null,[a("이제 데이터 볼륨 컨테이너에서 생성한 hello2 파일이 보입니다(호스트의 "),s(t,{icon:"fas fa-folder-open"}),V,a("에 연결했기 때문에 앞에서 생성한 다른 파일들이 보일 수도 있습니다).")]),Z,e("p",null,[a("다음 명령처럼 "),s(t,{icon:"fas fa-folder-open"}),A,a(" 디렉터리를 호스트의 특정 디렉터리에 연결하지 않아도 데이터 볼륨 컨테이너로 사용할 수 있습니다.")]),N])}const K=i(g,[["render",S],["__file","06E.html.vue"]]),L=JSON.parse('{"path":"/docker/always-up-to-date-docker/06E.html","title":"06E. Docker 데이터 볼륨 컨테이너 사용하기","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"06E. Docker 데이터 볼륨 컨테이너 사용하기","description":"언제나 최신 Docker > 06E. Docker 데이터 볼륨 컨테이너 사용하기","category":["DevOps","Docker"],"tag":["crashcourse","pyrasis.com","docker","devops"],"head":[[{"meta":null},{"property":"og:title","content":"언제나 최신 Docker > 06E. Docker 데이터 볼륨 컨테이너 사용하기"},{"property":"og:description","content":"06E. Docker 데이터 볼륨 컨테이너 사용하기"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/docker/always-up-to-date-docker/06E.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/docker/always-up-to-date-docker/06E.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"06E. Docker 데이터 볼륨 컨테이너 사용하기"}],["meta",{"property":"og:description","content":"언제나 최신 Docker > 06E. Docker 데이터 볼륨 컨테이너 사용하기"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pyrasis.com/assets/images/profile1.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://pyrasis.com/assets/images/profile1.png"}],["meta",{"name":"twitter:image:alt","content":"06E. Docker 데이터 볼륨 컨테이너 사용하기"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"pyrasis.com"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:published_time","content":"2022-10-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"06E. Docker 데이터 볼륨 컨테이너 사용하기\\",\\"image\\":[\\"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/7.png\\"],\\"datePublished\\":\\"2022-10-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]],"date":"2022-10-03T00:00:00.000Z","isOriginal":false,"cover":"https://pyrasis.com/assets/images/profile1.png"},"headers":[],"git":{"createdTime":1716977950000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":3}]},"readingTime":{"minutes":0.72,"words":217},"filePathRelative":"docker/always-up-to-date-docker/06E.md","localizedDate":"2022년 10월 3일","excerpt":"\\n"}');export{K as comp,L as data};
