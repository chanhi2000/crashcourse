import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as s,t as m,b as a,w as o,n as l,g as c,e as n,d as e,r,o as w}from"./app-U_bew1in.js";const k={},f={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},v={class:"table-of-contents"},g=s("hr",null,null,-1),b=n('<h2 id="classes" tabindex="-1"><a class="header-anchor" href="#classes"><span>Classes</span></a></h2><p>At first, classes seem very similar to structs because we use them to create new data types with properties and methods. However, they introduce a new, important, and <em>complex</em> feature called inheritance – the ability to make one class build on the foundations of another.</p><p>This is a powerful feature, there’s no doubt about it, and there is no way to avoid using classes when you start building real iOS apps. But please remember to keep your code simple: just because a feature exists, it doesn’t mean you need to <em>use</em> it. As Martin Fowler wrote, “any fool can write code that a computer can understand, but good programmers write code that humans can understand.”</p><p>I’ve already said that SwiftUI uses structs extensively for its UI design. Well, it uses <em>classes</em> extensively for its data: when you show data from some object on the screen, or when you pass data between your layouts, you’ll usually be using classes.</p><p>I should add: if you’ve ever worked with UIKit before, this will be a remarkable turnaround for you – in UIKit we normally use classes for UI design and structs for data. So, if you thought perhaps you could skip a day here and there I’m sorry to say that you can’t: this is all required.</p><p><strong>Today you have six tutorials to work through, and you’ll meet classes, inheritance, deinitializers, and more.</strong> Once you’ve watched each video and completed any optional extra reading you wanted, there are short tests to help make sure you’ve understood what was taught.</p><h3 id="_1-how-to-create-your-own-classes" tabindex="-1"><a class="header-anchor" href="#_1-how-to-create-your-own-classes"><span>1. How to create your own classes</span></a></h3>',7),_={class:"hint-container details"},z=s("summary",null,"1. How to create your own classes",-1),S=n(`<p>Swift uses structs for storing most of its data types, including <code>String</code>, <code>Int</code>, <code>Double</code>, and <code>Array</code>, but there is <em>another</em> way to create custom data types called <em>classes</em>. These have many things in common with structs, but are different in key places.</p><p>First, the things that classes and structs have in common include:</p><ul><li>You get to create and name them.</li><li>You can add properties and methods, including property observers and access control.</li><li>You can create custom initializers to configure new instances however you want.</li></ul><p>However, classes differ from structs in five key places:</p><ol><li>You can make one class build upon functionality in another class, gaining all its properties and methods as a starting point. If you want to selectively override some methods, you can do that too.</li><li>Because of that first point, Swift won’t automatically generate a memberwise initializer for classes. This means you either need to write your own initializer, or assign default values to all your properties.</li><li>When you copy an instance of a class, both copies share the same data – if you change one copy, the other one also changes.</li><li>When the final copy of a class instance is destroyed, Swift can optionally run a special function called a <em>deinitializer</em>.</li><li>Even if you make a class constant, you can still change its properties as long as they are variables.</li></ol><p>On the surface those probably seem fairly random, and there’s a good chance you’re probably wondering why classes are even needed when we already have structs.</p><p>However, SwiftUI uses classes extensively, mainly for point 3: all copies of a class share the same data. This means many parts of your app can share the same information, so that if the user changed their name in one screen all the other screens would automatically update to reflect that change.</p><p>The other points <em>matter</em>, but are of varying use:</p><ol><li>Being able to build one class based on another is really important in Apple’s older UI framework, UIKit, but is much less common in SwiftUI apps. In UIKit it was common to have long class hierarchies, where class A was built on class B, which was built on class C, which was built on class D, etc.</li><li>Lacking a memberwise initializer is annoying, but hopefully you can see why it would be tricky to implement given that one class can be based upon another – if class C added an extra property it would break all the initializers for C, B, and A.</li><li>Being able to change a constant class’s variables links in to the multiple copy behavior of classes: a constant class means we can’t change what pot our copy points to, but if the properties are variable we can still change the data <em>inside</em> the pot. This is different from structs, where each copy of a struct is unique and holds its own data.</li><li>Because one instance of a class can be referenced in several places, it becomes important to know when the final copy has been destroyed. That’s where the deinitializer comes in: it allows us to clean up any special resources we allocated when that last copy goes away.</li></ol><p>Before we’re done, let’s look at just a tiny slice of code that creates and uses a class:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">didSet</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Score is now </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">score</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> newGame <span class="token operator">=</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">newGame<span class="token punctuation">.</span>score <span class="token operator">+=</span> <span class="token number">10</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Yes, the only difference between that and a struct is that it was created using <code>class</code> rather than <code>struct</code> – everything else is identical. That might make classes seem redundant, but trust me: all five of their differences are important.</p><p>I’ll be going into more detail on the five differences between classes and structs in the following chapters, but right now the most important thing to know is this: structs are important, and so are classes – you <em>will</em> need both when using SwiftUI.</p>`,13),x=n('<div class="hint-container info"><p class="hint-container-title">1. How to create your own classes - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-have-both-classes-and-structs" target="_blank" rel="noopener noreferrer">Why does Swift have both classes and structs?</a></li><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-dont-swift-classes-have-a-memberwise-initializer" target="_blank" rel="noopener noreferrer">Why don’t Swift classes have a memberwise initializer?</a></li><li>Test: <a href="https://hackingwithswift.com/review/sixty/creating-your-own-classes" target="_blank" rel="noopener noreferrer">Creating your own classes</a></li></ul></div><h3 id="_2-how-to-make-one-class-inherit-from-another" tabindex="-1"><a class="header-anchor" href="#_2-how-to-make-one-class-inherit-from-another"><span>2. How to make one class inherit from another</span></a></h3>',2),T={class:"hint-container details"},I=s("summary",null,"2. How to make one class inherit from another",-1),q=n(`<p>Swift lets us create classes by basing them on existing classes, which is a process known as <em>inheritance</em>. When one class inherits functionality from another class (its “parent” or “super” class), Swift will give the new class access (the “child class” or “subclass”) to the properties and methods from that parent class, allowing us to make small additions or changes to customize the way the new class behaves.</p><p>To make one class inherit from another, write a colon after the child class’s name, then add the parent class’s name. For example, here is an <code>Employee</code> class with one property and an initializer:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> hours<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>hours<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>hours <span class="token operator">=</span> hours</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We could make two subclasses of <code>Employee</code>, each of which will gain the <code>hours</code> property and initializer:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Developer</span><span class="token punctuation">:</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I&#39;m writing code for </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">hours</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> hours.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Manager</span><span class="token punctuation">:</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I&#39;m going to meetings for </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">hours</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> hours.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice how those two child classes can refer directly to <code>hours</code> – it’s as if they added that property themselves, except we don’t have to keep repeating ourselves.</p><p>Each of those classes inherit from <code>Employee</code>, but each then adds their own customization. So, if we create an instance of each and call <code>work()</code>, we’ll get a different result:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> robert <span class="token operator">=</span> <span class="token class-name">Developer</span><span class="token punctuation">(</span>hours<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> joseph <span class="token operator">=</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span>hours<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">robert<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">joseph<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As well as sharing properties, you can also share methods, which can then be called from the child classes. As an example, try adding this to the <code>Employee</code> class:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">printSummary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I work </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">hours</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> hours a day.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Because <code>Developer</code> inherits from <code>Employee</code>, we can immediately start calling <code>printSummary()</code> on instances of <code>Developer</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> novall <span class="token operator">=</span> <span class="token class-name">Developer</span><span class="token punctuation">(</span>hours<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span></span>
<span class="line">novall<span class="token punctuation">.</span><span class="token function">printSummary</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Things get a <em>little</em> more complicated when you want to change a method you inherited. For example, we just put <code>printSummary()</code> into <code>Employee</code>, but maybe one of those child classes wants slightly different behavior.</p><p>This is where Swift enforces a simple rule: if a child class wants to change a method from a parent class, you must use <code>override</code> in the child class’s version. This does two things:</p><ol><li>If you attempt to change a method without using <code>override</code>, Swift will refuse to build your code. This stops you accidentally overriding a method.</li><li>If you use <code>override</code> but your method doesn’t actually override something from the parent class, Swift will refuse to build your code because you probably made a mistake.</li></ol><p>So, if we wanted developers to have a unique <code>printSummary()</code> method, we’d add this to the <code>Developer</code> class:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">printSummary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I&#39;m a developer who will sometimes work </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">hours</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> hours a day, but other times spend hours arguing about whether code should be indented using tabs or spaces.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Swift is smart about how method overrides work: if your parent class has a <code>work()</code> method that returns nothing, but the child class has a <code>work()</code> method that accepts a string to designate where the work is being done, that does <em>not</em> require <code>override</code> because you aren’t replacing the parent method.</p><p><strong>Tip</strong>: If you know for sure that your class should not support inheritance, you can mark it as <code>final</code>. This means the class itself can inherit from other things, but can’t be used to inherit <em>from</em> – no child class can use a final class as its parent.</p>`,19),C=n('<div class="hint-container info"><p class="hint-container-title">2. How to make one class inherit from another - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-would-you-want-to-override-a-method" target="_blank" rel="noopener noreferrer">When would you want to override a method?</a></li><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/which-classes-should-be-declared-as-final" target="_blank" rel="noopener noreferrer">Which classes should be declared as final?</a></li></ul></div><h3 id="_3-how-to-add-initializers-for-classes" tabindex="-1"><a class="header-anchor" href="#_3-how-to-add-initializers-for-classes"><span>3. How to add initializers for classes</span></a></h3>',2),U={class:"hint-container details"},H=s("summary",null,"3. How to add initializers for classes",-1),D=n(`<p>Class initializers in Swift are more complicated than struct initializers, but with a little cherrypicking we can focus on the part that really matters: if a child class has any custom initializers, it must always call the <em>parent’s</em> initializer after it has finished setting up its own properties, if it has any.</p><p>Like I said previously, Swift won’t automatically generate a memberwise initializer for classes. This applies with or without inheritance happening – it will never generate a memberwise initializer for you. So, you either need to write your own initializer, or provide default values for all the properties of the class.</p><p>Let’s start by defining a new class:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> isElectric<span class="token punctuation">:</span> <span class="token class-name">Bool</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>isElectric<span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>isElectric <span class="token operator">=</span> isElectric</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That has a single Boolean property, plus an initializer to set the value for that property. Remember, using <code>self</code> here makes it clear we’re assigning the <code>isElectric</code> parameter to the property of the same name.</p><p>Now, let’s say we wanted to make a <code>Car</code> class inheriting from <code>Vehicle</code> – you might start out writing something like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> isConvertible<span class="token punctuation">:</span> <span class="token class-name">Bool</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>isConvertible<span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>isConvertible <span class="token operator">=</span> isConvertible</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But Swift will refuse to build that code: we’ve said that the <code>Vehicle</code> class needs to know whether it’s electric or not, but we haven’t provided a value for that.</p><p>What Swift wants us to do is provide <code>Car</code> with an initializer that includes both <code>isElectric</code> and <code>isConvertible</code>, but rather than trying to store <code>isElectric</code> ourselves we instead need to pass it on – we need to ask the super class to run its own initializer.</p><p>Here’s how that looks:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">:</span> <span class="token class-name">Vehicle</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> isConvertible<span class="token punctuation">:</span> <span class="token class-name">Bool</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>isElectric<span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">,</span> isConvertible<span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>isConvertible <span class="token operator">=</span> isConvertible</span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>isElectric<span class="token punctuation">:</span> isElectric<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>super</code> is another one of those values that Swift automatically provides for us, similar to <code>self</code>: it allows us to call up to methods that belong to our parent class, such as its initializer. You can use it with other methods if you want; it’s not limited to initializers.</p><p>Now that we have a valid initializer in both our classes, we can make an instance of <code>Car</code> like so:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> teslaX <span class="token operator">=</span> <span class="token class-name">Car</span><span class="token punctuation">(</span>isElectric<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> isConvertible<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>Tip</strong>: If a subclass does not have any of its own initializers, it automatically inherits the initializers of its parent class.</p>`,15),j=n('<div class="hint-container info"><p class="hint-container-title">3. How to add initializers for classes - Additional</p><ul><li>Test: <a href="https://hackingwithswift.com/review/sixty/class-inheritance" target="_blank" rel="noopener noreferrer">Class inheritance</a></li></ul></div><h3 id="_4-how-to-copy-classes" tabindex="-1"><a class="header-anchor" href="#_4-how-to-copy-classes"><span>4. How to copy classes</span></a></h3>',2),A={class:"hint-container details"},B=s("summary",null,"4. How to copy classes",-1),E=n(`<p>In Swift, all copies of a class instance share the same data, meaning that any changes you make to one copy will automatically change the other copies. This happens because classes are <em>reference types</em> in Swift, which means all copies of a class all <em>refer</em> back to the same underlying pot of data.</p><p>To see this in action, try this simple class:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Anonymous&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That has just one property, but because it’s stored inside a class it will get shared across all copies of the class.</p><p>So, we could create an instance of that class:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> user1 <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We could then take a copy of <code>user1</code> and change the <code>username</code> value:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> user2 <span class="token operator">=</span> user1</span>
<span class="line">user2<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Taylor&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>I hope you see where this is going! Now we’ve changed the copy’s <code>username</code> property we can then print out the same properties from each different copy:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span>user1<span class="token punctuation">.</span>username<span class="token punctuation">)</span>  </span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>user2<span class="token punctuation">.</span>username<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>…and that’s going to print “Taylor” for both – even though we only changed one of the instances, the other also changed.</p><p>This might seem like a bug, but it’s actually a feature – and a really important feature too, because it’s what allows us to share common data across all parts of our app. As you’ll see, SwiftUI relies very heavily on classes for its data, specifically because they can be shared so easily.</p><p>In comparison, structs do <em>not</em> share their data amongst copies, meaning that if we change <code>class User</code> to <code>struct User</code> in our code we get a different result: it will print “Anonymous” then “Taylor”, because changing the copy didn’t also adjust the original.</p><p>If you want to create a <em>unique</em> copy of a class instance – sometimes called a <em>deep copy</em> – you need to handle creating a new instance and copy across all your data safely.</p><p>In our case that’s straightforward:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Anonymous&quot;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        user<span class="token punctuation">.</span>username <span class="token operator">=</span> username</span>
<span class="line">        <span class="token keyword">return</span> user</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we can safely call <code>copy()</code> to get an object with the same starting data, but any future changes won’t impact the original.</p>`,17),W=s("ul",null,[s("li",null,[e("Optional: "),s("a",{href:"https://hackingwithswift.com/quick-start/understanding-swift/why-do-copies-of-a-class-share-their-data",target:"_blank",rel:"noopener noreferrer"},"Why do copies of a class share their data?")]),s("li",null,[e("Test: "),s("a",{href:"https://hackingwithswift.com/review/sixty/copying-objects",target:"_blank",rel:"noopener noreferrer"},"Copying objects")])],-1),N=s("p",null,":::",-1),Y=s("h3",{id:"_5-how-to-create-a-deinitializer-for-a-class",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_5-how-to-create-a-deinitializer-for-a-class"},[s("span",null,"5. How to create a deinitializer for a class")])],-1),O={class:"hint-container details"},V=s("summary",null,"5. How to create a deinitializer for a class",-1),P=n(`<p>Swift’s classes can optionally be given a <em>deinitializer</em>, which is a bit like the opposite of an initializer in that it gets called when the object is <em>destroyed</em> rather than when it’s <em>created</em>.</p><p>This comes with a few small provisos:</p><ol><li>Just like initializers, you don’t use <code>func</code> with deinitializers – they are special.</li><li>Deinitializers can never take parameters or return data, and as a result aren’t even written with parentheses.</li><li>Your deinitializer will automatically be called when the final copy of a class instance is destroyed. That might mean it was created inside a function that is now finishing, for example.</li><li>We never call deinitializers directly; they are handled automatically by the system.</li><li>Structs don’t have deinitializers, because you can’t copy them.</li></ol><p>Exactly <em>when</em> your deinitializers are called depends on what you’re doing, but really it comes down to a concept called <em>scope</em>. Scope more or less means “the context where information is available”, and you’ve seen lots of examples already:</p><ol><li>If you create a variable inside a function, you can’t access it from outside the function.</li><li>If you create a variable inside an <code>if</code> condition, that variable is not available outside the condition.</li><li>If you create a variable inside a <code>for</code> loop, including the loop variable itself, you can’t use it outside the loop.</li></ol><p>If you look at the big picture, you’ll see each of those use braces to create their scope: conditions, loops, and functions all create local scopes.</p><p>When a value <em>exits scope</em> we mean the context it was created in is going away. In the case of structs that means the data is being destroyed, but in the case of classes it means only one copy of the underlying data is going away – there might still be other copies elsewhere. But when the final copy goes away – when the last constant or variable pointing at a class instance is destroyed – then the underlying data is also destroyed, and the memory it was using is returned back to the system.</p><p>To demonstrate this, we could create a class that prints a message when it’s created and destroyed, using an initializer and deinitializer:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> id<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id</span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;User </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">id</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">: I&#39;m alive!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">deinit</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;User </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">id</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">: I&#39;m dead!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we can create and destroy instances of that quickly using a loop – if we create a <code>User</code> instance inside the loop, it will be destroyed when the loop iteration finishes:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">3</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> i<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;User </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user<span class="token punctuation">.</span>id</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">: I&#39;m in control!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When that code runs you’ll see it creates and destroys each user individually, with one being destroyed fully before another is even created.</p><p>Remember, the deinitializer is only called when the last remaining reference to a class instance is destroyed. This might be a variable or constant you have stashed away, or perhaps you stored something in an array.</p><p>For example, if we were adding our <code>User</code> instances as they were created, they would only be destroyed when the array is cleared:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">User</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">3</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> i<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;User </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user<span class="token punctuation">.</span>id</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">: I&#39;m in control!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    users<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Loop is finished!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">users<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Array is clear!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),R=n('<div class="hint-container info"><p class="hint-container-title">5. How to create a deinitializer for a class - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-do-classes-have-deinitializers-and-structs-dont" target="_blank" rel="noopener noreferrer">Why do classes have deinitializers and structs don’t?</a></li><li>Test: <a href="https://hackingwithswift.com/review/sixty/deinitializers" target="_blank" rel="noopener noreferrer">Deinitializers</a></li></ul></div><h3 id="_6-how-to-work-with-variables-inside-classes" tabindex="-1"><a class="header-anchor" href="#_6-how-to-work-with-variables-inside-classes"><span>6. How to work with variables inside classes</span></a></h3>',2),K={class:"hint-container details"},F=s("summary",null,"6. How to work with variables inside classes",-1),L=n(`<p>Swift’s classes work a bit like signposts: every copy of a class instance we have is actually a signpost pointing to the same underlying piece of data. Mostly this matters because of the way changing one copy changes all the others, but it also matters because of how classes treat variable properties.</p><p>This one small code sample demonstrates how things work:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Paul&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Taylor&quot;</span></span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That creates a constant <code>User</code> instance, but then changes it – it changes the constant value. That’s bad, right?</p><p>Except it doesn’t change the constant value at all. Yes, the data inside the class has changed, but the class instance itself – the object we created – has <em>not</em> changed, and in fact <em>can’t</em> be changed because we made it constant.</p><p>Think of it like this: we created a constant signpoint pointing towards a user, but we erased that user’s name tag and wrote in a different name. The user in question hasn’t changed – the person still exists – but a part of their internal data <em>has</em> changed.</p><p>Now, if we had made the <code>name</code> property a <em>constant</em> using <code>let</code>, then it could not be changed – we have a constant signpost pointing to a user, but we’ve written their name in permanent ink so that it can’t be erased.</p><p>In contrast, what happens if we made both the <code>user</code> instance and the <code>name</code> property variables? Now we’d be able to change the property, but we’d also be able to change to a wholly new <code>User</code> instance if we wanted. To continue the signpost analogy, it would be like turning the signpost to point at wholly different person.</p><p>Try it with this code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Paul&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Taylor&quot;</span></span></span>
<span class="line">user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That would end up printing “Paul”, because even though we changed <code>name</code> to “Taylor” we then overwrote the whole <code>user</code> object with a new one, resetting it back to “Paul”.</p><p>The final variation is having a variable instance and constant properties, which would mean we can create a new <code>User</code> if we want, but once it’s done we can’t change its properties.</p><p>So, we end up with four options:</p><ol><li>Constant instance, constant property – a signpost that always points to the same user, who always has the same name.</li><li>Constant instance, variable property – a signpost that always points to the same user, but their name can change.</li><li>Variable instance, constant property – a signpost that can point to different users, but their names never change.</li><li>Variable instance, variable property – a signpost that can point to different users, and those users can also change their names.</li></ol><p>This might seem awfully confusing, and perhaps even pedantic. However, it serves an important purpose because of the way class instances get shared.</p><p>Let’s say you’ve been given a <code>User</code> instance. Your instance is constant, but the property inside was declared as a variable. This tells you not only that you can change that property if you want to, but more importantly tells you there’s the possibility of the property being changed elsewhere – that class you have could be a copy from somewhere else, and because the property is variable it means some other part of code could change it by surprise.</p><p>When you see constant properties it means you can be sure neither your current code nor any other part of your program can change it, but as soon as you’re dealing with variable properties – regardless of whether the class instance itself is constant or not – it opens up the possibility that the data could change under your feet.</p><p>This is different from structs, because constant structs cannot have their properties changed even if the properties were made variable. Hopefully you can now see why this happens: structs don’t have the whole signpost thing going on, they hold their data directly. This means if you try to change a value inside the struct you’re also implicitly changing the struct itself, which isn’t possible because it’s constant.</p><p>One upside to all this is that classes don’t need to use the <code>mutating</code> keyword with methods that change their data. This keyword is really important for structs because constant structs <em>cannot</em> have their properties changed no matter how they were created, so when Swift sees us calling a <code>mutating</code> method on a constant struct instance it knows that shouldn’t be allowed.</p><p>With classes, how the instance itself was created no longer matters – the only thing that determines whether a property can be modified or not is whether the property itself was created as a constant. Swift can see that for itself just by looking at how you made the property, so there’s no more need to mark the method specially.</p>`,20),M=n('<div class="hint-container info"><p class="hint-container-title">6. How to work with variables inside classes - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-can-variable-properties-in-constant-classes-be-changed" target="_blank" rel="noopener noreferrer">Why can variable properties in constant classes be changed?</a></li><li>Test: <a href="https://hackingwithswift.com/review/sixty/mutability" target="_blank" rel="noopener noreferrer">Mutability</a></li></ul></div><h3 id="_7-summary-classes" tabindex="-1"><a class="header-anchor" href="#_7-summary-classes"><span>7. Summary: Classes</span></a></h3>',2),G={class:"hint-container details"},J=s("summary",null,"7. Summary: Classes",-1),X=n("<p>Classes aren’t quite as commonly used as structs, but they serve an invaluable purpose for sharing data, and if you ever choose to learn Apple’s older UIKit framework you’ll find yourself using them extensively.</p><p>Let’s recap what we learned:</p><ul><li>Classes have lots of things in common with structs, including the ability to have properties and methods, but there are five key differences between classes and structs.</li><li>First, classes can inherit from other classes, which means they get access to the properties and methods of their parent class. You can optionally override methods in child classes if you want, or mark a class as being <code>final</code> to stop others subclassing it.</li><li>Second, Swift doesn’t generate a memberwise initializer for classes, so you need to do it yourself. If a subclass has its own initializer, it must always call the parent class’s initializer at some point.</li><li>Third, if you create a class instance then take copies of it, all those copies point back to the same instance. This means changing some data in one of the copies changes them all.</li><li>Fourth, classes can have deinitializers that run when the last copy of one instance is destroyed.</li><li>Finally, variable properties inside class instances can be changed regardless of whether the instance itself was created as variable.</li></ul>",3),Z=s("h3",{id:"_8-checkpoint-7",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_8-checkpoint-7"},[s("span",null,"8. Checkpoint 7")])],-1),Q={class:"hint-container details"},$=s("summary",null,"8. Checkpoint 7",-1),ss=n("<p>Now that you understand how classes work, and, just as importantly, how they are different from structs, it’s time to tackle a small challenge to check your progress.</p><p>Your challenge is this: make a class hierarchy for animals, starting with <code>Animal</code> at the top, then <code>Dog</code> and <code>Cat</code> as subclasses, then <code>Corgi</code> and <code>Poodle</code> as subclasses of <code>Dog</code>, and <code>Persian</code> and <code>Lion</code> as subclasses of <code>Cat</code>.</p><p>But there’s more:</p><ol><li>The <code>Animal</code> class should have a <code>legs</code> integer property that tracks how many legs the animal has.</li><li>The <code>Dog</code> class should have a <code>speak()</code> method that prints a generic dog barking string, but each of the subclasses should print something slightly different.</li><li>The <code>Cat</code> class should have a matching <code>speak()</code> method, again with each subclass printing something different.</li><li>The <code>Cat</code> class should have an <code>isTame</code> Boolean property, provided using an initializer.</li></ol><p>I’ll provide some hints in a moment, but first I recommend you go ahead and try it yourself.</p><p>Still here? Okay, here are some hints:</p><ol><li>You’ll need seven independent classes here, of which only one has no parent class.</li><li>To make one class inherit from another, write it like this: <code>class SomeClass: OtherClass</code>.</li><li>You can make subclasses have a different <code>speak()</code> method to their parent by using the <code>override</code> keyword.</li><li>All our subclasses have four legs, but you still need to make sure you pass that data up to the <code>Animal</code> class inside the <code>Cat</code> initializer.</li></ol>",7),as=s("hr",null,null,-1);function ns(u,es){const t=r("router-link"),i=r("VPCard"),p=r("VidStack");return w(),h("div",null,[s("h1",f,[s("a",y,[s("span",null,m(u.$frontmatter.title)+" 관련",1)])]),s("nav",v,[s("ul",null,[s("li",null,[a(t,{to:"#classes"},{default:o(()=>[e("Classes")]),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#_1-how-to-create-your-own-classes"},{default:o(()=>[e("1. How to create your own classes")]),_:1})]),s("li",null,[a(t,{to:"#_2-how-to-make-one-class-inherit-from-another"},{default:o(()=>[e("2. How to make one class inherit from another")]),_:1})]),s("li",null,[a(t,{to:"#_3-how-to-add-initializers-for-classes"},{default:o(()=>[e("3. How to add initializers for classes")]),_:1})]),s("li",null,[a(t,{to:"#_4-how-to-copy-classes"},{default:o(()=>[e("4. How to copy classes")]),_:1})]),s("li",null,[a(t,{to:"#_5-how-to-create-a-deinitializer-for-a-class"},{default:o(()=>[e("5. How to create a deinitializer for a class")]),_:1})]),s("li",null,[a(t,{to:"#_6-how-to-work-with-variables-inside-classes"},{default:o(()=>[e("6. How to work with variables inside classes")]),_:1})]),s("li",null,[a(t,{to:"#_7-summary-classes"},{default:o(()=>[e("7. Summary: Classes")]),_:1})]),s("li",null,[a(t,{to:"#_8-checkpoint-7"},{default:o(()=>[e("8. Checkpoint 7")]),_:1})])])])])]),g,a(i,l(c({title:"100 Days of SwiftUI - Day 12",desc:"Classes",link:"https://www.hackingwithswift.com/100/swiftui/12",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,s("details",_,[z,a(i,l(c({title:"100 Days of SwiftUI - Day 12 - 1. How to create your own classes",desc:"1. How to create your own classes",link:"https://hackingwithswift.com/quick-start/beginners/how-to-create-your-own-classes",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(p,{src:"youtube/B84_69lsxok"}),S]),x,s("details",T,[I,a(i,l(c({title:"100 Days of SwiftUI - Day 12 - 2. How to make one class inherit from another",desc:"2. How to make one class inherit from another",link:"https://hackingwithswift.com/quick-start/beginners/how-to-make-one-class-inherit-from-another",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(p,{src:"youtube/gtxwHuXBWeo"}),q]),C,s("details",U,[H,a(i,l(c({title:"100 Days of SwiftUI - Day 12 - 3. How to add initializers for classes",desc:"3. How to add initializers for classes",link:"https://hackingwithswift.com/quick-start/beginners/how-to-add-initializers-for-classes",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(p,{src:"youtube/byrRbWGN1Nk"}),D]),j,s("details",A,[B,a(i,l(c({title:"100 Days of SwiftUI - Day 12 - 4. How to copy classes",desc:"4. How to copy classes",link:"https://hackingwithswift.com/quick-start/beginners/how-to-copy-classes",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(p,{src:"youtube/DgqY3RATP48"}),E]),W,N,Y,s("details",O,[V,a(i,l(c({title:"100 Days of SwiftUI - Day 12 - 5. How to create a deinitializer for a class",desc:"5. How to create a deinitializer for a class",link:"https://hackingwithswift.com/quick-start/beginners/how-to-create-a-deinitializer-for-a-class",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(p,{src:"youtube/LAhctdU5Mq4"}),P]),R,s("details",K,[F,a(i,l(c({title:"100 Days of SwiftUI - Day 12 - 6. How to work with variables inside classes",desc:"6. How to work with variables inside classes",link:"https://hackingwithswift.com/quick-start/beginners/how-to-work-with-variables-inside-classes",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(p,{src:"youtube/WDQtKY805Xk"}),L]),M,s("details",G,[J,a(i,l(c({title:"100 Days of SwiftUI - Day 12 - 7. Summary: Classes",desc:"7. Summary: Classes",link:"https://hackingwithswift.com/quick-start/beginners/summary-classes",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(p,{src:"youtube/b87OBAYqpMw"}),X]),Z,s("details",Q,[$,a(i,l(c({title:"100 Days of SwiftUI - Day 12 - 8. Checkpoint 7",desc:"8. Checkpoint 7",link:"https://hackingwithswift.com/quick-start/beginners/checkpoint-7",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(p,{src:"youtube/HDph1sNRJfQ"}),ss]),as])}const os=d(k,[["render",ns],["__file","12.html.vue"]]),ls=JSON.parse('{"path":"/swift/100-days-of-swiftui/12.html","title":"Day 12","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 12","description":"100 Days of SwiftUI > Day 12","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 12"},{"property":"og:description","content":"Day 12"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/12.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/12.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 12"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 12"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 12\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Classes","slug":"classes","link":"#classes","children":[{"level":3,"title":"1. How to create your own classes","slug":"_1-how-to-create-your-own-classes","link":"#_1-how-to-create-your-own-classes","children":[]},{"level":3,"title":"2. How to make one class inherit from another","slug":"_2-how-to-make-one-class-inherit-from-another","link":"#_2-how-to-make-one-class-inherit-from-another","children":[]},{"level":3,"title":"3. How to add initializers for classes","slug":"_3-how-to-add-initializers-for-classes","link":"#_3-how-to-add-initializers-for-classes","children":[]},{"level":3,"title":"4. How to copy classes","slug":"_4-how-to-copy-classes","link":"#_4-how-to-copy-classes","children":[]},{"level":3,"title":"5. How to create a deinitializer for a class","slug":"_5-how-to-create-a-deinitializer-for-a-class","link":"#_5-how-to-create-a-deinitializer-for-a-class","children":[]},{"level":3,"title":"6. How to work with variables inside classes","slug":"_6-how-to-work-with-variables-inside-classes","link":"#_6-how-to-work-with-variables-inside-classes","children":[]},{"level":3,"title":"7. Summary: Classes","slug":"_7-summary-classes","link":"#_7-summary-classes","children":[]},{"level":3,"title":"8. Checkpoint 7","slug":"_8-checkpoint-7","link":"#_8-checkpoint-7","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":9}]},"readingTime":{"minutes":16.65,"words":4996},"filePathRelative":"swift/100-days-of-swiftui/12.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{os as comp,ls as data};
