import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as e,t as i,b as a,n as p,g as l,e as d,r as s,o as m}from"./app-U_bew1in.js";const k={},u={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"},b=e("nav",{class:"table-of-contents"},[e("ul")],-1),g=e("hr",null,null,-1),h=d(`<p>Docker 컨테이너 안에서 Docker를 실행하는 방법입니다. 복잡하게 왜 Docker 컨테이너 안에서 Docker를 실행할까요? 보통 Jenkins 등의 CI/CD 빌드 자동화 시스템을 이용해서 Docker 이미지를 생성할 때 활용할 수 있습니다. CI/CD 환경 자체도 Docker 이미지로 만들었다면 Docker 컨테이너 안에서 Docker를 실행할 수 있어야 합니다.</p><figure><img src="https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/8.png" alt="Docker in Docker" tabindex="0" loading="lazy"><figcaption>Docker in Docker</figcaption></figure><p>먼저 <code>docker:dind</code> 이미지로 Docker 서버를 실행합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> network create dind-network</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> volume create docker-certs-ca</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> volume create docker-certs-client</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">--privileged</span> <span class="token parameter variable">--name</span> dind-docker <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--network</span> dind-network --network-alias <span class="token function">docker</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-e</span> <span class="token assign-left variable">DOCKER_TLS_CERTDIR</span><span class="token operator">=</span>/certs <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-v</span> docker-certs-ca:/certs/ca <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-v</span> docker-certs-client:/certs/client <span class="token punctuation">\\</span></span>
<span class="line">  docker:dind</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>여기서 <code>--privileged</code> 옵션이 중요합니다. 이 옵션은 컨테이너 안에서 호스트의 리눅스 커널 기능을 모두 사용할 수 있도록 해줍니다.</p><p>다음 명령을 실행하여 docker 컨테이너를 생성합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-i</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">--rm</span> <span class="token parameter variable">--network</span> dind-network <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-e</span> <span class="token assign-left variable">DOCKER_TLS_CERTDIR</span><span class="token operator">=</span>/certs <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-v</span> docker-certs-client:/certs/client:ro <span class="token punctuation">\\</span></span>
<span class="line">  docker:latest <span class="token function">sh</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이제 Docker 컨테이너 안에서 Docker를 실행해보겠습니다. 다음 명령을 입력하여 <code>busybox</code>를 실행해봅니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> run <span class="token parameter variable">-i</span> <span class="token parameter variable">-t</span> busybox:latest /bin/sh</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Unable to find image &#39;busybox:latest&#39; locally</span></span>
<span class="line"><span class="token comment"># latest: Pulling from library/busybox</span></span>
<span class="line"><span class="token comment"># f5b7ce95afea: Pull complete</span></span>
<span class="line"><span class="token comment"># Digest: sha256:9810966b5f712084ea05bf28fc8ba2c8fb110baa2531a10e2da52c1efc504698</span></span>
<span class="line"><span class="token comment"># Status: Downloaded newer image for busybox:latest</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이렇게 호스트 → <code>docker</code> 컨테이너 → <code>busybox</code> 컨테이너 순서로 실행이 되었습니다.</p><hr>`,11);function D(n,y){const t=s("VPCard"),o=s("SiteInfo");return m(),r("div",null,[e("h1",u,[e("a",v,[e("span",null,i(n.$frontmatter.title)+" 관련",1)])]),a(t,p(l({title:"목차",desc:"언제나 최신 Docker",link:"/docker/always-up-to-date-docker/README.md",logo:"https://pyrasis.com/assets/images/pyrasis.png",background:"rgba(31,41,55,0.2)"})),null,16),b,g,a(o,{name:"6장 - 7. Docker 안에서 Docker 실행하기",desc:"언제나 최신 Docker",url:"https://pyrasis.com/jHLsAlwaysUpToDateDocker/Unit06/07",logo:"https://pyrasis.com/assets/images/pyrasis.png",preview:"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/8.png"}),h])}const w=c(k,[["render",D],["__file","06G.html.vue"]]),T=JSON.parse('{"path":"/docker/always-up-to-date-docker/06G.html","title":"06G. Docker 안에서 Docker 실행하기","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"06G. Docker 안에서 Docker 실행하기","description":"언제나 최신 Docker > 06G. Docker 안에서 Docker 실행하기","category":["DevOps","Docker"],"tag":["crashcourse","pyrasis.com","docker","devops"],"head":[[{"meta":null},{"property":"og:title","content":"언제나 최신 Docker > 06G. Docker 안에서 Docker 실행하기"},{"property":"og:description","content":"06G. Docker 안에서 Docker 실행하기"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/docker/always-up-to-date-docker/06G.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/docker/always-up-to-date-docker/06G.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"06G. Docker 안에서 Docker 실행하기"}],["meta",{"property":"og:description","content":"언제나 최신 Docker > 06G. Docker 안에서 Docker 실행하기"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/8.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/8.png"}],["meta",{"name":"twitter:image:alt","content":"06G. Docker 안에서 Docker 실행하기"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"pyrasis.com"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:published_time","content":"2022-10-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"06G. Docker 안에서 Docker 실행하기\\",\\"image\\":[\\"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/8.png\\"],\\"datePublished\\":\\"2022-10-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]],"next":"/docker/always-up-to-date-docker/07.md","date":"2022-10-03T00:00:00.000Z","isOriginal":false,"cover":"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/8.png"},"headers":[],"git":{"createdTime":1716977950000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":3}]},"readingTime":{"minutes":0.81,"words":242},"filePathRelative":"docker/always-up-to-date-docker/06G.md","localizedDate":"2022년 10월 3일","excerpt":"\\n"}');export{w as comp,T as data};
