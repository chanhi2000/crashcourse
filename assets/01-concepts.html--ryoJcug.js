import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as n,t as b,b as a,w as t,n as i,g as c,d as s,e as o,r as u,o as v}from"./app-U_bew1in.js";const g={},f={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},_={class:"table-of-contents"},y=n("hr",null,null,-1),x=n("p",null,"Examples that express some of the major underlying concepts in WebAssembly. Some of these examples are not the most convenient or productive way for building projects with WebAssembly. However, these minimal examples are great for learning, or developing straightforward / lower-level parts of an application.",-1),W=n("hr",null,null,-1),j=n("h2",{id:"introduction",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#introduction"},[n("span",null,"Introduction")])],-1),q=n("p",null,"Let's do a brief introduction into major concepts of WebAssembly:",-1),A=n("li",null,"WebAssembly is a compile-targeted language for running bytecode on the web.",-1),S=n("li",null,[s("Relative to Javascript, WebAssembly offers predictable performance. It is not inherently "),n("strong",null,"faster"),s(" than Javascript, but it "),n("strong",null,"can be faster than JavaScript"),s(" in the correct use case. Such as "),n("strong",null,"computationally intensive tasks"),s(", like nested loops or handling large amounts of data. Therefore, "),n("strong",null,"WebAssembly is a complement to JavaScript, and not a replacement.")],-1),T={href:"https://nodejs.org/en",target:"_blank",rel:"noopener noreferrer"},I=n("a",{href:"https://wasmtime.dev/",target:"_blank",rel:"noopener noreferrer"},"Wasmtime",-1),E={href:"https://github.com/bytecodealliance/lucet",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"bytecodealliance/lucet",-1),R={href:"https://github.com/wasmerio/wasmer",target:"_blank",rel:"noopener noreferrer"},M=n("code",null,"wasmerio/wasmer",-1),O=n("li",null,"WebAssembly has Linear Memory, in other words, one big expandable array. And in the context of Javascript, synchronously accessible by Javascript and Wasm.",-1),L=n("li",null,"WebAssembly can export functions and constants, And in the context of Javascript, synchronously accessible by Javascript and Wasm.",-1),D=n("li",null,"WebAssembly, in its current MVP, only handles integers and floats. However, tools and libraries exist to make passing high-level data types convenient.",-1),F=n("p",null,[s("With that, let's take a look at our "),n("a",{href:"#hello-world"},"Hello World"),s(" to see some of the concepts in action.")],-1),C=n("hr",null,null,-1),P=n("h2",{id:"hello-world",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#hello-world"},[n("span",null,"Hello World!")])],-1),N=n("p",null,[n("strong",null,'Before getting started, be sure to check out all of the languages available, by clicking the "languages" dropdown in the header.')],-1),U=n("h3",{id:"overview",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#overview"},[n("span",null,"Overview")])],-1),H=n("a",{href:"https://www.rust-lang.org/",target:"_blank",rel:"noopener noreferrer"},"Rust",-1),B={href:"https://github.com/rustwasm/wasm-pack",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"rustwasm/wasm-pack",-1),Y=o(`<p>To keep things simple with Wasm&#39;s limitations mentioned <a href="https://wasmbyexample.dev/example-redirect?exampleName=introduction&amp;programmingLanguage=all" target="_blank" rel="noopener noreferrer">in the introduction example</a>, instead of displaying a string, we will add two numbers together and display the result. Though, it is good to keep in mind, in later examples, a lot of these limitations will be abstracted away by your WebAssembly Language of choice (In this case, Rust). It is also highly recommended you take a look at the <a href="https://github.com/rustwasm/wasm-pack#-quickstart-guide" target="_blank" rel="noopener noreferrer">wasm-pack QuickStart Guide</a>, as it will be referenced a lot in this example.</p><h3 id="project-setup" tabindex="-1"><a class="header-anchor" href="#project-setup"><span>Project Setup</span></a></h3><p>So first, Let&#39;s get <a href="https://www.rust-lang.org/tools/install" target="_blank" rel="noopener noreferrer">rust installed</a>, which includes <a href="https://doc.rust-lang.org/cargo/index.html" target="_blank" rel="noopener noreferrer">cargo</a>. Then, using cargo, let&#39;s install wasm-pack, which we will need later:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cargo</span> <span class="token function">install</span> wasm-pack</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Next, let&#39;s create our rust crate in our current directory using cargo:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cargo</span> init</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,6),V=n("code",null,"Cargo.toml",-1),Z=n("a",{href:"https://github.com/rustwasm/wasm-pack#-quickstart-guide",target:"_blank",rel:"noopener noreferrer"},"wasm-pack",-1),K=o(`<div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml" data-title="toml"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token table class-name">package</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">&quot;hello-world&quot;</span></span>
<span class="line"><span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.1.0&quot;</span></span>
<span class="line"><span class="token key property">authors</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Your Name &lt;your@name.com&gt;&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">edition</span> <span class="token punctuation">=</span> <span class="token string">&quot;2018&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">[</span><span class="token table class-name">lib</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">crate-type</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span><span class="token string">&quot;cdylib&quot;</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">wasm-bindgen</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.2&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Q=n("code",null,"src/",-1),G=n("code",null,"lib",-1),X=n("code",null,"src/",-1),$=n("code",null,"main.rs",-1),nn=n("code",null,"src/",-1),sn=n("code",null,"lib.rs",-1),an=n("p",null,"Now that we have our project and environment setup, let's go ahead and start the actual implementation.",-1),en=n("h3",{id:"implementation",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#implementation"},[n("span",null,"Implementation")])],-1),tn=n("code",null,"src/",-1),ln=n("code",null,"lib.rs",-1),on=n("code",null,"use",-1),pn=o(`<div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token comment">// The wasm-pack uses wasm-bindgen to build and generate JavaScript binding file.</span></span>
<span class="line"><span class="token comment">// Import the wasm-bindgen crate.</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">wasm_bindgen<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Our Add function</span></span>
<span class="line"><span class="token comment">// wasm-pack requires &quot;exported&quot; functions</span></span>
<span class="line"><span class="token comment">// to include #[wasm_bindgen]</span></span>
<span class="line"><span class="token attribute attr-name">#[wasm_bindgen]</span></span>
<span class="line"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, let&#39;s compile our crate using wasm-pack, into a wasm module. Then run the following command, taking note of the <a href="https://rustwasm.github.io/docs/wasm-pack/commands/build.html#target" target="_blank" rel="noopener noreferrer"><code>--target web</code></a>. The wasm-pack tool has support for a lot of different output types, especially for bundlers like Webpack or Rollup. But, since we want an ES6 module in our case, we use the <code>web</code> target below:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">wasm-pack build <span class="token parameter variable">--target</span> web</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,3),cn=n("code",null,"pkg/",-1),un=n("code",null,"index.js",-1),rn=n("code",null,"pkg/",-1),dn=n("code",null,"add()",-1),mn=o(`<div class="hint-container tip"><p class="hint-container-title">Note</p><p>In this example, we are using the exported function from the wasm module directly to help highlight the WebAssembly API. <code>wasm-bindgen</code> generates JavaScript bindings code that can be imported as an ES6 import, and is the recommended way to work with your Rust Wasm modules. These JavaScript bindings are shown in the &quot;Passing High Level Data Types with <code>wasm-bindgen</code>&quot; example.</p></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Import our outputted wasm ES6 module</span></span>
<span class="line"><span class="token comment">// Which, export default&#39;s, an initialization function</span></span>
<span class="line"><span class="token keyword">import</span> init <span class="token keyword">from</span> <span class="token string">&quot;./pkg/hello_world.js&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">runWasm</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Instantiate our wasm module</span></span>
<span class="line">  <span class="token keyword">const</span> helloWorld <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token string">&quot;./pkg/hello_world_bg.wasm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Call the Add function export from wasm, save the result</span></span>
<span class="line">  <span class="token keyword">const</span> addResult <span class="token operator">=</span> helloWorld<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Set the result onto the body</span></span>
<span class="line">  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello World! addResult: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>addResult<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">runWasm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),kn=n("code",null,"index.js",-1),hn=n("code",null,"index.html",-1),bn=o(`<div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Hello World - Rust<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>module<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./index.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And we should have a working Wasm Add (Hello World) program! Congrats!</p><p>You should have something similar to the demo (<a href="https://wasmbyexample.dev/source-redirect?path=examples/hello-world/demo/rust" target="_blank" rel="noopener noreferrer">Source Code</a>) below:</p><h3 id="demo" tabindex="-1"><a class="header-anchor" href="#demo"><span>Demo</span></a></h3>`,4),vn=n("div",{class:"language-html line-numbers-mode","data-highlighter":"prismjs","data-ext":"html","data-title":"html"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("html")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("head")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("meta")]),s(),n("span",{class:"token attr-name"},"charset"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("UTF-8"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("title")]),n("span",{class:"token punctuation"},">")]),s("Hello World - Rust"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("title")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("link")]),s(),n("span",{class:"token attr-name"},"rel"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("preload"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"href"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("./index.js"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"as"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("script"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("head")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("body")]),n("span",{class:"token punctuation"},">")]),s("Hello World! addResult: 48"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("body")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("html")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),gn=n("p",null,[s("Next let's take a deeper look at WebAssembly "),n("a",{href:"#Exports"},"Exports"),s(".")],-1),fn=n("hr",null,null,-1),wn=n("h2",{id:"exports",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#exports"},[n("span",null,"Exports")])],-1),_n=o('<h3 id="overview-1" tabindex="-1"><a class="header-anchor" href="#overview-1"><span>Overview</span></a></h3><p>In our <a href="#hello-world">Hello World Example</a>, we called a function exported from WebAssembly, in our Javascript. Let&#39;s dive a little deeper into exports and how they are used.</p><h3 id="implementation-1" tabindex="-1"><a class="header-anchor" href="#implementation-1"><span>Implementation</span></a></h3><p>If you haven&#39;t done so already, you should set up your project following the steps laid out in the <a href="#hello-world">Hello World Example</a> example.</p>',4),yn=n("code",null,"src/",-1),xn=n("code",null,"lib.rs",-1),Wn=o(`<div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token comment">// The wasm-pack uses wasm-bindgen to build and generate JavaScript binding file.</span></span>
<span class="line"><span class="token comment">// Import the wasm-bindgen crate.</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">wasm_bindgen<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// This exports an add function.</span></span>
<span class="line"><span class="token comment">// It takes in two 32-bit integer values</span></span>
<span class="line"><span class="token comment">// And returns a 32-bit integer value.</span></span>
<span class="line"><span class="token attribute attr-name">#[wasm_bindgen]</span></span>
<span class="line"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">call_me_from_javascript</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">add_integer_with_constant</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// A NOT exported constant</span></span>
<span class="line"><span class="token comment">// Rust does not support exporting constants</span></span>
<span class="line"><span class="token comment">// for Wasm (that I know of).</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">ADD_CONSTANT</span><span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// A NOT exported function</span></span>
<span class="line"><span class="token comment">// It takes in two 32-bit integer values</span></span>
<span class="line"><span class="token comment">// And returns a 32-bit integer value.</span></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">add_integer_with_constant</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token constant">ADD_CONSTANT</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span>\`</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),jn={href:"https://github.com/rustwasm/wasm-pack",target:"_blank",rel:"noopener noreferrer"},qn=n("code",null,"rustwasm/wasm-pack",-1),An=n("code",null,"pkg/",-1),Sn=o(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">wasm-pack build <span class="token parameter variable">--target</span> web</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1),Tn=n("code",null,"index.js",-1),In=n("code",null,"pkg/",-1),En=n("code",null,"exports.js",-1),Jn=n("code",null,"pkg/",-1),Rn=n("code",null,"exports_bg.wasm",-1),Mn=o(`<div class="hint-container tip"><p class="hint-container-title">Note</p><p>In this example, we are using the exported function from the wasm module directly to help highlight the WebAssembly API. <code>wasm-bindgen</code> generates JavaScript bindings code that can be imported as an ES6 import, and is the reccomended way to work with your Rust Wasm modules. These JavaScript bindings are shown in the &quot;Passing High Level Data Types with <code>wasm-bindgen</code>&quot; example.</p></div><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line">import wasmInit from <span class="token string">&quot;./pkg/exports.js&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> runWasm <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Instantiate our wasm module</span></span>
<span class="line">  <span class="token keyword">const</span> rustWasm <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">wasmInit</span><span class="token punctuation">(</span><span class="token string">&quot;./pkg/exports_bg.wasm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Call the Add function export from wasm, save the result</span></span>
<span class="line">  <span class="token keyword">const</span> result <span class="token operator">=</span> rustWasm<span class="token punctuation">.</span><span class="token function">call_me_from_javascript</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Should output &#39;72&#39;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rustWasm<span class="token punctuation">.</span><span class="token constant">ADD_CONSTANT</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Should output &#39;undefined&#39;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rustWasm<span class="token punctuation">.</span>add_integer_with_constant<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Should output &#39;undefined&#39;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">runWasm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),On=n("code",null,"index.js",-1),Ln=n("code",null,"index.html",-1),Dn=n("a",{href:"https://wasmbyexample.dev/source-redirect?path=examples/exports/demo/rust",target:"_blank",rel:"noopener noreferrer"},"Source Code",-1),Fn=n("h3",{id:"demo-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#demo-1"},[n("span",null,"Demo")])],-1),Cn=n("div",{class:"language-html line-numbers-mode","data-highlighter":"prismjs","data-ext":"html","data-title":"html"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("html")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("head")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("meta")]),s(),n("span",{class:"token attr-name"},"charset"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("UTF-8"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("title")]),n("span",{class:"token punctuation"},">")]),s("Hello World - Rust"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("title")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("head")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("body")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("script")]),s(),n("span",{class:"token attr-name"},"type"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("module"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"src"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("./index.js"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token script"}),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("script")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("pre")]),s(),n("span",{class:"token special-attr"},[n("span",{class:"token attr-name"},"style"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),n("span",{class:"token value css language-css"},[n("span",{class:"token property"},"border"),n("span",{class:"token punctuation"},":"),s(" 1px solid black"),n("span",{class:"token punctuation"},";")]),n("span",{class:"token punctuation"},'"')])]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},"  DOM Console:"),s(`
`),n("span",{class:"line"}," "),s(`
`),n("span",{class:"line"},"  72"),s(`
`),n("span",{class:"line"},"   "),s(`
`),n("span",{class:"line"},"  undefined"),s(`
`),n("span",{class:"line"},"   "),s(`
`),n("span",{class:"line"},"  undefined"),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("pre")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("body")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("html")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Pn=n("p",null,[s("Next let's take a look at "),n("a",{href:"#webassembly-linear-memory"},"WebAssembly Linear Memory"),s(".")],-1),Nn=n("hr",null,null,-1),Un=n("h2",{id:"webassembly-linear-memory",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#webassembly-linear-memory"},[n("span",null,"WebAssembly Linear Memory")])],-1),Hn=n("h3",{id:"overview-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#overview-2"},[n("span",null,"Overview")])],-1),Bn=n("p",null,"Another feature of WebAssembly, is its linear memory. Linear memory is a continuous buffer of unsigned bytes that can be read from and stored into by both Wasm and Javascript. In other words, Wasm memory is an expandable array of bytes that Javascript and Wasm can synchronously read and modify. Linear memory can be used for many things, one of them being passing values back and forth between Wasm and Javascript.",-1),zn={href:"https://github.com/rustwasm/wasm-bindgen",target:"_blank",rel:"noopener noreferrer"},Yn=n("code",null,"rustwasm/wasm-bindgen",-1),Vn=n("p",null,"Let's see how we can use linear memory:",-1),Zn=n("h3",{id:"implementation-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#implementation-2"},[n("span",null,"Implementation")])],-1),Kn=n("code",null,"src/",-1),Qn=n("code",null,"lib.rs",-1),Gn=o(`<div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token comment">// The wasm-pack uses wasm-bindgen to build and generate JavaScript binding file.</span></span>
<span class="line"><span class="token comment">// Import the wasm-bindgen crate.</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">wasm_bindgen<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Create a static mutable byte buffer.</span></span>
<span class="line"><span class="token comment">// We will use for passing memory between js and wasm.</span></span>
<span class="line"><span class="token comment">// NOTE: global \`static mut\` means we will have &quot;unsafe&quot; code</span></span>
<span class="line"><span class="token comment">// but for passing memory between js and wasm should be fine.</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">WASM_MEMORY_BUFFER_SIZE</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">mut</span> <span class="token constant">WASM_MEMORY_BUFFER</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">;</span> <span class="token constant">WASM_MEMORY_BUFFER_SIZE</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token constant">WASM_MEMORY_BUFFER_SIZE</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Function to store the passed value at index 0,</span></span>
<span class="line"><span class="token comment">// in our buffer</span></span>
<span class="line"><span class="token attribute attr-name">#[wasm_bindgen]</span></span>
<span class="line"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">store_value_in_wasm_memory_buffer_index_zero</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">unsafe</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token constant">WASM_MEMORY_BUFFER</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Function to return a pointer to our buffer</span></span>
<span class="line"><span class="token comment">// in wasm memory</span></span>
<span class="line"><span class="token attribute attr-name">#[wasm_bindgen]</span></span>
<span class="line"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_wasm_memory_buffer_pointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token keyword">u8</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> pointer<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token keyword">u8</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">unsafe</span> <span class="token punctuation">{</span></span>
<span class="line">    pointer <span class="token operator">=</span> <span class="token constant">WASM_MEMORY_BUFFER</span><span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> pointer<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Function to read from index 1 of our buffer</span></span>
<span class="line"><span class="token comment">// And return the value at the index</span></span>
<span class="line"><span class="token attribute attr-name">#[wasm_bindgen]</span></span>
<span class="line"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">read_wasm_memory_buffer_and_return_index_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u8</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> value<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">unsafe</span> <span class="token punctuation">{</span></span>
<span class="line">    value <span class="token operator">=</span> <span class="token constant">WASM_MEMORY_BUFFER</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> value<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Xn={href:"https://github.com/rustwasm/wasm-pack",target:"_blank",rel:"noopener noreferrer"},$n=n("code",null,"rustwasm/wasm-pack",-1),ns=n("code",null,"pkg/",-1),ss=o(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">wasm-pack build <span class="token parameter variable">--target</span> web</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1),as=n("code",null,"index.js",-1),es=n("code",null,"pkg/",-1),ts=n("code",null,"webassembly_linear_memory.js",-1),ls=n("code",null,"pkg/",-1),os=n("code",null,"webassembly_linear_memory_bg.wasm",-1),ps=n("code",null,"index.js",-1),is=o(`<div class="hint-container tip"><p class="hint-container-title">Note</p><p>In this example, we are using the exported function from the wasm module directly to help highlight the WebAssembly API. <code>wasm-bindgen</code> generates JavaScript bindings code that can be imported as an ES6 import, and is the reccomended way to work with your Rust Wasm modules. These JavaScript bindings are shown in the &quot;Passing High Level Data Types with <code>wasm-bindgen</code>&quot; example.</p></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">runWasm</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> rustWasm <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">wasmInit</span><span class="token punctuation">(</span><span class="token string">&quot;./pkg/webassembly_linear_memory_bg.wasm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token doc-comment comment">/**</span>
<span class="line">   * Part one: Write in Wasm, Read in JS</span>
<span class="line">   */</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Write in Wasm, Read in JS, Index 0:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// First, let&#39;s have wasm write to our buffer</span></span>
<span class="line">  rustWasm<span class="token punctuation">.</span><span class="token function">store_value_in_wasm_memory_buffer_index_zero</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Next, let&#39;s create a Uint8Array of our wasm memory</span></span>
<span class="line">  <span class="token keyword">let</span> wasmMemory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>rustWasm<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Then, let&#39;s get the pointer to our buffer that is within wasmMemory</span></span>
<span class="line">  <span class="token keyword">let</span> bufferPointer <span class="token operator">=</span> rustWasm<span class="token punctuation">.</span><span class="token function">get_wasm_memory_buffer_pointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Then, let&#39;s read the written value at index zero of the buffer,</span></span>
<span class="line">  <span class="token comment">// by accessing the index of wasmMemory[bufferPointer + bufferIndex]</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wasmMemory<span class="token punctuation">[</span>bufferPointer <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Should log &quot;24&quot;</span></span>
<span class="line"></span>
<span class="line">  <span class="token doc-comment comment">/**</span>
<span class="line">   * Part two: Write in JS, Read in Wasm</span>
<span class="line">   */</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Write in JS, Read in Wasm, Index 1:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// First, let&#39;s write to index one of our buffer</span></span>
<span class="line">  wasmMemory<span class="token punctuation">[</span>bufferPointer <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Then, let&#39;s have wasm read index one of the buffer,</span></span>
<span class="line">  <span class="token comment">// and return the result</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rustWasm<span class="token punctuation">.</span><span class="token function">read_wasm_memory_buffer_and_return_index_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Should log &quot;15&quot;</span></span>
<span class="line"></span>
<span class="line">  <span class="token doc-comment comment">/**</span>
<span class="line">   * NOTE: if we were to continue reading and writing memory,</span>
<span class="line">   * depending on how the memory is grown by rust, you may have</span>
<span class="line">   * to re-create the Uint8Array since memory layout could change.</span>
<span class="line">   * For example, \`let wasmMemory = new Uint8Array(rustWasm.memory.buffer);\`</span>
<span class="line">   * In this example, we did not, but be aware this may happen :)</span>
<span class="line">   */</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">runWasm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),cs=n("code",null,"index.js",-1),us=n("code",null,"index.html",-1),rs=n("a",{href:"https://wasmbyexample.dev/source-redirect?path=examples/webassembly-linear-memory/demo/rust",target:"_blank",rel:"noopener noreferrer"},"Source Code",-1),ds=n("h3",{id:"demo-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#demo-2"},[n("span",null,"Demo")])],-1),ms=n("div",{class:"language-html line-numbers-mode","data-highlighter":"prismjs","data-ext":"html","data-title":"html"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("html")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("head")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("meta")]),s(),n("span",{class:"token attr-name"},"charset"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("UTF-8"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("title")]),n("span",{class:"token punctuation"},">")]),s("Hello World - Rust"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("title")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("link")]),s(),n("span",{class:"token attr-name"},"rel"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("preload"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"href"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("./index.js"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"as"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("script"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("head")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("body")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("script")]),s(),n("span",{class:"token attr-name"},"type"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("module"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"src"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("./index.js"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token script"}),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("script")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("pre")]),s(),n("span",{class:"token special-attr"},[n("span",{class:"token attr-name"},"style"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),n("span",{class:"token value css language-css"},[n("span",{class:"token property"},"border"),n("span",{class:"token punctuation"},":"),s(" 1px solid black"),n("span",{class:"token punctuation"},";")]),n("span",{class:"token punctuation"},'"')])]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},"  DOM Console:"),s(`
`),n("span",{class:"line"}," "),s(`
`),n("span",{class:"line"},"  Write in Wasm, Read in JS, Index 0:"),s(`
`),n("span",{class:"line"},"   "),s(`
`),n("span",{class:"line"},"  24"),s(`
`),n("span",{class:"line"},"   "),s(`
`),n("span",{class:"line"},"  Write in JS, Read in Wasm, Index 1:"),s(`
`),n("span",{class:"line"},"   "),s(`
`),n("span",{class:"line"},"  15"),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("pre")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("body")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("html")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),ks=n("p",null,[s("Next let's take a look at "),n("a",{href:"#importing-javascript-functions-into-webassembly"},"importing JavaScript functions into WebAssembly"),s(".")],-1),hs=n("hr",null,null,-1),bs=n("h2",{id:"importing-javascript-functions-into-webassembly",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#importing-javascript-functions-into-webassembly"},[n("span",null,"Importing Javascript Functions Into WebAssembly")])],-1),vs=n("h3",{id:"overview-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#overview-3"},[n("span",null,"Overview")])],-1),gs=n("p",null,[s("When you are instantiating Wasm modules, you are able to pass in an "),n("a",{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiateStreaming",target:"_blank",rel:"noopener noreferrer"},[n("code",null,"importObject")]),s(". This "),n("code",null,"importObject"),s(" can be used to call host (Javascript) functions within Wasm!")],-1),fs={href:"https://github.com/rustwasm/wasm-bindgen",target:"_blank",rel:"noopener noreferrer"},ws=n("code",null,"rustwasm/wasm-bindgen",-1),_s=n("code",null,"importObject",-1),ys=n("code",null,"console.log",-1),xs={href:"https://github.com/rustwasm/wasm-bindgen/blob/master/examples/console_log/src/lib.rs",target:"_blank",rel:"noopener noreferrer"},Ws=n("code",null,"rustwasm/wasm-bindgen",-1),js=n("code",null,"console_log",-1),qs=n("h3",{id:"implementation-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#implementation-3"},[n("span",null,"Implementation")])],-1),As=n("code",null,"src/",-1),Ss=n("code",null,"lib.rs",-1),Ts=o(`<div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token comment">// The wasm-pack uses wasm-bindgen to build and generate JavaScript binding file.</span></span>
<span class="line"><span class="token comment">// Import the wasm-bindgen crate.</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">wasm_bindgen<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Let&#39;s define our external function (imported from JS)</span></span>
<span class="line"><span class="token comment">// Here, we will define our external \`console.log\`</span></span>
<span class="line"><span class="token attribute attr-name">#[wasm_bindgen]</span></span>
<span class="line"><span class="token keyword">extern</span> <span class="token string">&quot;C&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Use \`js_namespace\` here to bind \`console.log(..)\` instead of just</span></span>
<span class="line">  <span class="token comment">// \`log(..)\`</span></span>
<span class="line"><span class="token attribute attr-name">#[wasm_bindgen(js_namespace = console)]</span></span>
<span class="line">  <span class="token keyword">fn</span> <span class="token function-definition function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Export a function that will be called in JavaScript</span></span>
<span class="line"><span class="token comment">// but call the &quot;imported&quot; console.log.</span></span>
<span class="line"><span class="token attribute attr-name">#[wasm_bindgen]</span></span>
<span class="line"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">console_log_from_wasm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;This console.log is from wasm!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Is=n("code",null,"pkg/",-1),Es=o(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">wasm-pack build <span class="token parameter variable">--target</span> web</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1),Js=n("code",null,"index.js",-1),Rs=n("code",null,"pkg/",-1),Ms=n("code",null,"importing_javascript_functions_into_webassembly.js",-1),Os=n("code",null,"pkg/",-1),Ls=n("code",null,"importing_javascript_functions_into_webassembly_bg.wasm",-1),Ds=n("code",null,"console.log",-1),Fs=o(`<div class="hint-container tip"><p class="hint-container-title">Note</p><p>In this example, we are using the exported function from the wasm module directly to help highlight the WebAssembly API. <code>wasm-bindgen</code> generates JavaScript bindings code that can be imported as an ES6 import, and is the reccomended way to work with your Rust Wasm modules. These JavaScript bindings are shown in the &quot;Passing High Level Data Types with <code>wasm-bindgen</code>&quot; example.</p></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">runWasm</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Instantiate our wasm module</span></span>
<span class="line">  <span class="token keyword">const</span> rustWasm <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">wasmInit</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&quot;./pkg/importing_javascript_functions_into_webassembly_bg.wasm&quot;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Run the exported function</span></span>
<span class="line">  rustWasm<span class="token punctuation">.</span><span class="token function">console_log_from_wasm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Should log &quot;This console.log is from wasm!&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">runWasm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Cs=n("code",null,"index.js",-1),Ps=n("code",null,"index.html",-1),Ns=n("h3",{id:"demo-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#demo-3"},[n("span",null,"Demo")])],-1),Us=n("div",{class:"language-html line-numbers-mode","data-highlighter":"prismjs","data-ext":"html","data-title":"html"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("html")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("head")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("meta")]),s(),n("span",{class:"token attr-name"},"charset"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("UTF-8"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("title")]),n("span",{class:"token punctuation"},">")]),s("Hello World - Rust"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("title")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("link")]),s(),n("span",{class:"token attr-name"},"rel"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("preload"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"href"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("./index.js"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"as"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("script"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("head")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("body")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("script")]),s(),n("span",{class:"token attr-name"},"type"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("module"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"src"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("./index.js"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token script"}),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("script")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("p")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("b")]),n("span",{class:"token punctuation"},">")]),s("Please check your JavaScript console for the results."),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("b")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("p")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("body")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"},[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("html")]),n("span",{class:"token punctuation"},">")])]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Hs=n("div",{class:"language-javascript line-numbers-mode","data-highlighter":"prismjs","data-ext":"js","data-title":"js"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'This console.log is from wasm!'"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1),Bs=n("hr",null,null,-1);function zs(d,Ys){const l=u("router-link"),p=u("VPCard"),e=u("FontIcon"),r=u("CodeDemo"),m=u("RouteLink");return v(),h("div",null,[n("h1",f,[n("a",w,[n("span",null,b(d.$frontmatter.title)+" 관련",1)])]),n("nav",_,[n("ul",null,[n("li",null,[a(l,{to:"#introduction"},{default:t(()=>[s("Introduction")]),_:1})]),n("li",null,[a(l,{to:"#hello-world"},{default:t(()=>[s("Hello World!")]),_:1}),n("ul",null,[n("li",null,[a(l,{to:"#overview"},{default:t(()=>[s("Overview")]),_:1})]),n("li",null,[a(l,{to:"#project-setup"},{default:t(()=>[s("Project Setup")]),_:1})]),n("li",null,[a(l,{to:"#implementation"},{default:t(()=>[s("Implementation")]),_:1})]),n("li",null,[a(l,{to:"#demo"},{default:t(()=>[s("Demo")]),_:1})])])]),n("li",null,[a(l,{to:"#exports"},{default:t(()=>[s("Exports")]),_:1}),n("ul",null,[n("li",null,[a(l,{to:"#overview-1"},{default:t(()=>[s("Overview")]),_:1})]),n("li",null,[a(l,{to:"#implementation-1"},{default:t(()=>[s("Implementation")]),_:1})]),n("li",null,[a(l,{to:"#demo-1"},{default:t(()=>[s("Demo")]),_:1})])])]),n("li",null,[a(l,{to:"#webassembly-linear-memory"},{default:t(()=>[s("WebAssembly Linear Memory")]),_:1}),n("ul",null,[n("li",null,[a(l,{to:"#overview-2"},{default:t(()=>[s("Overview")]),_:1})]),n("li",null,[a(l,{to:"#implementation-2"},{default:t(()=>[s("Implementation")]),_:1})]),n("li",null,[a(l,{to:"#demo-2"},{default:t(()=>[s("Demo")]),_:1})])])]),n("li",null,[a(l,{to:"#importing-javascript-functions-into-webassembly"},{default:t(()=>[s("Importing Javascript Functions Into WebAssembly")]),_:1}),n("ul",null,[n("li",null,[a(l,{to:"#overview-3"},{default:t(()=>[s("Overview")]),_:1})]),n("li",null,[a(l,{to:"#implementation-3"},{default:t(()=>[s("Implementation")]),_:1})]),n("li",null,[a(l,{to:"#demo-3"},{default:t(()=>[s("Demo")]),_:1})])])])])]),y,x,W,j,a(p,i(c({title:"Wasm By Example - Introduction",desc:"Introduction",link:"https://wasmbyexample.dev/examples/introduction/introduction.all.en-us.html",logo:"https://wasmbyexample.dev/Web_Assembly_Logo.svg",background:"rgba(136,103,249,0.2)"})),null,16),q,n("ul",null,[A,S,n("li",null,[s("WebAssembly is extremely portable. WebAssembly runs on: all major web browsers, V8 runtimes like "),n("a",T,[a(e,{icon:"fa-brands fa-js"}),s("Node.js")]),s(", and independent Wasm runtimes like "),I,s(", "),n("a",E,[a(e,{icon:"iconfont icon-github"}),J]),s(", and "),n("a",R,[a(e,{icon:"iconfont icon-github"}),M]),s(".")]),O,L,D]),F,C,P,a(p,i(c({title:"Wasm By Example - Hello World!",desc:"Hello World!",link:"https://wasmbyexample.dev/examples/hello-world/hello-world.rust.en-us.html",logo:"https://wasmbyexample.dev/Web_Assembly_Logo.svg",background:"rgba(136,103,249,0.2)"})),null,16),N,U,n("p",null,[s('For our first program, we will be doing a "Hello world" type of program in '),H,s(" and "),n("a",B,[a(e,{icon:"iconfont icon-github"}),z]),s(".")]),Y,n("p",null,[s("Then, let's edit our new "),a(e,{icon:"fas fa-file-lines"}),V,s(" to implement "),Z,s(" as mentioned in their quickstart:")]),K,n("p",null,[s("Lastly, let's take a quick peek inside at the "),a(e,{icon:"fas fa-folder-open"}),Q,s(" directory. Since we are building a library ("),G,s(") to be used by a larger application, "),n("strong",null,[s("we need to rename the "),a(e,{icon:"fas fa-folder-open"}),X,a(e,{icon:"fa-brands fa-rust"}),$,s(" to "),a(e,{icon:"fas fa-folder-open"}),nn,a(e,{icon:"fa-brands fa-rust"}),sn,s(".")]),s(" Go ahead and do that now before moving forward.")]),an,en,n("p",null,[s("Let's go ahead and replace "),a(e,{icon:"fas fa-folder-open"}),tn,a(e,{icon:"fa-brands fa-rust"}),ln,s(" with the required "),on,s(" call as mentioned in the quickstart, as well as our add function:")]),pn,n("p",null,[s("This will output a "),a(e,{icon:"fas fa-folder-open"}),cn,s(" directory containing our wasm module, wrapped in a js object. Next, lets create an "),a(e,{icon:"fa-brands fa-js"}),un,s(" JavaScript file, and import the outputted ES6 module in our "),a(e,{icon:"fas fa-folder-open"}),rn,s(" directory. Then, we will call our exported "),dn,s(" function:")]),mn,n("p",null,[s("Lastly, lets load our ES6 Module, "),a(e,{icon:"fa-brands fa-js"}),kn,s(" Javascript file in our "),a(e,{icon:"fa-brands fa-html5"}),hn,s(":")]),bn,a(r,{id:"code-demo-124",type:"normal",title:"Demo",code:"eJxNT7sOwjAM/BWTvc3CUFWhI2KuQCxZQmOUgNtUiSuBEP9OSBmYzrqHzvcSjkcSrVBf7PSkHBqbEUCNyAYGZ2JC3mlxOu6rRotVY8+E3QGJApxDJAsV9EtiJVelmMhPd4hIOTxnCMZqAS7iNRO19JPFR31LmTMpM2mIfuZSoOTvi3xegn3+F23AWNtjWohb2DZKFkPJrAvE+wO1y0ep"},{default:t(()=>[vn]),_:1}),gn,fn,wn,a(p,i(c({title:"Wasm By Example - Exports",desc:"Exports",link:"https://wasmbyexample.dev/examples/exports/exports.rust.en-us.html",logo:"https://wasmbyexample.dev/Web_Assembly_Logo.svg",background:"rgba(136,103,249,0.2)"})),null,16),_n,n("p",null,[s("First, let's add the following to our "),a(e,{icon:"fas fa-folder-open"}),yn,a(e,{icon:"fa-brands fa-rust"}),xn,s(" file:")]),Wn,n("p",null,[s("Then, let's compile that using "),n("a",jn,[a(e,{icon:"iconfont icon-github"}),qn]),s(", which will create a "),a(e,{icon:"fas fa-folder-open"}),An,s(" directory:")]),Sn,n("p",null,[s("Next, lets create an "),a(e,{icon:"fa-brands fa-js"}),Tn,s(" file to load and run our wasm output. Let's import the wasm initialization module from "),a(e,{icon:"fas fa-folder-open"}),In,a(e,{icon:"fa-brands fa-js"}),En,s(" that was generated by wasm-pack. Then, let's call the module passing in the path to our wasm file at "),a(e,{icon:"fas fa-folder-open"}),Jn,a(e,{icon:"fas fa-file-lines"}),Rn,s(" that was generated by wasm-pack. Then, let's go ahead and call out exported functions, and explore what functions were NOT exported:")]),Mn,n("p",null,[s("Lastly, lets load our ES6 Module, "),a(e,{icon:"fa-brands fa-js"}),On,s(" Javascript file in our "),a(e,{icon:"fa-brands fa-html5code"}),Ln,s(". And you should get something similar to the demo ("),Dn,s(") below!")]),Fn,a(r,{id:"code-demo-170",type:"normal",title:"Demo",code:"eJxtUL2OwjAMfhUrO0R3y51KYAEhFoSEQCxd2saoAbepEleiQrw7LunIEsf+8v3ET1VzQypTZqyrvDU1FlYqgGmQC6jqIkTkZa7Op+3sP1cJY8eEqx0Sebj4QBZmcOwjG50QEdKTkim9HRIrVsF1DDx0KIKNtz1hriCGStq5dq3Fx/wWxcTo9DbxuoAQeaCRVfpgMWTw0z0genIWSiqq+2JKtjnsYe1bQTCTfhz9/Y7n59qLw9W1aL9PjBanT/Yps3wirUW93iPfYxU="},{default:t(()=>[Cn]),_:1}),Pn,Nn,Un,a(p,i(c({title:"Wasm By Example - WebAssembly Linear Memory",desc:"WebAssembly Linear Memory",link:"https://wasmbyexample.dev/examples/webassembly-linear-memory/webassembly-linear-memory.rust.en-us.html",logo:"https://wasmbyexample.dev/Web_Assembly_Logo.svg",background:"rgba(136,103,249,0.2)"})),null,16),Hn,Bn,n("p",null,[s("In rust, tools like "),n("a",zn,[a(e,{icon:"iconfont icon-github"}),Yn]),s(", which is part of wasm-pack workflow, abstracts away linear memory, and allows using native data structures between rust and Javascript. But for this example, we will use simple byte (Unsigned 8-bit integer) buffers and pointers (Wasm memory array indexes) as a simple(r) way to pass memory back and forth, and show off the concept.")]),Vn,Zn,n("p",null,[s("First, let's add the following to our "),a(e,{icon:"fas fa-folder-open"}),Kn,a(e,{icon:"fa-brands fa-rust"}),Qn,s(" file:")]),Gn,n("p",null,[s("Then, let's compile that using "),n("a",Xn,[a(e,{icon:"iconfont icon-github"}),$n]),s(", which will create a "),a(e,{icon:"fas fa-folder-open"}),ns,s(" directory:")]),ss,n("p",null,[s("Next, lets create an "),a(e,{icon:"fa-brands fa-js"}),as,s(" file to load and run our wasm output. Let's import the wasm initialization module from "),a(e,{icon:"fas fa-folder-open"}),es,a(e,{icon:"fa-brands fa-js"}),ts,s(" that was generated by wasm-pack. Then, let's call the module passing in the path to our wasm file at "),a(e,{icon:"fas fa-folder-open"}),ls,a(e,{icon:"fas fa-file-lines"}),os,s(" that was generated by wasm-pack. Then, let's go ahead and read and write to memory from both Wasm and JS. Please read through the commented code for context. And be sure to read the note at the bottom of this code example. Let's dive into our resulting "),a(e,{icon:"fa-brands fa-js"}),ps,s(":")]),is,n("p",null,[s("Lastly, lets load our ES6 Module, "),a(e,{icon:"fa-brands fa-js"}),cs,s(" Javascript file in our "),a(e,{icon:"fa-brands fa-html5"}),us,s(". And you should get something similar to the demo ("),rs,s(") below!")]),ds,a(r,{id:"code-demo-219",type:"normal",title:"Demo",code:"eJxdkU1LxDAQhv/KkPPu1oqC1NiLIiqIsCq99JI2I407bUqShS3if3fS1F1YcpjMzPvMR/IjutCTKISMtqwH2aHSbAFkj0FB2ynnMdzV4vPjcX1Ti5QLJhCWT0hkobKONKxhu/dBZikzi8gMO3BIDI9srNK1gM7hFwc2mRk0HjbfnmPKc8S3zoxhbiCzZQrZWD2lYikNYRqRxb3Ve0JGvWvPqpUyS1rm4mGWu4MPE0WysU6jKyAfD+AtGQ0NqXZ3u2z28PYK93bgDBbsx1DlTEAwA1TK9yvY8mjRe3lfwXPsChdRCbP28up4PWJR+A+lEgnLT1h+Pc+Z8aDz+sva/A7pV8TvHyyFido="},{default:t(()=>[ms]),_:1}),ks,hs,bs,a(p,i(c({title:"Wasm By Example - Importing Javascript Functions Into WebAssembly",desc:"Importing Javascript Functions Into WebAssembly",link:"https://wasmbyexample.dev/examples/importing-javascript-functions-into-webassembly/importing-javascript-functions-into-webassembly.rust.en-us.html",logo:"https://wasmbyexample.dev/Web_Assembly_Logo.svg",background:"rgba(136,103,249,0.2)"})),null,16),vs,gs,n("p",null,[s("In rust, tools like "),n("a",fs,[a(e,{icon:"iconfont icon-github"}),ws]),s(", which is part of wasm-pack workflow, abstracts away the "),_s,s(".")]),n("p",null,[s("In this example, we will import and implement a simple "),ys,s(" which is called within Wasm. This example is inspired by the "),n("a",xs,[a(e,{icon:"iconfont icon-github"}),Ws,s(" - "),js,s(" example")]),s(" , but simplified. So let's jump into the example:")]),qs,n("p",null,[s("First, let's add the following to our "),a(e,{icon:"fas fa-folder-open"}),As,a(e,{icon:"fa-brands fa-rust"}),Ss,s(" file:")]),Ts,n("p",null,[s("Then, let's compile that using wasm-pack, which will create a "),a(e,{icon:"fas fa-folder-open"}),Is,s(" directory:")]),Es,n("p",null,[s("Next, lets create an "),a(e,{icon:"fa-brands fa-js"}),Js,s(" file to load and run our wasm output. Let's import the wasm initialization module from "),a(e,{icon:"fas fa-folder-open"}),Rs,a(e,{icon:"fa-brands fa-js"}),Ms,s(" that was generated by wasm-pack. Then, let's call the module passing in the path to our wasm file at "),a(e,{icon:"fas fa-folder-open"}),Os,a(e,{icon:"fas fa-file-lines"}),Ls,s(' that was generated by wasm-pack. Then, we will go ahead and call our exported wasm function, that will call the "imported" '),Ds,s(" JavaScript function:")]),Fs,n("p",null,[s("Lastly, lets load our ES6 Module, "),a(e,{icon:"fa-brands fa-js"}),Cs,s(" Javascript file in our "),a(e,{icon:"fa-brands fa-html5"}),Ps,s(". And you should get something similar to the demo (Source Code) below!")]),Ns,n("p",null,[s(`And that's it for the basics! Next, lets took a look at some "Advanced Web Demos", with an example of `),a(m,{to:"/rust/wasm-by-example/02-applying-the-concepts.html#reading-and-writing-graphics"},{default:t(()=>[s("Reading and Writing Graphics with WebAssembly")]),_:1}),s(".")]),a(r,{id:"code-demo-271",type:"normal",title:"Demo",code:"eJxdUL1OxDAMfhWT5UDi2hWh0BEhJgSHWLqkjUt659ZVnAIV4t1xL2VhsvL95bO/TUgDmVtj11nVow3ovE4AO2By0AYXBdNdbV4P9/ub2mQu9YmwekAihjeO5GEPz7MkW2bmLKJ+PEFEUvOkg52vDYSInQJF2Y8ev4qjKOZEEWljP6XzB7bcWtiG/ZLDMg1pmVDFA/uZUK0S239plS2zNvumyjbVE6ET1GWwPcHCc4RH9+FecmTLozAhdBwhBdTGMlOSwpaNZk0aszbammi1fChzbY6ih9vcBfH75e4QevnLWxHQZxd5gE8nw8XuSm0/v8qyfek="},{default:t(()=>[Us,Hs]),_:1}),Bs])}const Ks=k(g,[["render",zs],["__file","01-concepts.html.vue"]]),Qs=JSON.parse('{"path":"/rust/wasm-by-example/01-concepts.html","title":"01. Concepts","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"01. Concepts","description":"Wasm by Example (for Rust) > 01. Concepts","category":["Rust"],"tag":["crashcourse","rust","rs","wasm","assembly","assemblyscript","c","cpp"],"head":[[{"meta":null},{"property":"og:title","content":"Wasm by Example (for Rust) > 01. Concepts"},{"property":"og:description","content":"01. Concepts"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/rust/wasm-by-example/01-concepts.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/rust/wasm-by-example/01-concepts.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"01. Concepts"}],["meta",{"property":"og:description","content":"Wasm by Example (for Rust) > 01. Concepts"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"rust"}],["meta",{"property":"article:tag","content":"rs"}],["meta",{"property":"article:tag","content":"wasm"}],["meta",{"property":"article:tag","content":"assembly"}],["meta",{"property":"article:tag","content":"assemblyscript"}],["meta",{"property":"article:tag","content":"c"}],["meta",{"property":"article:tag","content":"cpp"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"01. Concepts\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"Hello World!","slug":"hello-world","link":"#hello-world","children":[{"level":3,"title":"Overview","slug":"overview","link":"#overview","children":[]},{"level":3,"title":"Project Setup","slug":"project-setup","link":"#project-setup","children":[]},{"level":3,"title":"Implementation","slug":"implementation","link":"#implementation","children":[]},{"level":3,"title":"Demo","slug":"demo","link":"#demo","children":[]}]},{"level":2,"title":"Exports","slug":"exports","link":"#exports","children":[{"level":3,"title":"Overview","slug":"overview-1","link":"#overview-1","children":[]},{"level":3,"title":"Implementation","slug":"implementation-1","link":"#implementation-1","children":[]},{"level":3,"title":"Demo","slug":"demo-1","link":"#demo-1","children":[]}]},{"level":2,"title":"WebAssembly Linear Memory","slug":"webassembly-linear-memory","link":"#webassembly-linear-memory","children":[{"level":3,"title":"Overview","slug":"overview-2","link":"#overview-2","children":[]},{"level":3,"title":"Implementation","slug":"implementation-2","link":"#implementation-2","children":[]},{"level":3,"title":"Demo","slug":"demo-2","link":"#demo-2","children":[]}]},{"level":2,"title":"Importing Javascript Functions Into WebAssembly","slug":"importing-javascript-functions-into-webassembly","link":"#importing-javascript-functions-into-webassembly","children":[{"level":3,"title":"Overview","slug":"overview-3","link":"#overview-3","children":[]},{"level":3,"title":"Implementation","slug":"implementation-3","link":"#implementation-3","children":[]},{"level":3,"title":"Demo","slug":"demo-3","link":"#demo-3","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":11}]},"readingTime":{"minutes":11.09,"words":3326},"filePathRelative":"rust/wasm-by-example/01-concepts.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n<p>Examples that express some of the major underlying concepts in WebAssembly. Some of these examples are not the most convenient or productive way for building projects with WebAssembly. However, these minimal examples are great for learning, or developing straightforward / lower-level parts of an application.</p>"}');export{Ks as comp,Qs as data};
