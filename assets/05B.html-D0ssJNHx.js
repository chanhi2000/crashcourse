import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,a as s,t as k,b as e,n as o,g as p,w as d,d as n,e as l,r as t,o as v}from"./app-U_bew1in.js";const y={},h={id:"frontmatter-title-관련",tabindex:"-1"},b={class:"header-anchor",href:"#frontmatter-title-관련"},g={class:"table-of-contents"},_=s("hr",null,null,-1),f=s("h2",{id:"스테이트풀셋",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#스테이트풀셋"},[s("span",null,"스테이트풀셋")])],-1),S=s("code",null,"mysql-statefulset.yaml",-1),A=l(`<div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1</span>
<span class="line highlighted"><span class="token key atrule">kind</span><span class="token punctuation">:</span> StatefulSet</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql</span>
<span class="line"><span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line highlighted">  <span class="token key atrule">serviceName</span><span class="token punctuation">:</span> mysql</span>
<span class="line highlighted">  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span></span>
<span class="line highlighted">  <span class="token key atrule">selector</span><span class="token punctuation">:</span></span>
<span class="line highlighted">    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span></span>
<span class="line highlighted">      <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>.apiVersion</code>: 현재 스테이트풀셋의 버전은 <code>apps/v1</code>입니다.</li><li><code>.kind</code>: 스테이트풀셋을 생성하므로 <code>StatefulSet</code>을 지정합니다.</li><li><code>.metadata.name</code>: 현재 스테이트풀셋의 이름입니다. 여기서는 <code>mysql</code>을 설정합니다.</li><li><code>.spec.serviceName</code>: 연결하고자하는 헤드리스 서비스의 이름입니다. 여기서는 <code>mysql</code>을 설정합니다. 헤드리스 서비스는 뒤에서 설명하겠습니다.</li><li><code>.spec.replicas</code>: 스테이트풀셋의 파드 개수입니다. 1로 설정하여 파드를 1개만 생성합니다.</li><li><code>.spec.selector</code>: 스테이트풀셋으로 관리할 파드를 찾는 방법을 정의합니다. 여기서는 <code>matchLabels</code>에 <code>app: mysql</code>로 설정했으므로 키가 <code>app</code>, 값이 <code>mysql</code>로 정확히 일치하는 파드를 찾습니다.</li></ul><p>여기서부터는 파드 설정입니다.</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line">  <span class="token key atrule">template</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">labels</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql</span>
<span class="line">    <span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">terminationGracePeriodSeconds</span><span class="token punctuation">:</span> <span class="token number">10</span></span>
<span class="line">      <span class="token key atrule">containers</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql</span>
<span class="line">          <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span><span class="token number">5.7</span></span>
<span class="line">          <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token punctuation">-</span> <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP</span>
<span class="line">              <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">3306</span></span>
<span class="line">          <span class="token key atrule">env</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYSQL_ROOT_PASSWORD</span>
<span class="line">              <span class="token key atrule">value</span><span class="token punctuation">:</span> examplepassword</span>
<span class="line">            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYSQL_DATABASE</span>
<span class="line">              <span class="token key atrule">value</span><span class="token punctuation">:</span> example</span>
<span class="line">          <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> data</span>
<span class="line">              <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var/lib/mysql</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),L=s("li",null,[s("code",null,".spec.template.metadata"),n(": "),s("code",null,"labels"),n("에 키-값을 설정하여 스테이트풀셋이 찾을 수 있도록 합니다. 여기서는 "),s("code",null,"app: mysql"),n("를 설정했습니다.")],-1),q=s("code",null,".spec.template.spec",-1),M=s("code",null,"spec",-1),T=s("code",null,"containers",-1),C=s("code",null,"-",-1),P=s("li",null,[s("code",null,"terminationGracePeriodSeconds"),n(": 10을 설정했는데, 종료 요청 후 10초간 기다리도록 합니다. 데이터베이스가 손상되지 않게 하기 위함입니다.")],-1),x=s("code",null,"containers",-1),Q=s("li",null,[s("code",null,"name"),n("에는 컨테이너의 이름을 설정합니다. 여기서는 "),s("code",null,"mysql"),n("로 설정했지만 셀렉터와는 상관이 없습니다.")],-1),B=s("li",null,[s("code",null,"image"),n("에는 컨테이너를 실행할 Docker 이미지를 설정합니다. "),s("code",null,"<이미지>:<태그>"),n(" 형식이며 여기서는 "),s("code",null,"mysql:5.7"),n("을 설정했습니다.")],-1),U=s("code",null,"ports",-1),D=s("code",null,"containerPort",-1),O=s("code",null,"containerPort",-1),R=l("<li><code>env</code>: 환경 변수입니다. 배열 형태로 설정하며 <code>name</code>, <code>value</code> 형식입니다. 여기서는 <code>MYSQL_ROOT_PASSWORD</code>에 <code>examplepassword</code>를 설정했고, <code>MYSQL_DATABASE</code>에 <code>example</code>을 설정하여 MySQL 데이터베이스가 처음 실행될 때 <code>example</code> 데이터베이스를 생성하도록 합니다.</li>",1),w=s("code",null,"volumeMounts",-1),E=s("code",null,"name",-1),K=s("code",null,"data",-1),j=s("code",null,"mountPath",-1),N=s("code",null,"/var/lib/mysql",-1),I=s("code",null,"/var/lib/mysql",-1),V=s("code",null,"data",-1),G=s("code",null,"data",-1),H=l(`<figure><img src="https://pyrasis.com/assets/images/jHLsAlwaysUpToDateKubernetes/Unit05/2.png" alt="MySQL 스테이트풀셋" tabindex="0" loading="lazy"><figcaption>MySQL 스테이트풀셋</figcaption></figure><p>이제 퍼시스턴트 볼륨 클레임(Persistent Volume Claim, 영구 볼륨 요청) 부분입니다. 즉, 쿠버네티스 클러스터에 영구적으로 데이터를 저장할 수 있는 볼륨을 요청하여 스토리지(저장소)를 받겠다는 뜻입니다.</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line">  <span class="token key atrule">volumeClaimTemplates</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">name</span><span class="token punctuation">:</span> data</span>
<span class="line">      <span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">storageClassName</span><span class="token punctuation">:</span> standard</span>
<span class="line">        <span class="token key atrule">accessModes</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token punctuation">-</span> ReadWriteOnce</span>
<span class="line">        <span class="token key atrule">resources</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token key atrule">requests</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token key atrule">storage</span><span class="token punctuation">:</span> 1Gi</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>.spec.volumeClaimTemplates</code>: 퍼시스턴트 볼륨 클레임 설 <ul><li><code>metadata</code>: 퍼시스턴트 볼륨 클레임의 이름입니다. 여기서는 <code>data</code>를 설정했습니다.</li><li><code>spec</code>: 퍼시스턴트 볼륨 클레임의 <code>spec</code><ul><li><code>storageClassName</code>: 스토리지 클래스(sc) 설정입니다. 여기서는 <code>standard</code>로 설정했습니다. 스토리지 클래스는 나중에 다른 것을 추가해서 사용할 수 있습니다.</li><li><code>accessModes</code>: 접근 모드입니다. 여기서는 <code>ReadWriteOnce</code>로 설정했으며 <code>ReadWriteOnce</code>는 하나의 노드에서만 현재 볼륨이 읽기/쓰기로 마운트될 수 있습니다.</li><li><code>resources</code>: 요청할 리소스 설정입니다. <code>requests</code>에 <code>storage: 1Gi</code>를 설정하여 스토리지(저장소) 1Gi 용량을 받겠다는 뜻입니다.</li></ul></li></ul></li></ul>`,4),Y=s("code",null,"kubectl get pvc",-1),W=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl get pvc</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># NAME           STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE</span></span>
<span class="line"><span class="token comment"># data-mysql-0   Bound    pvc-34538161-d92c-48de-83cc-594107fe0868   1Gi        RWO            standard       10s</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),z=s("code",null,"kubectl get pv",-1),Z=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl get <span class="token function">pv</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                  STORAGECLASS   REASON   AGE</span></span>
<span class="line"><span class="token comment"># pvc-34538161-d92c-48de-83cc-594107fe0868   1Gi        RWO            Delete           Bound    default/data-mysql-0   standard                110s</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pyrasis.com/assets/images/jHLsAlwaysUpToDateKubernetes/Unit05/3.png" alt="MySQL 퍼시스턴트 볼륨 클레임과 퍼시스턴트 볼륨" tabindex="0" loading="lazy"><figcaption>MySQL 퍼시스턴트 볼륨 클레임과 퍼시스턴트 볼륨</figcaption></figure><hr><h2 id="서비스" tabindex="-1"><a class="header-anchor" href="#서비스"><span>서비스</span></a></h2><p>다음은 서비스입니다. 스테이트풀셋 서비스의 특징적인 점은 헤드리스 서비스를 사용한다는 점입니다. 헤드리스는 말그대로 머리가 없다는 뜻인데, 쿠버네티스에서는 IP 주소가 할당되지 않은 서비스를 뜻합니다. 그리고 헤 서비스는 파드에 트래픽을 랜덤(또는 라운드로빈 등의 알고리즘)으로 균등하게 전달하지 않고, 파드의 이름을 직접 지정해서 전달합니다.</p>`,5),F=s("code",null,"mysql-service.yaml",-1),J=l(`<div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Service</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> mysql</span>
<span class="line"><span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line highlighted">  <span class="token key atrule">clusterIP</span><span class="token punctuation">:</span> None</span>
<span class="line highlighted">  <span class="token key atrule">selector</span><span class="token punctuation">:</span></span>
<span class="line highlighted">    <span class="token key atrule">app</span><span class="token punctuation">:</span> mysql</span>
<span class="line">  <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP</span>
<span class="line">      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3306</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>.apiVersion</code>: 현재 서비스의 버전은 <code>v1</code>입니다.</li><li><code>.kind</code>: 여기서는 서비스를 작성하므로 <code>Service</code>를 지정합니다.</li><li><code>.metadata.name</code>: 현재 서비스의 이름입니다. 여기서는 <code>mysql</code>을 설정합니다.</li><li><code>.spec.clusterIP</code>: <code>ClusterIP</code>를 <code>None</code>으로 설정하여 헤드리스 서비스로 만듭니다.</li><li><code>.spec.selector</code>: 서비스가 트래픽을 전달할 파드를 선택합니다. 여기서는 <code>app: mysql</code>을 설정했으므로 키가 <code>app</code>, 값이 <code>mysql</code>인 파드를 찾습니다.</li><li><code>.spec.ports</code>: <code>protocol</code>은 TCP, <code>port</code>는 3306으로 설정합니다.</li></ul><figure><img src="https://pyrasis.com/assets/images/jHLsAlwaysUpToDateKubernetes/Unit05/4.png" alt="MySQL 서비스" tabindex="0" loading="lazy"><figcaption>MySQL 서비스</figcaption></figure>`,3),$=s("code",null,"mysql:5.7",-1),X=s("code",null,"-h",-1),ss=s("code",null,"mysql",-1),ns=s("code",null,"pod/mysql",-1),es=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> mysql-client <span class="token parameter variable">--image</span><span class="token operator">=</span>mysql:5.7 <span class="token parameter variable">--restart</span><span class="token operator">=</span>Never -- <span class="token function">sh</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># If you don&#39;t see a command prompt, try pressing enter.</span></span>
<span class="line"><span class="token comment"># sh-4.2# </span></span>
<span class="line">mysql <span class="token parameter variable">-h</span> mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,2);function as(r,ls){const c=t("VPCard"),i=t("router-link"),a=t("FontIcon");return v(),m("div",null,[s("h1",h,[s("a",b,[s("span",null,k(r.$frontmatter.title)+" 관련",1)])]),e(c,o(p({title:"목차",desc:"언제나 최신 Kubernetes",link:"/k8s/always-up-to-date-kubernetes/README.md",logo:"https://pyrasis.com/assets/images/pyrasis.png",background:"rgba(31,41,55,0.2)"})),null,16),s("nav",g,[s("ul",null,[s("li",null,[e(i,{to:"#스테이트풀셋"},{default:d(()=>[n("스테이트풀셋")]),_:1})]),s("li",null,[e(i,{to:"#서비스"},{default:d(()=>[n("서비스")]),_:1})])])]),_,e(c,o(p({title:"Unit 5 - 5.2 MySQL 스테이트풀셋과 서비스의 구조 살펴보기",desc:"언제나 최신 Kubernetes",link:"https://pyrasis.com/jHLsAlwaysUpToDateKubernetes/Unit05/02",logo:"https://pyrasis.com/assets/images/pyrasis.png",background:"rgba(31,41,55,0.2)"})),null,16),s("p",null,[n("이제 "),e(a,{icon:"iconfont icon-yaml"}),n("YAML 파일을 자세히 살펴보겠습니다.")]),f,s("blockquote",null,[e(a,{icon:"iconfont icon-yaml"}),S]),A,s("ul",null,[L,s("li",null,[q,n(": 파드의 "),M,n("입니다. 파드에는 컨테이너가 여러 개 들어갈 수 있어서 "),T,n("로 되어있고, 그 아래에는 "),C,n("를 사용하여 배열(Array)로 값을 설 "),s("ul",null,[P,s("li",null,[x,n(": "),s("ul",null,[Q,B,s("li",null,[U,n(": 배열 형태로 "),D,n("를 설정합니다. "),O,n("는 컨테이너에서 개방할 포트 번호를 뜻합니다. 여기서는 "),e(a,{icon:"fa-brands fa-mysql"}),n("MySQL 데이터베이스 포트인 3306을 설정했습니다.")]),R,s("li",null,[w,n(": 볼륨 설정입니다. 스테이트풀셋은 상태를 저장하기 때문에 이 부분이 중요합니다. 배열 형태로 설정하며 "),E,n("에는 볼륨의 이름인 "),K,n("를 설정했고, "),j,n("에는 "),e(a,{icon:"fas fa-folder-open"}),N,n("를 설정하여 컨테이너의 "),e(a,{icon:"fas fa-folder-open"}),I,n(" 경로에 "),V,n(" 볼륨이 연결되도록 합니다. "),G,n(" 볼륨은 뒤에서 설명하겠습니다.")])])])])])]),H,s("p",null,[n("."),e(a,{icon:"iconfont icon-shell"}),Y,n(" 명령을 입력하면 현재 생성된 퍼시스턴트 볼륨 클레임(pvc)을 확인할 수 있습니다.")]),W,s("p",null,[n("."),e(a,{icon:"iconfont icon-shell"}),z,n(" 명령을 입력하면 퍼시스턴트 볼륨 클레임(pvc)을 통해 생성된 퍼시스턴트 볼륨(pv)를 확인할 수 있습니다. 여기가 실제 데이터가 저장되는 스토리지입니다.")]),Z,s("blockquote",null,[e(a,{icon:"iconfont icon-yaml"}),F]),J,s("p",null,[n("앞에서 "),e(a,{icon:"fa-brands fa-docker"}),$,n(" 컨테이너로 MySQL 데이터베이스에 접근할 때 "),X,n(" 옵션에 호스트를 "),ss,n("로 지정했는데, 이렇게 하면 스테이트풀셋의 첫 번째 파드인 "),e(a,{icon:"iconfont icon-k8s"}),ns,n(" 으로 트래픽을 전달합니다.")]),es])}const is=u(y,[["render",as],["__file","05B.html.vue"]]),os=JSON.parse('{"path":"/k8s/always-up-to-date-kubernetes/05B.html","title":"05B. MySQL 스테이트풀셋과 서비스의 구조 살펴보기","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"05B. MySQL 스테이트풀셋과 서비스의 구조 살펴보기","description":"언제나 최신 Kubernetes > 05B. MySQL 스테이트풀셋과 서비스의 구조 살펴보기","category":["Kubernetes"],"tag":["crashcourse","digitalocean","kubernetes","minkube","kubctl"],"head":[[{"meta":null},{"property":"og:title","content":"언제나 최신 Kubernetes > 05B. MySQL 스테이트풀셋과 서비스의 구조 살펴보기"},{"property":"og:description","content":"05B. MySQL 스테이트풀셋과 서비스의 구조 살펴보기"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/k8s/always-up-to-date-kubernetes/05B.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/k8s/always-up-to-date-kubernetes/05B.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"05B. MySQL 스테이트풀셋과 서비스의 구조 살펴보기"}],["meta",{"property":"og:description","content":"언제나 최신 Kubernetes > 05B. MySQL 스테이트풀셋과 서비스의 구조 살펴보기"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateKubernetes/Unit05/2.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"digitalocean"}],["meta",{"property":"article:tag","content":"kubernetes"}],["meta",{"property":"article:tag","content":"minkube"}],["meta",{"property":"article:tag","content":"kubctl"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"05B. MySQL 스테이트풀셋과 서비스의 구조 살펴보기\\",\\"image\\":[\\"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateKubernetes/Unit05/2.png\\",\\"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateKubernetes/Unit05/3.png\\",\\"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateKubernetes/Unit05/4.png\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"스테이트풀셋","slug":"스테이트풀셋","link":"#스테이트풀셋","children":[]},{"level":2,"title":"서비스","slug":"서비스","link":"#서비스","children":[]}],"git":{"createdTime":1712118043000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":3}]},"readingTime":{"minutes":1.71,"words":514},"filePathRelative":"k8s/always-up-to-date-kubernetes/05B.md","localizedDate":"2024년 4월 3일","excerpt":"\\n"}');export{is as comp,os as data};
