import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,a as s,t as m,b as e,n as h,g as v,w as o,d as n,e as l,r as i,o as k}from"./app-U_bew1in.js";const b={},g={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},_={class:"table-of-contents"},y=s("hr",null,null,-1),S=l(`<p>Docker 명령은 기본적으로 Docker Hub를 사용합니다. 이번에는 나만의 저장소 서버를 구축해보겠습니다.</p><p>Docker 저장소 서버는 Docker 레지스트리(registry) 서버라고 부릅니다. <code>docker push</code> 명령으로 레지스트리 서버에 이미지를 올리고, <code>docker pull</code> 명령으로 이미지를 받을 수 있습니다.</p><p>Docker 레지스트리 서버에서 이미지 데이터를 저장하는 방법은 매우 다양합니다. 그중에서 Docker 레지스트리가 동작하는 서버에 저장하는 방법과 Amazon S3에 저장하는 방법을 설명하겠습니다.</p><p>먼저 기존에 실행되고 있는 Docker 데몬을 정지한 뒤 --insecure-registry 옵션을 사용하여 Docker 데몬을 실행합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> systemctl stop docker.socket</span>
<span class="line"><span class="token function">sudo</span> systemctl stop <span class="token function">docker</span></span>
<span class="line"><span class="token function">sudo</span> dockerd --insecure-registry localhost:5000</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),T=s("code",null,"/etc/docker/",-1),D=s("code",null,"daemon.json",-1),A=l(`<blockquote><p><code>&lt;FontIcon icon=&quot;fas fa-folder-open&quot;/&gt;</code>/etc/docker/<code>&lt;FontIcon icon=&quot;iconfont icon-json&quot;/&gt;</code>daemon.json\`\`</p></blockquote><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;insecure-registries&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;localhost:5000&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),R=s("code",null,"/etc/docker/",-1),x=s("code",null,"daemon.json",-1),j=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> systemctl restart <span class="token function">docker</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="로컬에-이미지-데이터-저장" tabindex="-1"><a class="header-anchor" href="#로컬에-이미지-데이터-저장"><span>로컬에 이미지 데이터 저장</span></a></h2><p>Docker 레지스트리 서버도 Docker Hub를 통해 Docker 이미지로 제공됩니다. 먼저 Docker 레지스트리 이미지를 받습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> pull registry:latest</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>registry:latest</code> 이미지를 컨테이너로 실행합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">5000</span>:5000 <span class="token parameter variable">--name</span> hello-registry <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-v</span> /tmp/registry:/tmp/registry <span class="token punctuation">\\</span></span>
<span class="line">  registry</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),E=s("code",null,"/tmp/registry",-1),I=l(`<figure><img src="https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/1.png" alt="Docker 레지스트리, 로컬에 이미지 데이터 저장" tabindex="0" loading="lazy"><figcaption>Docker 레지스트리, 로컬에 이미지 데이터 저장</figcaption></figure><hr><h2 id="push-명령으로-이미지-올리기" tabindex="-1"><a class="header-anchor" href="#push-명령으로-이미지-올리기"><span><code>push</code> 명령으로 이미지 올리기</span></a></h2><p>앞에서 만든 <code>hello:0.1</code> 이미지를 개인 저장소에 올려보겠습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> tag hello:0.1 localhost:5000/hello:0.1</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> push localhost:5000/hello:0.1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>태그를 생성하는 명령은 <code>docker tag &lt;이미지 이름&gt;:&lt;태그&gt; &lt;Docker 레지스트리 URL&gt;/&lt;이미지 이름&gt;:&lt;태그&gt;</code> 형식입니다.</p><p>이미지를 올리는 명령은 <code>docker push &lt;Docker 레지스트리 URL&gt;/&lt;이미지 이름&gt;:&lt;태그&gt;</code> 형식입니다.</p><p>개인 저장소에 이미지를 올릴 때는 태그를 먼저 생성해야 합니다. <code>docker tag</code> 명령으로 <code>hello:0.1</code> 이미지를 <code>localhost:5000/hello:0.1</code> 태그로 생성합니다. 그리고 <code>docker push</code> 명령으로 <code>localhost:5000/hello:0.1</code> 이미지를 개인 저장소에 올립니다(태그를 생성했으므로 실제로는 <code>hello:0.1</code> 이미지가 올라갑니다).</p><p>이제 다른 서버에서 개인 저장소(Docker 레지스트리 서버)에 접속하여 이미지를 받아올 수 있습니다. 개인 저장소 서버 IP 주소가 <code>172.31.23.145</code>라면 다음과 같이 명령을 실행합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> pull <span class="token number">172.31</span>.23.145:5000/hello:0.1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,10),w=s("code",null,"/etc/docker/",-1),q=s("code",null,"daemon.json",-1),G=s("code",null,"insecure-registries",-1),P=s("code",null,"172.31.23.145:5000",-1),C=s("code",null,"/etc/docker/",-1),H=s("code",null,"daemon.json",-1),U=l(`<div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;insecure-registries&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;localhost:5000&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;172.31.23.145:5000&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이미지 목록을 출력합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> images</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># REPOSITORY                 TAG       IMAGE ID       CREATED          SIZE</span></span>
<span class="line"><span class="token comment"># hello                      0.2       011ff3ff87e9   29 minutes ago   170MB</span></span>
<span class="line"><span class="token comment"># 172.31.23.145:5000/hello   0.1       8307ff628ec8   35 minutes ago   170MB</span></span>
<span class="line"><span class="token comment"># hello                      0.1       8307ff628ec8   35 minutes ago   170MB</span></span>
<span class="line"><span class="token comment"># localhost:5000/hello       0.1       8307ff628ec8   35 minutes ago   170MB</span></span>
<span class="line"><span class="token comment"># mongo                      latest    d34d21a9eb5b   7 days ago       693MB</span></span>
<span class="line"><span class="token comment"># ubuntu                     22.04     2dc39ba059dc   7 days ago       77.8MB</span></span>
<span class="line"><span class="token comment"># nginx                      latest    2b7d6430f78d   2 weeks ago      142MB</span></span>
<span class="line"><span class="token comment"># registry                   latest    3a0f7b0a13ef   4 weeks ago      24.1MB</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>개인 저장소에서 <code>172.31.23.145:5000/hello</code> 이미지를 받았습니다.</p><p>이미지를 삭제할 때에는 아래와 같이 실행합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> rmi <span class="token number">172.31</span>.23.145:5000/hello:0.1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="amazon-s3에-이미지-데이터-저장" tabindex="-1"><a class="header-anchor" href="#amazon-s3에-이미지-데이터-저장"><span>Amazon S3에 이미지 데이터 저장</span></a></h2><p>이번에는 AWS의 S3에 이미지 데이터를 저장하는 방법입니다.</p><p>먼저 앞에서 생성한 <code>hello-registry</code> 컨테이너를 정지합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> stop hello-registry</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Docker 레지스트리 이미지를 받습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> pull registry:latest</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>registry:latest</code> 이미지를 컨테이너로 실행합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">5000</span>:5000 <span class="token parameter variable">--name</span> s3-registry <span class="token punctuation">\\</span></span>
<span class="line">   <span class="token parameter variable">-e</span> <span class="token assign-left variable">REGISTRY_STORAGE</span><span class="token operator">=</span>s3 <span class="token punctuation">\\</span></span>
<span class="line">   <span class="token parameter variable">-e</span> <span class="token assign-left variable">REGISTRY_STORAGE_S3_BUCKET</span><span class="token operator">=</span>examplebucket10 <span class="token punctuation">\\</span></span>
<span class="line">   <span class="token parameter variable">-e</span> <span class="token assign-left variable">REGISTRY_STORAGE_S3_REGION</span><span class="token operator">=</span>ap-northeast-2 <span class="token punctuation">\\</span></span>
<span class="line">   <span class="token parameter variable">-e</span> <span class="token assign-left variable">REGISTRY_STORAGE_S3_ACCESSKEY</span><span class="token operator">=</span>ABCDEFGHIJKLMNOPQRST <span class="token punctuation">\\</span></span>
<span class="line">   <span class="token parameter variable">-e</span> <span class="token assign-left variable">REGISTRY_STORAGE_S3_SECRETKEY</span><span class="token operator">=</span>sF4321ABCDEFGHIJKLMNOPqrstuvwxyz21345Afc <span class="token punctuation">\\</span></span>
<span class="line">   registry</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>S3를 사용하려면 -e 옵션으로 설정을 해주어야 합니다.</p><ul><li><code>REGISTRY_STORAGE</code>: s3을 설정합니다.</li><li><code>REGISTRY_STORAGE_S3_BUCKET</code>: 이미지 데이터를 저장할 S3 버킷 이름입니다. 예제에서는 <code>examplebucket10</code>을 설정했습니다. 여러분이 생성한 S3 버킷 이름을 입력합니다.</li><li><code>REGISTRY_STORAGE_S3_REGION</code>: S3 버킷의 리전을 설정합니다.</li><li><code>REGISTRY_STORAGE_S3_ACCESSKEY</code>: AWS 액세스 키를 설정합니다.</li><li><code>REGISTRY_STORAGE_S3_SECRETKEY</code>: AWS 시크릿 키를 설정합니다.</li></ul><p>이제 <code>s3-registry</code> 저장소에 Docker 이미지를 push하면 S3 버킷에 저장됩니다.</p><figure><img src="https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/2.png" alt="&gt;그림 6-2\` Docker 레지스트리, Amazon S3에 이미지 데이터 저장" tabindex="0" loading="lazy"><figcaption>&gt;그림 6-2\` Docker 레지스트리, Amazon S3에 이미지 데이터 저장</figcaption></figure><hr><h2 id="기본-인증-사용하기" tabindex="-1"><a class="header-anchor" href="#기본-인증-사용하기"><span>기본 인증 사용하기</span></a></h2><p>Docker 레지스트리에는 로그인 기능이 없습니다. 따라서 Nginx의 기본 인증(Basic Authentication) 기능을 사용해야 합니다. 또한, HTTP 프로토콜에서는 인증을 지원하지 않으므로 반드시 HTTPS 프로토콜을 사용해야 합니다.</p>`,22),Y=s("code",null,"/etc/",-1),L=s("code",null,"hosts",-1),N=s("code",null,"/etc/",-1),O=s("code",null,"hosts",-1),z=l(`<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">127.0.0.1 localhost</span>
<span class="line">&lt;레지스트리 서버 IP 주소&gt; registry.example.com</span>
<span class="line"></span>
<span class="line"># The following lines are desirable for IPv6 capable hosts</span>
<span class="line">::1 ip6-localhost ip6-loopback</span>
<span class="line">fe00::0 ip6-localnet</span>
<span class="line">ff00::0 ip6-mcastprefix</span>
<span class="line">ff02::1 ip6-allnodes</span>
<span class="line">ff02::2 ip6-allrouters</span>
<span class="line">ff02::3 ip6-allhosts</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>여러분의 레지스트리 서버 IP 주소를 <code>registry.example.com</code>으로 설정합니다. 이 문서에서는 <code>registry.example.com</code>을 기준으로 설명하겠습니다.</p><p>이제 SSL 사설 인증서(Self Signed)를 생성하겠습니다. SSL 공인 인증서를 구입했다면 이 부분은 건너뛰어도 됩니다.</p>`,3),B=s("code",null,"/CN",-1),M=s("code",null,"/etc/",-1),K=s("code",null,"hosts",-1),F=s("code",null,"registry.example.com",-1),Z=s("li",null,[s("code",null,"subjectAltName"),n(": SAN입니다. "),s("code",null,"subjectAltName=DNS:registry.example.com"),n("를 입력합니다.")],-1),W=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">  <span class="token function">mkdir</span> certs</span>
<span class="line">  <span class="token builtin class-name">cd</span> certs</span>
<span class="line">openssl genrsa <span class="token parameter variable">-out</span> ca.key <span class="token number">2048</span></span>
<span class="line">openssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-x509</span> <span class="token parameter variable">-days</span> <span class="token number">365</span> <span class="token parameter variable">-key</span> ca.key <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-subj</span> <span class="token string">&quot;/C=CN/ST=GD/L=SZ/O=Acme, Inc./CN=Acme Root CA&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-out</span> ca.crt</span>
<span class="line">openssl req <span class="token parameter variable">-newkey</span> rsa:2048 <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-nodes</span> <span class="token parameter variable">-keyout</span> server.key <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-subj</span> <span class="token string">&quot;/C=CN/ST=GD/L=SZ/O=Acme, Inc./CN=registry.example.com&quot;</span> <span class="token parameter variable">-out</span> server.csr</span>
<span class="line">openssl x509 <span class="token parameter variable">-req</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-extfile</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token builtin class-name">printf</span> <span class="token string">&quot;subjectAltName=DNS:registry.example.com&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-days</span> <span class="token number">365</span> <span class="token parameter variable">-in</span> server.csr <span class="token parameter variable">-CA</span> ca.crt <span class="token parameter variable">-CAkey</span> ca.key <span class="token parameter variable">-CAcreateserial</span> <span class="token parameter variable">-out</span> server.crt</span>
<span class="line"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이제 server.crt 인증서 파일을 시스템에 설치를 해주어야 합니다(인증서 파일을 설치하지 않으려면 <code>--insecure-registry</code> 옵션을 사용해야 합니다. 이 부분은 뒤에 따로 설명하겠습니다).</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /etc/docker/certs.d/registry.example.com</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">cp</span> certs/ca.crt /etc/docker/certs.d/registry.example.com/ca.crt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,3),V=s("code",null,"/etc/",-1),J=s("code",null,"hosts",-1),$=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> systemctl restart <span class="token function">docker</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1),Q=s("code",null,"server.crt",-1),X=s("code",null,"/etc/",-1),ss=s("code",null,"hosts",-1),ns=s("code",null,"registry.example.com",-1),es={class:"hint-container info"},as=s("p",{class:"hint-container-title"},"--insecure-registry 옵션",-1),ls=s("code",null,"server.crt",-1),ts=s("code",null,"--insecure-registry",-1),os=l('<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> dockerd --insecure-registry registry.example.com</span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>--insecure-registry</code> 옵션에 Docker 레지스트리의 도메인을 설정합니다. 도메인 여러 개를 설정하려면 <code>--insecure-registry</code> 옵션을 여러 번 사용하면 됩니다.</li></ul><p>보통 Docker 데몬을 직접 실행하지 않고 서비스 형태로 실행합니다. 이때는 <code>&lt;FontIcon icon=&quot;fas fa-folder-open&quot;/&gt;</code>/etc/docker/<code>&lt;FontIcon icon=&quot;iconfont icon-json&quot;/&gt;</code>daemon.json`` 파일의 <code>insecure-registries</code> 부분을 다음과 같이 설정합니다(이 파일은 root 권한으로 수정해야 합니다).</p>',3),is=s("code",null,"/etc/docker/",-1),cs=s("code",null,"daemon.json",-1),ps=l(`<div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;insecure-registries&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;registry.example.com&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),rs=s("code",null,"/etc/docker/",-1),ds=s("code",null,"daemon.json",-1),us=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> systemctl restart <span class="token function">docker</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Docker 레지스트리에 접속할 다른 시스템에도 같은 방식으로<code> --insecure-registry</code> 옵션을 사용하여 Docker 데몬을 실행합니다.</p>`,2),ms=s("code",null,"htpasswd",-1),hs=s("code",null,"auth/",-1),vs=s("code",null,"htpasswd",-1),ks=s("code",null,"hellouser",-1),bs=l(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">mkdir</span> auth</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">--entrypoint</span> htpasswd <span class="token parameter variable">--rm</span> httpd:2 <span class="token parameter variable">-Bbn</span> hellouser hellopassword <span class="token operator">&gt;</span> auth/htpasswd</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>다음 명령을 실행하여 Docker 레지스트리 컨테이너를 생성합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--name</span> registry <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-v</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>&quot;</span>/auth:/auth <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-e</span> <span class="token assign-left variable">REGISTRY_AUTH</span><span class="token operator">=</span>htpasswd <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-e</span> <span class="token assign-left variable">REGISTRY_AUTH_HTPASSWD_REALM</span><span class="token operator">=</span><span class="token string">&quot;Registry Realm&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-e</span> <span class="token assign-left variable">REGISTRY_AUTH_HTPASSWD_PATH</span><span class="token operator">=</span>/auth/htpasswd <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-v</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>&quot;</span>/certs:/certs <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-e</span> <span class="token assign-left variable">REGISTRY_HTTP_ADDR</span><span class="token operator">=</span><span class="token number">0.0</span>.0.0:443 <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-e</span> <span class="token assign-left variable">REGISTRY_HTTP_TLS_CERTIFICATE</span><span class="token operator">=</span>/certs/server.crt <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-e</span> <span class="token assign-left variable">REGISTRY_HTTP_TLS_KEY</span><span class="token operator">=</span>/certs/server.key <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-p</span> <span class="token number">443</span>:443 <span class="token punctuation">\\</span></span>
<span class="line">  registry:2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),gs=l("<li><code>-v</code> 옵션으로 <code>auth</code>, <code>certs</code> 디렉터리를 컨테이너의 <code>/auth</code>, <code>/certs</code>로 연결합니다.</li><li><code>REGISTRY_AUTH_HTPASSWD_PATH</code>: 앞에서 생성한 <code>htpasswd</code> 파일을 설정합니다.</li>",2),fs=s("code",null,"REGISTRY_HTTP_TLS_CERTIFICATE",-1),_s=s("code",null,"REGISTRY_HTTP_TLS_KEY",-1),ys=s("code",null,"server.key",-1),Ss=s("code",null,"server.crt",-1),Ts=l(`<p><code>docker login</code> 명령으로 <code>https://registry.example.com</code>에 로그인합니다. Username과 Password에는 <code>htpasswd</code> 명령으로 생성한 사용자(<code>hellouser</code>)와 비밀번호(<code>hellopassword</code>)를 입력합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> login https://registry.example.com</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Username: hellouser</span></span>
<span class="line"><span class="token comment"># Password: hellopassword</span></span>
<span class="line"><span class="token comment"># WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span></span>
<span class="line"><span class="token comment"># Configure a credential helper to remove this warning. See</span></span>
<span class="line"><span class="token comment"># https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Login Succeeded</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>docker login &lt;Docker 레지스트리 URL&gt;</code> 형식입니다.</p>`,3),Ds={class:"hint-container warning"},As=s("p",{class:"hint-container-title"},"주의",-1),Rs=s("code",null,"docker login",-1),xs=s("code",null,"/etc/",-1),js=s("code",null,"hosts",-1),Es=l(`<p>이제 앞에서 만든 <code>hello:0.1</code> 이미지를 개인 저장소에 올려보겠습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> tag hello:0.1 registry.example.com/hello:0.1</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> push registry.example.com/hello:0.1</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># The push refers to repository [registry.example.com/hello]</span></span>
<span class="line"><span class="token comment"># 3fc4e1f2a517: Pushed</span></span>
<span class="line"><span class="token comment"># 4d3d2ac7a313: Pushed</span></span>
<span class="line"><span class="token comment"># 11fb43ff38a5: Pushed</span></span>
<span class="line"><span class="token comment"># 7e6bc37fff8b: Pushed</span></span>
<span class="line"><span class="token comment"># 7f5cbd8cc787: Pushed</span></span>
<span class="line"><span class="token comment"># 0.1: digest: sha256:????????????????????????????????????????????? size: 1367</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이미지의 태그는 <code>&lt;Docker 레지스트리 URL&gt;/&lt;이미지 이름&gt;:&lt;태그&gt;</code> 형식으로 생성합니다. 우리는 <code>registry.example.com</code>으로 설정했으므로 <code>registry.example.com/hello:0.1</code>이 됩니다.</p><p>다른 서버에서는 다음 명령을 실행하여 <code>registry.example.com</code>에 저장된 이미지를 받을 수 있습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> pull registry.example.com/hello:0.1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr>`,6);function Is(c,ws){const p=i("VPCard"),t=i("router-link"),r=i("SiteInfo"),a=i("FontIcon");return k(),u("div",null,[s("h1",g,[s("a",f,[s("span",null,m(c.$frontmatter.title)+" 관련",1)])]),e(p,h(v({title:"목차",desc:"언제나 최신 Docker",link:"/docker/always-up-to-date-docker/README.md",logo:"https://pyrasis.com/assets/images/pyrasis.png",background:"rgba(31,41,55,0.2)"})),null,16),s("nav",_,[s("ul",null,[s("li",null,[e(t,{to:"#로컬에-이미지-데이터-저장"},{default:o(()=>[n("로컬에 이미지 데이터 저장")]),_:1})]),s("li",null,[e(t,{to:"#push-명령으로-이미지-올리기"},{default:o(()=>[n("push 명령으로 이미지 올리기")]),_:1})]),s("li",null,[e(t,{to:"#amazon-s3에-이미지-데이터-저장"},{default:o(()=>[n("Amazon S3에 이미지 데이터 저장")]),_:1})]),s("li",null,[e(t,{to:"#기본-인증-사용하기"},{default:o(()=>[n("기본 인증 사용하기")]),_:1})])])]),y,e(r,{name:"06. Docker 좀더 활용하기",desc:"언제나 최신 Docker",url:"https://pyrasis.com/jHLsAlwaysUpToDateDocker/Unit06",logo:"https://pyrasis.com/assets/images/pyrasis.png",preview:"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/1.png"}),S,s("p",null,[n("보통 Docker 데몬을 직접 실행하지 않고 서비스 형태로 실행합니다. 이때는 "),e(a,{icon:"fas fa-folder-open"}),T,e(a,{icon:"iconfont icon-json"}),D,n(" 파일을 생성하고 다음과 같이 저장합니다(이 파일은 root 권한으로 수정해야 합니다).")]),A,s("p",null,[n("."),e(a,{icon:"fas fa-folder-open"}),R,e(a,{icon:"iconfont icon-json"}),x,n(" 파일을 수정했으면 Docker 서비스를 재시작합니다.")]),j,s("p",null,[n("이렇게 실행하면 이미지 파일은 호스트의 "),e(a,{icon:"fas fa-folder-open"}),E,n(" 디렉터리에 저장됩니다.")]),I,s("p",null,[n("참고로 명령을 실행하려면 "),e(a,{icon:"fas fa-folder-open"}),w,e(a,{icon:"iconfont icon-json"}),q,n(" 파일에서 "),G,n("에 "),P,n("이 들어있어야 합니다. 그리고 Docker 서비스를 재시작하는 것을 잊지마세요.")]),s("blockquote",null,[s("p",null,[n("."),e(a,{icon:"fas fa-folder-open"}),C,e(a,{icon:"iconfont icon-json"}),H])]),U,s("p",null,[n("먼저 "),e(a,{icon:"fas fa-folder-open"}),Y,e(a,{icon:"fas fa-file-lines"}),L,n(" 파일을 편집하여 테스트용 도메인을 추가합니다. 이 파일은 root 권한으로 수정해야 합니다. 도메인을 구입하지 않았을 때는 이 부분을 반드시 설정해주어야 하며, 도메인을 구입하여 DNS를 설정했다면 이 부분은 건너뛰어도 됩니다.")]),s("blockquote",null,[s("p",null,[n("."),e(a,{icon:"fas fa-folder-open"}),N,e(a,{icon:"fas fa-file-lines"}),O])]),z,s("ul",null,[s("li",null,[B,n(": Docker 레지스트리를 실행하는 서버의 도메인입니다. 이 부분을 정확하게 입력하지 않으면 인증서를 사용해도 로그인할 때 에러가 발생합니다. "),e(a,{icon:"fas fa-folder-open"}),M,e(a,{icon:"fas fa-file-lines"}),K,n(" 파일에 설정한대로 "),F,n("를 입력합니다.")]),Z]),W,s("p",null,[n("."),e(a,{icon:"fas fa-folder-open"}),V,e(a,{icon:"fas fa-file-lines"}),J,n("에 도메인을 추가하고, 인증서 파일을 설치했으면 Docker 서비스를 재시작합니다. Docker 서비스를 재시작해야 추가된 도메인과 설치된 인증서가 적용됩니다.")]),$,s("p",null,[n("Docker 레지스트리에 접속할 다른 시스템에도 "),Q,n(" 인증서 파일을 복사하여 같은 방식으로 설치를 하고 Docker 서비스를 재시작합니다. 그리고 도메인을 구입하지 않았다면 "),e(a,{icon:"fas fa-folder-open"}),X,e(a,{icon:"fas fa-file-lines"}),ss,n("에 레지스트리 서버("),ns,n(")의 IP 주소를 설정합니다.")]),s("div",es,[as,s("p",null,[n("."),e(a,{icon:"iconfont icon-token"}),ls,n(" 인증서 파일을 시스템에 설치하지 않으려면 Docker 데몬을 실행할 때 "),ts,n(" 옵션을 사용해야 합니다.")]),os,s("blockquote",null,[s("p",null,[n("."),e(a,{icon:"fas fa-folder-open"}),is,e(a,{icon:"iconfont icon-json"}),cs])]),ps,s("p",null,[n("."),e(a,{icon:"fas fa-folder-open"}),rs,e(a,{icon:"iconfont icon-json"}),ds,n(" 파일을 수정했으면 Docker 서비스를 재시작합니다.")]),us]),s("p",null,[n("이제 사용자 계정과 비밀번호를 저장할 "),e(a,{icon:"fas fa-file-lines"}),ms,n(" 파일을 생성해야 합니다.")]),s("p",null,[n("다음과 같이 "),e(a,{icon:"fas fa-folder-open"}),hs,e(a,{icon:"fas fa-file-linse"}),vs,n(" 파일을 생성하고 "),ks,n(" 라는 예제 사용자를 추가합니다. 비밀번호 입력 부분에는 사용할 비빌번호를 입력합니다.")]),bs,s("ul",null,[gs,s("li",null,[fs,n(", "),_s,n(": 앞에서 생성한 "),e(a,{icon:"iconfont icon-token"}),ys,n(", "),e(a,{icon:"iconfont icon-token"}),Ss,n(" 파일을 설정합니다.")])]),Ts,s("div",Ds,[As,s("p",null,[n("도메인 설정이 귀찮다고 그냥 건너뛰고 IP 주소만 사용하면 로그인이 안 됩니다. 인증서에 설정한 도메인과 "),Rs,n(" 명령에 입력한 도메인이 반드시 일치해야 합니다. HTTPS 프로토콜은 IP 주소 접속을 허용하지 않으므로 구입하지 않은 도메인은 "),e(a,{icon:"fas fa-folder-open"}),xs,e(a,{icon:"fas fa-file-lines"}),js,n(" 파일에 등록하여 사용합니다.")])]),Es])}const Ps=d(b,[["render",Is],["__file","06A.html.vue"]]),Cs=JSON.parse('{"path":"/docker/always-up-to-date-docker/06A.html","title":"06A. Docker 개인 저장소 구축하기","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"06A. Docker 개인 저장소 구축하기","description":"언제나 최신 Docker > 06A. Docker 개인 저장소 구축하기","category":["DevOps","Docker"],"tag":["crashcourse","pyrasis.com","docker","devops"],"head":[[{"meta":null},{"property":"og:title","content":"언제나 최신 Docker > 06A. Docker 개인 저장소 구축하기"},{"property":"og:description","content":"06A. Docker 개인 저장소 구축하기"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/docker/always-up-to-date-docker/06A.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/docker/always-up-to-date-docker/06A.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"06A. Docker 개인 저장소 구축하기"}],["meta",{"property":"og:description","content":"언제나 최신 Docker > 06A. Docker 개인 저장소 구축하기"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/1.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/1.png"}],["meta",{"name":"twitter:image:alt","content":"06A. Docker 개인 저장소 구축하기"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"pyrasis.com"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:published_time","content":"2022-10-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"06A. Docker 개인 저장소 구축하기\\",\\"image\\":[\\"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/1.png\\",\\"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/2.png\\"],\\"datePublished\\":\\"2022-10-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]],"date":"2022-10-03T00:00:00.000Z","isOriginal":false,"cover":"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/1.png"},"headers":[{"level":2,"title":"로컬에 이미지 데이터 저장","slug":"로컬에-이미지-데이터-저장","link":"#로컬에-이미지-데이터-저장","children":[]},{"level":2,"title":"push 명령으로 이미지 올리기","slug":"push-명령으로-이미지-올리기","link":"#push-명령으로-이미지-올리기","children":[]},{"level":2,"title":"Amazon S3에 이미지 데이터 저장","slug":"amazon-s3에-이미지-데이터-저장","link":"#amazon-s3에-이미지-데이터-저장","children":[]},{"level":2,"title":"기본 인증 사용하기","slug":"기본-인증-사용하기","link":"#기본-인증-사용하기","children":[]}],"git":{"createdTime":1716977950000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":3}]},"readingTime":{"minutes":3.67,"words":1102},"filePathRelative":"docker/always-up-to-date-docker/06A.md","localizedDate":"2022년 10월 3일","excerpt":"\\n"}');export{Ps as comp,Cs as data};
