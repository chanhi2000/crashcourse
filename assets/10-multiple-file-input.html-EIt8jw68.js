import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as b,a as e,t as f,b as a,w as s,n as v,g,d as n,e as d,r,o as k}from"./app-U_bew1in.js";const _={},x={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},E=e("hr",null,null,-1),I=e("hr",null,null,-1),A=e("p",null,[n("You have already seen blocks like "),e("code",null,"BEGIN"),n(", "),e("code",null,"END"),n(" and statements like "),e("code",null,"next"),n(". This chapter will discuss features that are useful to make decisions around each file when there are multiple files passed as input.")],-1),N={class:"hint-container info"},F=e("p",{class:"hint-container-title"},"Info",-1),L={href:"https://github.com/learnbyexample/learn_gnuawk/tree/master/example_files",target:"_blank",rel:"noopener noreferrer"},C=d('<hr><h2 id="beginfile-endfile-and-filename" tabindex="-1"><a class="header-anchor" href="#beginfile-endfile-and-filename"><span><code>BEGINFILE</code>, <code>ENDFILE</code> and <code>FILENAME</code></span></a></h2><ul><li><code>BEGINFILE</code>: this block gets executed before the start of each input file</li><li><code>ENDFILE</code>: this block gets executed after processing each input file</li><li><code>FILENAME</code>: special variable having the filename of the current input file</li></ul><p>Here are some examples:</p>',4),G=e("blockquote",null,[e("p",null,[n("can also use: "),e("code",null,`awk 'BEGINFILE{printf "--- %s ---\\n", FILENAME} 1'`)])],-1),M=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),n(),e("span",{class:"token string"},`'BEGINFILE{print "--- " FILENAME " ---"} 1'`),n(" greeting.txt table.txt")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# --- greeting.txt ---")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Hi there")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Have a nice day")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Good bye")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# --- table.txt ---")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# brown bread mat hair 42")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# blue cake mug shirt -7")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# yellow banana window shoes 3.14")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),T=e("blockquote",null,[e("p",null,[n("same as: "),e("code",null,"tail -q -n1 greeting.txt table.txt")])],-1),S=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),n(),e("span",{class:"token string"},"'ENDFILE{print $0}'"),n(" greeting.txt table.txt")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Good bye")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# yellow banana window shoes 3.14")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# nextfile")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),R=e("hr",null,null,-1),B=e("h2",{id:"nextfile",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#nextfile"},[e("span",null,[e("code",null,"nextfile")])])],-1),D=e("p",null,[n("The "),e("code",null,"nextfile"),n(" statement helps to skip the remaining records from the current file being processed and move on to the next file. Note that the "),e("code",null,"ENDFILE"),n(" block will still be executed, if present.")],-1),j=e("p",null,[n("print "),e("code",null,"filename"),n(" if it contains '"),e("code",null,"I"),n("' anywhere in the file")],-1),V=e("blockquote",null,[e("p",null,[n("same as: "),e("code",null,"grep -l 'I' f[1-3].txt greeting.txt")])],-1),P=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),n(),e("span",{class:"token string"},"'/I/{print FILENAME; nextfile}'"),n(" f"),e("span",{class:"token punctuation"},"["),e("span",{class:"token number"},"1"),n("-3"),e("span",{class:"token punctuation"},"]"),n(".txt greeting.txt")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# f1.txt")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# f2.txt")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),H=e("p",null,[n("print "),e("code",null,"filename"),n(" if it contains both '"),e("code",null,"o"),n("' and '"),e("code",null,"at"),n("' anywhere in the file")],-1),q=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),n(),e("span",{class:"token string"},"'BEGINFILE{m1=m2=0} /o/{m1=1} /at/{m2=1}"),n(`
`),e("span",{class:"line"},"     m1 && m2{print FILENAME; nextfile}'"),n(" f"),e("span",{class:"token punctuation"},"["),e("span",{class:"token number"},"1"),n("-3"),e("span",{class:"token punctuation"},"]"),n(".txt greeting.txt")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# f2.txt")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# f3.txt")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),$=e("p",null,[n("print "),e("code",null,"filename"),n(" if it contains '"),e("code",null,"at"),n("' but not '"),e("code",null,"o"),n("'")],-1),K=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),n(),e("span",{class:"token string"},"'BEGINFILE{m1=m2=0} /o/{m1=1; nextfile} /at/{m2=1}"),n(`
`),e("span",{class:"line"},"     ENDFILE{if(!m1 && m2) print FILENAME}'"),n(" f"),e("span",{class:"token punctuation"},"["),e("span",{class:"token number"},"1"),n("-3"),e("span",{class:"token punctuation"},"]"),n(".txt greeting.txt")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# f1.txt")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Q=d('<div class="hint-container warning"><p class="hint-container-title">Warning</p><p><code>nextfile</code> cannot be used in the <code>BEGIN</code> or <code>END</code> or <code>ENDFILE</code> blocks. See <a href="https://www.gnu.org/software/gawk/manual/gawk.html#Nextfile-Statement" target="_blank" rel="noopener noreferrer">gawk manual: nextfile</a> for more details, how it affects <code>ENDFILE</code> and other special cases.</p></div><hr><h2 id="argc-and-argv" tabindex="-1"><a class="header-anchor" href="#argc-and-argv"><span><code>ARGC</code> and <code>ARGV</code></span></a></h2><p>The <code>ARGC</code> special variable contains the total number of arguments passed to the <code>awk</code> command, including <code>awk</code> itself as an argument. The <code>ARGV</code> special array contains the arguments themselves.</p>',4),U=e("p",null,"note that the index starts with '0' here",-1),O=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),n(),e("span",{class:"token string"},"'BEGIN{for(i=0; i<ARGC; i++) print ARGV[i]}'"),n(" f"),e("span",{class:"token punctuation"},"["),e("span",{class:"token number"},"1"),n("-3"),e("span",{class:"token punctuation"},"]"),n(".txt greeting.txt")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# awk")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# f1.txt")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# f2.txt")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# f3.txt")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# greeting.txt")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Z=d("<p>Similar to manipulating <code>NF</code> and modifying <code>$N</code> field contents, you can change the values of <code>ARGC</code> and <code>ARGV</code> to control how the arguments should be processed.</p><p>However, not all arguments are necessarily filenames. <code>awk</code> allows assigning variable values without <code>-v</code> option if it is done in the place where you usually provide file arguments. For example:</p>",2),z=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),n(),e("span",{class:"token string"},"'BEGIN{for(i=0; i<ARGC; i++) print ARGV[i]}'"),n(" table.txt "),e("span",{class:"token assign-left variable"},"n"),e("span",{class:"token operator"},"="),e("span",{class:"token number"},"5"),n(" greeting.txt")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# awk")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# table.txt")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# n=5")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# greeting.txt")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),J=e("code",null,"n",-1),W=e("code",null,"5",-1),Y=e("code",null,"awk",-1),X=e("code",null,"table.txt",-1),ee=e("code",null,"FS",-1),ne=d(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> table.txt</span>
<span class="line"><span class="token comment"># brown bread mat hair 42</span></span>
<span class="line"><span class="token comment"># blue cake mug shirt -7</span></span>
<span class="line"><span class="token comment"># yellow banana window shoes 3.14</span></span>
<span class="line"><span class="token function">cat</span> books.csv</span>
<span class="line"><span class="token comment"># Harry Potter,Mistborn,To Kill a Mocking Bird</span></span>
<span class="line"><span class="token comment"># Matilda,Castle Hangnail,Jane Eyre</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),se=e("code",null,"table.txt",-1),ae=e("code",null,"FS",-1),te=e("code",null,"books.csv",-1),le=e("code",null,"FS",-1),ie=e("code",null,"OFS",-1),ce=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),n(),e("span",{class:"token parameter variable"},"-v"),n(),e("span",{class:"token assign-left variable"},"OFS"),e("span",{class:"token operator"},"="),n(", "),e("span",{class:"token string"},"'NF=2'"),n(" table.txt "),e("span",{class:"token assign-left variable"},"FS"),e("span",{class:"token operator"},"="),n(", books.csv")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# brown,bread")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# blue,cake")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# yellow,banana")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Harry Potter,Mistborn")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Matilda,Castle Hangnail")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),oe=d('<div class="hint-container info"><p class="hint-container-title">Info</p><p>See <a href="https://stackoverflow.com/a/64427745/4082052" target="_blank" rel="noopener noreferrer">stackoverflow: extract positions 2-7 from a fasta sequence</a> for a practical example of changing field/record separators between the files being processed.</p></div><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>This chapter introduced few more special blocks and variables are that handy for processing multiple file inputs. These will show up in examples in the coming chapters as well.</p><p>Next chapter will discuss use cases where you need to take decisions based on multiple input records.</p><hr><h2 id="exercises" tabindex="-1"><a class="header-anchor" href="#exercises"><span>Exercises</span></a></h2>',7),re={class:"hint-container info"},de=e("p",{class:"hint-container-title"},"Info",-1),pe={href:"https://github.com/learnbyexample/learn_gnuawk/tree/master/exercises",target:"_blank",rel:"noopener noreferrer"},ue=e("h3",{id:"exercise-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#exercise-1"},[e("span",null,"Exercise 1")])],-1),me=e("code",null,"table.txt",-1),he=e("code",null,"scores.csv",-1),be=e("code",null,"fw.txt",-1),fe=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),n(),e("span",{class:"token comment"},"##### add your solution here")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# >table.txt<")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 42")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# -7")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ----------")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# >scores.csv<")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Chemistry")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 99")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ----------")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# >fw.txt<")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 0.134563")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 6")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ----------")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ve=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),n(),e("span",{class:"token string"},`'BEGINFILE{print ">" FILENAME "<"} {print $NF} FNR==2{print "----------";`),n(`
`),e("span",{class:"line"},"     nextfile}'"),n(" table.txt "),e("span",{class:"token assign-left variable"},"FS"),e("span",{class:"token operator"},"="),n(", scores.csv "),e("span",{class:"token assign-left variable"},"FIELDWIDTHS"),e("span",{class:"token operator"},"="),e("span",{class:"token string"},"'14 *'"),n(" fw.txt")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# >table.txt<")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 42")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# -7")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ----------")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# >scores.csv<")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Chemistry")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 99")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ----------")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# >fw.txt<")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 0.134563")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 6")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ----------")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ge=e("h3",{id:"exercise-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#exercise-2"},[e("span",null,"Exercise 2")])],-1),ke=e("code",null,"sample.txt",-1),_e=e("code",null,"secrets.txt",-1),xe=e("code",null,"addr.txt",-1),we=e("code",null,"table.txt",-1),ye=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),n(),e("span",{class:"token comment"},"##### add your solution here sample.txt secrets.txt addr.txt table.txt")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# secrets.txt")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# addr.txt")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Ee=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),n(),e("span",{class:"token string"},"'$3 ~ /fun|at/{print FILENAME; nextfile}'"),n(" sample.txt secrets.txt addr.txt table.txt")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# secrets.txt")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# addr.txt")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# table.txt")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Ie=e("hr",null,null,-1);function Ae(p,Ne){const c=r("router-link"),u=r("VPCard"),i=r("FontIcon"),o=r("Tabs"),m=r("TagLinks");return k(),b("div",null,[e("h1",x,[e("a",w,[e("span",null,f(p.$frontmatter.title)+" 관련",1)])]),e("nav",y,[e("ul",null,[e("li",null,[a(c,{to:"#beginfile-endfile-and-filename"},{default:s(()=>[n("BEGINFILE, ENDFILE and FILENAME")]),_:1})]),e("li",null,[a(c,{to:"#nextfile"},{default:s(()=>[n("nextfile")]),_:1})]),e("li",null,[a(c,{to:"#argc-and-argv"},{default:s(()=>[n("ARGC and ARGV")]),_:1})]),e("li",null,[a(c,{to:"#summary"},{default:s(()=>[n("Summary")]),_:1})]),e("li",null,[a(c,{to:"#exercises"},{default:s(()=>[n("Exercises")]),_:1}),e("ul",null,[e("li",null,[a(c,{to:"#exercise-1"},{default:s(()=>[n("Exercise 1")]),_:1})]),e("li",null,[a(c,{to:"#exercise-2"},{default:s(()=>[n("Exercise 2")]),_:1})])])])])]),E,a(u,v(g({title:"10. Multiple file input",desc:"CLI Text Processing with GNU awk",link:"https://learnbyexample.github.io/learn_gnuawk/multiple-file-input.html",logo:"https://learnbyexample.github.io/favicon.svg",background:"rgba(22,25,35,0.2)"})),null,16),I,A,e("div",N,[F,e("p",null,[n("The "),e("a",L,[a(i,{icon:"iconfont icon-github"}),n(" example_files")]),n(" directory has all the files used in the examples.")])]),C,a(o,{id:"41",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:s(({value:t,isActive:l})=>[n("Case 1")]),title1:s(({value:t,isActive:l})=>[n("Case 2")]),tab0:s(({value:t,isActive:l})=>[G,M]),tab1:s(({value:t,isActive:l})=>[T,S]),_:1}),R,B,D,a(o,{id:"66",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:s(({value:t,isActive:l})=>[n("Case 1")]),title1:s(({value:t,isActive:l})=>[n("Case 2")]),title2:s(({value:t,isActive:l})=>[n("Case 3")]),tab0:s(({value:t,isActive:l})=>[j,V,P]),tab1:s(({value:t,isActive:l})=>[H,q]),tab2:s(({value:t,isActive:l})=>[$,K]),_:1}),Q,a(o,{id:"103",data:[{id:"Case 1"}],active:0},{title0:s(({value:t,isActive:l})=>[n("Case 1")]),tab0:s(({value:t,isActive:l})=>[U,O]),_:1}),Z,a(o,{id:"117",data:[{id:"Case 1"}],active:0},{title0:s(({value:t,isActive:l})=>[n("Case 1")]),tab0:s(({value:t,isActive:l})=>[z]),_:1}),e("p",null,[n("In the above example, the variable "),J,n(" will get a value of "),W,n(" after "),Y,n(" has finished processing the "),a(i,{icon:"fas fa-file-lines"}),n(),X,n(" file. Here's an example where "),ee,n(" is changed between two files.")]),ne,a(o,{id:"126",data:[{id:"Case 1"}],active:0},{title0:s(({value:t,isActive:l})=>[n("Case 1")]),tab0:s(({value:t,isActive:l})=>[e("p",null,[n("for "),a(i,{icon:"fas fa-file-lines"}),n(),se,n(", "),ae,n(" will be the default value for "),a(i,{icon:"fas fa-file-csv"}),n(),te,n(", "),le,n(" will be the comma character "),ie,n(" is comma for both the files")]),ce]),_:1}),oe,e("div",re,[de,e("p",null,[n("The "),e("a",pe,[a(i,{icon:"iconfont icon-github"}),n(" exercises")]),n(" directory has all the files used in this section.")])]),ue,e("p",null,[n("Print the last field of the first two lines for the input files "),a(i,{icon:"fas fa-file-lines"}),n(),me,n(", "),a(i,{icon:"fas fa-file-lines"}),n(),he,n(" and "),a(i,{icon:"fas fa-file-lines"}),n(),be,n(". The field separators for these files are space, comma and fixed width respectively. To make the output more informative, print filenames and a separator as shown in the output below. Assume that the input files will have at least two lines.")]),a(o,{id:"164",data:[{id:"Question"},{id:"Solution"}],active:0},{title0:s(({value:t,isActive:l})=>[n("Question")]),title1:s(({value:t,isActive:l})=>[n("Solution")]),tab0:s(({value:t,isActive:l})=>[fe]),tab1:s(({value:t,isActive:l})=>[ve]),_:1}),ge,e("p",null,[n("For the input files "),a(i,{icon:"fas fa-file-lines"}),n(),ke,n(", "),a(i,{icon:"fas fa-file-lines"}),n(),_e,n(", "),a(i,{icon:"fas fa-file-lines"}),n(),xe,n(" and "),a(i,{icon:"fas fa-file-lines"}),n(),we,n(", display only the names of files that contain at or fun in the third field. Assume space as the field separator.")]),a(o,{id:"178",data:[{id:"Question"},{id:"Solution"}],active:0},{title0:s(({value:t,isActive:l})=>[n("Question")]),title1:s(({value:t,isActive:l})=>[n("Solution")]),tab0:s(({value:t,isActive:l})=>[ye]),tab1:s(({value:t,isActive:l})=>[Ee]),_:1}),Ie,a(m)])}const Ce=h(_,[["render",Ae],["__file","10-multiple-file-input.html.vue"]]),Ge=JSON.parse('{"path":"/cli/text-processing-w-gnu-awk/10-multiple-file-input.html","title":"10. Multiple file input","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"10. Multiple file input","description":"Text Processing with GNU awk > 10. Multiple file input","category":["CLI","Linux"],"tags":["crashcourse","cli","sh","shell","gnu","linux","awk"],"head":[[{"meta":null},{"property":"og:title","content":"Text Processing with GNU awk > 10. Multiple file input"},{"property":"og:description","content":"10. Multiple file input"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/cli/text-processing-w-gnu-awk/10-multiple-file-input.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/cli/text-processing-w-gnu-awk/10-multiple-file-input.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"10. Multiple file input"}],["meta",{"property":"og:description","content":"Text Processing with GNU awk > 10. Multiple file input"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-04-24T07:16:44.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"cli"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:tag","content":"shell"}],["meta",{"property":"article:tag","content":"gnu"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:tag","content":"awk"}],["meta",{"property":"article:modified_time","content":"2024-04-24T07:16:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"10. Multiple file input\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-24T07:16:44.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"BEGINFILE, ENDFILE and FILENAME","slug":"beginfile-endfile-and-filename","link":"#beginfile-endfile-and-filename","children":[]},{"level":2,"title":"nextfile","slug":"nextfile","link":"#nextfile","children":[]},{"level":2,"title":"ARGC and ARGV","slug":"argc-and-argv","link":"#argc-and-argv","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]},{"level":2,"title":"Exercises","slug":"exercises","link":"#exercises","children":[{"level":3,"title":"Exercise 1","slug":"exercise-1","link":"#exercise-1","children":[]},{"level":3,"title":"Exercise 2","slug":"exercise-2","link":"#exercise-2","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1713943004000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":7}]},"readingTime":{"minutes":3.49,"words":1046},"filePathRelative":"cli/text-processing-w-gnu-awk/10-multiple-file-input.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{Ce as comp,Ge as data};
