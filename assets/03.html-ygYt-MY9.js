import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as s,t as m,b as n,w as i,n as r,g as l,d as e,e as a,r as c,o as k}from"./app-U_bew1in.js";const g={},f={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},v={class:"table-of-contents"},b=s("hr",null,null,-1),y=s("h2",{id:"operators-and-conditions",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#operators-and-conditions"},[s("span",null,"Operators and conditions")])],-1),_=s("p",null,"Today we’re going to get into the real detail of Swift: operators and conditions. This can sometimes trip folks up when they are learning, because as Joseph Campbell once said, “computers are like Old Testament gods: lots of rules and no mercy.”",-1),q=s("p",null,"Don’t worry, though. Sure, if you get a condition wrong then your code might not work at first, but it costs nothing other than a little head scratching to fix it up and try again.",-1),S=s("p",null,[s("strong",null,"Today you have ten one-minute videos to watch, and you’ll meet things like operator overloading, switch statements, and more."),e(" After watching each video you’re welcome to go through the optional extra reading if you want, and as always there’s a short test to help make sure you’ve understood what was taught.")],-1),x=s("h3",{id:"_1-arithmetic-operators",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-arithmetic-operators"},[s("span",null,"1. Arithmetic Operators")])],-1),C={class:"hint-container details"},T=s("summary",null,"1. Arithmetic Operators",-1),O=a(`<p>Now you know all the basic types in Swift, we can start to put them together using operators. Operators are those little mathematical symbols like <code>+</code> and <code>-</code>, and Swift has a huge range of them.</p><p>Here are a couple of test variables for us to work with:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> firstScore <span class="token operator">=</span> <span class="token number">12</span></span>
<span class="line"><span class="token keyword">let</span> secondScore <span class="token operator">=</span> <span class="token number">4</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>We can add and subtract using <code>+</code> and <code>-</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> total <span class="token operator">=</span> firstScore <span class="token operator">+</span> secondScore</span>
<span class="line"><span class="token keyword">let</span> difference <span class="token operator">=</span> firstScore <span class="token operator">-</span> secondScore</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>And we can multiply and divide using <code>*</code> and <code>/</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> product <span class="token operator">=</span> firstScore <span class="token operator">*</span> secondScore</span>
<span class="line"><span class="token keyword">let</span> divided <span class="token operator">=</span> firstScore <span class="token operator">/</span> secondScore</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Swift has a special operator for calculating remainders after division:<code>%</code>. It calculates how many times one number can fit inside another, then sends back the value that’s left over.</p><p>For example, we set <code>secondScore</code> to 4, so if we say <code>13 % secondScore</code> we’ll get back one, because 4 fits into 13 three times with remainder one:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> remainder <span class="token operator">=</span> <span class="token number">13</span> <span class="token operator">%</span> secondScore</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,10),D=a('<div class="hint-container info"><p class="hint-container-title">1. Arithmetic Operators - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-cant-swift-add-a-double-to-an-int" target="_blank" rel="noopener noreferrer">Why can’t Swift add a Double to an Int?</a></li><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-have-a-dedicated-division-remainder-operator" target="_blank" rel="noopener noreferrer">Why does Swift have a dedicated division remainder operator?</a></li><li>Test: <a href="https://hackingwithswift.com/review/arithmetic-operators" target="_blank" rel="noopener noreferrer">Arithmetic operators</a></li></ul></div><h3 id="_2-operator-overloading" tabindex="-1"><a class="header-anchor" href="#_2-operator-overloading"><span>2. Operator overloading</span></a></h3>',2),j={class:"hint-container details"},A=s("summary",null,"2. Operator overloading",-1),R=a(`<p>Swift supports operator overloading, which is a fancy way of saying that what an operator does depends on the values you use it with. For example, <code>+</code> sums integers like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> meaningOfLife <span class="token operator">=</span> <span class="token number">42</span></span>
<span class="line"><span class="token keyword">let</span> doubleMeaning <span class="token operator">=</span> <span class="token number">42</span> <span class="token operator">+</span> <span class="token number">42</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>But <code>+</code> also joins strings, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> fakers <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Fakers gonna &quot;</span></span></span>
<span class="line"><span class="token keyword">let</span> action <span class="token operator">=</span> fakers <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&quot;fake&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>You can even use <code>+</code> to join arrays, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> firstHalf <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;John&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Paul&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">let</span> secondHalf <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;George&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Ringo&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">let</span> beatles <span class="token operator">=</span> firstHalf <span class="token operator">+</span> secondHalf</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Remember, Swift is a type-safe language, which means it won’t let you mix types. For example, you can’t add an integer to a string because it doesn’t make any sense.</p>`,7),W=a('<div class="hint-container info"><p class="hint-container-title">2. Operator overloading - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-need-operator-overloading" target="_blank" rel="noopener noreferrer">Why does Swift need operator overloading?</a></li><li>Test: <a href="https://hackingwithswift.com/review/operator-overloading" target="_blank" rel="noopener noreferrer">Operator overloading</a></li></ul></div><h3 id="_3-compound-assignment-operators" tabindex="-1"><a class="header-anchor" href="#_3-compound-assignment-operators"><span>3. Compound assignment operators</span></a></h3>',2),I={class:"hint-container details"},B=s("summary",null,"3. Compound assignment operators",-1),Y=a(`<p>Swift has shorthand operators that combine one operator with an assignment, so you can change a variable in place. These look like the existing operators you know – <code>+</code>, <code>-</code>, <code>*</code>, and <code>/</code>, but they have an <code>=</code> on the end because they assign the result back to whatever variable you were using.</p><p>For example, if someone scored 95 in an exam but needs to be penalized 5 points, you could write this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">95</span></span>
<span class="line">score <span class="token operator">-=</span> <span class="token number">5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Similarly, you can add one string to another using <code>+=</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> quote <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;The rain in Spain falls mainly on the &quot;</span></span></span>
<span class="line">quote <span class="token operator">+=</span> <span class="token string-literal"><span class="token string">&quot;Spaniards&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,5),F=a('<div class="hint-container info"><p class="hint-container-title">3. Compound assignment operators - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-have-compound-assignment-operators" target="_blank" rel="noopener noreferrer">Why does Swift have compound assignment operators?</a></li><li>Test: <a href="https://hackingwithswift.com/review/compound-assignment-operators" target="_blank" rel="noopener noreferrer">Compound assignment operators</a></li></ul></div><h3 id="_4-comparison-operators" tabindex="-1"><a class="header-anchor" href="#_4-comparison-operators"><span>4. Comparison operators</span></a></h3>',2),H={class:"hint-container details"},N=s("summary",null,"4. Comparison operators",-1),V=a(`<p>Swift has several operators that perform comparison, and these work more or less like you would expect in mathematics.</p><p>Let’s start with a couple of example variables so we have something to work with:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> firstScore <span class="token operator">=</span> <span class="token number">6</span></span>
<span class="line"><span class="token keyword">let</span> secondScore <span class="token operator">=</span> <span class="token number">4</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>There are two operators that check for equality: <code>==</code> checks two values are the same, and <code>!=</code> (pronounced “not equals”) checks two values are not the same:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">firstScore <span class="token operator">==</span> secondScore</span>
<span class="line">firstScore <span class="token operator">!=</span> secondScore</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>There are four operators for comparing whether one value is greater than, less than, or equal to another. These are just like in mathematics:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">firstScore <span class="token operator">&lt;</span> secondScore</span>
<span class="line">firstScore <span class="token operator">&gt;=</span> secondScore</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Each of these also work with strings, because strings have a natural alphabetical order:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token string-literal"><span class="token string">&quot;Taylor&quot;</span></span> <span class="token operator">&lt;=</span> <span class="token string-literal"><span class="token string">&quot;Swift&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,9),M=a('<div class="hint-container info"><p class="hint-container-title">4. Comparison operators - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/how-does-swift-let-us-compare-many-types-of-data" target="_blank" rel="noopener noreferrer">How does Swift let us compare many types of data?</a></li><li>Test: <a href="https://hackingwithswift.com/review/comparison-operators" target="_blank" rel="noopener noreferrer">Comparison operators</a></li></ul></div><h3 id="_5-conditions" tabindex="-1"><a class="header-anchor" href="#_5-conditions"><span>5. Conditions</span></a></h3>',2),P={class:"hint-container details"},E=s("summary",null,"5. Conditions",-1),J=a(`<p>Now you know some operators you can write conditions using <code>if</code> statements. You give Swift a condition, and if that condition is true it will run code of your choosing.</p><p>To try this out, I want to use a Swift function called <code>print()</code>: you run it with some text, and it will be printed out.</p><p>We can use conditions to check for a winning Blackjack hand:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> firstCard <span class="token operator">=</span> <span class="token number">11</span></span>
<span class="line"><span class="token keyword">let</span> secondCard <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> firstCard <span class="token operator">+</span> secondCard <span class="token operator">==</span> <span class="token number">21</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Blackjack!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The code inside the braces – <code>{</code> and <code>}</code> – will be run if the condition is true. If you want you can provide alternative code to run if the condition is <em>false</em>, using <code>else</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> firstCard <span class="token operator">+</span> secondCard <span class="token operator">==</span> <span class="token number">21</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Blackjack!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Regular cards&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also chain conditions together using <code>else if</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> firstCard <span class="token operator">+</span> secondCard <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Aces – lucky!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> firstCard <span class="token operator">+</span> secondCard <span class="token operator">==</span> <span class="token number">21</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Blackjack!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Regular cards&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),z=a('<div class="hint-container info"><p class="hint-container-title">5. Conditions - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/whats-the-difference-between-if-and-else-if" target="_blank" rel="noopener noreferrer">What’s the difference between if and else if?</a></li><li>Test: <a href="https://hackingwithswift.com/review/conditions" target="_blank" rel="noopener noreferrer">Conditions</a></li></ul></div><h3 id="_6-combining-conditions" tabindex="-1"><a class="header-anchor" href="#_6-combining-conditions"><span>6. Combining conditions</span></a></h3>',2),K={class:"hint-container details"},L=s("summary",null,"6. Combining conditions",-1),X=a(`<p>Swift has two special operators that let us combine conditions together: they are <code>&amp;&amp;</code> (pronounced “and”) and <code>||</code> (pronounced “or”).</p><p>For example, we could check that the age of two people are both over a certain value like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> age1 <span class="token operator">=</span> <span class="token number">12</span></span>
<span class="line"><span class="token keyword">let</span> age2 <span class="token operator">=</span> <span class="token number">21</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> age1 <span class="token operator">&gt;</span> <span class="token number">18</span> <span class="token operator">&amp;&amp;</span> age2 <span class="token operator">&gt;</span> <span class="token number">18</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Both are over 18&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That <code>print()</code> call will only happen if both ages are over 18, which they aren’t. In fact, Swift won’t even bother checking the value of <code>age2</code> because it can see that <code>age1</code> already failed the test.</p><p>The alternative to <code>&amp;&amp;</code> is <code>||</code>, which evaluates as true if either item passes the test. For example we could print a message if either age is over 18:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> age1 <span class="token operator">&gt;</span> <span class="token number">18</span> <span class="token operator">||</span> age2 <span class="token operator">&gt;</span> <span class="token number">18</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;At least one is over 18&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can use <code>&amp;&amp;</code> and <code>||</code> more than once in a single condition, but don’t make things too complicated otherwise it can be hard to read!</p>`,7),Z=a('<div class="hint-container info"><p class="hint-container-title">6. Combining conditions - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/how-to-check-multiple-conditions" target="_blank" rel="noopener noreferrer">How to check multiple conditions</a></li><li>Test: <a href="https://hackingwithswift.com/review/combining-conditions" target="_blank" rel="noopener noreferrer">Combining conditions</a></li></ul></div><h3 id="_7-the-ternary-operator" tabindex="-1"><a class="header-anchor" href="#_7-the-ternary-operator"><span>7. The ternary operator</span></a></h3>',2),G={class:"hint-container details"},Q=s("summary",null,"7. The ternary operator",-1),U=a(`<p>Swift has a rarely used operator called the ternary operator. It works with three values at once, which is where its name comes from: it checks a condition specified in the first value, and if it’s true returns the second value, but if it’s false returns the third value.</p><p>The ternary operator is a condition plus true or false blocks all in one, split up by a question mark and a colon, all of which which makes it rather hard to read. Here’s an example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> firstCard <span class="token operator">=</span> <span class="token number">11</span></span>
<span class="line"><span class="token keyword">let</span> secondCard <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>firstCard <span class="token operator">==</span> secondCard <span class="token operator">?</span> <span class="token string-literal"><span class="token string">&quot;Cards are the same&quot;</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Cards are different&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That checks whether the two cards are the same, then prints “Cards are the same” if the condition is true, or “Cards are different” if it’s false. We could write the same code using a regular condition:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> firstCard <span class="token operator">==</span> secondCard <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Cards are the same&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Cards are different&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),$=a('<div class="hint-container info"><p class="hint-container-title">7. The ternary operator - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-should-you-use-the-ternary-operator-in-swift" target="_blank" rel="noopener noreferrer">When should you use the ternary operator in Swift?</a></li><li>Test: <a href="https://hackingwithswift.com/review/the-ternary-operator" target="_blank" rel="noopener noreferrer">The ternary operator</a></li></ul></div><h3 id="_8-switch-statements" tabindex="-1"><a class="header-anchor" href="#_8-switch-statements"><span>8. Switch statements</span></a></h3>',2),ss={class:"hint-container details"},ns=s("summary",null,"8. Switch statements",-1),as=a(`<p>If you have several conditions using <code>if</code> and <code>else if</code>, it’s often clearer to use a different construct known as <code>switch case</code>. Using this approach you write your condition once, then list all possible outcomes and what should happen for each of them.</p><p>To try this out, here’s a weather constant containing the string <code>sunny</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> weather <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;sunny&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We can use a switch block to print one of four different messages:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">switch</span> weather <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&quot;rain&quot;</span></span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Bring an umbrella&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&quot;snow&quot;</span></span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Wrap up warm&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&quot;sunny&quot;</span></span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Wear sunscreen&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Enjoy your day!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In that example, the last case – <code>default</code> – is required because Swift makes sure you cover all possible cases so that no eventuality is missed off. If the weather is anything other than rain, snow, or sun, the <code>default</code> case will be run.</p><p>Swift will only run the code inside each case. If you want execution to continue on to the next case, use the <code>fallthrough</code> keyword like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">switch</span> weather <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&quot;rain&quot;</span></span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Bring an umbrella&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&quot;snow&quot;</span></span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Wrap up warm&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&quot;sunny&quot;</span></span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Wear sunscreen&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">fallthrough</span></span>
<span class="line"><span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Enjoy your day!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),es=a('<div class="hint-container info"><p class="hint-container-title">8. Switch statements - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-should-you-use-switch-statements-rather-than-if" target="_blank" rel="noopener noreferrer">When should you use switch statements rather than if?</a></li><li>Test: <a href="https://hackingwithswift.com/review/switch-statements" target="_blank" rel="noopener noreferrer">Switch statements</a></li></ul></div><h3 id="_9-range-operators" tabindex="-1"><a class="header-anchor" href="#_9-range-operators"><span>9. Range operators</span></a></h3>',2),ts={class:"hint-container details"},os=s("summary",null,"9. Range operators",-1),is=a(`<p>Swift gives us two ways of making ranges: the <code>..&lt;</code> and <code>...</code> operators. The half-open range operator, <code>..&lt;</code>, creates ranges up to but excluding the final value, and the closed range operator, <code>...</code>, creates ranges up to and including the final value.</p><p>For example, the range <code>1..&lt;5</code> contains the numbers 1, 2, 3, and 4, whereas the range <code>1...5</code> contains the numbers 1, 2, 3, 4, and 5.</p><p>Ranges are helpful with <code>switch</code> blocks, because you can use them for each of your cases. For example, if someone sat an exam we could print different messages depending on their score:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> score <span class="token operator">=</span> <span class="token number">85</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">switch</span> score <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">50</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;You failed badly.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token number">50</span><span class="token operator">..&lt;</span><span class="token number">85</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;You did OK.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;You did great!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As before, the <code>default</code> case must be there to ensure all possible values are covered.</p>`,5),rs=a('<div class="hint-container info"><p class="hint-container-title">9. Range operators - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-have-two-range-operators" target="_blank" rel="noopener noreferrer">Why does Swift have two range operators?</a></li><li>Test: <a href="https://hackingwithswift.com/review/range-operators" target="_blank" rel="noopener noreferrer">Range operators</a></li></ul></div><h3 id="_10-operators-and-conditions-summary" tabindex="-1"><a class="header-anchor" href="#_10-operators-and-conditions-summary"><span>10. Operators and conditions summary</span></a></h3>',2),ls={class:"hint-container details"},ps=s("summary",null,"10. Operators and conditions summary",-1),cs=a("<p>You’ve made it to the end of the third part of this series, so let’s summarize:</p><ol><li>Swift has operators for doing arithmetic and for comparison; they mostly work like you already know.</li><li>There are compound variants of arithmetic operators that modify their variables in place: <code>+=</code>, <code>-=</code>, and so on.</li><li>You can use <code>if</code>, <code>else</code>, and <code>else if</code> to run code based on the result of a condition.</li><li>Swift has a ternary operator that combines a check with true and false code blocks. Although you might see it in other code, I wouldn’t recommend using it yourself.</li><li>If you have multiple conditions using the same value, it’s often clearer to use <code>switch</code> instead.</li><li>You can make ranges using <code>..&lt;</code> and <code>...</code> depending on whether the last number should be excluded or included.</li></ol>",2),ds=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"10. Operators and conditions summary - Additional"),s("ul",null,[s("li",null,[e("Test: "),s("a",{href:"https://hackingwithswift.com/review/operators-and-conditions-summary",target:"_blank",rel:"noopener noreferrer"},"Operators and conditions")])])],-1),us=s("hr",null,null,-1);function hs(d,ms){const t=c("router-link"),o=c("VPCard"),p=c("VidStack");return k(),h("div",null,[s("h1",f,[s("a",w,[s("span",null,m(d.$frontmatter.title)+" 관련",1)])]),s("nav",v,[s("ul",null,[s("li",null,[n(t,{to:"#operators-and-conditions"},{default:i(()=>[e("Operators and conditions")]),_:1}),s("ul",null,[s("li",null,[n(t,{to:"#_1-arithmetic-operators"},{default:i(()=>[e("1. Arithmetic Operators")]),_:1})]),s("li",null,[n(t,{to:"#_2-operator-overloading"},{default:i(()=>[e("2. Operator overloading")]),_:1})]),s("li",null,[n(t,{to:"#_3-compound-assignment-operators"},{default:i(()=>[e("3. Compound assignment operators")]),_:1})]),s("li",null,[n(t,{to:"#_4-comparison-operators"},{default:i(()=>[e("4. Comparison operators")]),_:1})]),s("li",null,[n(t,{to:"#_5-conditions"},{default:i(()=>[e("5. Conditions")]),_:1})]),s("li",null,[n(t,{to:"#_6-combining-conditions"},{default:i(()=>[e("6. Combining conditions")]),_:1})]),s("li",null,[n(t,{to:"#_7-the-ternary-operator"},{default:i(()=>[e("7. The ternary operator")]),_:1})]),s("li",null,[n(t,{to:"#_8-switch-statements"},{default:i(()=>[e("8. Switch statements")]),_:1})]),s("li",null,[n(t,{to:"#_9-range-operators"},{default:i(()=>[e("9. Range operators")]),_:1})]),s("li",null,[n(t,{to:"#_10-operators-and-conditions-summary"},{default:i(()=>[e("10. Operators and conditions summary")]),_:1})])])])])]),b,n(o,r(l({title:"100 Days of Swift - Day 3",desc:"Operators and conditions",link:"https://www.hackingwithswift.com/100/3",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),y,_,q,S,x,s("details",C,[T,n(o,r(l({title:"100 Days of Swift - Day 3 - 1. Arithmetic Operators",desc:"1. Arithmetic Operators",link:"https://hackingwithswift.com/sixty/3/1/arithmetic-operators",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(p,{src:"youtube/uevi0SIeuGQ"}),O]),D,s("details",j,[A,n(o,r(l({title:"100 Days of Swift - Day 3 - 2. Operator overloading",desc:"2. Operator overloading",link:"https://hackingwithswift.com/sixty/3/2/operator-overloading",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(p,{src:"youtube/hQLBDnMR8f8"}),R]),W,s("details",I,[B,n(o,r(l({title:"100 Days of Swift - Day 3 - 3. Compound assignment operators",desc:"3. Compound assignment operators",link:"https://hackingwithswift.com/sixty/3/3/compound-assignment-operators",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(p,{src:"youtube/5y2wcttlE5s"}),Y]),F,s("details",H,[N,n(o,r(l({title:"100 Days of Swift - Day 3 - 4. Comparison operators",desc:"4. Comparison operators",link:"https://hackingwithswift.com/sixty/3/4/comparison-operators",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(p,{src:"youtube/atqX9mP-Oe4"}),V]),M,s("details",P,[E,n(o,r(l({title:"100 Days of Swift - Day 3 - 5. Conditions",desc:"5. Conditions",link:"https://hackingwithswift.com/sixty/3/5/conditions",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(p,{src:"youtube/e68cZRlXAMY"}),J]),z,s("details",K,[L,n(o,r(l({title:"100 Days of Swift - Day 3 - 6. Combining conditions",desc:"6. Combining conditions",link:"https://hackingwithswift.com/sixty/3/6/combining-conditions",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(p,{src:"youtube/MJ8LnIliTRg"}),X]),Z,s("details",G,[Q,n(o,r(l({title:"100 Days of Swift - Day 3 - 7. The ternary operator",desc:"7. The ternary operator",link:"https://hackingwithswift.com/sixty/3/7/the-ternary-operator",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(p,{src:"youtube/YbXjxMjJ1xY"}),U]),$,s("details",ss,[ns,n(o,r(l({title:"100 Days of Swift - Day 3 - 8. Switch statements",desc:"8. Switch statements",link:"https://hackingwithswift.com/sixty/3/8/switch-statements",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(p,{src:"youtube/SiN6DyuT9B8"}),as]),es,s("details",ts,[os,n(o,r(l({title:"100 Days of Swift - Day 3 - 9. Range operators",desc:"9. Range operators",link:"https://hackingwithswift.com/sixty/3/9/range-operators",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(p,{src:"youtube/FGxEffJ5XUM"}),is]),rs,s("details",ls,[ps,n(o,r(l({title:"100 Days of Swift - Day 3 - 10. Operators and conditions summary",desc:"10. Operators and conditions summary",link:"https://hackingwithswift.com/sixty/3/10/operators-and-conditions-summary",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(p,{src:"youtube/Hhnx3i0o1_c"}),cs]),ds,us])}const fs=u(g,[["render",hs],["__file","03.html.vue"]]),ws=JSON.parse('{"path":"/swift/100-days-of-swift/03.html","title":"Day 03","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 03","description":"100 Days of Swift > Day 03","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of Swift > Day 03"},{"property":"og:description","content":"Day 03"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swift/03.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swift/03.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 03"}],["meta",{"property":"og:description","content":"100 Days of Swift > Day 03"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 03\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Operators and conditions","slug":"operators-and-conditions","link":"#operators-and-conditions","children":[{"level":3,"title":"1. Arithmetic Operators","slug":"_1-arithmetic-operators","link":"#_1-arithmetic-operators","children":[]},{"level":3,"title":"2. Operator overloading","slug":"_2-operator-overloading","link":"#_2-operator-overloading","children":[]},{"level":3,"title":"3. Compound assignment operators","slug":"_3-compound-assignment-operators","link":"#_3-compound-assignment-operators","children":[]},{"level":3,"title":"4. Comparison operators","slug":"_4-comparison-operators","link":"#_4-comparison-operators","children":[]},{"level":3,"title":"5. Conditions","slug":"_5-conditions","link":"#_5-conditions","children":[]},{"level":3,"title":"6. Combining conditions","slug":"_6-combining-conditions","link":"#_6-combining-conditions","children":[]},{"level":3,"title":"7. The ternary operator","slug":"_7-the-ternary-operator","link":"#_7-the-ternary-operator","children":[]},{"level":3,"title":"8. Switch statements","slug":"_8-switch-statements","link":"#_8-switch-statements","children":[]},{"level":3,"title":"9. Range operators","slug":"_9-range-operators","link":"#_9-range-operators","children":[]},{"level":3,"title":"10. Operators and conditions summary","slug":"_10-operators-and-conditions-summary","link":"#_10-operators-and-conditions-summary","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":9}]},"readingTime":{"minutes":8.63,"words":2588},"filePathRelative":"swift/100-days-of-swift/03.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{fs as comp,ws as data};
