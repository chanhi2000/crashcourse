import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as s,t as m,b as a,w as p,n as l,g as c,d as n,e as t,r as e,o as g}from"./app-U_bew1in.js";const w={},f={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},b=s("hr",null,null,-1),_=t('<h2 id="project-14-part-4" tabindex="-1"><a class="header-anchor" href="#project-14-part-4"><span>Project 14, part 4</span></a></h2><p>It’s taken a while to get to this point, but today you’re going to put in place some app features using remarkably little code – this should be a relatively easy day!</p><p>More specifically, you’ll see how to show different UI based on an enum’s value, how to add custom <code>Comparable</code> conformance to some data we fetched from a network request, and more. There are some important techniques here, but they really do take our app up a notch.</p><p>If you’re finding it hard, you’d do well to remember what William Eardley once said: “ambition is the path to success, persistence is the vehicle you arrive in.” You showed ambition for starting this course, and now you’ve made it to day 71 you’re clearly showing persistence too!</p><p><strong>Today you have two topics to work through, in which you’ll make network calls, add <code>Comparable</code> conformance, and more.</strong></p><h3 id="downloading-data-from-wikipedia" tabindex="-1"><a class="header-anchor" href="#downloading-data-from-wikipedia"><span>Downloading data from Wikipedia</span></a></h3>',6),S={class:"hint-container details"},x=s("summary",null,"Downloading data from Wikipedia",-1),q=s("p",null,[n("To make this whole app more useful, we’re going to modify our "),s("code",null,"EditView"),n(" screen so that it shows interesting places. After all, if visiting London is on your bucket list, you’d probably want some suggestions for things to see nearby. This might sound hard to do, but actually we can query Wikipedia using GPS coordinates, and it will send back a list of places that are nearby.")],-1),T=s("p",null,[n("Wikipedia’s API sends back JSON data in a precise format, so we need to do a little work to define "),s("code",null,"Codable"),n(" structs capable of storing it all. The structure is this:")],-1),W=s("ul",null,[s("li",null,"The main result contains the result of our query in a key called “query”."),s("li",null,"Inside the query is a “pages” dictionary, with page IDs as the key and the Wikipedia pages themselves as values."),s("li",null,"Each page has a lot of information, including its coordinates, title, terms, and more.")],-1),P=s("code",null,"Result.swift",-1),D=t(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Result</span><span class="token punctuation">:</span> <span class="token class-name">Codable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> query<span class="token punctuation">:</span> <span class="token class-name">Query</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">Query</span><span class="token punctuation">:</span> <span class="token class-name">Codable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> pages<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">:</span> <span class="token class-name">Page</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">Page</span><span class="token punctuation">:</span> <span class="token class-name">Codable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> pageid<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line">    <span class="token keyword">let</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">let</span> terms<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">?</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We’re going to use that to store data we fetch from Wikipedia, then show it immediately in our UI. However, we need something to show while the fetch is happening – a text view saying “Loading” or similar ought to do the trick.</p><p>This means conditionally showing different UI depending on the current load state, and that means defining an enum that actually <em>stores</em> the current load state otherwise we don’t know what to show.</p><p>Start by adding this nested enum to <code>EditView</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">LoadingState</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> loading<span class="token punctuation">,</span> loaded<span class="token punctuation">,</span> failed</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Those cover all the states we need to represent our network request.</p><p>Next we’re going to add two properties to <code>EditView</code>: one to represent the loading state, and one to store an array of Wikipedia pages once the fetch has completed. So, add these two now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> loadingState <span class="token operator">=</span> <span class="token class-name">LoadingState</span><span class="token punctuation">.</span>loading</span>
<span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> pages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Page</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Before we tackle the network request itself, we have one last easy job to do: adding to our <code>Form</code> a new section to show pages if they have loaded, or status text views otherwise. We can put these <code>if/else if</code> conditions or a <code>switch</code> statement right into the <code>Section</code> and SwiftUI will figure it out.</p><p>So, put this section below the existing one:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Section</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Nearby…&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">switch</span> loadingState <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span>loaded<span class="token punctuation">:</span></span>
<span class="line">        <span class="token class-name">ForEach</span><span class="token punctuation">(</span>pages<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token punctuation">.</span>pageid<span class="token punctuation">)</span> <span class="token punctuation">{</span> page <span class="token keyword">in</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>title<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span></span>
<span class="line">            <span class="token operator">+</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;: &quot;</span></span><span class="token punctuation">)</span> <span class="token operator">+</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Page description here&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">italic</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span>loading<span class="token punctuation">:</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Loading…&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span>failed<span class="token punctuation">:</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Please try again later.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tip: Notice how we can use <code>+</code> to add text views together? This lets us create larger text views that mix and match different kinds of formatting. That “Page description here” is just temporary – we’ll replace it soon.</p><p>Now for the part that really brings all this together: we need to fetch some data from Wikipedia, decode it into a <code>Result</code>, assign its <code>pages</code> to our pages property, then set <code>loadingState</code> to <code>.loaded</code>. If the fetch fails, we’ll set <code>loadingState</code> to <code>.failed</code>, and SwiftUI will load the appropriate UI.</p>`,13),j={href:"http://bit.ly/swiftwiki",target:"_blank",rel:"noopener noreferrer"},I=t(`<p>Add this method to <code>EditView</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">fetchNearbyPlaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">async</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> urlString <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;https://en.wikipedia.org/w/api.php?ggscoord=</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">location<span class="token punctuation">.</span>coordinate<span class="token punctuation">.</span>latitude</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">%7C</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">location<span class="token punctuation">.</span>coordinate<span class="token punctuation">.</span>longitude</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&amp;action=query&amp;prop=coordinates%7Cpageimages%7Cpageterms&amp;colimit=50&amp;piprop=thumbnail&amp;pithumbsize=500&amp;pilimit=50&amp;wbptterms=description&amp;generator=geosearch&amp;ggsradius=10000&amp;ggslimit=50&amp;format=json&quot;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">guard</span> <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> urlString<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Bad URL: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">urlString</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token omit keyword">_</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> <span class="token class-name">URLSession</span><span class="token punctuation">.</span>shared<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> url<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// we got some data back!</span></span>
<span class="line">        <span class="token keyword">let</span> items <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> data<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// success – convert the array values to our pages array</span></span>
<span class="line">        pages <span class="token operator">=</span> items<span class="token punctuation">.</span>query<span class="token punctuation">.</span>pages<span class="token punctuation">.</span>values<span class="token punctuation">.</span>sorted <span class="token punctuation">{</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>title <span class="token operator">&lt;</span> <span class="token short-argument">$1</span><span class="token punctuation">.</span>title <span class="token punctuation">}</span></span>
<span class="line">        loadingState <span class="token operator">=</span> <span class="token punctuation">.</span>loaded</span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// if we&#39;re still here it means the request failed somehow</span></span>
<span class="line">        loadingState <span class="token operator">=</span> <span class="token punctuation">.</span>failed</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That request should begin as soon as the view appears, so add this <code>task()</code> modifier after the existing <code>toolbar()</code> modifier:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span>task <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">await</span> <span class="token function">fetchNearbyPlaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now go ahead and run the app again – you’ll find that as you drop a pin our <code>EditView</code> screen will slide up and show you all the places nearby. Nice!</p>`,5),N=s("h3",{id:"sorting-wikipedia-results",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#sorting-wikipedia-results"},[s("span",null,"Sorting Wikipedia results")])],-1),C={class:"hint-container details"},U=s("summary",null,"Sorting Wikipedia results",-1),V=t(`<p>Wikipedia’s results come back to us in an order that probably seems random, but it’s actually sorted according to their internal page ID. That doesn’t help <em>us</em> though, which is why we’re sorting results using a custom closure.</p><p>There are lots of times when using a custom sorting function is exactly what you need, but more often than not there is one natural order to your data – maybe showing news stories newest first, or contacts last name first, etc. So, rather than just provide an inline closure to <code>sorted()</code> we are instead going to make our <code>Page</code> struct conform to <code>Comparable</code>. This is actually pretty easy to do, because we already have the sorting code written – it’s just a matter of moving it across to our <code>Page</code> struct.</p><p>So, start by modifying the definition of the <code>Page</code> struct to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Page</span><span class="token punctuation">:</span> <span class="token class-name">Codable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you recall, conforming to <code>Comparable</code> has only a single requirement: we must implement a <code>&lt;</code> function that accepts two parameters of the type of our struct, and returns true if the first should be sorted before the second. In this case we can just pass the test directly onto the <code>title</code> strings, so add this method to the <code>Page</code> struct now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">func</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span>lhs<span class="token punctuation">:</span> <span class="token class-name">Page</span><span class="token punctuation">,</span> rhs<span class="token punctuation">:</span> <span class="token class-name">Page</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Bool</span> <span class="token punctuation">{</span></span>
<span class="line">    lhs<span class="token punctuation">.</span>title <span class="token operator">&lt;</span> rhs<span class="token punctuation">.</span>title</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now that Swift understands how to sort pages, it will automatically gives us a parameter-less <code>sorted()</code> method on page arrays. This means when we set <code>self.pages</code> in <code>fetchNearbyPlaces()</code> we can now add <code>sorted()</code> to the end, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">pages <span class="token operator">=</span> items<span class="token punctuation">.</span>query<span class="token punctuation">.</span>pages<span class="token punctuation">.</span>values<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Before we’re done with this screen, we need to replace the <code>Text(&quot;Page description here&quot;)</code> view with something real. Wikipedia’s JSON data does contain a description, but it’s buried: the <code>terms</code> dictionary might not be there, and if it is there it might not have a <code>description</code> key, and if it <em>has</em> a <code>description</code> key it might be an empty array rather than an array with some text inside.</p><p>We don’t want this mess to plague our SwiftUI code, so again the best thing to do is make a computed property that returns the description if it exists, or a fixed string otherwise. Add this to the <code>Page</code> struct to finish it off:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> description<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    terms<span class="token operator">?</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;description&quot;</span></span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">.</span>first <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;No further information&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With that done you can replace <code>Text(&quot;Page description here&quot;)</code> with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span>description<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That completes <code>EditView</code> – it lets us edit the two properties of our annotation views, it downloads and sorts data from Wikipedia, it shows different UI depending on how the network request is going, and it even carefully looks through the Wikipedia content to decide what can be shown.</p>`,14),R=s("hr",null,null,-1);function E(u,L){const o=e("router-link"),i=e("VPCard"),r=e("VidStack"),d=e("FontIcon");return g(),h("div",null,[s("h1",f,[s("a",v,[s("span",null,m(u.$frontmatter.title)+" 관련",1)])]),s("nav",y,[s("ul",null,[s("li",null,[a(o,{to:"#project-14-part-4"},{default:p(()=>[n("Project 14, part 4")]),_:1}),s("ul",null,[s("li",null,[a(o,{to:"#downloading-data-from-wikipedia"},{default:p(()=>[n("Downloading data from Wikipedia")]),_:1})]),s("li",null,[a(o,{to:"#sorting-wikipedia-results"},{default:p(()=>[n("Sorting Wikipedia results")]),_:1})])])])])]),b,a(i,l(c({title:"100 Days of SwiftUI - Day 71",desc:"Project 14, part 4",link:"https://www.hackingwithswift.com/100/swiftui/71",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),_,s("details",S,[x,a(i,l(c({title:"100 Days of SwiftUI - Day 71 - Downloading data from Wikipedia",desc:"Downloading data from Wikipedia",link:"https://www.hackingwithswift.com/books/ios-swiftui/downloading-data-from-wikipedia",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(r,{src:"youtube/XFGpFh1FJWA"}),q,T,W,s("p",null,[n("We can represent that using three linked structs, so create a new Swift file called "),a(d,{icon:"fa-brands fa-swift"}),P,n(" and give it this content:")]),D,s("p",null,[n("Warning: The Wikipedia URL we need to load is really long, so rather than try to type it in you might want to copy and paste from the text or from my "),s("a",j,[a(d,{icon:"iconfont icon-github"}),n("GitHub gist")]),n(".")]),I]),N,s("details",C,[U,a(i,l(c({title:"100 Days of SwiftUI - Day 71 - Sorting Wikipedia results",desc:"Sorting Wikipedia results",link:"https://www.hackingwithswift.com/books/ios-swiftui/sorting-wikipedia-results",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(r,{src:"youtube/6zsnh4tFmNs"}),V]),R])}const A=k(w,[["render",E],["__file","71.html.vue"]]),J=JSON.parse('{"path":"/swift/100-days-of-swiftui/71.html","title":"Day 71","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 71","description":"100 Days of SwiftUI > Day 71","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 71"},{"property":"og:description","content":"Day 71"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/71.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/71.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 71"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 71"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 71\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 14, part 4","slug":"project-14-part-4","link":"#project-14-part-4","children":[{"level":3,"title":"Downloading data from Wikipedia","slug":"downloading-data-from-wikipedia","link":"#downloading-data-from-wikipedia","children":[]},{"level":3,"title":"Sorting Wikipedia results","slug":"sorting-wikipedia-results","link":"#sorting-wikipedia-results","children":[]}]}],"git":{"createdTime":1704338818000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":9}]},"readingTime":{"minutes":5.1,"words":1529},"filePathRelative":"swift/100-days-of-swiftui/71.md","localizedDate":"2024년 1월 4일","excerpt":"\\n\\n<hr>\\n"}');export{A as comp,J as data};
