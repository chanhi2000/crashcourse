import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as e,t as b,b as i,w as n,n as v,g,d as s,e as r,r as c,o as k}from"./app-U_bew1in.js";const f={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},_=e("hr",null,null,-1),T=r(`<p>The goal of this lab is to introduce you to Buildah and the flexibility it provides when you need to build container images your way. There are a lot of different use cases that just &quot;feel natural&quot; when building container images, but you often, you can&#39;t quite wire together and elegant solutions with the client server model of existing container engines. In comes Buildah. To get started, lets introduce some basic decisions you need to think through when building a new container image.</p><p>Image vs. Scratch: Do you want to start with an existing container image as the source for your new container image, or would you prefer to build completely from scratch? Source images are the most common route, but it can be nice to build from scratch if you have small, statically linked binaries.</p><p>Inside vs. Outside: Do you want to execute the commands to build the next container image layer inside the container, or would you prefer to use the tools on the host to build the image? This is completely new concept with Buildah, but with existing container engines, you always build from within the container. Building outside the container image can be useful when you want to build a smaller container image, or an image that will always be ran read only, and never built upon. Things like Java would normally be built in the container because they typically need a JVM running, but installing RPMs might happen from outside because you don&#39;t want the RPM database in the container.</p><p>External vs. Internal Data: Do you have everything you need to build the image from within the image? Or, do you need to access cached data outside of the build process? For example, It might be convenient to mount a large cached RPM cache inside the container during build, but you would never want to carry that around in the production image. The use cases for build time mounts range from SSH keys to Java build artifacts - for more ideas, see this GitHub issue.</p><p>Alright, let&#39;s walk through some common scenarios with Buildah.</p><hr><h2 id="prep-work" tabindex="-1"><a class="header-anchor" href="#prep-work"><span>Prep Work</span></a></h2><p>Just like Podman, Buildah can execute in rootless mode, but since you have tools on the container host interacting files in the container image, you need to make Buildah think it&#39;s running as root. Buildah comes with a cool sub-command called unshare which does just this. It puts our shell into a user namespace just like when you have a root shell in a container. The difference is, this shell has access to tools installed on the container host, instead of in the container image. Before we complete the rest of this lab, execute the &quot;<code>buildah unshare</code>&quot; command. Think of this as making yourself root, without actually making yourself root:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">buildah unshare</span>
<span class="line"><span class="token comment"># WARN[0000] Reading allowed ID mappings: reading subuid mappings for user &quot;root&quot; and subgid mappings for group &quot;root&quot;: no subuid ranges found for user &quot;root&quot; in /etc/subuid </span></span>
<span class="line"><span class="token comment"># WARN[0000] Found no UID ranges set aside for user &quot;root&quot; in /etc/subuid. </span></span>
<span class="line"><span class="token comment"># WARN[0000] Found no GID ranges set aside for user &quot;root&quot; in /etc/subgid. </span></span>
<span class="line"><span class="token comment"># ERRO[0000] no command specified    </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, look at who your shell thinks you are:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">whoami</span></span>
<span class="line"><span class="token comment"># root</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>It&#39;s looks like you are root, but you really aren&#39;t, but let&#39;s prove it:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">touch</span> /etc/shadow</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,13),A=e("code",null,"touch",-1),C=e("code",null,"/etc/subuid",-1),B=e("hr",null,null,-1),j=e("h2",{id:"basic-build",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#basic-build"},[e("span",null,"Basic Build")])],-1),I=e("p",null,"First declare what image you want to start with as a source. In this case, we will start with Red Hat Universal Base Image:",-1),R=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},"buildah from ubi8"),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1),N=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token comment"},'# Resolved "ubi8" as an alias (/etc/containers/registries.conf.d/001-rhel-shortnames.conf)')]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Trying to pull registry.access.redhat.com/ubi8:latest...")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Getting image source signatures")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Checking if image destination supports signatures")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Copying blob 6c53be4efe39 done  ")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Copying config e8e5725e8a done  ")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Writing manifest to image destination")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Storing signatures")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ubi8-working-container")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),M=e("p",null,'This will create a "reference" to what Buildah calls a "working container" - think of them as a starting point to attach mounts and commands. Check it out here:',-1),G=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},"buildah containers"),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1),O=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token comment"},"# CONTAINER ID  BUILDER  IMAGE ID     IMAGE NAME                       CONTAINER NAME")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# b44d8d9ffbf5     *     e8e5725e8af3 registry.access.redhat.com/ub... ubi8-working-container")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),E=r(`<p>Now, we can mount the image source. In effect, this will trigger the graph driver to do its magic, pull the image layers together, add a working copy-on-write layer, and mount it so that we can access it just like any directory on the system:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">buildah <span class="token function">mount</span> ubi8-working-container</span>
<span class="line"><span class="token comment"># /var/lib/containers/storage/overlay/75e1913298de0bbeeae41a0ff5934f54029718d0779c5cf99a0cd9cbc5db9aaf/merged</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, lets add a single file to the new container image layer. The Buildah mount command can be ran again to get access to the right directory:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;hello world&quot;</span> <span class="token operator">&gt;</span> <span class="token variable"><span class="token variable">$(</span>buildah <span class="token function">mount</span> ubi8-working-container<span class="token variable">)</span></span>/etc/hello.conf</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Lets analyze what we just did. It&#39;s super simple, but kind of mind bending if you come from using other container engines. First, list the directory in the copy-on-write layer:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">ls</span> <span class="token parameter variable">-alh</span> <span class="token variable"><span class="token variable">$(</span>buildah <span class="token function">mount</span> ubi8-working-container<span class="token variable">)</span></span>/etc/</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You should see <code>hello.conf</code> right there. Now, cat the file:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> <span class="token variable"><span class="token variable">$(</span>buildah <span class="token function">mount</span> ubi8-working-container<span class="token variable">)</span></span>/etc/hello.conf</span>
<span class="line"><span class="token comment"># hello world</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>You should see the text you expect. Now, lets commit this copy-on-write layer as a new image layer:</p>`,9),q=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},"buildah commit ubi8-working-container ubi8-hello"),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1),W=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token comment"},"# Getting image source signatures")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Copying blob b51194abfc91 skipped: already exists  ")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Copying blob ade74f4361f4 done  ")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Copying config a76d813d62 done  ")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Writing manifest to image destination")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Storing signatures")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# a76d813d62b333c22d5a47fd1a3ce5016424a2b5e7f698e92e42a2bb5ca9d613")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),D=e("p",null,"Now, we can see the new image layer in our local cache. We can view it with either Podman or Buildah (or CRI-O for that matter, they all use the same image store):",-1),P=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},"buildah images"),s(`
`),e("span",{class:"line"},[e("span",{class:"token function"},"podman"),s(" images")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),J=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token comment"},"# REPOSITORY                        TAG      IMAGE ID       CREATED          SIZE")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# localhost/ubi8-hello              latest   a76d813d62b3   27 seconds ago   215 MB")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# registry.access.redhat.com/ubi8   latest   e8e5725e8af3   6 weeks ago      215 MB")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),S=r(`<p>When we are done, we can clean up our environment quite nicely. The following command will delete references to &quot;working containers&quot; and completely remove their mounts:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">buildah delete <span class="token parameter variable">-a</span></span>
<span class="line"><span class="token comment"># b44d8d9ffbf58ce9555e1facc3a890aa69b9f551497eb33f180265ecc96871a6</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>But, we still have the new image layer just how we want it. This could be pushed to a registry server to be shared with others if we like:</p>`,3),U=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},"buildah images"),s(`
`),e("span",{class:"line"},[e("span",{class:"token function"},"podman"),s(" images")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),K=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token comment"},"# REPOSITORY                        TAG      IMAGE ID       CREATED          SIZE")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# localhost/ubi8-hello              latest   a76d813d62b3   27 seconds ago   215 MB")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# registry.access.redhat.com/ubi8   latest   e8e5725e8af3   6 weeks ago      215 MB")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),$=r(`<hr><h2 id="using-tools-outside-the-container" tabindex="-1"><a class="header-anchor" href="#using-tools-outside-the-container"><span>Using Tools Outside The Container</span></a></h2><p>Create a new working container, mount the image, and get a working copy-on-write layer:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token assign-left variable">WORKING_MOUNT</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>buildah <span class="token function">mount</span> <span class="token punctuation">$(</span>buildah from scratch<span class="token punctuation">)</span><span class="token variable">)</span></span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token variable">$WORKING_MOUNT</span></span>
<span class="line"><span class="token comment"># /var/lib/containers/storage/overlay/5d10a3ffb6e3c3350b7d16f8bb670103ef549cdf68ca780464ffb2b9cd98c781/merged</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Verify that there is nothing in the directory:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">ls</span> <span class="token parameter variable">-alh</span> <span class="token variable">$WORKING_MOUNT</span></span>
<span class="line"><span class="token comment"># total 0</span></span>
<span class="line"><span class="token comment"># dr-xr-xr-x. 1 root root  6 Aug  8 02:53 .</span></span>
<span class="line"><span class="token comment"># drwx------. 6 root root 69 Aug  8 02:53 ..</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, lets install some basic tools:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">yum <span class="token function">install</span> <span class="token parameter variable">--installroot</span> <span class="token variable">$WORKING_MOUNT</span> <span class="token function">bash</span> coreutils <span class="token parameter variable">--releasever</span> <span class="token number">8</span> <span class="token parameter variable">--setopt</span> <span class="token assign-left variable">install_weak_deps</span><span class="token operator">=</span>false <span class="token parameter variable">-y</span></span>
<span class="line">yum clean all <span class="token parameter variable">-y</span> <span class="token parameter variable">--installroot</span> <span class="token variable">$WORKING_MOUNT</span> <span class="token parameter variable">--releasever</span> <span class="token number">8</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Verify that some files have been added:</p>`,9),H=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"ls"),s(),e("span",{class:"token parameter variable"},"-alh"),s(),e("span",{class:"token variable"},"$WORKING_MOUNT")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1),V=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token comment"},"# total 4.0K")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# dr-xr-xr-x.  1 root root  224 Aug  8 02:56 .")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# drwx------.  6 root root   69 Aug  8 02:53 ..")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# lrwxrwxrwx.  1 root root    7 Jun 21  2021 bin -> usr/bin")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# dr-xr-xr-x.  2 root root    6 Jun 21  2021 boot")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# drwxr-xr-x.  2 root root   18 Aug  8 02:56 dev")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# drwxr-xr-x. 25 root root 4.0K Aug  8 02:57 etc")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# drwxr-xr-x.  2 root root    6 Jun 21  2021 home")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# lrwxrwxrwx.  1 root root    7 Jun 21  2021 lib -> usr/lib")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# lrwxrwxrwx.  1 root root    9 Jun 21  2021 lib64 -> usr/lib64")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# drwxr-xr-x.  2 root root    6 Jun 21  2021 media")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# drwxr-xr-x.  2 root root    6 Jun 21  2021 mnt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# drwxr-xr-x.  2 root root    6 Jun 21  2021 opt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# dr-xr-xr-x.  2 root root    6 Aug  8 02:56 proc")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# dr-xr-x---.  2 root root    6 Jun 21  2021 root")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# drwxr-xr-x.  3 root root   21 Aug  8 02:56 run")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# lrwxrwxrwx.  1 root root    8 Jun 21  2021 sbin -> usr/sbin")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# drwxr-xr-x.  2 root root    6 Jun 21  2021 srv")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# dr-xr-xr-x.  2 root root    6 Aug  8 02:56 sys")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# drwxrwxrwt.  2 root root    6 Jun 21  2021 tmp")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# drwxr-xr-x. 12 root root  144 Aug  8 02:56 usr")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# drwxr-xr-x. 18 root root  233 Aug  8 02:56 var")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),F=e("p",null,"Now, commit the copy-on-write layer as a new container image layer:",-1),Z=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},"buildah commit working-container minimal"),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1),L=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token comment"},"# Getting image source signatures")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Copying blob adb0e8b27e71 done  ")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Copying config c90b4f8954 done  ")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Writing manifest to image destination")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Storing signatures")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# c90b4f8954fb2d3b8a7badd43f08dadb68dfad3d85de5a9f62b536c203896e0a")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Y=r(`<p>Now, test the new image layer, by creating a container:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">podman</span> run <span class="token parameter variable">-it</span> minimal <span class="token function">bash</span></span>
<span class="line"><span class="token builtin class-name">exit</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Clean things up for our next experiment:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">buildah delete <span class="token parameter variable">-a</span></span>
<span class="line"><span class="token comment"># d2aaed4e880576eb15f5905179d10d3c3d69b1adff25a2b9d80a5369b9abf3b3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>We have just created a container image layer from scratch without ever installing RPM or YUM. This same pattern can be used to solve countless problems. Makefiles often have the option of specifying the output directory, etc. This can be used to build a C program without ever installing the C toolchain in a container image layer. This is best for production security where we don&#39;t want the build tools laying around in the container.</p><hr><h2 id="external-build-time-mounts" tabindex="-1"><a class="header-anchor" href="#external-build-time-mounts"><span>External Build Time Mounts</span></a></h2><p>As a final example, lets use a build time mount to show how we can pull data in. This will represent some sort of cached data that we are using outside of the container. This could be a repository of Ansible Playbooks, or even Database test data:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">mkdir</span> ~/data</span>
<span class="line"><span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=~</span>/data/test.bin <span class="token assign-left variable">bs</span><span class="token operator">=</span>1MB <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">100</span></span>
<span class="line"><span class="token comment"># 100+0 records in</span></span>
<span class="line"><span class="token comment"># 100+0 records out</span></span>
<span class="line"><span class="token comment"># 100000000 bytes (100 MB, 95 MiB) copied, 0.0360907 s, 2.8 GB/s</span></span>
<span class="line"><span class="token function">ls</span> <span class="token parameter variable">-alh</span> ~/data/test.bin</span>
<span class="line"><span class="token comment"># ls -alh ~/data/test.bin</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, lets fire up a working container:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">buildah from ubi8</span>
<span class="line"><span class="token comment"># ubi8-working-container</span></span>
<span class="line">buildah <span class="token function">mount</span> ubi8-working-container</span>
<span class="line"><span class="token comment"># /var/lib/containers/storage/overlay/3aeee0506cba19f116a97765b778e09ee3829bc61ad4e1ed45ad29c58b04347f/merged</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To consume the data within the container, we use the buildah-run subcommand. Notice that it takes the <code>-v</code> option just like &quot;run&quot; in Podman. We also use the <code>Z</code> option to relabel the data for SELinux. The <code>dd</code> command simply represents consuming some smaller portion of the data during the build process:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">buildah run <span class="token parameter variable">-v</span> ~/data:/data:Z ubi8-working-container <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/data/test.bin <span class="token assign-left variable">of</span><span class="token operator">=</span>/etc/small-test.bin <span class="token assign-left variable">bs</span><span class="token operator">=</span><span class="token number">100</span> <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">2</span></span>
<span class="line"><span class="token comment"># 2+0 records in</span></span>
<span class="line"><span class="token comment"># 2+0 records out</span></span>
<span class="line"><span class="token comment"># 200 bytes copied, 6.57e-05 s, 3.0 MB/s</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Commit the new image layer and clean things up:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">buildah commit ubi8-working-container ubi8-data</span>
<span class="line"><span class="token comment"># Getting image source signatures</span></span>
<span class="line"><span class="token comment"># Copying blob b51194abfc91 skipped: already exists  </span></span>
<span class="line"><span class="token comment"># Copying blob 495a8d09a9e1 done  </span></span>
<span class="line"><span class="token comment"># Copying config 9e2f87e78f done  </span></span>
<span class="line"><span class="token comment"># Writing manifest to image destination</span></span>
<span class="line"><span class="token comment"># Storing signatures</span></span>
<span class="line"><span class="token comment"># 9e2f87e78ff4cb488861bf182381ed81fef059d984141125c3bd84775ecf51eb</span></span>
<span class="line">buildah delete <span class="token parameter variable">-a</span></span>
<span class="line"><span class="token comment"># 757fe0f753ff90b359cc28ed4eae3a0b99c60cdb3e1e194350a661564988fcf3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Test it and note that we only kept the pieces of the data that we wanted. This is just an example, but imagine using this with a Makefile cache, or Ansible playbooks, or even a copy of production database data which needs to be used to test the image build or do a schema upgrade, which must be accessed during the image build process. There are tons of places where you need to access data, only at build time, but don&#39;t want it during production deployment:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">podman</span> run <span class="token parameter variable">-it</span> ubi8-data <span class="token function">ls</span> <span class="token parameter variable">-alh</span> /etc/small-test.bin</span>
<span class="line"><span class="token comment"># -rw-r--r--. 1 root root 200 Aug  8 03:01 /etc/small-test.bin</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="cleanup" tabindex="-1"><a class="header-anchor" href="#cleanup"><span>Cleanup</span></a></h2><p>Exit the user namespace:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">exit</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="conclusion" tabindex="-1"><a class="header-anchor" href="#conclusion"><span>Conclusion</span></a></h2><p>Now, you have a pretty good understanding of the cases where Buildah really shines. You can start from scratch, or use an existing image, use tools installed on the container host (not in the container image), and move data around as needed. This is a very flexible tool that should fit quite nicely in your tool belt. Buildah lets you script builds with any language you want, and build tiny images with only the bare minimum of utilities needed inside the image.</p><p>Now, lets move on to sharing containers with Skopeo...</p><hr>`,26);function z(d,Q){const o=c("router-link"),u=c("VPCard"),p=c("FontIcon"),l=c("Tabs");return k(),h("div",null,[e("h1",y,[e("a",w,[e("span",null,b(d.$frontmatter.title)+" 관련",1)])]),e("nav",x,[e("ul",null,[e("li",null,[i(o,{to:"#prep-work"},{default:n(()=>[s("Prep Work")]),_:1})]),e("li",null,[i(o,{to:"#basic-build"},{default:n(()=>[s("Basic Build")]),_:1})]),e("li",null,[i(o,{to:"#using-tools-outside-the-container"},{default:n(()=>[s("Using Tools Outside The Container")]),_:1})]),e("li",null,[i(o,{to:"#external-build-time-mounts"},{default:n(()=>[s("External Build Time Mounts")]),_:1})]),e("li",null,[i(o,{to:"#cleanup"},{default:n(()=>[s("Cleanup")]),_:1})]),e("li",null,[i(o,{to:"#conclusion"},{default:n(()=>[s("Conclusion")]),_:1})])])]),_,i(u,v(g({title:"Red Hat Container Tools",desc:"Intro",link:"https://developers.redhat.com/courses/devops-red-hat-container-tools",logo:"https://developers.redhat.com/themes/custom/rhdp2/images/branding/2023_RHDLogo_black_text.svg",background:"rgba(255,255,255,0.2)"})),null,16),T,e("p",null,[s("The "),A,s(" command fails because you're not actually root. Really, the touch command executed as an arbitrary user ID in your "),i(p,{icon:"fas fa-folder-open"}),C,s(" range. Let that sink in. Linux containers are mind bending. OK, let's do something useful.")]),B,j,I,i(l,{id:"49",data:[{id:"sh"},{id:"result"},{id:"sh"},{id:"result"}],active:0},{title0:n(({value:a,isActive:t})=>[s("sh")]),title1:n(({value:a,isActive:t})=>[s("result")]),title2:n(({value:a,isActive:t})=>[s("sh")]),title3:n(({value:a,isActive:t})=>[s("result")]),tab0:n(({value:a,isActive:t})=>[R]),tab1:n(({value:a,isActive:t})=>[N,M,i(l,{id:"58",data:[]})]),tab2:n(({value:a,isActive:t})=>[G]),tab3:n(({value:a,isActive:t})=>[O]),_:1}),E,i(l,{id:"87",data:[{id:"sh"},{id:"result"}],active:0},{title0:n(({value:a,isActive:t})=>[s("sh")]),title1:n(({value:a,isActive:t})=>[s("result")]),tab0:n(({value:a,isActive:t})=>[q]),tab1:n(({value:a,isActive:t})=>[W]),_:1}),D,i(l,{id:"98",data:[{id:"sh"},{id:"result"}],active:0},{title0:n(({value:a,isActive:t})=>[s("sh")]),title1:n(({value:a,isActive:t})=>[s("result")]),tab0:n(({value:a,isActive:t})=>[P]),tab1:n(({value:a,isActive:t})=>[J]),_:1}),S,i(l,{id:"113",data:[{id:"sh"},{id:"result"}],active:0},{title0:n(({value:a,isActive:t})=>[s("sh")]),title1:n(({value:a,isActive:t})=>[s("result")]),tab0:n(({value:a,isActive:t})=>[U]),tab1:n(({value:a,isActive:t})=>[K]),_:1}),$,i(l,{id:"140",data:[{id:"sh"},{id:"result"}],active:0},{title0:n(({value:a,isActive:t})=>[s("sh")]),title1:n(({value:a,isActive:t})=>[s("result")]),tab0:n(({value:a,isActive:t})=>[H]),tab1:n(({value:a,isActive:t})=>[V]),_:1}),F,i(l,{id:"151",data:[{id:"sh"},{id:"result"}],active:0},{title0:n(({value:a,isActive:t})=>[s("sh")]),title1:n(({value:a,isActive:t})=>[s("result")]),tab0:n(({value:a,isActive:t})=>[Z]),tab1:n(({value:a,isActive:t})=>[L]),_:1}),Y])}const se=m(f,[["render",z],["__file","04.html.vue"]]),ne=JSON.parse('{"path":"/devops/red-hat-container-tools/04.html","title":"4. Buildah - Granularity & Control","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"4. Buildah - Granularity & Control","description":"Red Hat Container Tools > 4. Buildah - Granularity & Control","category":["RedHat"],"tag":["crashcourse","redhat","buildah","podman","skopeo","sesearch","semodule"],"head":[[{"meta":null},{"property":"og:title","content":"Red Hat Container Tools > 4. Buildah - Granularity & Control"},{"property":"og:description","content":"4. Buildah - Granularity & Control"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/devops/red-hat-container-tools/04.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/devops/red-hat-container-tools/04.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"4. Buildah - Granularity & Control"}],["meta",{"property":"og:description","content":"Red Hat Container Tools > 4. Buildah - Granularity & Control"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"redhat"}],["meta",{"property":"article:tag","content":"buildah"}],["meta",{"property":"article:tag","content":"podman"}],["meta",{"property":"article:tag","content":"skopeo"}],["meta",{"property":"article:tag","content":"sesearch"}],["meta",{"property":"article:tag","content":"semodule"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4. Buildah - Granularity & Control\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Prep Work","slug":"prep-work","link":"#prep-work","children":[]},{"level":2,"title":"Basic Build","slug":"basic-build","link":"#basic-build","children":[]},{"level":2,"title":"Using Tools Outside The Container","slug":"using-tools-outside-the-container","link":"#using-tools-outside-the-container","children":[]},{"level":2,"title":"External Build Time Mounts","slug":"external-build-time-mounts","link":"#external-build-time-mounts","children":[]},{"level":2,"title":"Cleanup","slug":"cleanup","link":"#cleanup","children":[]},{"level":2,"title":"Conclusion","slug":"conclusion","link":"#conclusion","children":[]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":8}]},"readingTime":{"minutes":7.19,"words":2157},"filePathRelative":"devops/red-hat-container-tools/04.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{se as comp,ne as data};
