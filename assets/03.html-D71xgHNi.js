import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,a as n,t as g,b as p,w as a,n as v,g as h,d as s,e as o,r as c,o as b}from"./app-U_bew1in.js";const y={},_={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},P=n("hr",null,null,-1),T=o(`<p>이번 챕터에서는 가장 중요한 시간(<code>time</code>) 데이터를 다루는 다양한 방법을 배울 것입니다. 시간 데이터를 때로는 시계열 데이터라고도 부릅니다. 시계열 데이터를 가장 자주 접하는 곳은 단연 금융권입니다.</p><p>따라서 시간 데이터를 능숙하게 다룰 수 있도록 파이썬 패키지인 데이트타임(<code>datetime</code>), 넘파이(<code>numpy</code>), 판다스(<code>pandas</code>)에서 시간을 어떻게 다루는지 살펴봅니다.</p><p>여기서 언급하고 있는 3개의 패키지는 데이터 분석에서 굉장히 중요한 패키지이기 때문에 여러분들이 패키지 이름, 패키지가 하는 역할에 대해서만큼은 꼭 암기를 해주시면 좋겠습니다.</p><p>패키지의 세부적인 기능은 잘 기억 안나도 괜찮아요. 필요할 때마다 찾아보면 되니까요. 그런데, 이런 기능을 수행하는 패키지가 무엇이었는지는 기억을 해야 다음에 찾아보기 때문에 패키지 이름을 암기하라는 것입니다.</p><hr><h2 id="_01-datetime" tabindex="-1"><a class="header-anchor" href="#_01-datetime"><span>01. <code>datetime</code></span></a></h2><p>날짜와 시간 관련 함수는 시계열 데이터를 다루는 다양한 상황에서 사용됩니다. 스트링(String) 타입의 문자를 날짜 형태 포맷(<code>format</code>)으로 바꾸거나 시간 단위 변경, 시각화 등에 응용할 수 있습니다. 파이썬 표준 패키지인 <code>datetime</code>에 대해서 알아봅시다.</p><p><code>datetime</code>에는 <code>time</code>, <code>date</code>, <code>datetime</code>, <code>timedelta</code> 외에도 여러 기능이 있습니다.</p><details class="hint-container details"><summary>time</summary><p>시간 기능만 제공합니다, 시, 분, 초, 마이크로초</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">datetime<span class="token punctuation">.</span>time<span class="token punctuation">(</span>hour<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> minute<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> second<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> microsecond<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>date</summary><p>날짜 기능만 제공합니다. 연, 월, 일</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span>year<span class="token operator">=</span><span class="token number">2019</span><span class="token punctuation">,</span> month<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> day<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>datetime</summary><p>날짜와 시간 기능을 제공합니다. - date + time</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span>year<span class="token operator">=</span><span class="token number">2019</span><span class="token punctuation">,</span> month<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> day<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">,</span> hour<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> minute<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> second<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> microsecond<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><details class="hint-container details"><summary>timedelta</summary><p><code>datetime</code> 인스턴스 간의 차이를 구함</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">(</span>year<span class="token operator">=</span><span class="token number">2019</span><span class="token punctuation">,</span> month<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> day<span class="token operator">=</span><span class="token number">24</span><span class="token punctuation">,</span> hour<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> minute<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> second<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> microsecond<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></details><p>실제 분석에서 날짜와 시간은 문자열 타입으로 주어지는 경우가 많습니다. 따라서 자유롭게 데이터 타입을 변환하는 방법을 익혀야 합니다. 다음 설명을 보면서 날짜 변환(<code>conversion</code>)에 대해서 알아봅시다. 먼저 <code>str</code> 타입의 문자를 <code>datetime</code> 형식으로 바꾸는 방법을 살펴봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> datetime</span>
<span class="line">datetime_str <span class="token operator">=</span> <span class="token string">&#39;2018-05-13 12:34:56&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>strptime()</code> 함수에 datetime_str 변수와 형식을 매개변수로 전달합니다. 우리가 입력한 <code>str</code> 타입의 날짜와 날짜를 표현하는 형식을 <code>strtime()</code> 함수에 전달한 것입니다. 함수의 결과를 보니, <code>str</code> 타입의 문자가 <code>datetime</code> 타입으로 변환한 것을 알 수 있습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token builtin">format</span> <span class="token operator">=</span> <span class="token string">&#39;%Y-%m-%d %H:%M:%S&#39;</span> </span>
<span class="line">datetime_dt <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>datetime_str<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>datetime_dt<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>datetime_dt<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이번에는 반대로 <code>datetime</code>을 <code>str</code>타입의 문자로 변환할 수 있는지 확인해봅시다. <code>datetime_dt</code>는 우리가 앞서 확인했듯이 현재 <code>datetime</code> 타입입니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">datetime_str <span class="token operator">=</span> datetime_dt<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&#39;%Y-%m-%d %H:%M:%S&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>datetime_str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># &lt;class &#39;str&#39;&gt;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>datetime_str<span class="token punctuation">)</span>       <span class="token comment"># 2018-08-24 18:00:25</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># &lt;class &#39;str&#39;&gt;</span></span>
<span class="line"><span class="token comment"># 2018-05-13 12:34:56</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위에서 <code>strptime()</code> 함수를 호출할 때 변환된 <code>datetime_dt</code>에서 <code>strftime()</code> 함수를 호출한 것을 알 수 있습니다. 함수 매개변수에는 변환하려는 날짜, 시간 형식을 전달한다. 결과를 보니, <code>str</code> 타입으로 변환된 것과 우리가 전달한 형식에 맞게 값이 나온 것을 확인할 수 있습니다. 또 다른 형식으로 변경하려면 다음과 같이 수정해서 전달하면 됩니다. 이번에는 분, 초를 제외하고 시간까지만 출력을 해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">datetime_str <span class="token operator">=</span> datetime_dt<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&#39;%Y-%m-%d %H&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>datetime_str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># &lt;class &#39;str&#39;&gt;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>datetime_str<span class="token punctuation">)</span>       <span class="token comment"># 2018-08-24 18:00:25</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># &lt;class &#39;str&#39;&gt;</span></span>
<span class="line"><span class="token comment"># 2018-05-13 12</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>시간까지만 출력이 된 것을 확인할 수 있습니다. 이번에는 년도와 달까지만 출력을 해보겠습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">datetime_str <span class="token operator">=</span> datetime_dt<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&#39;%Y-%m&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>datetime_str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># &lt;class &#39;str&#39;&gt;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>datetime_str<span class="token punctuation">)</span>       <span class="token comment"># 2018-08-24 18:00:25</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># &lt;class &#39;str&#39;&gt;</span></span>
<span class="line"><span class="token comment"># 2018-05</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>정리하면 <code>&#39;%Y-%m-%d %H&#39;</code> 형식을 전달하면 연-월-일-시 형식으로 출력되고, <code>&#39;%Y-%m&#39;</code>을 전달하면 연-월만 출력됩니다.</p><p><code>strptime()</code> 함수와 <code>strftime()</code> 함수는 서로 반대되는 기능을 가지고 있습니다. String을 <code>datetime</code>으로 변환할 때는 <code>strptime()</code> 함수를 사용하고, 그 반대의 경우에는 <code>strftime()</code> 함수를 사용합니다.</p><ul><li><code>strptime()</code> : <code>str</code> 타입으로 된 날짜 데이터를 <code>datetime</code> 형태로 변환</li><li><code>strftime()</code> : <code>datetime</code> 형태의 데이터를 <code>str</code> 타입으로 변환 주의해야 할 점은 우리가 형식을 정의할 때 지정한 형식이 대소문자를 구분하므로 형식을 맞추거나 정확한 날짜를 표현해야 합니다.</li></ul><p>아래 링크로 이동하신 다음에 아래 링크에서 제공되는 자료의 표 47-4를 참고하세요. 암기하실 필요는 없고 필요할 때 찾아보시면 됩니다.</p><blockquote><p>📚참고자료: <a href="https://dojang.io/mod/page/view.php?id=2463" target="_blank" rel="noopener noreferrer">https://dojang.io/mod/page/view.php?id=2463</a></p></blockquote><hr><h2 id="_02-날짜와-시간을-다루는-넘파이-numpy" tabindex="-1"><a class="header-anchor" href="#_02-날짜와-시간을-다루는-넘파이-numpy"><span>02. 날짜와 시간을 다루는 넘파이(<code>Numpy</code>)</span></a></h2><p>객체라는 표현이 종종 나올 수 있습니다. 객체라는 표현에 익숙하지 않으시다면 아래 참고 자료를 참고하세요.</p><blockquote><p>📚참고자료: <a href="https://wikidocs.net/28" target="_blank" rel="noopener noreferrer">클래스와 객체</a></p></blockquote><p>넘파이에서는 날짜와 시간을 <code>datetime64</code> 객체로 표현합니다. 넘파이의 <code>datetime64</code>와 파이썬의 <code>datetime.datetime</code>과 차이점은 <code>datetime</code>에서는 시간을 마이크로초(10^-6) 단위까지 관리한다면, 넘파이의 <code>datetime64</code>는 아토초(10^-18) 단위까지 관리한다는 것입니다.</p><p>넘파이의 날짜와 시간을 이해해야 하는 가장 중용한 이유는 우리가 궁극적으로 사용할 판다스의 날짜와 시간 함수가 넘파이를 기반으로 만들어졌기 때문입니다. 그럼 넘파이의 날짜와 시간 사용 예제를 살펴봅시다.</p><h3 id="datetime64" tabindex="-1"><a class="header-anchor" href="#datetime64"><span><code>datetime64</code></span></a></h3><p>Numpy 객체를 이용해 날짜를 생성하는 방식에는 두 가지 방식이 있습니다. 첫번째는 아래와 같이 문자열 형식으로 전달해서 생성하는 방법입니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line">np<span class="token punctuation">.</span>datetime64<span class="token punctuation">(</span><span class="token string">&#39;2019-01-01&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>두번째는 아래와 같이 유닉스 시간을 이용한 방식입니다. 첫번째 입력 매개변수는 수치 데이터, 그리고 두번째 입력 매개변수는 단위를 의미합니다. &#39;ns&#39;는 나노초 단위, &#39;D&#39;는 일 단위, &#39;s&#39;는 초 단위를 의미합니다. 출력 결과는 단위에 따라서 각기 다른 종류의 날짜가 만들어집니다.</p>`,37),w=n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(" numpy "),n("span",{class:"token keyword"},"as"),s(" np")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# 나노초 단위")]),s(`
`),n("span",{class:"line"},[s("np"),n("span",{class:"token punctuation"},"."),s("datetime64"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1000"),n("span",{class:"token punctuation"},","),n("span",{class:"token string"},"'ns'"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("numpy"),n("span",{class:"token punctuation"},"."),s("datetime64"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'1970-01-01T00:00:00.000001000'"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),D=n("p",null,"이번에는 동일하게 나노초 단위로 하되 수치를 바꿔보겠습니다.",-1),A=n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("np"),n("span",{class:"token punctuation"},"."),s("datetime64"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"10000000000"),n("span",{class:"token punctuation"},","),n("span",{class:"token string"},"'ns'"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("numpy"),n("span",{class:"token punctuation"},"."),s("datetime64"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'1970-01-01T00:00:10.000000000'"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=n("p",null,"초 단위로 출력해봅시다.",-1),z=n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("np"),n("span",{class:"token punctuation"},"."),s("datetime64"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1000000000"),n("span",{class:"token punctuation"},","),n("span",{class:"token string"},"'s'"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("numpy"),n("span",{class:"token punctuation"},"."),s("datetime64"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'2001-09-09T01:46:40'"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),S=n("p",null,"일 단위로 출력해봅시다.",-1),R=n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("np"),n("span",{class:"token punctuation"},"."),s("datetime64"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"10000"),n("span",{class:"token punctuation"},","),n("span",{class:"token string"},"'D'"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("numpy"),n("span",{class:"token punctuation"},"."),s("datetime64"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'1997-05-19'"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=o(`<h3 id="array" tabindex="-1"><a class="header-anchor" href="#array"><span><code>array()</code></span></a></h3><p>Numpy의 <code>array()</code> 함수를 사용해서도 날짜를 생성할 수 있습니다. <code>np.array()</code> 함수에 <code>str</code> 타입의 날짜 리스트를 전달하고, <code>dtype</code>(데이터 타입)을 &#39;<code>datetime64</code>&#39;로 설정했습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;2007-07-13&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2006-01-13&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2010-08-13&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">&#39;datetime64&#39;</span><span class="token punctuation">)</span></span>
<span class="line">array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;2007-07-13&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2006-01-13&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2010-08-13&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">&#39;datetime64[D]&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>이때 <code>dtype</code>에서 <code>datetime64</code>를 적어주실 때, <code>[ ]</code>안에 어떤 값을 넣느냐에 따라서 날짜 단위를 지정할 수도 있습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 달단위</span></span>
<span class="line">np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;2007-07-13&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2006-01-13&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2010-08-13&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">&#39;datetime64[M]&#39;</span><span class="token punctuation">)</span></span>
<span class="line">array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;2007-07&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2006-01&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2010-08&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">&#39;datetime64[M]&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arange" tabindex="-1"><a class="header-anchor" href="#arange"><span><code>arange()</code></span></a></h3><p><code>arange()</code> 함수를 사용해서 범위를 줄 수도 있습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 달단위</span></span>
<span class="line">np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token string">&#39;2005-02&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2006-03&#39;</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">&#39;datetime64[M]&#39;</span><span class="token punctuation">)</span></span>
<span class="line">array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;2005-02&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-03&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-04&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-05&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-06&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-07&#39;</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token string">&#39;2005-08&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-09&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-10&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-11&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-12&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2006-01&#39;</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token string">&#39;2006-02&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">&#39;datetime64[M]&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 주단위</span></span>
<span class="line">np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token string">&#39;2005-02&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2006-03&#39;</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">&#39;datetime64[W]&#39;</span><span class="token punctuation">)</span></span>
<span class="line">array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;2005-01-27&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-03&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-10&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-17&#39;</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token string">&#39;2005-02-24&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-03-03&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-03-10&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-03-17&#39;</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token string">&#39;2005-03-24&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-03-31&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-04-07&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-04-14&#39;</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token string">&#39;2005-04-21&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-04-28&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-05-05&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-05-12&#39;</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token string">&#39;2005-05-19&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-05-26&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-06-02&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-06-09&#39;</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token string">&#39;2005-06-16&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-06-23&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-06-30&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-07-07&#39;</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token string">&#39;2005-07-14&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-07-21&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-07-28&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-08-04&#39;</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token string">&#39;2005-08-11&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-08-18&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-08-25&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-09-01&#39;</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token string">&#39;2005-09-08&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-09-15&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-09-22&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-09-29&#39;</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token string">&#39;2005-10-06&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-10-13&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-10-20&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-10-27&#39;</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token string">&#39;2005-11-03&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-11-10&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-11-17&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-11-24&#39;</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token string">&#39;2005-12-01&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-12-08&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-12-15&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-12-22&#39;</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token string">&#39;2005-12-29&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2006-01-05&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2006-01-12&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2006-01-19&#39;</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token string">&#39;2006-01-26&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2006-02-02&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2006-02-09&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2006-02-16&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      dtype<span class="token operator">=</span><span class="token string">&#39;datetime64[W]&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 일단위</span></span>
<span class="line">np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token string">&#39;2005-02&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-03&#39;</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">&#39;datetime64[D]&#39;</span><span class="token punctuation">)</span></span>
<span class="line">array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;2005-02-01&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-02&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-03&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-04&#39;</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token string">&#39;2005-02-05&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-06&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-07&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-08&#39;</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token string">&#39;2005-02-09&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-10&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-11&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-12&#39;</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token string">&#39;2005-02-13&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-14&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-15&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-16&#39;</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token string">&#39;2005-02-17&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-18&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-19&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-20&#39;</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token string">&#39;2005-02-21&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-22&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-23&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-24&#39;</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token string">&#39;2005-02-25&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-26&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-27&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-28&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      dtype<span class="token operator">=</span><span class="token string">&#39;datetime64[D]&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 시간단위</span></span>
<span class="line">np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token string">&#39;2005-02-01&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-02&#39;</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">&#39;datetime64[h]&#39;</span><span class="token punctuation">)</span></span>
<span class="line">array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;2005-02-01T00&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-01T01&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-01T02&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-01T03&#39;</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token string">&#39;2005-02-01T04&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-01T05&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-01T06&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-01T07&#39;</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token string">&#39;2005-02-01T08&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-01T09&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-01T10&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-01T11&#39;</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token string">&#39;2005-02-01T12&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-01T13&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-01T14&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-01T15&#39;</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token string">&#39;2005-02-01T16&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-01T17&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-01T18&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-01T19&#39;</span><span class="token punctuation">,</span></span>
<span class="line">       <span class="token string">&#39;2005-02-01T20&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-01T21&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-01T22&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2005-02-01T23&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      dtype<span class="token operator">=</span><span class="token string">&#39;datetime64[h]&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="datetime64을-이용한-날짜-차이-구하기" tabindex="-1"><a class="header-anchor" href="#datetime64을-이용한-날짜-차이-구하기"><span><code>datetime64</code>을 이용한 날짜 차이 구하기</span></a></h3><p>각각 날짜를 생성할 때 어떤 단위를 전달하는지에 따라서 생성되는 범위가 달라집니다. 두 날짜의 간격을 구할 때는 단순하게 빼주면 됩니다. 직관적인 날짜 간격을 구하기 쉽습니다. 날짜 간격을 구해봅시다. 2009년 1월 1일과 2008년 1월을 넣어봤습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">np<span class="token punctuation">.</span>datetime64<span class="token punctuation">(</span><span class="token string">&#39;2009-01-01&#39;</span><span class="token punctuation">)</span> <span class="token operator">-</span> np<span class="token punctuation">.</span>datetime64<span class="token punctuation">(</span><span class="token string">&#39;2008-01&#39;</span><span class="token punctuation">)</span></span>
<span class="line">numpy<span class="token punctuation">.</span>timedelta64<span class="token punctuation">(</span><span class="token number">366</span><span class="token punctuation">,</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>366이라는 숫자가 나옵니다. 2009년 1월 1일은 단위가 일(day)이고, 2008년 1월은 단위가 월(month)인데 어떤 기준으로 366이 나온 것일까요? 이번에는 2009년 1월 1일과 2008년 1월 1일을 넣어봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">np<span class="token punctuation">.</span>datetime64<span class="token punctuation">(</span><span class="token string">&#39;2009-01-01&#39;</span><span class="token punctuation">)</span> <span class="token operator">-</span> np<span class="token punctuation">.</span>datetime64<span class="token punctuation">(</span><span class="token string">&#39;2008-01-01&#39;</span><span class="token punctuation">)</span></span>
<span class="line">numpy<span class="token punctuation">.</span>timedelta64<span class="token punctuation">(</span><span class="token number">366</span><span class="token punctuation">,</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>동일한 결과가 나옵니다. 다시 말해 위에서 2008년 1월을 했을 때 자동으로 2008년 1월 1일로 인식하여 366일의 차이가 나온 것이라고 추정해볼 수 있습니다. 이번에는 2009년과 2008년 1월의 차이를 구해봅시다. 2009년은 연(year)이고, 2008년 1월은 월(month) 단위인데 어떤 결과가 나올까요?</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">np<span class="token punctuation">.</span>datetime64<span class="token punctuation">(</span><span class="token string">&#39;2009&#39;</span><span class="token punctuation">)</span> <span class="token operator">-</span> np<span class="token punctuation">.</span>datetime64<span class="token punctuation">(</span><span class="token string">&#39;2008-01&#39;</span><span class="token punctuation">)</span></span>
<span class="line">numpy<span class="token punctuation">.</span>timedelta64<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">&#39;M&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>12라는 숫자가 나옵니다. 추측컨대, 2009년 1월과 2008년 1월의 차이가 12개월이라는 의미인 것 같습니다. 위의 결과를 확인해보니, 날짜 간격을 구할 때 두 날짜 중 작은 단위 날짜로 맞춘다는 것을 확인할 수 있습니다. 사실 위의 출력 결과에서 &#39;D&#39;와 &#39;M&#39;은 연산이 수행된 단위를 의미합니다. 각각이 의미하는 단위는 다음과 같습니다.</p><ul><li><code>Y</code>: 연</li><li><code>M</code>: 월</li><li><code>W</code>: 주</li><li><code>D</code>: 일</li><li><code>h</code>: 시간</li><li><code>m</code>: 분</li><li><code>s</code>: 초</li><li><code>ms</code>: 밀리초</li><li><code>us</code>: 마이크로초</li><li><code>ns</code>: 나노초</li><li><code>ps</code>: 피코초</li><li><code>fs</code>: 펨토초</li></ul><p>위에서 살펴본 단위 코드는 날짜 형식을 다룰 때 적용되는 단위입니다. 위 정리를 통해서 두 날짜 간 간격이 일 단위 간격인지, 월 단위 간격인지 등을 확인할 수 있습니다. 월(M)과 분(m)은 대소문자를 구분하므로 주의해 사용합시다. 이외에 넘파이에서 제공하는 세부적인 기능도 많지만, 여기서는 이 정도만 알아보고 판다스로 넘어가도록 하겠습니다.</p><hr><h2 id="_03-날짜와-시간을-다루는-판다스-pandas" tabindex="-1"><a class="header-anchor" href="#_03-날짜와-시간을-다루는-판다스-pandas"><span>03. 날짜와 시간을 다루는 판다스(Pandas)</span></a></h2><p>판다스는 테이블 데이터 및 시계열 데이터 구조를 조작하는 탁월한 기능을 제공하는 라이브러리입니다. 판다스는 내부적으로 넘파이를 포함하고 있어 날짜와 시간 관련 기능도 <code>datetime64</code>를 바탕으로 이루어지고 있습니다. 판다스만 잘 활용해도 짧은 코드로 강력한 기능을 구사할 수 있습니다.</p><p>대표적인 기능으로 날짜 범위 생성, 날짜 변환, 날짜 이동 등이 있습니다. 또한 <code>DataFrame</code> 객체의 인덱싱 기능은 데이터 필터링, 인덱싱, 피벗팅, 정렬, 슬라이싱 등 다양하게 활용이 가능합니다. 여기서는 판다스의 날짜와 시간 관련 기능을 살펴보겠습니다.</p><h3 id="timestamp와-datetimeindex" tabindex="-1"><a class="header-anchor" href="#timestamp와-datetimeindex"><span><code>Timestamp</code>와 <code>DatetimeIndex</code></span></a></h3><ul><li><code>pd.Timestamp()</code></li><li><code>pd.to_datetime()</code></li><li><code>pd.date_range()</code></li></ul><p>판다스에서 하나의 날짜만 사용할 때는 <code>Timestamp</code>로 표현하고 두 개 이상의 배열을 이룰 때는 <code>DatetimeIndex</code>로 표현합니다. 어떤 의미인지 실습을 통해 이해해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>판다스의 <code>Timestamp</code> 함수를 사용하여 특정 날짜를 표현할 수 있습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">pd<span class="token punctuation">.</span>Timestamp<span class="token punctuation">(</span><span class="token number">1239.1238934</span><span class="token punctuation">)</span> <span class="token comment"># 디폴트로는 나노초로 되어져 있습니다.</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># Timestamp(&#39;1970-01-01 00:00:00.000001239&#39;)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>단위를 &#39;일&#39;로 바꿔서 실행해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">pd<span class="token punctuation">.</span>Timestamp<span class="token punctuation">(</span><span class="token number">1239.1238934</span><span class="token punctuation">,</span> unit<span class="token operator">=</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span> <span class="token comment"># Timestamp(&#39;1973-05-24 02:58:24.389760&#39;)</span></span>
<span class="line">pd<span class="token punctuation">.</span>Timestamp<span class="token punctuation">(</span><span class="token string">&#39;2019-1-1&#39;</span><span class="token punctuation">)</span>             <span class="token comment"># Timestamp(&#39;2019-01-01 00:00:00&#39;)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Timestamp()</code> 함수는 특정 시점을 나타내는 날짜와 시간을 표현합니다. 판다스에서도 <code>Timestamp</code> 함수에 수치 데이터를 전달하고 unit(단위) 값을 매개변수로 넘기면 넘파이에서 살펴본 유닉스 시간을 이용한 방식임을 알 수 있습니다. UTC 시간 &#39;1970년 1월 1일 00:00:00&#39;부터 현재까지 경과 시간을 초 단위로 환산해 나타낸 방식입니다.</p><p><code>to_datetime()</code> 함수로도 특정 시점 날짜와 시간을 생성할 수 있습니다. 한 개의 날짜만 생성하는 경우, 호출하는 함수는 다르지만 내부적으로 넘파이에서 datetime64를 통해 날짜를 만드는 것과 같습니다. 판다스 내부적으로 넘파이가 동작한다는 내용을 이런 출력 결과로 확인할 수 있습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span><span class="token string">&#39;2019-1-1 12&#39;</span><span class="token punctuation">)</span></span>
<span class="line">Timestamp<span class="token punctuation">(</span><span class="token string">&#39;2019-01-01 12:00:00&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>하지만 to_datetime()에 날짜들의 리스트를 넣을 경우 범위. 즉, DatetimeIndex를 표현하게 됩니다. DatetimeIndex라는 클래스로 배열이 생기고 데이터 타입이 datetime64[ns]로 표현되는 것을 확인할 수 있습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;2018-1-1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-1-2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;2018-01-01&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-02&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">&#39;datetime64[ns]&#39;</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>마지막으로, date_range() 함수는 특정 기간의 날짜를 자동 생성합니다. &#39;2019-01&#39;과 &#39;2019-02&#39;를 전달하면 출력 결과는 2월 말까지 데이터를 생성하는 것이 아니라 2월 1일자 데이터만 생성합니다. 간단하게 생각하면, 둘째 인자로 전달한 값의 월은 고려하지 않는다는 것입니다. 추후 데이터를 생성하거나 가공할 때 주의가 필요한 대목입니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">pd<span class="token punctuation">.</span>date_range<span class="token punctuation">(</span><span class="token string">&#39;2019-01&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2019-02&#39;</span><span class="token punctuation">)</span></span>
<span class="line">DatetimeIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;2019-01-01&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-02&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-03&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-04&#39;</span><span class="token punctuation">,</span></span>
<span class="line">               <span class="token string">&#39;2019-01-05&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-06&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-07&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-08&#39;</span><span class="token punctuation">,</span></span>
<span class="line">               <span class="token string">&#39;2019-01-09&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-10&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-11&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-12&#39;</span><span class="token punctuation">,</span></span>
<span class="line">               <span class="token string">&#39;2019-01-13&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-14&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-15&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-16&#39;</span><span class="token punctuation">,</span></span>
<span class="line">               <span class="token string">&#39;2019-01-17&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-18&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-19&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-20&#39;</span><span class="token punctuation">,</span></span>
<span class="line">               <span class="token string">&#39;2019-01-21&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-22&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-23&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-24&#39;</span><span class="token punctuation">,</span></span>
<span class="line">               <span class="token string">&#39;2019-01-25&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-26&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-27&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-28&#39;</span><span class="token punctuation">,</span></span>
<span class="line">               <span class="token string">&#39;2019-01-29&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-30&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-31&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-02-01&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">              dtype<span class="token operator">=</span><span class="token string">&#39;datetime64[ns]&#39;</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="period와-periodindex" tabindex="-1"><a class="header-anchor" href="#period와-periodindex"><span><code>Period</code>와 <code>PeriodIndex</code></span></a></h3><ul><li><code>pd.Period()</code></li><li><code>pd.period_range()</code> 이번에는 <code>Period</code>와 <code>PeriodIndex</code>에 대해서 이해해봅시다. 이를 생성하는 방법은 <code>Period</code> 함수와 <code>period_range</code> 함수가 있습니다.</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">pd<span class="token punctuation">.</span>Period<span class="token punctuation">(</span><span class="token string">&#39;2019-01&#39;</span><span class="token punctuation">)</span></span>
<span class="line">Period<span class="token punctuation">(</span><span class="token string">&#39;2019-01&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;M&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>이번에 배우는 <code>Period</code>와 <code>PeriodIndex</code>는 특정 시점이 아니라 기간을 포괄하는 개념입니다. 그래서 freq 인자를 사용할 수 있습니다. <code>pd.Period()</code>를 사용해 &#39;2019-01&#39;을 넣을 때 출력값이 기본적으로는 월 단위(<code>freq=&#39;M&#39;</code>)으로 인식됩니다. 하지만 매개변수 <code>freq</code>를 일간. 즉, <code>daily</code>를 뜻하는 <code>&#39;D&#39;</code>로 설정하면 일 단위로 자동 생성되고 &#39;2019-01&#39;과는 달리 &#39;2019-05-01&#39;처럼 1일자까지 붙는 것을 확인할 수 있습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">pd<span class="token punctuation">.</span>Period<span class="token punctuation">(</span><span class="token string">&#39;2019-05&#39;</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span></span>
<span class="line">Period<span class="token punctuation">(</span><span class="token string">&#39;2019-05-01&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>그리고 str 타입의 두 개 이상 날짜 데이터를 전달하면 PeriodIndex 클래스로 묶입니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">pd<span class="token punctuation">.</span>period_range<span class="token punctuation">(</span><span class="token string">&#39;2019-01&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2019-02&#39;</span><span class="token punctuation">,</span>freq<span class="token operator">=</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span></span>
<span class="line">PeriodIndex<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;2019-01-01&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-02&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-03&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-04&#39;</span><span class="token punctuation">,</span></span>
<span class="line">             <span class="token string">&#39;2019-01-05&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-06&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-07&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-08&#39;</span><span class="token punctuation">,</span></span>
<span class="line">             <span class="token string">&#39;2019-01-09&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-10&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-11&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-12&#39;</span><span class="token punctuation">,</span></span>
<span class="line">             <span class="token string">&#39;2019-01-13&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-14&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-15&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-16&#39;</span><span class="token punctuation">,</span></span>
<span class="line">             <span class="token string">&#39;2019-01-17&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-18&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-19&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-20&#39;</span><span class="token punctuation">,</span></span>
<span class="line">             <span class="token string">&#39;2019-01-21&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-22&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-23&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-24&#39;</span><span class="token punctuation">,</span></span>
<span class="line">             <span class="token string">&#39;2019-01-25&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-26&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-27&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-28&#39;</span><span class="token punctuation">,</span></span>
<span class="line">             <span class="token string">&#39;2019-01-29&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-30&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-01-31&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-02-01&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">            dtype<span class="token operator">=</span><span class="token string">&#39;period[D]&#39;</span><span class="token punctuation">,</span> freq<span class="token operator">=</span><span class="token string">&#39;D&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="timestamp-vs-period" tabindex="-1"><a class="header-anchor" href="#timestamp-vs-period"><span>Timestamp Vs. Period</span></a></h3><p><code>pd.Period()</code>와 앞서 배운 <code>pd.Timestamp()</code>에 어떤 차이가 있는지 한번 비교 연산을 통해서 이해해보겠습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">p <span class="token operator">=</span> pd<span class="token punctuation">.</span>Period<span class="token punctuation">(</span><span class="token string">&#39;2019-06-13&#39;</span><span class="token punctuation">)</span></span>
<span class="line">test <span class="token operator">=</span> pd<span class="token punctuation">.</span>Timestamp<span class="token punctuation">(</span><span class="token string">&#39;2019-06-13 22:11&#39;</span><span class="token punctuation">)</span></span>
<span class="line">p<span class="token punctuation">.</span>start_time <span class="token operator">&lt;</span> test <span class="token operator">&lt;</span> p<span class="token punctuation">.</span>end_time</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># True</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Timestamp</code>는 한 시점을 뜻하고, <code>Period</code>는 1일의 시작 시점부터 종료 시점까지의 범위를 포괄합니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">p<span class="token punctuation">.</span>start_time</span>
<span class="line"><span class="token comment"># Timestamp(&#39;2019-06-13 00:00:00&#39;)</span></span>
<span class="line">p<span class="token punctuation">.</span>end_time</span>
<span class="line"><span class="token comment"># Timestamp(&#39;2019-06-13 23:59:59.999999999&#39;)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_04-financedatareader" tabindex="-1"><a class="header-anchor" href="#_04-financedatareader"><span>04. FinanceDataReader</span></a></h2><p>FinanceDataReader는 한국 주식 가격, 미국 주식 가격, 지수, 환율, 암호 화폐 가격, 종목 리스트 등을 제공하는 API 패키지입니다. 우선 해당 패키지를 설치해줍니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pip <span class="token function">install</span> <span class="token parameter variable">-U</span> finance-datareader</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>사용법을 이해해봅시다. 패키지를 임포트합니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> FinanceDataReader <span class="token keyword">as</span> fdr</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="종목-리스트-가져오기" tabindex="-1"><a class="header-anchor" href="#종목-리스트-가져오기"><span>종목 리스트 가져오기</span></a></h3><p><code>StockListing()</code> 함수에 &#39;KRX&#39; 심볼을 전달하면, 한국 거래소에 상장된 전체 종목 리스트를 출력합니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">df_krx <span class="token operator">=</span> fdr<span class="token punctuation">.</span>StockListing<span class="token punctuation">(</span><span class="token string">&#39;KRX&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>df_krx의 타입을 확인해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token builtin">type</span><span class="token punctuation">(</span>df_krx<span class="token punctuation">)</span></span>
<span class="line">pandas<span class="token punctuation">.</span>core<span class="token punctuation">.</span>frame<span class="token punctuation">.</span>DataFrame</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>데이터프레임이 출력됩니다. df_krx를 출력해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">df_krx</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172650/df_krx.PNG" alt="df_krx" tabindex="0" loading="lazy"><figcaption>df_krx</figcaption></figure><p><code>StockListing()</code> 함수에 미국 &#39;<code>S&amp;P500</code>&#39; 심볼을 전달하면, <code>S&amp;P 500</code> 지수에 등록된 전체 종목 리스트를 출력할 수 있습니다. 다음 코드는 미국 S&amp;P 500에 등록된 모든 종목 리스트를 가져옵니다. <code>head()</code>는 데이터프레임에서 상위 5개의 샘플만을 출력합니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">df_spx <span class="token operator">=</span> fdr<span class="token punctuation">.</span>StockListing<span class="token punctuation">(</span><span class="token string">&#39;S&amp;P500&#39;</span><span class="token punctuation">)</span></span>
<span class="line">df_spx<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>해당 데이터프레임에 몇 개의 샘플이 있는지 확인해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;s&amp;p 종목 데이터프레임의 크기 :&#39;</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>df_spx<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># s&amp;p 종목 데이터프레임의 크기 : 503</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>종목 코드를 가져오는 방법을 알아보았으니 이제 가격 데이터를 가져오는 방법을 살펴봅시다.</p><h3 id="가격-가져오기" tabindex="-1"><a class="header-anchor" href="#가격-가져오기"><span>가격 가져오기</span></a></h3><p>한국 거래소에 상장된 종목은 단축 코드(여섯 자리)를 전달하면 가격 데이터를 가져올 수 있습니다. 함수 하나만 호출하면 가격 데이터를 정말 손쉽게 가져옵니다. 예를 들어 GS글로벌의 2018년 가격 데이터를 불러와봅시다. <code>head(10)</code>은 상위 10개의 샘플만을 출력합니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># GS글로벌, 2018년</span></span>
<span class="line">df <span class="token operator">=</span> fdr<span class="token punctuation">.</span>DataReader<span class="token punctuation">(</span><span class="token string">&#39;001250&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2018&#39;</span><span class="token punctuation">)</span></span>
<span class="line">df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172650/gs글로벌.PNG" alt="gs글로벌" tabindex="0" loading="lazy"><figcaption>gs글로벌</figcaption></figure><p>미국 주가 데이터도 불러와봅시다. 미국 종목을 가져올 때는 티커(ticker) 명을 사용합니다. 티커란, 미국에서 사용하는 종목 코드이며 네 자리로 제안됩니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 애플(AAPL), 2017년</span></span>
<span class="line">df <span class="token operator">=</span> fdr<span class="token punctuation">.</span>DataReader<span class="token punctuation">(</span><span class="token string">&#39;AAPL&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2017&#39;</span><span class="token punctuation">)</span></span>
<span class="line">df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172650/apple.PNG" alt="apple" tabindex="0" loading="lazy"><figcaption>apple</figcaption></figure><p>다른 종목의 가격 데이터를 가져올 때도 마찬가지로 <code>DataReader</code>를 호출하면 됩니다. 아래 정리된 속성을 참고하여 다양한 값을 호출할 수 있습니다.</p><ul><li><p><strong>거래소별 전체 종목 코드 - <code>StockListing()</code> 함수</strong></p><ul><li>한국 거래소 : KRX(KOSPI, KOSDAQ, KONEX)</li><li>미국 거래소 : NASDAQ, NYSE, AMEX, S&amp;P500</li></ul></li><li><p>가격 데이터 - <code>DataReader()</code> 함수</p><ul><li>국내 주식 : 005930(삼성전자), 091990(셀트리온헬스케어) 등</li><li>해외 주식 : AAPL(애플), AMZN(아마존), GOOG(구글) 등</li><li>각종 지수 : KS11(코스피 지수), KQ11(코스닥 지수), DJI(다우 지수), IXIC(나스닥 지수), US500(S&amp;P5000)</li><li>환율 데이터 : USD/KRX(원달러 환율), USD/EUR(달러당 유로화 환율), CNY/KRX(위완화 원화 환율)</li><li>암호 화폐 가격 : BTC/USD(비트코인 달러 가격, 비트파이넥스), BTC/KRW(비트코인 원화 가격, 빗썸)</li></ul></li></ul><p>이외 상세한 옵션은 API 사용자 메뉴얼을 참고해주세요.</p>`,78),N={href:"https://github.com/FinanceData/FinanceDataReader/wiki/Users-Guide",target:"_blank",rel:"noopener noreferrer"},K=n("code",null,"FinanceData/FinanceDataReader",-1),I=n("code",null,"wiki/Users-Guide",-1),G=n("h3",{id:"다양한-예시",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#다양한-예시"},[n("span",null,"다양한 예시")])],-1),Q=n("p",null,"아래는 다양한 종류의 데이터를 로드하는 예제입니다.",-1),F=n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"# 애플(AAPL), 2018-01-01 ~ 2018-03-30")]),s(`
`),n("span",{class:"line"},[s("df "),n("span",{class:"token operator"},"="),s(" fdr"),n("span",{class:"token punctuation"},"."),s("DataReader"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'AAPL'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2018-01-01'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2018-03-30'"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("df"),n("span",{class:"token punctuation"},"."),s("head"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),C=n("figure",null,[n("img",{src:"https://wikidocs.net/images/page/172650/apple_2018.PNG",alt:"apple_2018",tabindex:"0",loading:"lazy"}),n("figcaption",null,"apple_2018")],-1),M=n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"# KS11 (KOSPI 지수), 2015년~현재")]),s(`
`),n("span",{class:"line"},[s("df "),n("span",{class:"token operator"},"="),s(" fdr"),n("span",{class:"token punctuation"},"."),s("DataReader"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'KS11'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2015'"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("df"),n("span",{class:"token punctuation"},"."),s("head"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),B=n("figure",null,[n("img",{src:"https://wikidocs.net/images/page/172650/kospi_from_2015_to_now.PNG",alt:"kospi_2015",tabindex:"0",loading:"lazy"}),n("figcaption",null,"kospi_2015")],-1),L=n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"# 원달러 환율, 1995년~현재")]),s(`
`),n("span",{class:"line"},[s("df "),n("span",{class:"token operator"},"="),s(" fdr"),n("span",{class:"token punctuation"},"."),s("DataReader"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'USD/KRW'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'1995'"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("df"),n("span",{class:"token punctuation"},"."),s("head"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),U=n("figure",null,[n("img",{src:"https://wikidocs.net/images/page/172650/krw.PNG",alt:"krw",tabindex:"0",loading:"lazy"}),n("figcaption",null,"krw")],-1),W=n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"# 비트코인 원화 가격 (빗썸), 2016년~현재")]),s(`
`),n("span",{class:"line"},[s("df "),n("span",{class:"token operator"},"="),s(" fdr"),n("span",{class:"token punctuation"},"."),s("DataReader"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'BTC/KRW'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2016'"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("df"),n("span",{class:"token punctuation"},"."),s("head"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Y=n("figure",null,[n("img",{src:"https://wikidocs.net/images/page/172650/btc_2016.PNG",alt:"btc",tabindex:"0",loading:"lazy"}),n("figcaption",null,"btc")],-1),V=n("hr",null,null,-1),E=n("h2",{id:"_05-quiz",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_05-quiz"},[n("span",null,"05. Quiz")])],-1),X=n("p",null,"총 3개의 퀴즈를 출제합니다. 해답은 이 페이지의 하단에 위치하지만, 해답을 보지않고 위에서 학습한 자료들을 참고하여 스스로 풀어보세요. 스스로 풀어보아야 성장합니다.",-1),O=n("h3",{id:"quiz-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#quiz-1"},[n("span",null,"Quiz 1")])],-1),H=n("p",null,"아래의 문자열을 datetime 타입으로 변환해보세요. 단, 아래의 문자열은 2021년 8월 7일을 의미합니다.",-1),Z=n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("datetime_str "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"'07-08-2021'")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1),J=n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(" datetime")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("datetime_str "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"'07-08-2021'")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token builtin"},"format"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"'%d-%m-%Y'")]),s(`
`),n("span",{class:"line"},[s("datetime_dt "),n("span",{class:"token operator"},"="),s(" datetime"),n("span",{class:"token punctuation"},"."),s("datetime"),n("span",{class:"token punctuation"},"."),s("strptime"),n("span",{class:"token punctuation"},"("),s("datetime_str"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token builtin"},"format"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("datetime_dt"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"#")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# 2021-08-07 00:00:00")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),$=n("h3",{id:"quiz-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#quiz-2"},[n("span",null,"Quiz 2")])],-1),nn=n("p",null,[n("code",null,"FinanceDataReader"),s(" 패키지를 사용하여 미코바이오메드 종목의 2020년 1월 8일부터 2021년 7월 1일까지의 데이터를 로드 및 출력해보세요.")],-1),sn=n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(" FinanceDataReader "),n("span",{class:"token keyword"},"as"),s(" fdr")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# 미코바이오메드의 종목 번호는 '214610'")]),s(`
`),n("span",{class:"line"},[s("df "),n("span",{class:"token operator"},"="),s(" fdr"),n("span",{class:"token punctuation"},"."),s("DataReader"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'214610'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2020-01-08'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-07-01'"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},"df"),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),an=n("h3",{id:"quiz-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#quiz-3"},[n("span",null,"Quiz 3")])],-1),tn=n("p",null,"파이썬 패키지 Numpy를 사용하여 2021년 3월 1일부터 2021년 7월 1일 사이의 모든 일자를 출력하세요. 단, 7월 1일도 포함해야 합니다.",-1),en=n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"# 일단위")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(" numpy "),n("span",{class:"token keyword"},"as"),s(" np")]),s(`
`),n("span",{class:"line"},[s("np"),n("span",{class:"token punctuation"},"."),s("arange"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'2021-03'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-07-02'"),n("span",{class:"token punctuation"},","),s(" dtype"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},"'datetime64[D]'"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("array"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},"'2021-03-01'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-03-02'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-03-03'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-03-04'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-03-05'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-03-06'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-03-07'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-03-08'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-03-09'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-03-10'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-03-11'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-03-12'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-03-13'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-03-14'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-03-15'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-03-16'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-03-17'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-03-18'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-03-19'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-03-20'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-03-21'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-03-22'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-03-23'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-03-24'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-03-25'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-03-26'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-03-27'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-03-28'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-03-29'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-03-30'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-03-31'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-04-01'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-04-02'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-04-03'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-04-04'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-04-05'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-04-06'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-04-07'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-04-08'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-04-09'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-04-10'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-04-11'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-04-12'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-04-13'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-04-14'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-04-15'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-04-16'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-04-17'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-04-18'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-04-19'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-04-20'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-04-21'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-04-22'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-04-23'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-04-24'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-04-25'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-04-26'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-04-27'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-04-28'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-04-29'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-04-30'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-05-01'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-05-02'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-05-03'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-05-04'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-05-05'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-05-06'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-05-07'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-05-08'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-05-09'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-05-10'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-05-11'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-05-12'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-05-13'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-05-14'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-05-15'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-05-16'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-05-17'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-05-18'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-05-19'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-05-20'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-05-21'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-05-22'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-05-23'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-05-24'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-05-25'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-05-26'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-05-27'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-05-28'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-05-29'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-05-30'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-05-31'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-06-01'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-06-02'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-06-03'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-06-04'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-06-05'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-06-06'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-06-07'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-06-08'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-06-09'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-06-10'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-06-11'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-06-12'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-06-13'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-06-14'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-06-15'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-06-16'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-06-17'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-06-18'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-06-19'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-06-20'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-06-21'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-06-22'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-06-23'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-06-24'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-06-25'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-06-26'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-06-27'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-06-28'"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("       "),n("span",{class:"token string"},"'2021-06-29'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-06-30'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'2021-07-01'"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" dtype"),n("span",{class:"token operator"},"="),n("span",{class:"token string"},"'datetime64[D]'"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),pn=n("hr",null,null,-1);function ln(u,cn){const i=c("router-link"),r=c("VPCard"),l=c("Tabs"),d=c("FontIcon");return b(),m("div",null,[n("h1",_,[n("a",f,[n("span",null,g(u.$frontmatter.title)+" 관련",1)])]),n("nav",x,[n("ul",null,[n("li",null,[p(i,{to:"#_01-datetime"},{default:a(()=>[s("01. datetime")]),_:1})]),n("li",null,[p(i,{to:"#_02-날짜와-시간을-다루는-넘파이-numpy"},{default:a(()=>[s("02. 날짜와 시간을 다루는 넘파이(Numpy)")]),_:1}),n("ul",null,[n("li",null,[p(i,{to:"#datetime64"},{default:a(()=>[s("datetime64")]),_:1})]),n("li",null,[p(i,{to:"#array"},{default:a(()=>[s("array()")]),_:1})]),n("li",null,[p(i,{to:"#arange"},{default:a(()=>[s("arange()")]),_:1})]),n("li",null,[p(i,{to:"#datetime64을-이용한-날짜-차이-구하기"},{default:a(()=>[s("datetime64을 이용한 날짜 차이 구하기")]),_:1})])])]),n("li",null,[p(i,{to:"#_03-날짜와-시간을-다루는-판다스-pandas"},{default:a(()=>[s("03. 날짜와 시간을 다루는 판다스(Pandas)")]),_:1}),n("ul",null,[n("li",null,[p(i,{to:"#timestamp와-datetimeindex"},{default:a(()=>[s("Timestamp와 DatetimeIndex")]),_:1})]),n("li",null,[p(i,{to:"#period와-periodindex"},{default:a(()=>[s("Period와 PeriodIndex")]),_:1})]),n("li",null,[p(i,{to:"#timestamp-vs-period"},{default:a(()=>[s("Timestamp Vs. Period")]),_:1})])])]),n("li",null,[p(i,{to:"#_04-financedatareader"},{default:a(()=>[s("04. FinanceDataReader")]),_:1}),n("ul",null,[n("li",null,[p(i,{to:"#종목-리스트-가져오기"},{default:a(()=>[s("종목 리스트 가져오기")]),_:1})]),n("li",null,[p(i,{to:"#가격-가져오기"},{default:a(()=>[s("가격 가져오기")]),_:1})]),n("li",null,[p(i,{to:"#다양한-예시"},{default:a(()=>[s("다양한 예시")]),_:1})])])]),n("li",null,[p(i,{to:"#_05-quiz"},{default:a(()=>[s("05. Quiz")]),_:1}),n("ul",null,[n("li",null,[p(i,{to:"#quiz-1"},{default:a(()=>[s("Quiz 1")]),_:1})]),n("li",null,[p(i,{to:"#quiz-2"},{default:a(()=>[s("Quiz 2")]),_:1})]),n("li",null,[p(i,{to:"#quiz-3"},{default:a(()=>[s("Quiz 3")]),_:1})])])])])]),P,p(r,v(h({title:"03. 파이썬을 이용한 날짜와 시간 다루기",desc:"금융 데이터 분석을 위한 파이썬 - WikiDocs",link:"https://wikidocs.net/172633",logo:"https://wikidocs.net/static/img/favicon.ico",background:"rgba(255,255,255,0.2)"})),null,16),T,p(l,{id:"128",data:[{id:"나노초 단위 1"},{id:"나노초 단위 2"},{id:"초 단위"},{id:"일 단위"}],active:0},{title0:a(({value:t,isActive:e})=>[s("나노초 단위 1")]),title1:a(({value:t,isActive:e})=>[s("나노초 단위 2")]),title2:a(({value:t,isActive:e})=>[s("초 단위")]),title3:a(({value:t,isActive:e})=>[s("일 단위")]),tab0:a(({value:t,isActive:e})=>[w]),tab1:a(({value:t,isActive:e})=>[D,A]),tab2:a(({value:t,isActive:e})=>[j,z]),tab3:a(({value:t,isActive:e})=>[S,R]),_:1}),q,n("blockquote",null,[n("p",null,[s("첨고: "),n("a",N,[p(d,{icon:"iconfont icon-github"}),K,s(" - "),I])])]),G,Q,p(l,{id:"470",data:[{id:"APPL"},{id:"KS11"},{id:"USD/KRW"},{id:"BTC/KRW"}],active:0},{title0:a(({value:t,isActive:e})=>[s("APPL")]),title1:a(({value:t,isActive:e})=>[s("KS11")]),title2:a(({value:t,isActive:e})=>[s("USD/KRW")]),title3:a(({value:t,isActive:e})=>[s("BTC/KRW")]),tab0:a(({value:t,isActive:e})=>[F,C]),tab1:a(({value:t,isActive:e})=>[M,B]),tab2:a(({value:t,isActive:e})=>[L,U]),tab3:a(({value:t,isActive:e})=>[W,Y]),_:1}),V,E,X,O,p(l,{id:"506",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:a(({value:t,isActive:e})=>[s("Question")]),title1:a(({value:t,isActive:e})=>[s("Answer")]),tab0:a(({value:t,isActive:e})=>[H,Z]),tab1:a(({value:t,isActive:e})=>[J]),_:1}),$,p(l,{id:"520",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:a(({value:t,isActive:e})=>[s("Question")]),title1:a(({value:t,isActive:e})=>[s("Answer")]),tab0:a(({value:t,isActive:e})=>[nn]),tab1:a(({value:t,isActive:e})=>[sn]),_:1}),an,p(l,{id:"533",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:a(({value:t,isActive:e})=>[s("Question")]),title1:a(({value:t,isActive:e})=>[s("Answer")]),tab0:a(({value:t,isActive:e})=>[tn]),tab1:a(({value:t,isActive:e})=>[en]),_:1}),pn])}const rn=k(y,[["render",ln],["__file","03.html.vue"]]),dn=JSON.parse('{"path":"/py/finance/03.html","title":"03. 파이썬을 이용한 날짜와 시간 다루기","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"03. 파이썬을 이용한 날짜와 시간 다루기","description":"Finance with Python > 03. 파이썬을 이용한 날짜와 시간 다루기","category":["Python"],"tag":["crashcourse","python","py","google","google-colab","jupyter-notebook","numpy","pandas","ipython"],"head":[[{"meta":null},{"property":"og:title","content":"Finance with Python > 03. 파이썬을 이용한 날짜와 시간 다루기"},{"property":"og:description","content":"03. 파이썬을 이용한 날짜와 시간 다루기"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/py/finance/03.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/py/finance/03.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"03. 파이썬을 이용한 날짜와 시간 다루기"}],["meta",{"property":"og:description","content":"Finance with Python > 03. 파이썬을 이용한 날짜와 시간 다루기"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://wikidocs.net/images/page/172650/df_krx.PNG"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"py"}],["meta",{"property":"article:tag","content":"google"}],["meta",{"property":"article:tag","content":"google-colab"}],["meta",{"property":"article:tag","content":"jupyter-notebook"}],["meta",{"property":"article:tag","content":"numpy"}],["meta",{"property":"article:tag","content":"pandas"}],["meta",{"property":"article:tag","content":"ipython"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"03. 파이썬을 이용한 날짜와 시간 다루기\\",\\"image\\":[\\"https://wikidocs.net/images/page/172650/df_krx.PNG\\",\\"https://wikidocs.net/images/page/172650/gs%EA%B8%80%EB%A1%9C%EB%B2%8C.PNG\\",\\"https://wikidocs.net/images/page/172650/apple.PNG\\",\\"https://wikidocs.net/images/page/172650/apple_2018.PNG\\",\\"https://wikidocs.net/images/page/172650/kospi_from_2015_to_now.PNG\\",\\"https://wikidocs.net/images/page/172650/krw.PNG\\",\\"https://wikidocs.net/images/page/172650/btc_2016.PNG\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"01. datetime","slug":"_01-datetime","link":"#_01-datetime","children":[]},{"level":2,"title":"02. 날짜와 시간을 다루는 넘파이(Numpy)","slug":"_02-날짜와-시간을-다루는-넘파이-numpy","link":"#_02-날짜와-시간을-다루는-넘파이-numpy","children":[{"level":3,"title":"datetime64","slug":"datetime64","link":"#datetime64","children":[]},{"level":3,"title":"array()","slug":"array","link":"#array","children":[]},{"level":3,"title":"arange()","slug":"arange","link":"#arange","children":[]},{"level":3,"title":"datetime64을 이용한 날짜 차이 구하기","slug":"datetime64을-이용한-날짜-차이-구하기","link":"#datetime64을-이용한-날짜-차이-구하기","children":[]}]},{"level":2,"title":"03. 날짜와 시간을 다루는 판다스(Pandas)","slug":"_03-날짜와-시간을-다루는-판다스-pandas","link":"#_03-날짜와-시간을-다루는-판다스-pandas","children":[{"level":3,"title":"Timestamp와 DatetimeIndex","slug":"timestamp와-datetimeindex","link":"#timestamp와-datetimeindex","children":[]},{"level":3,"title":"Period와 PeriodIndex","slug":"period와-periodindex","link":"#period와-periodindex","children":[]},{"level":3,"title":"Timestamp Vs. Period","slug":"timestamp-vs-period","link":"#timestamp-vs-period","children":[]}]},{"level":2,"title":"04. FinanceDataReader","slug":"_04-financedatareader","link":"#_04-financedatareader","children":[{"level":3,"title":"종목 리스트 가져오기","slug":"종목-리스트-가져오기","link":"#종목-리스트-가져오기","children":[]},{"level":3,"title":"가격 가져오기","slug":"가격-가져오기","link":"#가격-가져오기","children":[]},{"level":3,"title":"다양한 예시","slug":"다양한-예시","link":"#다양한-예시","children":[]}]},{"level":2,"title":"05. Quiz","slug":"_05-quiz","link":"#_05-quiz","children":[{"level":3,"title":"Quiz 1","slug":"quiz-1","link":"#quiz-1","children":[]},{"level":3,"title":"Quiz 2","slug":"quiz-2","link":"#quiz-2","children":[]},{"level":3,"title":"Quiz 3","slug":"quiz-3","link":"#quiz-3","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":7.18,"words":2155},"filePathRelative":"py/finance/03.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{rn as comp,dn as data};
