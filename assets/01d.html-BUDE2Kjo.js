import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,a as n,t as r,b as s,w as e,e as d,r as l,o as u,d as t}from"./app-U_bew1in.js";const k={},h={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},g={class:"table-of-contents"},b=d(`<hr><h2 id="인덱스-기본-원리" tabindex="-1"><a class="header-anchor" href="#인덱스-기본-원리"><span>인덱스 기본 원리</span></a></h2><p>B*Tree 인덱스를 정상적으로 사용하려면 범위 스캔 시작지점을 찾기 위해 루트 블록부터 리프블록까지의 수직적 탐색 과정을 거쳐야 함</p><h3 id="인덱스-사용이-불가능-하거나-범위-스캔이-불가능한-경우" tabindex="-1"><a class="header-anchor" href="#인덱스-사용이-불가능-하거나-범위-스캔이-불가능한-경우"><span>인덱스 사용이 불가능 하거나 범위 스캔이 불가능한 경우</span></a></h3><ul><li>정상적인 인덱스 범위 스캔이 불가능한 경우(Index Full Scan은 가능) <ul><li>인덱스 컬럼을 조건절에서 가공: <code>WHERE SUBSTR(업체명, 1, 2) = &#39;대한&#39;</code></li><li>부정형 비교: <code>WHERE 직업 &lt;&gt; &#39;학생&#39;</code></li><li><code>IS NOT NULL</code> 조건도 부정형 비교에 해당: <code>WHERE 부서코드 IS NOT NULL</code><ul><li>&#39;부서코드&#39;에 단일 컬럼 인덱스가 존재한다면 인덱스 전체 스캔을 통해 얻은 레코드는 모두 &#39;<code>부서코드 IS NOT NULL</code>&#39; 조건을 만족.</li></ul></li></ul></li><li>인덱스 사용이 불가능한 경우 <ul><li><code>IS NULL</code> 조건만으로 검색할 때: <code>where 연락처 is null</code><ul><li>예외적으로 해당 컬럼이 <code>not null</code> 제약이 있을 경우 Table Full Scan을 피하기 위해 사용.</li></ul></li><li><code>IS NULL</code> 조건을 사용하더라도 다른 인덱스 구성 컬럼에 <code>is null</code> 이외의 조건식이 하나라도 있으면 Index Range Scan 가능 (인덱스 선두 컬럼이 조건걸에 누락되지 않아야 한다) <code>emp_idx : job + deptno where job is null and deptno = 20</code></li></ul></li></ul><h3 id="인덱스-컬럼의-가공" tabindex="-1"><a class="header-anchor" href="#인덱스-컬럼의-가공"><span>인덱스 컬럼의 가공</span></a></h3><table><thead><tr><th>인덱스 컬럼 가공 사례</th><th>튜닝 방안</th></tr></thead><tbody><tr><td><code>substr(업체명, 1, 2) = &#39;대한&#39;</code></td><td><code>업체명 like &#39;대한%&#39;</code></td></tr><tr><td><code>월급여 * 12 = 36000000</code></td><td><code>월급여 = 36000000 / 12</code></td></tr><tr><td><code>to_char(일시, &#39;yyyymmdd&#39;) = :dt</code></td><td><code>일시 &gt;= to_date(:dt, &#39;yyyymmdd&#39;) and 일시 &lt; to_date(:dt, &#39;yyyymmdd&#39;) + 1</code></td></tr><tr><td>\`연령</td><td></td></tr><tr><td>\`회원번호</td><td></td></tr><tr><td><code>nvl(주문수량, 0) &gt;= 100</code></td><td><code>주문수량 &gt;= 100</code></td></tr><tr><td><code>nvl(주문수량, 0) &lt; 100</code></td><td><code>create index 주문_x01 on 주문(nvl(주문수량, 0) );</code></td></tr><tr><td><code>not null</code> 컬럼이면 <code>nvl</code>제거, 아니면 함수기반 인덱스(FBI) 생성 고려</td><td></td></tr></tbody></table><h3 id="튜닝사례1" tabindex="-1"><a class="header-anchor" href="#튜닝사례1"><span>튜닝사례1</span></a></h3><p>일별지수업종별거래및시세_PK : 지수구분코드 + 지수업종코드 + 거래일자 일별지수업종별거래및시세_X01 : 거래일자</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line">거래일자 <span class="token operator">between</span> :startDd <span class="token operator">and</span> :endDd</span>
<span class="line"><span class="token operator">and</span> 지수구분코드 <span class="token operator">||</span> 지수업종코드 <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">&#39;1001&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2003&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">=</span><span class="token operator">&gt;</span> 거래일자 인데스 사용 혹은 <span class="token keyword">Full</span> <span class="token keyword">Table</span> Scan</span>
<span class="line"><span class="token operator">=</span><span class="token operator">&gt;</span></span>
<span class="line">거래일자 <span class="token operator">between</span> :startDd <span class="token operator">and</span> :endDd</span>
<span class="line"><span class="token operator">and</span> <span class="token punctuation">(</span>지수구분코드<span class="token punctuation">,</span> 지수업종코드<span class="token punctuation">)</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;001&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;003&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">=</span><span class="token operator">&gt;</span> PK 인덱스 사용</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="튜닝사례2" tabindex="-1"><a class="header-anchor" href="#튜닝사례2"><span>튜닝사례2</span></a></h3><p>접수정보파일_PK : 수신번호 접수정보파일_X01 : 정정대상접수번호 + 금감원접수번호</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line">decode<span class="token punctuation">(</span>정정대상접수번호<span class="token punctuation">,</span> lpad<span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 금감원접수번호<span class="token punctuation">,</span> 정정대상접수번호<span class="token punctuation">)</span> <span class="token operator">=</span> :접수번호 <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token keyword">Full</span> <span class="token keyword">Table</span> Scan</span>
<span class="line"><span class="token operator">=</span><span class="token operator">&gt;</span></span>
<span class="line">정정대상접수번호 <span class="token operator">in</span> <span class="token punctuation">(</span>:접수번호<span class="token punctuation">,</span> lpad<span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">and</span> 금감원접수번호 <span class="token operator">=</span> decode<span class="token punctuation">(</span>정정대상접수번호<span class="token punctuation">,</span> lpad<span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span> :접수번호<span class="token punctuation">,</span> 금감원접수번호<span class="token punctuation">)</span> </span>
<span class="line"><span class="token operator">=</span><span class="token operator">&gt;</span> 접수정보파일_X01 <span class="token keyword">Index</span> Range Scan</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="데이터타입-우선순위" tabindex="-1"><a class="header-anchor" href="#데이터타입-우선순위"><span>데이터타입 우선순위</span></a></h2><ul><li>숫자형 &gt; 문자형</li><li>날짜형 &gt; 문자형</li></ul><h3 id="예제1" tabindex="-1"><a class="header-anchor" href="#예제1"><span>예제1</span></a></h3><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> EMP <span class="token keyword">WHERE</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">AND</span> empno <span class="token operator">||</span> <span class="token string">&#39;&#39;</span> <span class="token operator">=</span> <span class="token number">7900</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span>  <span class="token keyword">from</span> <span class="token keyword">table</span><span class="token punctuation">(</span>dbms_xplan<span class="token punctuation">.</span>display<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="예제2" tabindex="-1"><a class="header-anchor" href="#예제2"><span>예제2</span></a></h3><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">explain</span> <span class="token keyword">plan</span> <span class="token keyword">for</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> EMP <span class="token keyword">WHERE</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">AND</span> empno <span class="token operator">=</span> <span class="token number">7900</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span><span class="token punctuation">(</span>dbms_xplan<span class="token punctuation">.</span>display<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="예제3" tabindex="-1"><a class="header-anchor" href="#예제3"><span>예제3</span></a></h3><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">explain</span> <span class="token keyword">plan</span> <span class="token keyword">for</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> EMP <span class="token keyword">WHERE</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token operator">AND</span> empno <span class="token operator">=</span> <span class="token string">&#39;7900&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">table</span><span class="token punctuation">(</span>dbms_xplan<span class="token punctuation">.</span>display<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,23);function v(o,y){const a=l("router-link"),p=l("TagLinks");return u(),i("div",null,[n("h1",h,[n("a",m,[n("span",null,r(o.$frontmatter.title)+" 관련",1)])]),n("nav",g,[n("ul",null,[n("li",null,[s(a,{to:"#인덱스-기본-원리"},{default:e(()=>[t("인덱스 기본 원리")]),_:1}),n("ul",null,[n("li",null,[s(a,{to:"#인덱스-사용이-불가능-하거나-범위-스캔이-불가능한-경우"},{default:e(()=>[t("인덱스 사용이 불가능 하거나 범위 스캔이 불가능한 경우")]),_:1})]),n("li",null,[s(a,{to:"#인덱스-컬럼의-가공"},{default:e(()=>[t("인덱스 컬럼의 가공")]),_:1})]),n("li",null,[s(a,{to:"#튜닝사례1"},{default:e(()=>[t("튜닝사례1")]),_:1})]),n("li",null,[s(a,{to:"#튜닝사례2"},{default:e(()=>[t("튜닝사례2")]),_:1})])])]),n("li",null,[s(a,{to:"#데이터타입-우선순위"},{default:e(()=>[t("데이터타입 우선순위")]),_:1}),n("ul",null,[n("li",null,[s(a,{to:"#예제1"},{default:e(()=>[t("예제1")]),_:1})]),n("li",null,[s(a,{to:"#예제2"},{default:e(()=>[t("예제2")]),_:1})]),n("li",null,[s(a,{to:"#예제3"},{default:e(()=>[t("예제3")]),_:1})])])])])]),b,s(p)])}const w=c(k,[["render",v],["__file","01d.html.vue"]]),x=JSON.parse(`{"path":"/misc/oracle-sql-db-tuning/01d.html","title":"01D","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"01D","description":"🙆‍♂️DB Server 성능 향상, 분석 및 튜닝 전문가 향상과정 > 01D","category":["Oracle DB"],"tag":["crashcourse","oracle","oracle-db","oracle-sql"],"head":[[{"meta":null},{"property":"og:title","content":"🙆‍♂️DB Server 성능 향상, 분석 및 튜닝 전문가 향상과정 > 01D"},{"property":"og:description","content":"01D"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/assets/misc/oracle-sql-db-tuning/01d.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/misc/oracle-sql-db-tuning/01d.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"01D"}],["meta",{"property":"og:description","content":"🙆‍♂️DB Server 성능 향상, 분석 및 튜닝 전문가 향상과정 > 01D"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"oracle"}],["meta",{"property":"article:tag","content":"oracle-db"}],["meta",{"property":"article:tag","content":"oracle-sql"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"01D\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"인덱스 기본 원리","slug":"인덱스-기본-원리","link":"#인덱스-기본-원리","children":[{"level":3,"title":"인덱스 사용이 불가능 하거나 범위 스캔이 불가능한 경우","slug":"인덱스-사용이-불가능-하거나-범위-스캔이-불가능한-경우","link":"#인덱스-사용이-불가능-하거나-범위-스캔이-불가능한-경우","children":[]},{"level":3,"title":"인덱스 컬럼의 가공","slug":"인덱스-컬럼의-가공","link":"#인덱스-컬럼의-가공","children":[]},{"level":3,"title":"튜닝사례1","slug":"튜닝사례1","link":"#튜닝사례1","children":[]},{"level":3,"title":"튜닝사례2","slug":"튜닝사례2","link":"#튜닝사례2","children":[]}]},{"level":2,"title":"데이터타입 우선순위","slug":"데이터타입-우선순위","link":"#데이터타입-우선순위","children":[{"level":3,"title":"예제1","slug":"예제1","link":"#예제1","children":[]},{"level":3,"title":"예제2","slug":"예제2","link":"#예제2","children":[]},{"level":3,"title":"예제3","slug":"예제3","link":"#예제3","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":5}]},"readingTime":{"minutes":0.81,"words":242},"filePathRelative":"misc/oracle-sql-db-tuning/01d.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n<h2>인덱스 기본 원리</h2>\\n<p>B*Tree 인덱스를 정상적으로 사용하려면 범위 스캔 시작지점을 찾기 위해 루트 블록부터 리프블록까지의 수직적 탐색 과정을 거쳐야 함</p>\\n<h3>인덱스 사용이 불가능 하거나 범위 스캔이 불가능한 경우</h3>\\n<ul>\\n<li>정상적인 인덱스 범위 스캔이 불가능한 경우(Index Full Scan은 가능)\\n<ul>\\n<li>인덱스 컬럼을 조건절에서 가공: <code>WHERE SUBSTR(업체명, 1, 2) = '대한'</code></li>\\n<li>부정형 비교: <code>WHERE 직업 &lt;&gt; '학생'</code></li>\\n<li><code>IS NOT NULL</code> 조건도 부정형 비교에 해당: <code>WHERE 부서코드 IS NOT NULL</code>\\n<ul>\\n<li>'부서코드'에 단일 컬럼 인덱스가 존재한다면 인덱스 전체 스캔을 통해 얻은 레코드는 모두 '<code>부서코드 IS NOT NULL</code>' 조건을 만족.</li>\\n</ul>\\n</li>\\n</ul>\\n</li>\\n<li>인덱스 사용이 불가능한 경우\\n<ul>\\n<li><code>IS NULL</code> 조건만으로 검색할 때: <code>where 연락처 is null</code>\\n<ul>\\n<li>예외적으로 해당 컬럼이 <code>not null</code> 제약이 있을 경우 Table Full Scan을 피하기 위해 사용.</li>\\n</ul>\\n</li>\\n<li><code>IS NULL</code> 조건을 사용하더라도 다른 인덱스 구성 컬럼에 <code>is null</code> 이외의 조건식이 하나라도 있으면 Index Range Scan 가능 (인덱스 선두 컬럼이 조건걸에 누락되지 않아야 한다) <code>emp_idx : job + deptno where job is null and deptno = 20</code></li>\\n</ul>\\n</li>\\n</ul>"}`);export{w as comp,x as data};
