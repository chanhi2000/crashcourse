import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as e,t as c,b as t,w as n,n as u,g as h,e as p,r as s,o as m,d as i}from"./app-U_bew1in.js";const g={},b={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},v={class:"table-of-contents"},x=e("hr",null,null,-1),y=p(`<hr><h2 id="_1-regex-regular-expressions" tabindex="-1"><a class="header-anchor" href="#_1-regex-regular-expressions"><span>1. regex (Regular Expressions)</span></a></h2><p>Regular expressions are a powerful tool to do pattern based selection. It uses special notations similar to those we&#39;ve encountered already such as the <code>*</code> wildcard.</p><p>We&#39;ll go through a couple of the most common regular expressions, these are almost universal with any programming language.</p><p>Well use this phrase as our test string:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">sally sells seashells </span>
<span class="line">by the seashore</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-beginning-of-a-line-with" tabindex="-1"><a class="header-anchor" href="#_1-beginning-of-a-line-with"><span>1. Beginning of a line with <code>^</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">^by</span>
<span class="line">would match the line &quot;by the seashore&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-end-of-a-line-with" tabindex="-1"><a class="header-anchor" href="#_2-end-of-a-line-with"><span>2. End of a line with <code>$</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">seashore$</span>
<span class="line">would match the line &quot;by the seashore&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-matching-any-single-character-with" tabindex="-1"><a class="header-anchor" href="#_3-matching-any-single-character-with"><span>3. Matching any single character with <code>.</code></span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">b.</span>
<span class="line">would match by</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-bracket-notation-with" tabindex="-1"><a class="header-anchor" href="#_4-bracket-notation-with"><span>4. Bracket notation with <code>[]</code></span></a></h3><p>This can be a little tricky, brackets allow us to specify characters found within the bracket.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">d[iou]g</span>
<span class="line">would match: dig, dog, dug</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>The previous anchor tag <code>^</code> when used in a bracket means anything except the characters within the bracket.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">d[^i]g</span>
<span class="line">would match: dog and dug but not dig</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Brackets can also use ranges to increase the amount of characters you want to use.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">d[a-c]g</span>
<span class="line">will match patterns like dag, dbg, and dcg</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Be careful though as brackets are case sensitive:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">d[A-C]g</span>
<span class="line">will match dAg, dBg and dCg but not dag, dbg and dcg</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>And those are some basic regular expressions.</p><p>Try to combine regular expressions with grep and search through some files.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">grep</span> <span class="token punctuation">[</span>regular expression here<span class="token punctuation">]</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="_2-text-editors" tabindex="-1"><a class="header-anchor" href="#_2-text-editors"><span>2. Text Editors</span></a></h2><p>If you get a couple of diehard Linux users in a room and ask them what is the best text editor to use, you&#39;ll hear a never ending banter about the godliness of either vim or emacs. Don&#39;t even try to bring up using a GUI editor if you value your life.</p><p>Vim and emacs are popular text editors that are installed by default on most Linux distributions and they both have their pros and cons. If you want to get around your system like a ninja, you&#39;ll need to pick up one of these text editors to use. They are essentially coding, word document processing and basically all in one editors.</p><p>Take a little tour of vim and emacs:</p><ul><li><a href="http://www.vim.org" target="_blank" rel="noopener noreferrer">Vim</a></li><li><a href="https://www.gnu.org/software/emacs" target="_blank" rel="noopener noreferrer">emacs</a></li></ul><hr><h2 id="_3-vim-vi-improved" tabindex="-1"><a class="header-anchor" href="#_3-vim-vi-improved"><span>3. Vim (Vi Improved)</span></a></h2><p>Vim stands for <code>vi</code> (Improved) just like its name it stands for an improved version of the <code>vi</code> text editor command.</p><p>It&#39;s super lightweight, opening and editing a file with vim is quick and easy. It&#39;s also almost always available, if you booted up a random Linux distribution, chances are vim is installed by default.</p><p>To fire up vim just type:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">vim</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="_4-vim-search-patterns" tabindex="-1"><a class="header-anchor" href="#_4-vim-search-patterns"><span>4. Vim Search Patterns</span></a></h2><p>To search for an expression just type the <code>/</code> key and then your search result while you are in a vim session. Once you hit <kbd>Enter</kbd>, you can press <kbd>n</kbd> to go forward or <kbd>N</kbd> to go backward in your search results.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">My pretty file is very pretty.</span>
<span class="line"></span>
<span class="line">/pretty</span>
<span class="line">will find the pretty words in the text file.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>?</code> search command will search the text file backwards, so in the previous example, the last pretty would come up first.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">My pretty file is very pretty.</span>
<span class="line"></span>
<span class="line">?pretty</span>
<span class="line">will find the pretty words in the text file.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Play with the search key, open a text file in vim with: <code>vim [textfile]</code> and start searching!</p><hr><h2 id="_5-vim-navigation" tabindex="-1"><a class="header-anchor" href="#_5-vim-navigation"><span>5. Vim Navigation</span></a></h2><p>Now you may notice, the mouse is nowhere is use here. To navigate a text document in vim, use the following keys:</p><table><thead><tr><th style="text-align:left;">key(s)</th><th style="text-align:left;">description</th></tr></thead><tbody><tr><td style="text-align:left;"><kbd>h</kbd> or the <kbd>←</kbd></td><td style="text-align:left;">move you left one character</td></tr><tr><td style="text-align:left;"><kbd>k</kbd> or the <kbd>↑</kbd></td><td style="text-align:left;">move you up one line</td></tr><tr><td style="text-align:left;"><kbd>j</kbd> or the <kbd>↓</kbd></td><td style="text-align:left;">move you down one line</td></tr><tr><td style="text-align:left;"><kbd>l</kbd> or the <kbd>→</kbd></td><td style="text-align:left;">move you right one character</td></tr></tbody></table><hr><h2 id="_6-vim-appending-text" tabindex="-1"><a class="header-anchor" href="#_6-vim-appending-text"><span>6. Vim Appending Text</span></a></h2><p>Now you may have noticed if you tried to type something you wouldn&#39;t be able to. That&#39;s because you are in command mode. This can get pretty confusing especially if you just want to open a file and enter text. The command mode is used for when you enter commands like <kbd>h</kbd>,<kbd>j</kbd>,<kbd>k</kbd>.<kbd>l</kbd> etc. To insert text you&#39;ll need to enter insert mode first.</p><table><thead><tr><th style="text-align:left;">key(s)</th><th style="text-align:left;">description</th></tr></thead><tbody><tr><td style="text-align:left;"><kbd>i</kbd></td><td style="text-align:left;">insert text before the cursor</td></tr><tr><td style="text-align:left;"><kbd>O</kbd></td><td style="text-align:left;">insert text on the previous line</td></tr><tr><td style="text-align:left;"><kbd>o</kbd></td><td style="text-align:left;">insert text on the next line</td></tr><tr><td style="text-align:left;"><kbd>a</kbd></td><td style="text-align:left;">append text after the cursor</td></tr><tr><td style="text-align:left;"><kbd>A</kbd></td><td style="text-align:left;">append text at the end of the line</td></tr></tbody></table><p>Notice how when you type any of these insertion modes, you&#39;ll see that vim has entered <code>insert mode</code> at the bottom of the shell. To exit <code>insert mode</code> and go back to command mode, just hit the <kbd>Esc</kbd> key.</p><p>Play around with entering and exiting insertion mode.</p><hr><h2 id="_7-vim-editing" tabindex="-1"><a class="header-anchor" href="#_7-vim-editing"><span>7. Vim Editing</span></a></h2><p>Now that we have a couple of lines written, let&#39;s edit it a bit more and remove some cruft.</p><table><thead><tr><th style="text-align:left;">key(s)</th><th style="text-align:left;">description</th></tr></thead><tbody><tr><td style="text-align:left;"><kbd>x</kbd></td><td style="text-align:left;">used to cut the selected text also used for deleting characters</td></tr><tr><td style="text-align:left;"><kbd>d</kbd> + <kbd>d</kbd></td><td style="text-align:left;">used to delete the current line</td></tr><tr><td style="text-align:left;"><kbd>y</kbd></td><td style="text-align:left;">yank or copy whatever is selected</td></tr><tr><td style="text-align:left;"><kbd>y</kbd> + <kbd>y</kbd></td><td style="text-align:left;">yank or copy the current line</td></tr><tr><td style="text-align:left;"><kbd>p</kbd></td><td style="text-align:left;">paste the copied text before the cursor</td></tr></tbody></table><p>I know this lesson added some oddballs, open up a text editor and play around with these.</p><hr><h2 id="_8-vim-saving-and-exiting" tabindex="-1"><a class="header-anchor" href="#_8-vim-saving-and-exiting"><span>8. Vim Saving and Exiting</span></a></h2><p>Now that you&#39;ve done your editing it&#39;s time to actually save and quit out of vim:</p><table><thead><tr><th style="text-align:left;">key(s)</th><th style="text-align:left;">description</th></tr></thead><tbody><tr><td style="text-align:left;"><kbd>:</kbd> + <kbd>w</kbd></td><td style="text-align:left;">writes or saves the file</td></tr><tr><td style="text-align:left;"><kbd>:</kbd> + <kbd>q</kbd></td><td style="text-align:left;">quit out of vim</td></tr><tr><td style="text-align:left;"><kbd>:</kbd> + <kbd>w</kbd> + <kbd>q</kbd></td><td style="text-align:left;">write and then quit</td></tr><tr><td style="text-align:left;"><kbd>:</kbd> + <kbd>q</kbd> + <kbd>!</kbd></td><td style="text-align:left;">quit out of vim without saving the file</td></tr><tr><td style="text-align:left;"><kbd>Z</kbd> + <kbd>Z</kbd></td><td style="text-align:left;">equivalent of <code>:wq</code>, but one character faster</td></tr><tr><td style="text-align:left;"><kbd>u</kbd></td><td style="text-align:left;">undo your last action</td></tr><tr><td style="text-align:left;"><kbd>Ctrl</kbd> + <kbd>r</kbd></td><td style="text-align:left;">redo your last action</td></tr></tbody></table><p>You may not think ZZ is necessary, but you&#39;ll eventually see that your fingers may tend to lean towards this rather than :wq.</p><p>Whew that was a lot of information to take about Vim. Now that you know some basic commands and navigation, you can start editing some text files. There are many more options you can use in vim to increase your ability to master this text editor, head on to Vim&#39;s online guide to take a look.</p><hr><h2 id="_9-emacs" tabindex="-1"><a class="header-anchor" href="#_9-emacs"><span>9. Emacs</span></a></h2><p>Emacs is for users who want an extremely powerful text editor, which may be an understatement because you essentially live in emacs. You can do all your code editing, file manipulation, etc all within emacs. It&#39;s a bit slower to load up and the learning curve is a bit steeper than vim, but if you want a powerful editor that is extremely extensible, this is the one for you. When I say extensible, I literally mean you can write up scripts for emacs that extend its functionality.</p><p>To start emacs just use:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">emacs</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You should be greeted with the default welcome buffer.</p><p>Buffers in emacs is what your text resides in. So if you open up a file, a buffer is used to store that file&#39;s content. You can have multiple buffers open at the same time and you can easily switch between buffers.</p><hr><h2 id="_10-emacs-manipulate-files" tabindex="-1"><a class="header-anchor" href="#_10-emacs-manipulate-files"><span>10. Emacs Manipulate Files</span></a></h2><p>In a lot (if not all) of Emacs documentation, you will see the syntax <code>C</code>-[letter]. This just means hit the <kbd>Ctrl</kbd> <code>letter</code>, but for shorthand purposes, we&#39;ll call <kbd>Ctrl</kbd> with <code>C</code>. If you see syntax such as <code>M-[letter]</code>, that means use the Meta key, most commonly the <kbd>Alt</kbd> key.</p><h3 id="saving-files" tabindex="-1"><a class="header-anchor" href="#saving-files"><span>Saving files</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">C-x C-s - Save a file</span>
<span class="line">C-x C-w - Save file as</span>
<span class="line">C-x s - Save all</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The save file options will prompt you if you want to save each file.</p><h3 id="opening-a-file" tabindex="-1"><a class="header-anchor" href="#opening-a-file"><span>Opening a file</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">C-x C-f</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This will prompt you to type a filename to open. If you do not have a file that already exists, it will create a new file. You can load up a directory as well.</p><p>Play around with opening files and saving files.</p><hr><h2 id="_11-emacs-buffer-navigation" tabindex="-1"><a class="header-anchor" href="#_11-emacs-buffer-navigation"><span>11. Emacs Buffer Navigation</span></a></h2><p>To move around buffers (or files you&#39;re visiting) use the following commands:</p><h3 id="switch-buffers" tabindex="-1"><a class="header-anchor" href="#switch-buffers"><span>Switch buffers</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">C-x b - switch buffer</span>
<span class="line">C-x right arrow - right-cycle through buffer</span>
<span class="line">C-x left arrow - left-cycle through buffer</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="close-the-buffer" tabindex="-1"><a class="header-anchor" href="#close-the-buffer"><span>Close the buffer</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">C-x k</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="split-the-current-buffer" tabindex="-1"><a class="header-anchor" href="#split-the-current-buffer"><span>Split the current buffer</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">C-x 2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This allows you see multiple buffers on one screen. To move between these buffers use: <code>C-x o</code></p><h3 id="set-a-single-buffer-as-the-current-screen" tabindex="-1"><a class="header-anchor" href="#set-a-single-buffer-as-the-current-screen"><span>Set a single buffer as the current screen</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">C-x 1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you ever used a terminal multiplexer like <code>screen</code> and <code>tmux</code>, the buffer commands will feel very familiar.</p><p>Play around with buffers.</p><hr><h2 id="_12-emacs-editing" tabindex="-1"><a class="header-anchor" href="#_12-emacs-editing"><span>12. Emacs Editing</span></a></h2><p>Text Navigation</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">C-up arrow : move up one paragraph</span>
<span class="line">C-down arrow: move down one paragraph</span>
<span class="line">C-left arrow: move one word left</span>
<span class="line">C-right arrow: move one word right</span>
<span class="line">M-&gt; : move to the end of the buffer</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With text navigation, your regular text buttons work as they should, <kbd>home</kbd>, <kbd>end</kbd>, <kbd>page up</kbd>, <kbd>page down</kbd> and the arrow keys, etc.</p><h3 id="cutting-and-pasting" tabindex="-1"><a class="header-anchor" href="#cutting-and-pasting"><span>Cutting and Pasting</span></a></h3><p>To cut (kill) or paste (yank) in Emacs you&#39;ll need to be able to select text first. To select text, move your cursor to where you want to cut or paste and hit</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">C-space key</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>then you can use the navigation keys to select the text you want. Now you can do the cut and paste like so:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">C-w : cut</span>
<span class="line">C-y : yank</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Play around with text navigation.</p><hr><h2 id="_13-emacs-exiting-and-help" tabindex="-1"><a class="header-anchor" href="#_13-emacs-exiting-and-help"><span>13. Emacs Exiting and Help</span></a></h2><h3 id="to-close-out-of-emacs" tabindex="-1"><a class="header-anchor" href="#to-close-out-of-emacs"><span>To close out of emacs</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">C-x C-c</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you have any open buffers, it will ask you to save it before closing out of emacs.</p><h3 id="confused" tabindex="-1"><a class="header-anchor" href="#confused"><span>Confused?</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">C-h C-h : help menu</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="undo" tabindex="-1"><a class="header-anchor" href="#undo"><span>Undo</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">C-x u</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>As you can see Emacs has more moving parts, so the learning curve is a little steeper. In exchange though, you get a very powerful text editor.</p><p>Visit the Emacs site to learn about more commands. <a href="https://www.gnu.org/software/emacs" target="_blank" rel="noopener noreferrer">Emacs</a></p>`,117);function k(l,w){const a=s("router-link"),r=s("VPCard");return m(),o("div",null,[e("h1",b,[e("a",f,[e("span",null,c(l.$frontmatter.title)+" 관련",1)])]),e("nav",v,[e("ul",null,[e("li",null,[t(a,{to:"#_1-regex-regular-expressions"},{default:n(()=>[i("1. regex (Regular Expressions)")]),_:1}),e("ul",null,[e("li",null,[t(a,{to:"#_1-beginning-of-a-line-with"},{default:n(()=>[i("1. Beginning of a line with ^")]),_:1})]),e("li",null,[t(a,{to:"#_2-end-of-a-line-with"},{default:n(()=>[i("2. End of a line with $")]),_:1})]),e("li",null,[t(a,{to:"#_3-matching-any-single-character-with"},{default:n(()=>[i("3. Matching any single character with .")]),_:1})]),e("li",null,[t(a,{to:"#_4-bracket-notation-with"},{default:n(()=>[i("4. Bracket notation with []")]),_:1})])])]),e("li",null,[t(a,{to:"#_2-text-editors"},{default:n(()=>[i("2. Text Editors")]),_:1})]),e("li",null,[t(a,{to:"#_3-vim-vi-improved"},{default:n(()=>[i("3. Vim (Vi Improved)")]),_:1})]),e("li",null,[t(a,{to:"#_4-vim-search-patterns"},{default:n(()=>[i("4. Vim Search Patterns")]),_:1})]),e("li",null,[t(a,{to:"#_5-vim-navigation"},{default:n(()=>[i("5. Vim Navigation")]),_:1})]),e("li",null,[t(a,{to:"#_6-vim-appending-text"},{default:n(()=>[i("6. Vim Appending Text")]),_:1})]),e("li",null,[t(a,{to:"#_7-vim-editing"},{default:n(()=>[i("7. Vim Editing")]),_:1})]),e("li",null,[t(a,{to:"#_8-vim-saving-and-exiting"},{default:n(()=>[i("8. Vim Saving and Exiting")]),_:1})]),e("li",null,[t(a,{to:"#_9-emacs"},{default:n(()=>[i("9. Emacs")]),_:1})]),e("li",null,[t(a,{to:"#_10-emacs-manipulate-files"},{default:n(()=>[i("10. Emacs Manipulate Files")]),_:1}),e("ul",null,[e("li",null,[t(a,{to:"#saving-files"},{default:n(()=>[i("Saving files")]),_:1})]),e("li",null,[t(a,{to:"#opening-a-file"},{default:n(()=>[i("Opening a file")]),_:1})])])]),e("li",null,[t(a,{to:"#_11-emacs-buffer-navigation"},{default:n(()=>[i("11. Emacs Buffer Navigation")]),_:1}),e("ul",null,[e("li",null,[t(a,{to:"#switch-buffers"},{default:n(()=>[i("Switch buffers")]),_:1})]),e("li",null,[t(a,{to:"#close-the-buffer"},{default:n(()=>[i("Close the buffer")]),_:1})]),e("li",null,[t(a,{to:"#split-the-current-buffer"},{default:n(()=>[i("Split the current buffer")]),_:1})]),e("li",null,[t(a,{to:"#set-a-single-buffer-as-the-current-screen"},{default:n(()=>[i("Set a single buffer as the current screen")]),_:1})])])]),e("li",null,[t(a,{to:"#_12-emacs-editing"},{default:n(()=>[i("12. Emacs Editing")]),_:1}),e("ul",null,[e("li",null,[t(a,{to:"#cutting-and-pasting"},{default:n(()=>[i("Cutting and Pasting")]),_:1})])])]),e("li",null,[t(a,{to:"#_13-emacs-exiting-and-help"},{default:n(()=>[i("13. Emacs Exiting and Help")]),_:1}),e("ul",null,[e("li",null,[t(a,{to:"#to-close-out-of-emacs"},{default:n(()=>[i("To close out of emacs")]),_:1})]),e("li",null,[t(a,{to:"#confused"},{default:n(()=>[i("Confused?")]),_:1})]),e("li",null,[t(a,{to:"#undo"},{default:n(()=>[i("Undo")]),_:1})])])])])]),x,t(r,u(h({title:"Advanced Text-Fu",desc:"Navigate text like a Linux spider monkey with vim and emacs.",link:"https://linuxjourney.com/lesson/regular-expressions-regex",logo:"https://linuxjourney.com/assets/text-fu-advanced-384999618925a5ad54abb9113cfab05f5bd3f7e341d16aecbcbf1c83711e2378.png",background:"rgba(24,188,156,0.2)"})),null,16),y])}const C=d(g,[["render",k],["__file","01d-advanced-text-fu.html.vue"]]),E=JSON.parse('{"path":"/devops/linux-journey/01-grasshopper/01d-advanced-text-fu.html","title":"GrassHopper > 01d. Advanced Text-Fu","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"GrassHopper > 01d. Advanced Text-Fu","description":"Linux Journey > GrassHopper > 01d. Advanced Text-Fu","category":["Linux"],"tag":["crashcourse","linux","os","networking"],"head":[[{"meta":null},{"property":"og:title","content":"Linux Journey > GrassHopper > 01d. Advanced Text-Fu"},{"property":"og:description","content":"01d. Advanced Text-Fu"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/devops/linux-journey/01-grasshopper/01d-advanced-text-fu.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/devops/linux-journey/01-grasshopper/01d-advanced-text-fu.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"GrassHopper > 01d. Advanced Text-Fu"}],["meta",{"property":"og:description","content":"Linux Journey > GrassHopper > 01d. Advanced Text-Fu"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-03-20T07:03:32.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:tag","content":"os"}],["meta",{"property":"article:tag","content":"networking"}],["meta",{"property":"article:modified_time","content":"2024-03-20T07:03:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"GrassHopper > 01d. Advanced Text-Fu\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-20T07:03:32.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1. regex (Regular Expressions)","slug":"_1-regex-regular-expressions","link":"#_1-regex-regular-expressions","children":[{"level":3,"title":"1. Beginning of a line with ^","slug":"_1-beginning-of-a-line-with","link":"#_1-beginning-of-a-line-with","children":[]},{"level":3,"title":"2. End of a line with $","slug":"_2-end-of-a-line-with","link":"#_2-end-of-a-line-with","children":[]},{"level":3,"title":"3. Matching any single character with .","slug":"_3-matching-any-single-character-with","link":"#_3-matching-any-single-character-with","children":[]},{"level":3,"title":"4. Bracket notation with []","slug":"_4-bracket-notation-with","link":"#_4-bracket-notation-with","children":[]}]},{"level":2,"title":"2. Text Editors","slug":"_2-text-editors","link":"#_2-text-editors","children":[]},{"level":2,"title":"3. Vim (Vi Improved)","slug":"_3-vim-vi-improved","link":"#_3-vim-vi-improved","children":[]},{"level":2,"title":"4. Vim Search Patterns","slug":"_4-vim-search-patterns","link":"#_4-vim-search-patterns","children":[]},{"level":2,"title":"5. Vim Navigation","slug":"_5-vim-navigation","link":"#_5-vim-navigation","children":[]},{"level":2,"title":"6. Vim Appending Text","slug":"_6-vim-appending-text","link":"#_6-vim-appending-text","children":[]},{"level":2,"title":"7. Vim Editing","slug":"_7-vim-editing","link":"#_7-vim-editing","children":[]},{"level":2,"title":"8. Vim Saving and Exiting","slug":"_8-vim-saving-and-exiting","link":"#_8-vim-saving-and-exiting","children":[]},{"level":2,"title":"9. Emacs","slug":"_9-emacs","link":"#_9-emacs","children":[]},{"level":2,"title":"10. Emacs Manipulate Files","slug":"_10-emacs-manipulate-files","link":"#_10-emacs-manipulate-files","children":[{"level":3,"title":"Saving files","slug":"saving-files","link":"#saving-files","children":[]},{"level":3,"title":"Opening a file","slug":"opening-a-file","link":"#opening-a-file","children":[]}]},{"level":2,"title":"11. Emacs Buffer Navigation","slug":"_11-emacs-buffer-navigation","link":"#_11-emacs-buffer-navigation","children":[{"level":3,"title":"Switch buffers","slug":"switch-buffers","link":"#switch-buffers","children":[]},{"level":3,"title":"Close the buffer","slug":"close-the-buffer","link":"#close-the-buffer","children":[]},{"level":3,"title":"Split the current buffer","slug":"split-the-current-buffer","link":"#split-the-current-buffer","children":[]},{"level":3,"title":"Set a single buffer as the current screen","slug":"set-a-single-buffer-as-the-current-screen","link":"#set-a-single-buffer-as-the-current-screen","children":[]}]},{"level":2,"title":"12. Emacs Editing","slug":"_12-emacs-editing","link":"#_12-emacs-editing","children":[{"level":3,"title":"Cutting and Pasting","slug":"cutting-and-pasting","link":"#cutting-and-pasting","children":[]}]},{"level":2,"title":"13. Emacs Exiting and Help","slug":"_13-emacs-exiting-and-help","link":"#_13-emacs-exiting-and-help","children":[{"level":3,"title":"To close out of emacs","slug":"to-close-out-of-emacs","link":"#to-close-out-of-emacs","children":[]},{"level":3,"title":"Confused?","slug":"confused","link":"#confused","children":[]},{"level":3,"title":"Undo","slug":"undo","link":"#undo","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1710918212000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":5}]},"readingTime":{"minutes":6.06,"words":1818},"filePathRelative":"devops/linux-journey/01-grasshopper/01d-advanced-text-fu.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{C as comp,E as data};
