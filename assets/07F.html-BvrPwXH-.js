import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,a as e,t as h,b as s,n as m,g as _,w as c,d as n,e as a,r as t,o as k}from"./app-U_bew1in.js";const b={},v={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},T=e("hr",null,null,-1),y=e("code",null,"ENTRYPOINT",-1),N=e("code",null,"docker run",-1),R=e("code",null,"docker start",-1),O=e("code",null,"ENTRYPOINT",-1),q=e("code",null,"Dockerfile",-1),P=e("hr",null,null,-1),D={id:"셸-bin-sh-로-명령-실행하기",tabindex:"-1"},I={class:"header-anchor",href:"#셸-bin-sh-로-명령-실행하기"},E=e("code",null,"/bin/sh",-1),w=e("code",null,"Dockerfile",-1),x=a(`<div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line"><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> touch /home/hello/hello.txt</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1),Y=e("code",null,"ENTRYPOINT <명령>",-1),F=e("code",null,"FROM",-1),j=e("code",null,"/bin/sh",-1),M=e("code",null,"/bin/sh",-1),C=e("hr",null,null,-1),V=e("h2",{id:"셸-없이-바로-실행하기",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#셸-없이-바로-실행하기"},[e("span",null,"셸 없이 바로 실행하기")])],-1),Z=e("code",null,"Dockerfile",-1),S=a(`<div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line"><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">&quot;/home/hello/hello.sh&quot;</span>]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1),A=e("code",null,"Dockerfile",-1),B=a(`<div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line"><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">&quot;/home/hello/hello.sh&quot;</span>, <span class="token string">&quot;--hello=1&quot;</span>, <span class="token string">&quot;--world=2&quot;</span>]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1),K=e("code",null,'ENTRYPOINT ["<실행 파일>", "<매개 변수1>", "<매개 변수2>"]',-1),z=e("code",null,"/bin/sh",-1),U=e("p",null,[e("code",null,"CMD"),n("와 "),e("code",null,"ENTRYPOINT"),n("는 컨테이너가 생성될 때 명령이 실행되는 것은 동일하지만 "),e("code",null,"docker run"),n(" 명령에서 동작 방식이 다릅니다.")],-1),H=e("code",null,"Dockerfile",-1),J=e("code",null,"echo",-1),L=e("code",null,"hello",-1),$=e("code",null,"Dockerfile",-1),G=a(`<div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line"><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:latest</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;echo&quot;</span>, <span class="token string">&quot;hello&quot;</span>]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>컨테이너를 생성할 때 <code>docker run &lt;이미지&gt; &lt;실행할 파일&gt;</code> 형식인데 이미지 다음에 실행할 파일을 설정할 수 있습니다. <code>docker run</code> 명령에서 실행할 파일을 설정하면 CMD는 무시됩니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> build <span class="token parameter variable">--tag</span> example <span class="token builtin class-name">.</span></span>
<span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run example <span class="token builtin class-name">echo</span> world</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># world</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Q=e("code",null,'CMD ["echo", "hello"]',-1),W=e("code",null,"docker run",-1),X=e("code",null,"echo world",-1),ee=e("code",null,"world",-1),ne=e("code",null,"docker run",-1),se=e("code",null,"<실행할 파일>",-1),oe=e("code",null,"Dockerfile",-1),ae=e("code",null,"CMD",-1),te=e("code",null,"ENTRYPOINT",-1),le=e("code",null,"Dockerfile",-1),ce=e("code",null,"ENTRYPOINT",-1),ie=e("code",null,"echo",-1),de=e("code",null,"hello",-1),re=e("code",null,"Dockerfile",-1),pe=a(`<div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line"><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:latest</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">&quot;echo&quot;</span>, <span class="token string">&quot;hello&quot;</span>]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ue=e("code",null,"Dockerfile",-1),he=e("code",null,"docker run",-1),me=e("code",null,"docker run",-1),_e=e("code",null,"ENTRYPOINT",-1),ke=a(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> build <span class="token parameter variable">--tag</span> example <span class="token builtin class-name">.</span></span>
<span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run example <span class="token builtin class-name">echo</span> world</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># hello echo world</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ENTRYPOINT [&quot;echo&quot;, &quot;hello&quot;]</code>에서 <code>echo hello</code>가 실행되어 <code>hello</code>가 출력되고, <code>docker run</code> 명령에서 설정한 내용이 <code>ENTRYPOINT [&quot;echo&quot;, &quot;hello&quot;]</code>의 매개 변수로 처리되어 <code>echo world</code>도 함께 출력됩니다. 셸에서는 다음과 같이 표현할 수 있습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> hello <span class="token builtin class-name">echo</span> world</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># hello echo world</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>echo</code> 명령 아닌 다른 방식으로 실행해봅니다. 다음과 같이 <code>1 2 3 4</code>를 넘겨주면 그대로 <code>1 2 3 4</code>가 출력됩니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run example <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># hello 1 2 3 4</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),be=e("code",null,"ENTRYPOINT",-1),ve=e("code",null,"docker run",-1),ge=e("code",null,"--entrypoint",-1),fe=e("code",null,"--entrypoint",-1),Te=e("code",null,"cat",-1),ye=e("code",null,"/etc/",-1),Ne=e("code",null,"hostname",-1),Re=a(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">--entrypoint</span><span class="token operator">=</span><span class="token string">&quot;cat&quot;</span> example /etc/hostname</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># 9efe43ea4d40</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Oe=e("code",null,"--entrypoint",-1),qe=e("code",null,"Dockerfile",-1),Pe=e("code",null,"ENTRYPOINT",-1),De=e("hr",null,null,-1);function Ie(i,Ee){const d=t("VPCard"),o=t("FontIcon"),l=t("router-link"),r=t("SiteInfo");return k(),u("div",null,[e("h1",v,[e("a",g,[e("span",null,h(i.$frontmatter.title)+" 관련",1)])]),s(d,m(_({title:"목차",desc:"언제나 최신 Docker",link:"/docker/always-up-to-date-docker/README.md",logo:"https://pyrasis.com/assets/images/pyrasis.png",background:"rgba(31,41,55,0.2)"})),null,16),e("nav",f,[e("ul",null,[e("li",null,[s(l,{to:"#셸-bin-sh-로-명령-실행하기"},{default:c(()=>[n("셸("),s(o,{icon:"iconfont icon-shell "}),n("/bin/sh)로 명령 실행하기")]),_:1})]),e("li",null,[s(l,{to:"#셸-없이-바로-실행하기"},{default:c(()=>[n("셸 없이 바로 실행하기")]),_:1})])])]),T,s(r,{name:"7장 - 6. ENTRYPOINT",desc:"언제나 최신 Docker",url:"https://pyrasis.com/jHLsAlwaysUpToDateDocker/Unit07/06",logo:"https://pyrasis.com/assets/images/pyrasis.png",preview:"https://pyrasis.com/assets/images/profile1.png"}),e("p",null,[y,n("는 컨테이너가 시작되었을 때 스크립트 혹은 명령을 실행합니다. 즉 "),N,n(" 명령으로 컨테이너를 생성하거나, "),R,n(" 명령으로 정지된 컨테이너를 시작할 때 실행됩니다. "),O,n("는 "),s(o,{icon:"fa-brands fa-docker"}),q,n("에서 단 한번만 사용할 수 있습니다.")]),P,e("h2",D,[e("a",I,[e("span",null,[n("셸("),s(o,{icon:"iconfont icon-shell "}),E,n(")로 명령 실행하기")])])]),e("blockquote",null,[e("p",null,[n("."),s(o,{icon:"fa-brands fa-docker"}),w])]),x,e("p",null,[Y,n(" 형식이며 셸 스크립트 구문을 사용할 수 있습니다. "),F,n("으로 설정한 이미지에 포함된 "),s(o,{icon:"iconfont icon-shell "}),j,n(" 실행 파일을 사용하게 되며 "),s(o,{icon:"iconfont icon-shell "}),M,n(" 실행 파일이 없으면 사용할 수 없습니다.")]),C,V,e("blockquote",null,[e("p",null,[n("."),s(o,{icon:"fa-brands fa-docker"}),Z])]),S,e("blockquote",null,[e("p",null,[n("."),s(o,{icon:"fa-brands fa-docker"}),A])]),B,e("p",null,[K,n(" 형식입니다. 실행 파일과 매개 변수를 배열 형태로 설정합니다. FROM으로 설정한 이미지의 "),s(o,{icon:"iconfont icon-shell "}),z,n(" 실행 파일을 사용하지 않는 방식입니다. 셸 스크립트 문법이 인식되지 않으므로 셸 스크립트 문법과 관련된 문자를 그대로 실행 파일에 넘겨줄 수 있습니다.")]),U,e("p",null,[n("다음과 같이 "),s(o,{icon:"fa-brands fa-docker"}),H,n("에서 CMD로 "),J,n(" 명령을 사용하여 "),L,n("를 출력합니다.")]),e("blockquote",null,[e("p",null,[n("."),s(o,{icon:"fa-brands fa-docker"}),$])]),G,e("p",null,[Q,n("는 무시되고 "),W,n(" 명령에서 설정한 "),X,n("가 실행되어 "),ee,n("가 출력되었습니다. "),ne,n(" 명령에서 설정한 "),se,n("과 "),s(o,{icon:"fa-brands fa-docker"}),oe,n("의 "),ae,n("는 같은 기능입니다.")]),e("p",null,[n("이제 "),te,n("입니다. 다음과 같이 "),s(o,{icon:"fa-brands fa-docker"}),le,n("에서 "),ce,n("로 "),ie,n(" 명령을 사용하여 "),de,n("를 출력합니다.")]),e("blockquote",null,[e("p",null,[n("."),s(o,{icon:"fa-brands fa-docker"}),re])]),pe,e("p",null,[n("."),s(o,{icon:"fa-brands fa-docker"}),ue,n("을 빌드하여 "),he,n(" 명령으로 실행합니다. "),me,n(" 명령에서 실행할 파일을 설정하면 "),_e,n(" 무시되지 않고, 실행할 파일 설정 자체를 매개 변수로 받아서 처리합니다.")]),ke,e("p",null,[be,n("는 "),ve,n(" 명령에서 "),ge,n(" 옵션으로도 설정할 수 있습니다. "),fe,n(" 옵션으로 "),Te,n("을 실행하고 "),s(o,{icon:"fas fa-folder-open"}),ye,s(o,{icon:"fas fa-file-lines"}),Ne,n(" 파일의 내용을 출력합니다.")]),Re,e("p",null,[Oe,n(" 옵션을 설정하면 "),s(o,{icon:"fa-brands fa-docker"}),qe,n("에 설정한 "),Pe,n("는 무시됩니다.")]),De])}const Ye=p(b,[["render",Ie],["__file","07F.html.vue"]]),Fe=JSON.parse('{"path":"/docker/always-up-to-date-docker/07F.html","title":"07F. ENTRYPOINT","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"07F. ENTRYPOINT","description":"언제나 최신 Docker > 07F. ENTRYPOINT","category":["DevOps","Docker"],"tag":["crashcourse","pyrasis.com","docker","devops"],"head":[[{"meta":null},{"property":"og:title","content":"언제나 최신 Docker > 07F. ENTRYPOINT"},{"property":"og:description","content":"07F. ENTRYPOINT"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/docker/always-up-to-date-docker/07F.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/docker/always-up-to-date-docker/07F.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"07F. ENTRYPOINT"}],["meta",{"property":"og:description","content":"언제나 최신 Docker > 07F. ENTRYPOINT"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"pyrasis.com"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:published_time","content":"2022-10-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"07F. ENTRYPOINT\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]],"date":"2022-10-03T00:00:00.000Z","isOriginal":false},"headers":[{"level":2,"title":"셸(/bin/sh)로 명령 실행하기","slug":"셸-bin-sh-로-명령-실행하기","link":"#셸-bin-sh-로-명령-실행하기","children":[]},{"level":2,"title":"셸 없이 바로 실행하기","slug":"셸-없이-바로-실행하기","link":"#셸-없이-바로-실행하기","children":[]}],"git":{"createdTime":1716977950000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":3}]},"readingTime":{"minutes":1.38,"words":415},"filePathRelative":"docker/always-up-to-date-docker/07F.md","localizedDate":"2022년 10월 3일","excerpt":"\\n"}');export{Ye as comp,Fe as data};
