import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as s,t as g,b as n,w as o,n as r,g as l,d as e,e as a,r as p,o as m}from"./app-U_bew1in.js";const f={},k={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"},y=s("hr",null,null,-1),b=s("h2",{id:"closures-part-one",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#closures-part-one"},[s("span",null,"Closures, part one")])],-1),_=s("p",null,"Brace yourself, because today we’re covering the first thing in Swift that many people have hard time understanding. Please keep in mind Flip Wilson's law: “you can't expect to hit the jackpot if you don't put a few nickels in the machine.”",-1),x=s("p",null,[s("strong",null,"Today you have only five one-minute videos to watch, just to make sure you have time to watch videos twice if you need to."),e(" Once you’ve completed each video you can read the optional extra section, and there’s a short test to help make sure you’ve understood what was taught.")],-1),S=s("h3",{id:"_1-creating-basic-closures",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-creating-basic-closures"},[s("span",null,"1. Creating basic closures")])],-1),q={class:"hint-container details"},T=s("summary",null,"1. Creating basic closures",-1),C=a(`<p>Swift lets us use functions just like any other type such as strings and integers. This means you can create a function and assign it to a variable, call that function using that variable, and even pass that function into other functions as parameters.</p><p>Functions used in this way are called closures, and although they work like functions they are written a little differently.</p><p>Let’s start with a simple example that prints a message:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> driving <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I&#39;m driving in my car&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That effectively creates a function without a name, and assigns that function to <code>driving</code>. You can now call <code>driving()</code> as if it were a regular function, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">driving</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,6),D=a('<div class="hint-container info"><p class="hint-container-title">Creating basic closures - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/what-the-heck-are-closures-and-why-does-swift-love-them-so-much" target="_blank" rel="noopener noreferrer">What the heck are closures and why does Swift love them so much?</a></li><li>Test: <a href="https://hackingwithswift.com/review/creating-basic-closures" target="_blank" rel="noopener noreferrer">Creating basic closures</a></li></ul></div><h3 id="_2-accepting-parameters-in-a-closure" tabindex="-1"><a class="header-anchor" href="#_2-accepting-parameters-in-a-closure"><span>2. Accepting parameters in a closure</span></a></h3>',2),j={class:"hint-container details"},I=s("summary",null,"2. Accepting parameters in a closure",-1),R=a(`<p>When you create closures, they don’t have a name or space to write any parameters. That doesn’t mean they can’t accept parameters, just that they do so in a different way: they are listed inside the open braces.</p><p>To make a closure accept parameters, list them inside parentheses just after the opening brace, then write <code>in</code> so that Swift knows the main body of the closure is starting.</p><p>For example, we could make a closure that accepts a place name string as its only parameter like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> driving <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>place<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token keyword">in</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I&#39;m going to </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">place</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> in my car&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>One of the differences between functions and closures is that you don’t use parameter labels when running closures. So, to call <code>driving()</code> now we’d write this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">driving</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;London&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,6),A=a('<div class="hint-container info"><p class="hint-container-title">Accepting parameters in a closure - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-are-swifts-closure-parameters-inside-the-braces" target="_blank" rel="noopener noreferrer">Why are Swift’s closure parameters inside the braces?</a></li><li>Test: <a href="https://hackingwithswift.com/review/accepting-parameters-in-a-closure" target="_blank" rel="noopener noreferrer">Accepting parameters in a closure</a></li></ul></div><h3 id="_3-returning-values-from-a-closure" tabindex="-1"><a class="header-anchor" href="#_3-returning-values-from-a-closure"><span>3. Returning values from a closure</span></a></h3>',2),V={class:"hint-container details"},W=s("summary",null,"3. Returning values from a closure",-1),O=a(`<p>Closures can also return values, and they are written similarly to parameters: you write them inside your closure, directly before the <code>in</code> keyword.</p><p>To demonstrate this, we’re going to take our <code>driving()</code> closure and make it return its value rather than print it directly. Here’s the original:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> driving <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>place<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token keyword">in</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I&#39;m going to </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">place</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> in my car&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We want a closure that returns a string rather than printing the message directly, so we need to use <code>-&gt; String</code> before <code>in</code>, then use <code>return</code> just like a normal function:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> drivingWithReturn <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>place<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token keyword">in</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;I&#39;m going to </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">place</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> in my car&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can now run that closure and print its return value:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token function">drivingWithReturn</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;London&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,7),B=a('<div class="hint-container info"><p class="hint-container-title">Returning values from a closure - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/how-do-you-return-a-value-from-a-closure-that-takes-no-parameters" target="_blank" rel="noopener noreferrer">How do you return a value from a closure that takes no parameters?</a></li><li>Test: <a href="https://hackingwithswift.com/review/returning-values-from-a-closure" target="_blank" rel="noopener noreferrer">Returning values from a closure</a></li></ul></div><h3 id="_4-closures-as-parameters" tabindex="-1"><a class="header-anchor" href="#_4-closures-as-parameters"><span>4. Closures as parameters</span></a></h3>',2),P={class:"hint-container details"},F=s("summary",null,"4. Closures as parameters",-1),N=a(`<p>Because closures can be used just like strings and integers, you can pass them into functions. The syntax for this can hurt your brain at first, so we’re going to take it slow.</p><p>First, here’s our basic <code>driving()</code> closure again</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> driving <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I&#39;m driving in my car&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If we wanted to pass that closure into a function so it can be run inside that function, we would specify the parameter type as <code>() -&gt; Void</code>. That means “accepts no parameters, and returns <code>Void”</code> – Swift’s way of saying “nothing”.</p><p>So, we can write a <code>travel()</code> function that accepts different kinds of traveling actions, and prints a message before and after:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">travel</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I&#39;m getting ready to go.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I arrived!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can now call that using our <code>driving</code> closure, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">travel</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> driving<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,8),z=a('<div class="hint-container info"><p class="hint-container-title">Closures as parameters - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-would-you-want-to-use-closures-as-parameters" target="_blank" rel="noopener noreferrer">Why would you want to use closures as parameters?</a></li><li>Test: <a href="https://hackingwithswift.com/review/closures-as-parameters" target="_blank" rel="noopener noreferrer">Closures as parameters</a></li></ul></div><h3 id="_5-trailing-closure-syntax" tabindex="-1"><a class="header-anchor" href="#_5-trailing-closure-syntax"><span>5. Trailing closure syntax</span></a></h3>',2),K={class:"hint-container details"},L=s("summary",null,"5. Trailing closure syntax",-1),Z=a(`<p>If the last parameter to a function is a closure, Swift lets you use special syntax called trailing closure syntax. Rather than pass in your closure as a parameter, you pass it directly after the function inside braces.</p><p>To demonstrate this, here’s our <code>travel()</code> function again. It accepts an <code>action</code> closure so that it can be run between two <code>print()</code> calls:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">travel</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I&#39;m getting ready to go.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I arrived!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Because its last parameter is a closure, we can call <code>travel()</code> using trailing closure syntax like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">travel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I&#39;m driving in my car&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In fact, because there aren’t any other parameters, we can eliminate the parentheses entirely:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">travel <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I&#39;m driving in my car&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Trailing closure syntax is extremely common in Swift, so it’s worth getting used to.</p>`,8),H=a('<div class="hint-container info"><p class="hint-container-title">Trailing closure syntax - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-have-trailing-closure-syntax" target="_blank" rel="noopener noreferrer">Why does Swift have trailing closure syntax?</a></li><li>Test: <a href="https://hackingwithswift.com/review/trailing-closure-syntax" target="_blank" rel="noopener noreferrer">Trailing closure syntax</a></li></ul></div><p>Sometimes people ask me “why do you start some topics by saying they are hard – aren’t you just putting people off?”</p><p>Obviously my goal is not to put you off Swift. Instead, my hope is that when you struggle with something you don’t ever think to yourself “I’m not cut out for Swift.” If you find closures hard it’s not because you aren’t smart enough – they are hard, so it’s just a sign your brain is working properly.</p><p>Don’t despair. Sometimes fighting to learn something makes it stick in your head better – there is no learning without struggle!</p><p><strong>You can do this.</strong></p><hr>',6);function Y(u,E){const t=p("router-link"),i=p("VPCard"),c=p("VidStack");return m(),h("div",null,[s("h1",k,[s("a",v,[s("span",null,g(u.$frontmatter.title)+" 관련",1)])]),s("nav",w,[s("ul",null,[s("li",null,[n(t,{to:"#closures-part-one"},{default:o(()=>[e("Closures, part one")]),_:1}),s("ul",null,[s("li",null,[n(t,{to:"#_1-creating-basic-closures"},{default:o(()=>[e("1. Creating basic closures")]),_:1})]),s("li",null,[n(t,{to:"#_2-accepting-parameters-in-a-closure"},{default:o(()=>[e("2. Accepting parameters in a closure")]),_:1})]),s("li",null,[n(t,{to:"#_3-returning-values-from-a-closure"},{default:o(()=>[e("3. Returning values from a closure")]),_:1})]),s("li",null,[n(t,{to:"#_4-closures-as-parameters"},{default:o(()=>[e("4. Closures as parameters")]),_:1})]),s("li",null,[n(t,{to:"#_5-trailing-closure-syntax"},{default:o(()=>[e("5. Trailing closure syntax")]),_:1})])])])])]),y,n(i,r(l({title:"100 Days of Swift - Day 6",desc:"Closures, part one",link:"https://www.hackingwithswift.com/100/6",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),b,_,x,S,s("details",q,[T,n(i,r(l({title:"100 Days of Swift - Day 6 - 1. Creating basic closures",desc:"1. Creating basic closures",link:"https://hackingwithswift.com/sixty/6/1/creating-basic-closures",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(c,{src:"youtube/DcwbxGaV1rc"}),C]),D,s("details",j,[I,n(i,r(l({title:"100 Days of Swift - Day 6 - 2. Accepting parameters in a closure",desc:"2. Accepting parameters in a closure",link:"https://hackingwithswift.com/sixty/6/2/accepting-parameters-in-a-closure",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(c,{src:"youtube/7_0zA5hcpI8"}),R]),A,s("details",V,[W,n(i,r(l({title:"100 Days of Swift - Day 6 - 3. Returning values from a closure",desc:"3. Returning values from a closure",link:"https://hackingwithswift.com/sixty/6/3/returning-values-from-a-closure",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(c,{src:"youtube/aS-k5mRWrr4"}),O]),B,s("details",P,[F,n(i,r(l({title:"100 Days of Swift - Day 6 - 4. Closures as parameters",desc:"4. Closures as parameters",link:"https://hackingwithswift.com/sixty/6/4/closures-as-parameters",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(c,{src:"youtube/C18O5ylFA50"}),N]),z,s("details",K,[L,n(i,r(l({title:"100 Days of Swift - Day 6 - 5. Trailing closure syntax",desc:"5. Trailing closure syntax",link:"https://hackingwithswift.com/sixty/6/5/trailing-closure-syntax",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(c,{src:"youtube/aOf23RcQdr8"}),Z]),H])}const M=d(f,[["render",Y],["__file","06.html.vue"]]),Q=JSON.parse('{"path":"/swift/100-days-of-swift/06.html","title":"Day 06","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 06","description":"100 Days of Swift > Day 06","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of Swift > Day 06"},{"property":"og:description","content":"Day 06"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swift/06.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swift/06.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 06"}],["meta",{"property":"og:description","content":"100 Days of Swift > Day 06"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 06\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Closures, part one","slug":"closures-part-one","link":"#closures-part-one","children":[{"level":3,"title":"1. Creating basic closures","slug":"_1-creating-basic-closures","link":"#_1-creating-basic-closures","children":[]},{"level":3,"title":"2. Accepting parameters in a closure","slug":"_2-accepting-parameters-in-a-closure","link":"#_2-accepting-parameters-in-a-closure","children":[]},{"level":3,"title":"3. Returning values from a closure","slug":"_3-returning-values-from-a-closure","link":"#_3-returning-values-from-a-closure","children":[]},{"level":3,"title":"4. Closures as parameters","slug":"_4-closures-as-parameters","link":"#_4-closures-as-parameters","children":[]},{"level":3,"title":"5. Trailing closure syntax","slug":"_5-trailing-closure-syntax","link":"#_5-trailing-closure-syntax","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":8}]},"readingTime":{"minutes":5.17,"words":1552},"filePathRelative":"swift/100-days-of-swift/06.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{M as comp,Q as data};
