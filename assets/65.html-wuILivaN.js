import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,a as n,t as g,b as s,w as i,n as o,g as p,d as a,e as r,r as l,o as k}from"./app-U_bew1in.js";const w={},f={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"},b={class:"table-of-contents"},y=n("hr",null,null,-1),I=n("h2",{id:"project-13-part-4",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#project-13-part-4"},[n("span",null,"Project 13, part 4")])],-1),S=n("p",null,"Today we’re going to be putting into practice some of the techniques you just learned, including how to create custom bindings, how to bring user-selected images into your app, and how to apply Core Filter effects to an image.",-1),_=n("p",null,"One thing I hope you notice is how I frequently lead you back to a topic we looked at previously. This isn’t an accident: as the self-help author Napoleon Hill wrote, “any idea, plan, or purpose may be placed in the mind through repetition of thought” – this repetition is one of several approaches I use to help you internalize how all this code fits together.",-1),C=n("p",null,"And even if you don’t fully get these concepts today, that’s okay – we’ll be covering them again the future.",-1),x=n("p",null,[n("strong",null,[a("Today you have three topics to work through, in which you’ll put into practice using "),n("code",null,"PhotosPicker"),a(", filtering images using Core Image, and more.")])],-1),P=n("h3",{id:"building-our-basic-ui",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#building-our-basic-ui"},[n("span",null,"Building our basic UI")])],-1),T={class:"hint-container details"},U=n("summary",null,"Building our basic UI",-1),j=r(`<p>The first step in our project is to build the basic user interface, which for this app will be:</p><ol><li>A <code>NavigationStack</code> so we can show our app’s name at the top.</li><li>A box prompting users to select a photo, over which we’ll place their imported picture.</li><li>An “Intensity” slider that will affect how strongly we apply our Core Image filters, stored as a value from 0.0 to 1.0.</li><li>A sharing button to export the processed image from the app. We won&#39;t put all those bits in place to begin with; just enough so you can see how things fit together.</li></ol><p>Initially the user won’t have selected an image, so we’ll represent that using an <code>@State</code> optional image property.</p><p>First add these two properties to <code>ContentView</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> processedImage<span class="token punctuation">:</span> <span class="token class-name">Image</span><span class="token operator">?</span></span>
<span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> filterIntensity <span class="token operator">=</span> <span class="token number">0.5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Now modify the contents of its <code>body</code> property to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">NavigationStack</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// image area</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">HStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Intensity&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token class-name">Slider</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> $filterIntensity<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>vertical<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">HStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Change Filter&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// change filter</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// share the picture</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">,</span> <span class="token punctuation">.</span>bottom<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Instafilter&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That uses two spacers so that we always get space above and below the image area, which also ensures the filter controls stay fixed to the bottom of the screen.</p><p>In terms of what should go in place of the <code>// image area</code> comment, it will be one of two things: if we have an image already selected then we should show it, otherwise we&#39;ll display a simple <code>ContentUnavailableView</code> so users know that space isn&#39;t just accidentally blank:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> processedImage <span class="token punctuation">{</span></span>
<span class="line">    processedImage</span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ContentUnavailableView</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;No Picture&quot;</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;photo.badge.plus&quot;</span></span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Tap to import a photo&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I love being able to place optional views right inside a SwiftUI layout, and I think it works particularly well with <code>ContentUnavailableView</code> because only one is visible at a time. Yes, tapping the view won&#39;t do anything yet, but we&#39;ll tackle that shortly.</p><p>Now, as our code was fairly easy here, I want to just briefly explore what it looks like to clean up our <code>body</code> property a little – we have lots of layout code in there, but there&#39;s also a button action inside there too.</p><p>Yes, the Change Filter button isn&#39;t going to have a lot of complex functionality inside it, but this is good practice in splitting off button actions.</p><p>Right now that just means adding an empty method to <code>ContentView</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">changeFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Then calling it from the Change Filter button, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Change Filter&quot;</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> changeFilter<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>When you’re learning it’s very common to write button actions and similar directly inside your views, but once you get onto real projects it’s a good idea to spend extra time keeping your code cleaned up – it makes your life easier in the long term, trust me!</p><p>I’ll be adding more little cleanup tips like this going forward, so as you start to approach the end of the course you feel increasingly confident that your code is in good shape.</p><p>TAKE YOUR SKILLS TO THE NEXT LEVEL If you like Hacking with Swift, you&#39;ll love Hacking with Swift+ – it&#39;s my premium service where you can learn advanced Swift and SwiftUI, functional programming, algorithms, and more. Plus it comes with stacks of benefits, including monthly live streams, downloadable projects, a 20% discount on all books, and free gifts!</p><p>Sponsor Hacking with Swift and reach the world&#39;s largest Swift community!</p><p>Swift breaks down barriers between ideas and apps, and I want to break down barriers to learning it. I’m proud to make hundreds of tutorials that are free to access, and I’ll keep doing that whatever happens. But if that’s a mission that resonates with you, please support it by becoming a HWS+ member. It’ll bring you lots of benefits personally, but it also means you’ll directly help people all over the world to learn Swift by freeing me up to share more of my knowledge, passion, and experience for free! Become Hacking with Swift+ member. &lt; How to ask the user to leave an App Store review Importing an image into SwiftUI using PhotosPicker &gt; Table of Contents</p><p>BUY OUR BOOKS Buy Pro Swift Buy Pro SwiftUI Buy Swift Design Patterns Buy Testing Swift Buy Hacking with iOS Buy Swift Coding Challenges Buy Swift on Sundays Volume One Buy Server-Side Swift Buy Advanced iOS Volume One Buy Advanced iOS Volume Two Buy Advanced iOS Volume Three Buy Hacking with watchOS Buy Hacking with tvOS Buy Hacking with macOS Buy Dive Into SpriteKit Buy Swift in Sixty Seconds</p>`,23),B=n("h3",{id:"importing-an-image-into-swiftui-using-photospicker",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#importing-an-image-into-swiftui-using-photospicker"},[n("span",null,[a("Importing an image into SwiftUI using "),n("code",null,"PhotosPicker")])])],-1),V={class:"hint-container details"},D=n("summary",null,"Importing an image into SwiftUI using PhotosPicker",-1),q=r(`<p>In order to bring this project to life, we need to let the user select a photo from their library, then display it in <code>ContentView</code>. This takes a little thinking, mostly because of the roundabout way Core Image works compared to SwiftUI.</p><p>First we need to add an import for PhotosUI to the top of <code>ContentView</code>, then give it an extra <code>@State</code> property to track whatever picture the user selected:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> selectedItem<span class="token punctuation">:</span> <span class="token class-name">PhotosPickerItem</span><span class="token operator">?</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Second, we need to place a <code>PhotosPicker</code> view wherever we want to trigger an image selection. In this app, we can actually place one around the whole <code>if let processedImage</code> check – we can use the selected image or the <code>ContentUnavailableView</code> as the label for our <code>PhotosPicker</code>.</p><p>Here&#39;s how that looks:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">PhotosPicker</span><span class="token punctuation">(</span>selection<span class="token punctuation">:</span> $selectedItem<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> processedImage <span class="token punctuation">{</span></span>
<span class="line">        processedImage</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ContentUnavailableView</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;No Picture&quot;</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;photo.badge.plus&quot;</span></span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Import a photo to get started&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tip: That adds blue coloring to the <code>ContentUnavailableView</code> to signal that&#39;s interactive, but you can disable that by adding <code>.buttonStyle(.plain)</code> to the <code>PhotosPicker</code> if you prefer.</p><p>Third, we need a method that will be called when the an image has been selected.</p><p>Previously I showed you how how we can load data from a <code>PhotosPicker</code> selection, and separately I also showed you how to feed a <code>UIImage</code> into Core Image for filtering. Here we need to kind of bolt those two things together: we can&#39;t load a simple SwiftUI image because they can&#39;t be fed into Core Image, so instead we load a pure <code>Data</code> object and convert that to a <code>UIImage</code>.</p><p>Add this method to <code>ContentView</code> now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">loadImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Task</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">guard</span> <span class="token keyword">let</span> imageData <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> selectedItem<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">loadTransferable</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> <span class="token class-name">Data</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">guard</span> <span class="token keyword">let</span> inputImage <span class="token operator">=</span> <span class="token class-name">UIImage</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> imageData<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// more code to come</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can then call that whenever our <code>selectedItem</code> property changes, by attaching an <code>onChange()</code> modifier somewhere in <code>ContentView</code> – it really doesn’t matter where, but attaching it to the <code>PhotosPicker</code> would seem sensible.</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> selectedItem<span class="token punctuation">,</span> loadImage<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Go ahead and run the app again – although it won&#39;t actually do much with your selection, you can at least bring up the photo selection UI and browse through the options.</p>`,14),F=n("h3",{id:"basic-image-filtering-using-core-image",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#basic-image-filtering-using-core-image"},[n("span",null,"Basic image filtering using Core Image")])],-1),O={class:"hint-container details"},H=n("summary",null,"Basic image filtering using Core Image",-1),N=n("p",null,"Now that our project has an image the user selected, the next step is to let the user apply varying Core Image filters to it. To start with we’re just going to work with a single filter, but shortly we’ll extend that using a confirmation dialog.",-1),A=n("code",null,"ContentView.swift",-1),K=r(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token class-name">CoreImage</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token class-name">CoreImage</span><span class="token punctuation">.</span><span class="token class-name">CIFilterBuiltins</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Next we need both a context and a filter. A Core Image context is an object that’s responsible for rendering a <code>CIImage</code> to a <code>CGImage</code>, or in more practical terms an object for converting the recipe for an image into an actual series of pixels we can work with.</p><p>Contexts are expensive to create, so if you intend to render many images it’s a good idea to create a context once and keep it alive. As for the filter, we’ll be using <code>CIFilter.sepiaTone()</code> as our default but because we’ll make it flexible later we’ll make the filter use <code>@State</code> so it can be changed.</p><p>So, add these two properties to <code>ContentView</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> currentFilter <span class="token operator">=</span> <span class="token class-name">CIFilter</span><span class="token punctuation">.</span><span class="token function">sepiaTone</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token class-name">CIContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>With those two in place we can now write a method that will process whatever image was imported – that means it will set our sepia filter’s intensity based on the value in <code>filterIntensity</code>, read the output image back from the filter, ask our <code>CIContext</code> to render it, then place the result into our <code>processedImage</code> property so it’s visible on-screen.</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">applyProcessing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    currentFilter<span class="token punctuation">.</span>intensity <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">(</span>filterIntensity<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">guard</span> <span class="token keyword">let</span> outputImage <span class="token operator">=</span> currentFilter<span class="token punctuation">.</span>outputImage <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">guard</span> <span class="token keyword">let</span> cgImage <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createCGImage</span><span class="token punctuation">(</span>outputImage<span class="token punctuation">,</span> from<span class="token punctuation">:</span> outputImage<span class="token punctuation">.</span>extent<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> uiImage <span class="token operator">=</span> <span class="token class-name">UIImage</span><span class="token punctuation">(</span>cgImage<span class="token punctuation">:</span> cgImage<span class="token punctuation">)</span></span>
<span class="line">    processedImage <span class="token operator">=</span> <span class="token class-name">Image</span><span class="token punctuation">(</span>uiImage<span class="token punctuation">:</span> uiImage<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tip: Sadly the Core Image behind the sepia tone filter wants <code>Float</code> rather than <code>Double</code> for its values. This makes Core Image feel even older, I know, but don’t worry – we’ll make it go away soon!</p><p>The next job is to change the way <code>loadImage()</code> works. Right now it ends with a <code>// more code to come</code> comment, but really it should send whatever image was chosen into the sepia tone filter, then call <code>applyProcessing()</code> to make the magic happen.</p><p>Core Image filters have a dedicated <code>inputImage</code> property that lets us send in a <code>CIImage</code> for the filter to work with, but often this is thoroughly broken and will cause your app to crash – it’s much safer to use the filter’s <code>setValue()</code> method with the key <code>kCIInputImageKey</code>.</p><p>So, replace the <code>// more code to come</code> comment with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> beginImage <span class="token operator">=</span> <span class="token class-name">CIImage</span><span class="token punctuation">(</span>image<span class="token punctuation">:</span> inputImage<span class="token punctuation">)</span></span>
<span class="line">currentFilter<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>beginImage<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token constant">kCIInputImageKey</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">applyProcessing</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you run the code now you’ll see our basic app flow works great: we can select an image, then see it with a sepia effect applied. But that intensity slider we added doesn’t do anything, even though it’s bound to the same <code>filterIntensity</code> value that our filter is reading from.</p><p>What’s happening here ought not to be too surprising: even though the slider is changing the value of <code>filterIntensity</code>, changing that property won’t automatically trigger our <code>applyProcessing()</code> method again. Instead, we need to do that by hand by telling SwiftUI to watch <code>filterIntensity</code> with <code>onChange()</code>.</p><p>Again, these <code>onChange()</code> modifiers can go anywhere in our SwiftUI view hierarchy, but as the slider changes the value directly I&#39;ll attach it there:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Slider</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> $filterIntensity<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> filterIntensity<span class="token punctuation">,</span> applyProcessing<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Tip</strong>: If multiple views adjust the same value, or if it’s not quite so specific what is changing the value, then I’d add the modifier at the end of the view.</p><p>You can go ahead and run the app now, but be warned: even though Core Image is extremely fast on all iPhones, it’s often extremely <em>slow</em> in the simulator. That means you can try it out to make sure everything works, but don’t be surprised if your code runs at a glacial pace.</p>`,18),R=n("hr",null,null,-1);function z(u,E){const e=l("router-link"),t=l("VPCard"),c=l("VidStack"),d=l("FontIcon");return k(),m("div",null,[n("h1",f,[n("a",v,[n("span",null,g(u.$frontmatter.title)+" 관련",1)])]),n("nav",b,[n("ul",null,[n("li",null,[s(e,{to:"#project-13-part-4"},{default:i(()=>[a("Project 13, part 4")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#building-our-basic-ui"},{default:i(()=>[a("Building our basic UI")]),_:1})]),n("li",null,[s(e,{to:"#importing-an-image-into-swiftui-using-photospicker"},{default:i(()=>[a("Importing an image into SwiftUI using PhotosPicker")]),_:1})]),n("li",null,[s(e,{to:"#basic-image-filtering-using-core-image"},{default:i(()=>[a("Basic image filtering using Core Image")]),_:1})])])])])]),y,I,s(t,o(p({title:"100 Days of SwiftUI - Day 65",desc:"Project 13, part 4",link:"https://www.hackingwithswift.com/100/swiftui/65",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),S,_,C,x,P,n("details",T,[U,s(t,o(p({title:"100 Days of SwiftUI - Day 65 - Building our basic UI",desc:"Building our basic UI",link:"https://www.hackingwithswift.com/books/ios-swiftui/building-our-basic-ui",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/VTZQ4SQmVmg"}),j]),B,n("details",V,[D,s(t,o(p({title:"100 Days of SwiftUI - Day 65 - Importing an image into SwiftUI using PhotosPicker",desc:"Importing an image into SwiftUI using PhotosPicker",link:"https://www.hackingwithswift.com/books/ios-swiftui/importing-an-image-into-swiftui-using-photospicker",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/kwNbOIfJzRM"}),q]),F,n("details",O,[H,s(t,o(p({title:"100 Days of SwiftUI - Day 65 - Basic image filtering using Core Image",desc:"Basic image filtering using Core Image",link:"https://www.hackingwithswift.com/books/ios-swiftui/basic-image-filtering-using-core-image",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/qr7Iaq7_fko"}),N,n("p",null,[a("If we want to use Core Image in our apps, we first need to add two imports to the top of "),s(d,{icon:"fa-brands fa-swift"}),A,a(":")]),K]),R])}const L=h(w,[["render",z],["__file","65.html.vue"]]),Z=JSON.parse('{"path":"/swift/100-days-of-swiftui/65.html","title":"Day 65","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 65","description":"100 Days of SwiftUI > Day 65","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 65"},{"property":"og:description","content":"Day 65"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/65.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/65.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 65"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 65"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 65\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 13, part 4","slug":"project-13-part-4","link":"#project-13-part-4","children":[{"level":3,"title":"Building our basic UI","slug":"building-our-basic-ui","link":"#building-our-basic-ui","children":[]},{"level":3,"title":"Importing an image into SwiftUI using PhotosPicker","slug":"importing-an-image-into-swiftui-using-photospicker","link":"#importing-an-image-into-swiftui-using-photospicker","children":[]},{"level":3,"title":"Basic image filtering using Core Image","slug":"basic-image-filtering-using-core-image","link":"#basic-image-filtering-using-core-image","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":8}]},"readingTime":{"minutes":7.46,"words":2238},"filePathRelative":"swift/100-days-of-swiftui/65.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n<h2>Project 13, part 4</h2>\\n"}');export{L as comp,Z as data};
