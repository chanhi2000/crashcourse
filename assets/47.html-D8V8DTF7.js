import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as e,t as y,b as t,w as i,n,g as r,d as a,e as l,r as c,o as f}from"./app-U_bew1in.js";const m={},w={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},b={class:"table-of-contents"},v=e("hr",null,null,-1),k=e("h2",{id:"milestone-projects-7-9",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#milestone-projects-7-9"},[e("span",null,"Milestone: Projects 7-9")])],-1),_=e("p",null,"Congratulations on making it through another three projects! You’re probably feeling tired after our drawing technique project, but both today and tomorrow should be a good change of pace – today is a consolidation day, and tomorrow is something a little bit different.",-1),I=e("p",null,"Today’s challenge is an interesting one, and honestly it has such a big potential to be developed into a larger app if you have the time. Days like today are important because they give you an idea that is wholly within your grasp, and give you the time and scope to execute on it. Hopefully you make the most of that – as the astronaut Mae Jemison once said, “I like to think of ideas as potential energy: they're really wonderful, but nothing will happen until we risk putting them into action.”",-1),j=e("p",null,"So, today is an action day: you’ve got lots of coding ahead, plus the potential for more if you want to take the project further. Let’s get into it!",-1),S=e("p",null,"Today you have three topics to work through, one of which of is your challenge.",-1),U=e("h3",{id:"what-you-learned",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#what-you-learned"},[e("span",null,"What you learned")])],-1),x={class:"hint-container details"},D=e("summary",null,"What you learned",-1),T=l("<p>Hopefully you felt like these projects started to stretch you a little, not only in pushing your SwiftUI skills further but also teaching you some more advanced Swift. Plus, of course, you also have two new SwiftUI projects that you built – you can go ahead and keep customizing these all you want, put them on GitHub, or perhaps convert them into something else that better suits your tastes.</p><p>Here’s a quick recap of all the new things we covered in the last three projects:</p><ul><li>Why <code>@State</code> only works with structs.</li><li>How to use <code>@ObservedObject</code> to work with classes.</li><li>How <code>@Published</code> lets us announce property changes to any SwiftUI views that are watching.</li><li>Presenting and dismissing views using the <code>sheet()</code> modifier and the <code>dismiss</code> environment key.</li><li>Using <code>onDelete(perform:)</code> to enable swipe to delete.</li><li>Adding <code>EditButton</code> to navigation bar items, to let users edit list data more easily.</li><li>Reading and writing data with <code>UserDefaults</code>.</li><li>Archiving and unarchiving data with <code>Codable</code>, including working with data stored in a hierarchy.</li><li>Using the <code>Identifiable</code> protocol to make sure all items can be identified uniquely in our user interface.</li><li>How to use <code>GeometryReader</code> to make content fit the screen.</li><li>Using <code>ScrollView</code> to lay out custom views in a scrollable area.</li><li>Pushing new views onto the navigation stack using <code>NavigationLink</code>.</li><li>Using Swift’s generics system to write methods that work with different kinds of data.</li><li>Creating custom paths and shapes.</li><li>Creating shapes that can be inset and have their border stroked, using <code>InsettableShape</code>.</li><li>Using <code>CGAffineTransform</code> to create rotations and translations.</li><li>Making creative borders and fills using <code>ImagePaint</code>.</li><li>Enabling Metal for drawing complex views using <code>drawingGroup()</code>.</li><li>Modifying blend modes and saturation.</li><li>Animating shapes with <code>animatableData</code> and <code>AnimatablePair</code>.</li></ul><p>I hope you’ll agree that’s a lot, and it also spans a wide range – we’ve gone from hard-core language features through to user-facing views, and even further on to creative uses for Swift’s drawing system. Some folks will prefer the pure language stuff and others will prefer the more creative side of coding, and that’s OK – we all learn differently!</p>",4),C=e("h3",{id:"key-points",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#key-points"},[e("span",null,"Key points")])],-1),A={class:"hint-container details"},P=e("summary",null,"Key points",-1),K=l('<p>Although we covered a lot in the previous three projects, there are three specific things I want to get into in more detail. Don’t worry – drawing isn’t one of them!</p><h4 id="classes-vs-structs-what-s-the-difference-and-why-does-it-matter" tabindex="-1"><a class="header-anchor" href="#classes-vs-structs-what-s-the-difference-and-why-does-it-matter"><span>Classes vs structs: what’s the difference and why does it matter?</span></a></h4><p>Swift gives us two ways to create our own complex data types, and it’s important you understand why we have them and which to choose for any given task.</p><p>The fundamental difference between a class and a struct is that one is a <em>value</em> type and the other is a <em>reference</em> type. These are standard programming terms for how we work with data: is the data just a simple value such as “Hello” or 5, or is it a merely a signpost saying “my data is stored in RAM at this location.”</p><p>Once you understand that difference, structs and classes become two very different things, but when you’re <em>learning</em> those differences can feel not very different at all. Think of it like this: when we make a variable that holds a struct, that data is literally stored inside the variable. In comparison, when we use a <em>class</em>, that data is put in memory somewhere and the variable holds a long number that identifies the location of that memory.</p><p>This is where the name comes from: “reference types” are stored as a reference to some memory somewhere, a bit like a signpost. Rather than a variable pointing directly to my house, it points to a signpost that points to my house – there’s an extra layer of indirection. This is why if you point two or more variables to the same instance of a class they can modify the same data: you just have several signposts all pointing to the same house.</p><p>This is <em>also</em> why reference types and value types behave differently when used as constants. If we make a constant instance of a class, what we’ve done is make a constant signpost – we’ve said “this signpost always points to house number 24601, and can’t point to a different house.” However, that doesn’t stop us from remodeling the house: maybe we want to add an extra floor, or change the kitchen, or perhaps even demolish the house entirely and build a new one. If you want those things to be fixed – if you want the actual house itself to be constant – then you need to use constant properties for your class.</p><p>So, we can make a constant signpost (<code>let myHouse = House()</code>) while having variable data (<code>var numberOfFloors = 3</code>). But we can <em>also</em> flip things around: we can make a variable signpost (<code>var myHouse = House()</code>) that has constant data (<code>let numberOfFloors = 3</code>), and that behaves very differently: we can move the signpost around so that it points to different houses, but we can’t remodel the houses themselves.</p><p>Now think about how all this relates to Swift, SwiftUI, and even UIKit. If you have three screens in an app, all of which share the same data, it’s important to make sure that data stays synchronized both behind the scenes (all the variables contain the same values), and to the user (all our lists / text views / etc show the same values).</p><p>SwiftUI provides wrappers such as <code>@State</code> and <code>@ObservedObject</code> to make sure our views stay updated as their data changes, however these were <em>not</em> available to use with UIKit – you needed to respond to changes yourself, then update the user interface to reflect those changes.</p><p>This created a problem:</p><ul><li>View A could create an instance of a class.</li><li>View A could pass that to View B so they are sharing it.</li><li>View B could then change the data and update its UI.</li><li>View A would have no idea the data changed, and would show the old UI.</li></ul><p>As a result of this, it was common for UIKit developers to use structs for data, because it meant that every view had its own copy of the data and it couldn’t change by surprise. Even more interestingly, all of UIKit’s view types were built using classes, which meant UIKit developers build their views as classes and use structs for their data – the complete opposite of SwiftUI.</p><h4 id="using-userdefaults-wisely" tabindex="-1"><a class="header-anchor" href="#using-userdefaults-wisely"><span>Using <code>UserDefaults</code> wisely</span></a></h4><p><code>UserDefaults</code> lets us store small amounts of data easily – it’s automatically attached to our app, which means it’s there ready to load as soon as our app launches. While it’s very useful (and you’ll be relying on its heavily!) it does have two drawbacks:</p><ol><li>You should only store small amounts of data there – anything over about 512KB is dubious.</li><li>You can only store certain types of data easily; everything else must use <code>Codable</code> first to get some binary data.</li></ol><p>The list of types that are supported by <code>UserDefaults</code> is short and precise: strings, numbers, dates, URLs, and binary data, plus arrays and dictionaries of those types. Excluding URLs (which are really just fancy strings), all those are the same types that can be stored in a plist file – short for a <em>property list</em>.</p><p>This isn’t a coincidence: <code>UserDefaults</code> actually writes out its data using a property list just like our Info.plist file. In fact, keeping this link in mind can really help you make the best of <code>UserDefaults</code> – it would be strange if our Info.plist file contained 100,000 entries of data, and it’s just as strange to put 100,000 items in <code>UserDefaults</code>.</p><p>So, use the <code>UserDefaults</code> system for what it was designed for – as Apple’s own documentation says, it’s called user defaults “because they’re commonly used to determine an app’s default state at startup or the way it acts by default.”</p><h4 id="when-to-use-generics" tabindex="-1"><a class="header-anchor" href="#when-to-use-generics"><span>When to use generics</span></a></h4><p>We used generics to create a decoding method that is capable of taking any JSON file from an app bundle and loading into a <code>Codable</code> type of our choosing. But – and this is a big but! – we first wrote the method to be <em>non</em>-generic: if you recall, it originally decoded an array of astronauts before being upgraded to load any kind of <code>Codable</code> type.</p>',21),O=e("code",null,"Astronaut",-1),H=e("code",null,"astronauts.json",-1),M=e("code",null,"Bundle",-1),N=l(`<p>Things aren’t quite so straightforward with protocols and generics, though – we now have a range of possible types to work with, which might be entirely unrelated apart from conforming to the same protocol. For example, integers and strings conform to Swift’s built-in <code>Comparable</code> protocol, which is why Swift knows how to sort arrays of them, but otherwise they are completely different things.</p><p>Perhaps confusingly, we can’t compare two comparable objects, and in fact even trying to return <code>Comparable</code> from a method won’t work. If you don’t believe me, just try it:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">makeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Comparable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Hello&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That won’t compile, and with good reason: <code>Comparable</code> by itself doesn’t mean anything. As I said, both strings and integers conform to the <code>Comparable</code> protocol, but all that means is that you can compare one integer against another, not that you can compare any <code>Comparable</code> type against another – it just wouldn’t make any sense.</p><p>This is why generic <em>constraints</em> are so useful: they let us say “this can be any kind of object, as long as…” then provide some restrictions. And – perhaps counterintuitively – adding restrictions often enables more functionality. As you saw, when we said that our decoding method could work with any type, it meant we couldn’t use <code>JSONDecoder</code> with it; Swift wasn’t able to know it could safely decode JSON as that type until we explicitly added a <code>Codable</code> restriction.</p><p>So, the key to using generics well is not to use them at first, and when you <em>do</em> need them to add restrictions so that you get the most functionality you can.</p>`,6),V=e("h3",{id:"challenge",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#challenge"},[e("span",null,"Challenge")])],-1),q={class:"hint-container details"},B=e("summary",null,"Challenge",-1),R=l("<p>Before we move on to our next batch of projects, you have a fresh challenge to complete. This means building a complete app from scratch by yourself, using the skills you’ve acquired over the previous three projects.</p><p>This time your goal is to build a habit-tracking app, for folks who want to keep track of how much they do certain things. That might be learning a language, practicing an instrument, exercising, or whatever – they get to decide which activities they add, and track it however they want.</p><p>At the very least, this means there should be a list of all activities they want to track, plus a form to add new activities – a title and description should be enough.</p><p>For a bigger challenge, tapping one of the activities should show a detail screen with the description. For a tough challenge – see the hints below! – make that detail screen contain how many times they have completed it, plus a button incrementing their completion count.</p><p>And if you want to make the app really useful, use <code>Codable</code> and <code>UserDefaults</code> to load and save all your data.</p><p>So, there are three levels to this app, and you can choose how far you want to go depending on how much time you have and how far you want to push yourself. I do recommend you at least give each level a try, though – every little bit of practice you get helps solidify your learning!</p><p>Hints:</p><ul><li>Start with your data: define a struct that holds a single activity, and a class that holds an array of activities.</li><li>The class will need to conform to <code>ObservableObject</code> and use <code>@Published</code> for its property.</li><li>Your main listing and form should both be able to read the shared activities object.</li><li>Make sure your activity conforms to <code>Identifiable</code> to avoid problems.</li><li>Present your adding form using <code>sheet()</code>, and your activity detail view (if you add one) using <code>NavigationLink</code>.</li></ul><p>Making the button to increment completion count will challenge you, because you need to modify the activity that was passed in. If you’re stuck, the easiest approach is this:</p><ol><li>Make your struct conform to <code>Equatable</code>. You don’t need anything special here – just add <code>Equatable</code> after <code>Codable</code> and Identifiable.</li><li>Pass both the selected activity and the <code>ObservableObject</code> class into your detail view.</li><li>When the increment button is tapped, copy the existing activity and add 1 to its completion count.</li><li>Use <code>firstIndex(of:)</code> to find where the previous activity was in the class’s array, then change it to be your new activity – something like <code>data.activities[index] = newActivity</code> will work. (This requires the <code>Equatable</code> conformance from step 1!)</li></ol><p>This is genuinely a useful app to build, particularly if it were specialized towards a particular interest – if the goal were practicing an instrument then you could imagine a more advanced app suggesting different things to practice, or if the goal were exercise then it might suggest new exercises to keep things mixed up.</p><p>As it is, this challenge is only a small app, but I hope it at least makes you think. Good luck!</p>",12),W=e("div",{class:"hint-container tip"},[e("p",{class:"hint-container-title"},"Note"),e("p",null,"Don’t worry if you don’t complete challenges in the day they were assigned – in future days you’ll find you have some time to spare here and there, so challenges are something you can return back to in the future.")],-1),E=e("hr",null,null,-1);function F(d,z){const o=c("router-link"),s=c("VPCard"),h=c("FontIcon");return f(),p("div",null,[e("h1",w,[e("a",g,[e("span",null,y(d.$frontmatter.title)+" 관련",1)])]),e("nav",b,[e("ul",null,[e("li",null,[t(o,{to:"#milestone-projects-7-9"},{default:i(()=>[a("Milestone: Projects 7-9")]),_:1}),e("ul",null,[e("li",null,[t(o,{to:"#what-you-learned"},{default:i(()=>[a("What you learned")]),_:1})]),e("li",null,[t(o,{to:"#key-points"},{default:i(()=>[a("Key points")]),_:1})]),e("li",null,[t(o,{to:"#challenge"},{default:i(()=>[a("Challenge")]),_:1})])])])])]),v,k,t(s,n(r({title:"100 Days of SwiftUI - Day 47",desc:"Milestone: Projects 7-9",link:"https://www.hackingwithswift.com/100/swiftui/47",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),_,I,j,S,U,e("details",x,[D,t(s,n(r({title:"100 Days of SwiftUI - Day 47 - What you learned",desc:"What you learned",link:"https://www.hackingwithswift.com/guide/ios-swiftui/4/1/what-you-learned",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),T]),C,e("details",A,[P,t(s,n(r({title:"100 Days of SwiftUI - Day 47 - Key points",desc:"Key points",link:"https://www.hackingwithswift.com/guide/ios-swiftui/4/2/key-points",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),K,e("p",null,[a("That wasn’t me just wasting your time, but instead introducing you to a sensible approach to thinking about generics and protocols. In this project we needed to decode an array of "),O,a(" instances from "),t(h,{icon:"iconfont icon-json"}),H,a(", so we wrote a method to do precisely that – no protocols and no generics, just a simple extension on "),M,a(" to help keep the code organized. This mimics the way our brain thinks: we can understand concrete things like astronauts, and we can describe them pretty easily.")]),N]),V,e("details",q,[B,t(s,n(r({title:"100 Days of SwiftUI - Day 47 - Challenge",desc:"Challenge",link:"https://www.hackingwithswift.com/guide/ios-swiftui/4/3/challenge",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),R]),W,E])}const L=u(m,[["render",F],["__file","47.html.vue"]]),Y=JSON.parse('{"path":"/swift/100-days-of-swiftui/47.html","title":"Day 47","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 47","description":"100 Days of SwiftUI > Day 47","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 47"},{"property":"og:description","content":"Day 47"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/47.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/47.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 47"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 47"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 47\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Milestone: Projects 7-9","slug":"milestone-projects-7-9","link":"#milestone-projects-7-9","children":[{"level":3,"title":"What you learned","slug":"what-you-learned","link":"#what-you-learned","children":[]},{"level":3,"title":"Key points","slug":"key-points","link":"#key-points","children":[]},{"level":3,"title":"Challenge","slug":"challenge","link":"#challenge","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":8}]},"readingTime":{"minutes":8.9,"words":2670},"filePathRelative":"swift/100-days-of-swiftui/47.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n<h2>Milestone: Projects 7-9</h2>\\n"}');export{L as comp,Y as data};
