import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,a as n,t as g,b as s,w as l,n as c,g as p,d as e,e as t,r,o as k}from"./app-U_bew1in.js";const w={},b={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},v={class:"table-of-contents"},y=n("hr",null,null,-1),S=t('<h2 id="project-7-part-one" tabindex="-1"><a class="header-anchor" href="#project-7-part-one"><span>Project 7, part one</span></a></h2><p>One of the joys of working on Apple platforms is that it can feel like there’s no end to exciting technologies to try – whether that’s ARKit, Core ML, SpriteKit, or any of the dozens of other things, I don’t think there’s ever been a better time to get into software development.</p><p>But – and this is a big but! – as wonderful as those things are, a large part of our work as iOS developers is always going to involve the fundamentals of app development: receiving some data, formatting in a specific way, and making it look good on-screen.</p><p>Today you’re going to meet one of the truly great features of Swift development, and it also happens to be part of probably the most important skill. That feature is called the <code>Codable</code> protocol, and its job is to convert Swift data like strings, dictionaries, or structs to and from data that can be transferred over the internet.</p><p>Computing pioneer Mitch Kapor once said that “getting information off the internet is like taking a drink from a fire hydrant.” This is true: there’s a lot of it out there, and we need to be really careful how we read it in to our apps.</p><p>Fortunately, <code>Codable</code> does most of the work for us – I think you’ll be impressed!</p><p><strong>Today you have three topics to work through, and you’ll learn about <code>UITabBarController</code>, <code>Data</code>, <code>Codable</code>, and more.</strong></p><h3 id="setting-up" tabindex="-1"><a class="header-anchor" href="#setting-up"><span>Setting up</span></a></h3>',8),_={class:"hint-container details"},q=n("summary",null,"Setting up",-1),I=n("p",null,"This project will take a data feed from a website and parse it into useful information for users. As per usual, this is just a way of teaching you some new iOS development techniques, but let's face it – you already have two apps and two games under your belt, so you're starting to build up a pretty good library of work!",-1),C=n("p",null,[e("This time you'll be learning about "),n("code",null,"UITabBarController"),e(` and a data format called JSON, which is a popular way to send and receive data online. It's not easy to find interesting JSON feeds that are freely available, but the option we'll be going for is the "We the people" Whitehouse petitions in the US, where Americans can submit requests for action, and others can vote on it.`)],-1),x=n("p",null,`Some are entirely frivolous ("We want the US to build a Death Star"), but it has good, clean JSON that's open for everyone to read, which makes it perfect. Lots to learn, and lots to do, so let's get started: create a new project in Xcode by choosing the Single View App template. Now name it Project7 and save it somewhere.`,-1),j=n("h3",{id:"creating-the-basic-ui-uitabbarcontroller",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#creating-the-basic-ui-uitabbarcontroller"},[n("span",null,"Creating the basic UI: UITabBarController")])],-1),T={class:"hint-container details"},N=n("summary",null,"Creating the basic UI: UITabBarController",-1),P=n("p",null,[e("We’ve already used "),n("code",null,"UINavigationController"),e(" in previous projects to provide a core user interface that lets us control which screen is currently visible. Another fundamental UI component is the tab bar, which you see in apps such as the App Store, Music, and Photos – it lets the user control which screen they want to view by tapping on what interests them.")],-1),O=n("p",null,"Our current app has a single empty view controller, but we’re going to jazz that up with a table view controller, a navigation controller, and a tab bar controller so you can see how they all work together.",-1),D=n("code",null,"ViewController.swift",-1),U=n("code",null,"ViewController",-1),J=n("code",null,"UITableViewController",-1),V=n("code",null,"UIViewController",-1),B=t(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">ViewController</span><span class="token punctuation">:</span> <span class="token class-name">UIViewController</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>…to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">ViewController</span><span class="token punctuation">:</span> <span class="token class-name">UITableViewController</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,3),A=n("code",null,"Main.storyboard",-1),W=n("em",null,"Initial View Controller",-1),L=t('<p>Select its prototype cell and use the attributes inspector to give it the identifier “<em>Cell</em>”. Set its accessory to <em>“Disclosure Indicator</em>” while you’re there; it’s a great UI hint, and it’s perfect in this project. In this project, we’re also going to change the style of the cell – that’s the first item in the attributes inspector. It’s “Custom” by default, but I’d like you to change it to “Subtitle”, so that each row has a main title label and a subtitle label.</p><figure><img src="https://www.hackingwithswift.com/img/books/hws/7-3.png" alt="Changing the table view cell style from Basic to Subtitle adds a second line of text we can customize." tabindex="0" loading="lazy"><figcaption>Changing the table view cell style from Basic to Subtitle adds a second line of text we can customize.</figcaption></figure><p>Now for the interesting part: we need to wrap this view controller inside two other things. Go to <code>[Editor] &gt; [Embed In] &gt; [Navigation Controller]</code>, and then straight away go to <code>[Editor] &gt; [Embed In] &gt; [Tab Bar Controller]</code>. The navigation controller adds a gray bar at the top called a navigation bar, and the tab bar controller adds a gray bar at the bottom called a tab bar. Hit <kbd>Cmd</kbd>+<kbd>R</kbd> now to see them both in action.</p><figure><img src="https://www.hackingwithswift.com/img/books/hws/7-2.png" alt="Interface Builder can embed a view controller directly inside a tab bar controller with one menu click." tabindex="0" loading="lazy"><figcaption>Interface Builder can embed a view controller directly inside a tab bar controller with one menu click.</figcaption></figure><p>Behind the scenes, <code>UITabBarController</code> manages an array of view controllers that the user can choose between. You can often do most of the work inside Interface Builder, but not in this project. We&#39;re going to use one tab to show recent petitions, and another to show popular petitions, which is the same thing really – all that&#39;s changing is the data source.</p><p>Doing everything inside the storyboard would mean duplicating our view controllers, which is A Bad Idea, so instead we&#39;re just going to design one of them in the storyboard then create a duplicate of it using code.</p><p>Now that our navigation controller is inside a tab bar controller, it will have acquired a gray strip along its bottom in Interface Builder. If you click that now, it will select a new type of object called a <code>UITabBarItem</code>, which is the icon and text used to represent a view controller in the tab bar. In the attributes inspector (<kbd>Alt</kbd>+<kbd>Cmd</kbd>+<kbd>4</kbd>) change System Item from &quot;Custom&quot; to &quot;Most Recent&quot;.</p><p>One important thing about <code>UITabBarItem</code> is that when you set its system item, it assigns both an icon and some text for the title of the tab. If you try to change the text to your own text, the icon will be removed and you need to provide your own. This is because Apple has trained users to associate certain icons with certain information, and they don&#39;t want you using those icons incorrectly!</p><p>Select the navigation controller itself (just click where it says Navigation Controller in big letters in the center of the view controller), then press <kbd>Alt</kbd>+<kbd>Cmd</kbd>+<kbd>3</kbd> to select the identity inspector. We haven&#39;t been here before, because it&#39;s not used that frequently. However, here I want you to type &quot;NavController&quot; in the text box to the right of where it says &quot;Storyboard ID&quot;. We&#39;ll be needing that soon!</p><p>In the picture below you can see how the identity inspector should look when configured for your navigation controller. You&#39;ll be using this inspector in later projects to give views a custom class by changing the first of these four text boxes.</p><figure><img src="https://www.hackingwithswift.com/img/books/hws/7-1.png" alt="Use the identity inspector to configure your navigation controller with a storyboard identifier." tabindex="0" loading="lazy"><figcaption>Use the identity inspector to configure your navigation controller with a storyboard identifier.</figcaption></figure>',11),R=n("code",null,"ViewController.swift",-1),z=t(`<p>First, add this property to the <code>ViewController</code> class:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> petitions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That will hold our petitions. We won’t be using strings in the final project – in fact we’ll change that in the next chapter – but it’s good enough for now.</p><p>Now add this <code>numberOfRowsInSection</code> method:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">tableView</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> tableView<span class="token punctuation">:</span> <span class="token class-name">UITableView</span><span class="token punctuation">,</span> numberOfRowsInSection section<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> petitions<span class="token punctuation">.</span>count</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We also need to add a <code>cellForRowAt</code> method, but this time it’s going to be a bit different: we’re going to set some dummy <code>textLabel.text</code> like before, but we’re also going to set <code>detailTextLabel.text</code> – that’s the subtitle in our cell. It’s called “detail text label” rather than “subtitle” because there are other styles available, for example one where the detail text is on the right of the main text.</p><p>Add this method now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">tableView</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> tableView<span class="token punctuation">:</span> <span class="token class-name">UITableView</span><span class="token punctuation">,</span> cellForRowAt indexPath<span class="token punctuation">:</span> <span class="token class-name">IndexPath</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">UITableViewCell</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> cell <span class="token operator">=</span> tableView<span class="token punctuation">.</span><span class="token function">dequeueReusableCell</span><span class="token punctuation">(</span>withIdentifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Cell&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> indexPath<span class="token punctuation">)</span></span>
<span class="line">    cell<span class="token punctuation">.</span>textLabel<span class="token operator">?</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Title goes here&quot;</span></span></span>
<span class="line">    cell<span class="token punctuation">.</span>detailTextLabel<span class="token operator">?</span><span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Subtitle goes here&quot;</span></span></span>
<span class="line">    <span class="token keyword">return</span> cell</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Step one is now complete: we have a basic user interface in place, and are ready to proceed with some real code…</p>`,9),K=n("h3",{id:"parsing-json-using-the-codable-protocol",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#parsing-json-using-the-codable-protocol"},[n("span",null,"Parsing JSON using the Codable protocol")])],-1),E={class:"hint-container details"},F=n("summary",null,"Parsing JSON using the Codable protocol",-1),M=t(`<p>JSON – short for JavaScript Object Notation – is a way of describing data. It&#39;s not the easiest to read yourself, but it&#39;s compact and easy to parse for computers, which makes it popular online where bandwidth is at a premium.</p><p>Before we do the parsing, here is a tiny slice of the actual JSON you&#39;ll be receiving:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;metadata&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;responseInfo&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token property">&quot;status&quot;</span><span class="token operator">:</span><span class="token number">200</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">&quot;developerMessage&quot;</span><span class="token operator">:</span><span class="token string">&quot;OK&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;results&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token property">&quot;title&quot;</span><span class="token operator">:</span><span class="token string">&quot;Legal immigrants should get freedom before undocumented immigrants – moral, just and fair&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">&quot;body&quot;</span><span class="token operator">:</span><span class="token string">&quot;I am petitioning President Trump&#39;s Administration to take a humane view of the plight of legal immigrants. Specifically, legal immigrants in Employment Based (EB) category. I believe, such immigrants were short changed in the recently announced reforms via Executive Action (EA), which was otherwise long due and a welcome announcement.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">&quot;issues&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span><span class="token string">&quot;28&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;Human Rights&quot;</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span><span class="token string">&quot;29&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;Immigration&quot;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">&quot;signatureThreshold&quot;</span><span class="token operator">:</span><span class="token number">100000</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">&quot;signatureCount&quot;</span><span class="token operator">:</span><span class="token number">267</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">&quot;signaturesNeeded&quot;</span><span class="token operator">:</span><span class="token number">99733</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token property">&quot;title&quot;</span><span class="token operator">:</span><span class="token string">&quot;National database for police shootings.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">&quot;body&quot;</span><span class="token operator">:</span><span class="token string">&quot;There is no reliable national data on how many people are shot by police officers each year. In signing this petition, I am urging the President to bring an end to this absence of visibility by creating a federally controlled, publicly accessible database of officer-involved shootings.&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">&quot;issues&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span><span class="token string">&quot;28&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;Human Rights&quot;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">&quot;signatureThreshold&quot;</span><span class="token operator">:</span><span class="token number">100000</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">&quot;signatureCount&quot;</span><span class="token operator">:</span><span class="token number">17453</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">&quot;signaturesNeeded&quot;</span><span class="token operator">:</span><span class="token number">82547</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You&#39;ll actually be getting between 2000-3000 lines of that stuff, all containing petitions from US citizens about all sorts of political things. It doesn&#39;t really matter (to us) what the petitions are, we just care about the data structure. In particular:</p><ol><li>There&#39;s a metadata value, which contains a <code>responseInfo</code> value, which in turn contains a status value. Status 200 is what internet developers use for &quot;everything is OK.&quot;</li><li>There&#39;s a results value, which contains a series of petitions.</li><li>Each petition contains a title, a body, some issues it relates to, plus some signature information.</li><li>JSON has strings and integers too. Notice how the strings are all wrapped in quotes, whereas the integers aren&#39;t.</li></ol><p>Swift has built-in support for working with JSON using a protocol called <code>Codable</code>. When you say “my data conforms to <code>Codable”</code>, Swift will allow you to convert freely between that data and JSON using only a little code.</p><p>Swift’s simple types like <code>String</code> and <code>Int</code> automatically conform to <code>Codable</code>, and arrays and dictionaries also conform to <code>Codable</code> if they contain <code>Codable</code> objects. That is, <code>[String]</code> conforms to <code>Codable</code> just fine, because String itself conforms to <code>Codable</code>.</p><p>Here, though, we need something more complex: each petition contains a title, some body text, a signature count, and more. That means we need to define a custom struct called <code>Petition</code> that stores one petition from our JSON, which means it will track the title string, body string, and signature count integer.</p>`,8),Y=n("kbd",null,"Cmd",-1),H=n("kbd",null,"N",-1),G=n("code",null,"Petition.swift",-1),Z=t(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Petition</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> signatureCount<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That defines a custom struct with three properties. You might remember that one of the advantages of structs in Swift is that it gives us a <em>memberwise initializer</em> – a special function that can create new <code>Petition</code> instances by passing in values for <code>title</code>, <code>body</code>, and <code>signatureCount</code>.</p><p>We’ll come onto that in a moment, but first I mentioned the <code>Codable</code> protocol. Our <code>Petition</code> struct contains two strings and an integer, all of which conforms to <code>Codable</code> already, so we can ask Swift to make the whole <code>Petition</code> type conform to <code>Codable</code> like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Petition</span><span class="token punctuation">:</span> <span class="token class-name">Codable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> signatureCount<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With that simple change we’re almost ready to load instances of <code>Petition</code> from JSON.</p><p>I say <em>almost</em> ready because there’s a slight wrinkle in our plan: if you looked at the JSON example I gave above, you’ll have noticed that our array of petitions actually comes inside a dictionary called “results”. This means when we try to have Swift parse the JSON we need to load that key first, then <em>inside</em> that load the array of petition results.</p><p>Swift’s <code>Codable</code> protocol needs to know exactly where to find its data, which in this case means making a <em>second</em> struct. This one will have a single property called <code>results</code> that will be an array of our <code>Petition</code> struct. This matches exactly how the JSON looks: the main JSON contains the <code>results</code> array, and each item in that array is a <code>Petition</code>.</p>`,7),Q=n("kbd",null,"Cmd",-1),X=n("kbd",null,"N",-1),$=n("code",null,"Petitions.swift",-1),nn=t(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Petitions</span><span class="token punctuation">:</span> <span class="token class-name">Codable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> results<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Petition</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I realize this seems like a lot of work, but trust me: it gets much easier!</p><p>All we’ve done is define the kinds of data structures we want to load the JSON into. The next step is to create a property in <code>ViewController</code> that will store our petitions array.</p><p>As you&#39;ll recall, you declare arrays just by putting the data type in brackets, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> petitions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We want to make an array of our <code>Petition</code> object. So, it looks like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> petitions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Petition</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,7),en=n("code",null,"petitions",-1),sn=n("code",null,"ViewController.swift",-1),tn=t(`<p>It&#39;s now time to parse some JSON, which means to process it and examine its contents. We&#39;re going to start by updating the <code>viewDidLoad()</code> method for <code>ViewController</code> so that it downloads the data from the Whitehouse petitions server, converts it to a Swift <code>Data</code> object, then tries to convert it to an array of <code>Petition</code> instances.</p><p>We haven’t used <code>Data</code> before. Like <code>String</code> and <code>Int</code> it’s one of Swift’s fundamental data types, although it’s even more low level – it holds literally any binary data. It might be a string, it might be the contents of a zip file, or literally anything else.</p><p><code>Data</code> and <code>String</code> have quite a few things in common. You already saw that <code>String</code> can be created using <code>contentsOf</code> to load data from disk, and <code>Data</code> has exactly the same initializer.</p><p>This is perfect for our needs – here&#39;s the new <code>viewDidLoad</code> method:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// let urlString = &quot;https://api.whitehouse.gov/v1/petitions.json?limit=100&quot;</span></span>
<span class="line">    <span class="token keyword">let</span> urlString <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;https://www.hackingwithswift.com/samples/petitions-1.json&quot;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> urlString<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token class-name">Data</span><span class="token punctuation">(</span>contentsOf<span class="token punctuation">:</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// we&#39;re OK to parse!</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Note</strong>: Above I’ve included a URL for the official Whitehouse API feed, but that might go away or change at any point in the future. So, to avoid problems I’ve taken a copy of that feed and put it on my own site – you can use either the official API or my own copy.</p><p>Let&#39;s focus on the new stuff:</p><ul><li><code>urlString</code> points either to the Whitehouse.gov server or to my cached copy of the same data, accessing the available petitions.</li><li>We use <code>if let</code> to make sure the <code>URL</code> is valid, rather than force unwrapping it. Later on you can return to this to add more URLs, so it&#39;s good play it safe.</li><li>We create a new <code>Data</code> object using its <code>contentsOf</code> method. This returns the content from a <code>URL</code>, but it might throw an error (i.e., if the internet connection was down) so we need to use <code>try?</code>.</li><li>If the <code>Data</code> object was created successfully, we reach the “we&#39;re OK to parse!” line. This starts with <code>//</code>, which begins a comment line in Swift. Comment lines are ignored by the compiler; we write them as notes to ourselves.</li></ul><p>This code isn&#39;t perfect, in fact far from it. In fact, by downloading data from the internet in <code>viewDidLoad()</code> our app will lock up until all the data has been transferred. There are solutions to this, but to avoid complexity they won&#39;t be covered until project 9.</p><p>For now, we want to focus on our JSON parsing. We already have a <code>petitions</code> array that is ready to accept an array of petitions. We want to use Swift’s <code>Codable</code> system to parse our JSON into that array, and once that&#39;s done tell our table view to reload itself.</p><p>Are you ready? Because this code is remarkably simple given how much work it&#39;s doing:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">:</span> <span class="token class-name">Data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> decoder <span class="token operator">=</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> jsonPetitions <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">Petitions</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> json<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        petitions <span class="token operator">=</span> jsonPetitions<span class="token punctuation">.</span>results</span>
<span class="line">        tableView<span class="token punctuation">.</span><span class="token function">reloadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Place that method just underneath <code>viewDidLoad()</code> method, then replace the existing <code>// we&#39;re OK to parse!</code> line in <code>viewDidLoad()</code> with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">:</span> data<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This new <code>parse()</code> method does a few new and interesting things:</p><ol><li>It creates an instance of <code>JSONDecoder</code>, which is dedicated to converting between JSON and <code>Codable</code> objects.</li><li>It then calls the <code>decode()</code> method on that decoder, asking it to convert our <code>json</code> data into a <code>Petitions</code> object. This is a throwing call, so we use <code>try?</code> to check whether it worked.</li><li>If the JSON was converted successfully, assign the <code>results</code> array to our <code>petitions</code> property then reload the table view.</li></ol><p>The one part you haven’t seen before is <code>Petitions.self</code>, which is Swift’s way of referring to the <code>Petitions</code> type itself rather than an instance of it. That is, we’re not saying “create a new one”, but instead specifying it as a parameter to the decoding so <code>JSONDecoder</code> knows what to convert the JSON too.</p><p>You can run the program now, although it just shows “Title goes here” and “Subtitle goes here” again and again, because our <code>cellForRowAt</code> method just inserts dummy data.</p><p>We want to modify this so that the cells print out the <code>title</code> value of our <code>Petition</code> object, but we also want to use the subtitle text label that got added when we changed the cell type from &quot;Basic&quot; to &quot;Subtitle&quot; in the storyboard. To do that, change the <code>cellForRowAt</code> method to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> petition <span class="token operator">=</span> petitions<span class="token punctuation">[</span>indexPath<span class="token punctuation">.</span>row<span class="token punctuation">]</span></span>
<span class="line">cell<span class="token punctuation">.</span>textLabel<span class="token operator">?</span><span class="token punctuation">.</span>text <span class="token operator">=</span> petition<span class="token punctuation">.</span>title</span>
<span class="line">cell<span class="token punctuation">.</span>detailTextLabel<span class="token operator">?</span><span class="token punctuation">.</span>text <span class="token operator">=</span> petition<span class="token punctuation">.</span>body</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Our custom <code>Petition</code> type has properties for <code>title</code>, <code>body</code> and <code>signatureCount</code>, so now we can read them out to configure our cell correctly.</p><p>If you run the app now, you&#39;ll see things are starting to come together quite nicely – every table row now shows the petition title, and beneath it shows the first few words of the petition&#39;s body. The subtitle automatically shows &quot;…&quot; at the end when there isn&#39;t enough room for all the text, but it&#39;s enough to give the user a flavor of what&#39;s going on.</p><p><strong>Tip</strong>: If you don’t see any data, make sure you named all the properties in the <code>Petition</code> struct correctly – the <code>Codable</code> protocol matches those names against the JSON directly, so if you have a typo in “signatureCount” then it will fail.</p>`,23),an=n("hr",null,null,-1);function on(u,ln){const o=r("router-link"),i=r("VPCard"),d=r("VidStack"),a=r("FontIcon");return k(),m("div",null,[n("h1",b,[n("a",f,[n("span",null,g(u.$frontmatter.title)+" 관련",1)])]),n("nav",v,[n("ul",null,[n("li",null,[s(o,{to:"#project-7-part-one"},{default:l(()=>[e("Project 7, part one")]),_:1}),n("ul",null,[n("li",null,[s(o,{to:"#setting-up"},{default:l(()=>[e("Setting up")]),_:1})]),n("li",null,[s(o,{to:"#creating-the-basic-ui-uitabbarcontroller"},{default:l(()=>[e("Creating the basic UI: UITabBarController")]),_:1})]),n("li",null,[s(o,{to:"#parsing-json-using-the-codable-protocol"},{default:l(()=>[e("Parsing JSON using the Codable protocol")]),_:1})])])])])]),y,s(i,c(p({title:"100 Days of Swift - Day 33",desc:"Project 7, part one",link:"https://www.hackingwithswift.com/100/33",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),S,n("details",_,[q,s(i,c(p({title:"100 Days of Swift - Day 33 - Setting up",desc:"Setting up",link:"https://hackingwithswift.com/read/7/1/setting-up",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(d,{src:"youtube/Qisx0mkHNTo"}),I,C,x]),j,n("details",T,[N,s(i,c(p({title:"100 Days of Swift - Day 33 - Creating the basic UI: UITabBarController",desc:"Creating the basic UI: UITabBarController",link:"https://hackingwithswift.com/read/7/2/creating-the-basic-ui-uitabbarcontroller",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(d,{src:"youtube/7iuRj8YNAxM"}),P,O,n("p",null,[e("You should know the drill by now, or at least part of it. Start by opening "),s(a,{icon:"fa-brands fa-swift"}),D,e(" and changing "),U,e(" to inherit from "),J,e(" rather than "),V,e(". That is, change this line:")]),B,n("p",null,[e("Now open "),s(a,{icon:"fas fa-file-lines"}),A,e(", remove the existing view controller, and drag out a table view controller in its place. Use the identity inspector to change its class to be “ViewController”, then make sure you check the “Is "),W,e("” box.")]),L,n("p",null,[e("We're done with Interface Builder, so please open the file "),s(a,{icon:"fa-brands fa-swift"}),R,e(" so we can make the usual changes to get us a working table view.")]),z]),K,n("details",E,[F,s(i,c(p({title:"100 Days of Swift - Day 33 - Parsing JSON using the Codable protocol",desc:"Parsing JSON using the Codable protocol",link:"https://hackingwithswift.com/read/7/3/parsing-json-using-the-codable-protocol",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(d,{src:"youtube/9FriGMWIbdc"}),M,n("p",null,[e("So, start by pressing "),Y,e("+"),H,e(" and choosing to create a new Swift file called "),s(a,{icon:"fa-brands fa-swift"}),G,e(".")]),Z,n("p",null,[e("So, press "),Q,e("+"),X,e(" again to make a new file, choosing Swift file and naming it "),s(a,{icon:"fa-brands fa-swift"}),$,e(". Give it this content:")]),nn,n("p",null,[e("Put that in place of the current "),en,e(" definition at the top of "),s(a,{icon:"fa-brands fa-swift"}),sn,e(".")]),tn]),an])}const rn=h(w,[["render",on],["__file","33.html.vue"]]),dn=JSON.parse('{"path":"/swift/100-days-of-swift/33.html","title":"Day 33","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 33","description":"100 Days of Swift > Day 33","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of Swift > Day 33"},{"property":"og:description","content":"Day 33"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swift/33.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swift/33.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 33"}],["meta",{"property":"og:description","content":"100 Days of Swift > Day 33"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.hackingwithswift.com/img/books/hws/7-3.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 33\\",\\"image\\":[\\"https://www.hackingwithswift.com/img/books/hws/7-3.png\\",\\"https://www.hackingwithswift.com/img/books/hws/7-2.png\\",\\"https://www.hackingwithswift.com/img/books/hws/7-1.png\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 7, part one","slug":"project-7-part-one","link":"#project-7-part-one","children":[{"level":3,"title":"Setting up","slug":"setting-up","link":"#setting-up","children":[]},{"level":3,"title":"Creating the basic UI: UITabBarController","slug":"creating-the-basic-ui-uitabbarcontroller","link":"#creating-the-basic-ui-uitabbarcontroller","children":[]},{"level":3,"title":"Parsing JSON using the Codable protocol","slug":"parsing-json-using-the-codable-protocol","link":"#parsing-json-using-the-codable-protocol","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":11}]},"readingTime":{"minutes":11.72,"words":3515},"filePathRelative":"swift/100-days-of-swift/33.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{rn as comp,dn as data};
