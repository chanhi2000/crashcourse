import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,a as n,t as m,b as s,w as p,n as o,g as i,e as l,d as a,r as u,o as h}from"./app-U_bew1in.js";const g={},f={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"},b={class:"table-of-contents"},w=n("hr",null,null,-1),y=l('<h2 id="project-9-part-2" tabindex="-1"><a class="header-anchor" href="#project-9-part-2"><span>Project 9, part 2</span></a></h2><p>Today we’re going to be continuing our look at SwiftUI’s drawing systems by getting a little creative – I think you’ll be surprised how easy it is to make something entrancing just by combining most of what you know with a couple of new techniques.</p><p>Today you’re also going to meet the <code>drawingGroup()</code> modifier, which lets us combine view rendering together into a single pass powered by Apple’s high-performance graphics API, Metal. Lots of people have asked me in the past whether I plan to write a book on Metal, and the answer is a definitive <em>no</em> – not only is there <a href="https://www.amazon.com/Metal-Programming-Guide-Tutorial-Reference/dp/0134668944" target="_blank" rel="noopener noreferrer">a very good one already</a>, but it’s also remarkably hard to get anything good out of the APIs.</p><p>That isn’t because Metal is bad – trust me, it’s incredible! – but instead because Apple’s finest engineers have worked hard to make SwiftUI as efficient as possible when working with Metal, and, bluntly, it is extremely unlikely that I can do a better job.</p><p>As you’ll find, switching Metal isn’t something you’ll need often, even though it is easy to do. Famous software developer Kent Beck once said our process should be “make it work, make it right, make it fast”, and he’s quite correct. But if you find your drawing works fast <em>without</em> switching to Metal it’s usually best left as-is.</p><p>Anyway, enough chat – I said we’d make something entrancing, so let’s get to it!</p><p><strong>Today you have three topics to work through, in which you’ll learn about <code>CGAffineTransform</code>, <code>ImagePaint</code>, <code>drawingGroup()</code>, and more.</strong></p><h3 id="transforming-shapes-using-cgaffinetransform-and-even-odd-fills" tabindex="-1"><a class="header-anchor" href="#transforming-shapes-using-cgaffinetransform-and-even-odd-fills"><span>Transforming shapes using <code>CGAffineTransform</code> and even-odd fills</span></a></h3>',8),x={class:"hint-container details"},_=n("summary",null,"Transforming shapes using CGAffineTransform and even-odd fills",-1),I=l(`<p>When you move beyond simple shapes and paths, two useful features of SwiftUI come together to create some beautiful effects with remarkably little work. The first is <code>CGAffineTransform</code>, which describes how a path or view should be rotated, scaled, or sheared; and the second is even-odd fills, which allow us to control how overlapping shapes should be rendered.</p><p>To demonstrate both of these, we’re going to create a flower shape out of several rotated ellipse petals, with each ellipse positioned around a circle. The mathematics behind this is relatively straightforward, with one catch: <code>CGAffineTransform</code> measures angles in radians rather than degrees. If it’s been a while since you were at school, the least you need to know is this: 3.141 radians is equal to 180 degrees, so 3.141 radians multiplied by 2 is equal to 360 degrees. And the 3.141 isn’t a coincidence: the actual value is the mathematical constant pi.</p><p>So, what we’re going to do is as follows:</p><ul><li>Create a new empty path.</li><li>Count from 0 up to pi multiplied by 2 (360 degrees in radians), counting in one eighth of pi each time – this will give us 16 petals.</li><li>Create a rotation transform equal to the current number.</li><li>Add to that rotation a movement equal to half the width and height of our draw space, so each petal is centered in our shape.</li><li>Create a <em>new</em> path for a petal, equal to an ellipse of a specific size.</li><li>Apply our transform to that ellipse so it’s moved into position.</li><li>Add that petal’s path to our main path.</li></ul><p>This will make more sense once you see the code running, but first I want to add three more small things:</p><ol><li>Rotating something then moving it does not produce the same result as moving then rotating, because when you rotate it first the direction it moves will be different from if it were not rotated.</li><li>To really help you understand what’s going on, we’ll be making our petal ellipses use a couple of properties we can pass in externally.</li><li>Ranges such as <code>1...5</code> are great if you want to count through numbers one at a time, but if you want to count in 2s, or in our case count in “pi/8”s, you should use <code>stride(from:to:by:)</code> instead.</li></ol><p>Alright, enough talk – add this shape to your project now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Flower</span><span class="token punctuation">:</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// How much to move this petal away from the center</span></span>
<span class="line">    <span class="token keyword">var</span> petalOffset<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">20</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// How wide to make each petal</span></span>
<span class="line">    <span class="token keyword">var</span> petalWidth<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">100</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">path</span><span class="token punctuation">(</span><span class="token keyword">in</span> rect<span class="token punctuation">:</span> <span class="token class-name">CGRect</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Path</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// The path that will hold all petals</span></span>
<span class="line">        <span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Count from 0 up to pi * 2, moving up pi / 8 each time</span></span>
<span class="line">        <span class="token keyword">for</span> number <span class="token keyword">in</span> <span class="token function">stride</span><span class="token punctuation">(</span>from<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token punctuation">.</span>pi <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> by<span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// rotate the petal by the current value of our loop</span></span>
<span class="line">            <span class="token keyword">let</span> rotation <span class="token operator">=</span> <span class="token class-name">CGAffineTransform</span><span class="token punctuation">(</span>rotationAngle<span class="token punctuation">:</span> number<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// move the petal to be at the center of our view </span></span>
<span class="line">            <span class="token keyword">let</span> position <span class="token operator">=</span> rotation<span class="token punctuation">.</span><span class="token function">concatenating</span><span class="token punctuation">(</span><span class="token class-name">CGAffineTransform</span><span class="token punctuation">(</span>translationX<span class="token punctuation">:</span> rect<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> rect<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// create a path for this petal using our properties plus a fixed Y and height</span></span>
<span class="line">            <span class="token keyword">let</span> originalPetal <span class="token operator">=</span> <span class="token class-name">Path</span><span class="token punctuation">(</span>ellipseIn<span class="token punctuation">:</span> <span class="token class-name">CGRect</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> petalOffset<span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> petalWidth<span class="token punctuation">,</span> height<span class="token punctuation">:</span> rect<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// apply our rotation/position transformation to the petal</span></span>
<span class="line">            <span class="token keyword">let</span> rotatedPetal <span class="token operator">=</span> originalPetal<span class="token punctuation">.</span><span class="token function">applying</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// add it to our main path</span></span>
<span class="line">            path<span class="token punctuation">.</span><span class="token function">addPath</span><span class="token punctuation">(</span>rotatedPetal<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// now send the main path back</span></span>
<span class="line">        <span class="token keyword">return</span> path</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I realize that’s quite a lot of code, but hopefully it will become clearer when you try it out. Modify your ContentView to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> petalOffset <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">20.0</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> petalWidth <span class="token operator">=</span> <span class="token number">100.0</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Flower</span><span class="token punctuation">(</span>petalOffset<span class="token punctuation">:</span> petalOffset<span class="token punctuation">,</span> petalWidth<span class="token punctuation">:</span> petalWidth<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Offset&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token class-name">Slider</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> $petalOffset<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">40</span><span class="token operator">...</span><span class="token number">40</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">,</span> <span class="token punctuation">.</span>bottom<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Width&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token class-name">Slider</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> $petalWidth<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now try that out. You should be able to see exactly how the code works once you start dragging the offset and width sliders around – it’s just a series of rotated ellipses, placed in a circular formation.</p><p>That in itself is interesting, but with one small change we can go from <em>interesting</em> to <em>sublime</em>. If you look at the way our ellipses are being drawn, they overlap frequently – sometimes one ellipse is drawn over another, and sometimes over several others.</p><p>If we fill our path using a solid color, we get a fairly unimpressive result. Try it like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Flower</span><span class="token punctuation">(</span>petalOffset<span class="token punctuation">:</span> petalOffset<span class="token punctuation">,</span> petalWidth<span class="token punctuation">:</span> petalWidth<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>But as an alternative, we can fill the shape using the even-odd rule, which decides whether part of a path should be colored depending on the overlaps it contains. It works like this:</p><ul><li>If a path has no overlaps it will be filled.</li><li>If another path overlaps it, the overlapping part won’t be filled.</li><li>If a third path overlaps the previous two, then it <em>will</em> be filled.</li><li>…and so on.</li></ul><p>Only the parts that actually overlap are affected by this rule, and it creates some remarkably beautiful results. Even better, Swift UI makes it trivial to use, because whenever we call <code>fill()</code> on a shape we can pass a <code>FillStyle</code> struct that asks for the even-odd rule to be enabled.</p><p>Try it out with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Flower</span><span class="token punctuation">(</span>petalOffset<span class="token punctuation">:</span> petalOffset<span class="token punctuation">,</span> petalWidth<span class="token punctuation">:</span> petalWidth<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token class-name">FillStyle</span><span class="token punctuation">(</span>eoFill<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Now run the program and play – honestly, given how little work we’ve done the results are quite entrancing!</p>`,20),T=n("h3",{id:"creative-borders-and-fills-using-imagepaint",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#creative-borders-and-fills-using-imagepaint"},[n("span",null,[a("Creative borders and fills using "),n("code",null,"ImagePaint")])])],-1),C={class:"hint-container details"},S=n("summary",null,"Creative borders and fills using ImagePaint",-1),q=l(`<p>SwiftUI relies heavily on protocols, which can be a bit confusing when working with drawing. For example, we can use <code>Color</code> as a view, but it also conforms to <code>ShapeStyle</code> – a different protocol used for fills, strokes, and borders.</p><p>In practice, this means we can modify the default text view so that it has a red background:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line"><span class="token class-name">Or</span> a red border<span class="token punctuation">:</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">border</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In contrast, we can use an image for the background:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Example&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But using the same image as a border won’t work:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">border</span><span class="token punctuation">(</span><span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Example&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This makes sense if you think about it – unless the image is the exact right size, you have very little control over how it should look.</p><p>To resolve this, SwiftUI gives us a dedicated type that wraps images in a way that we have complete control over how they should be rendered, which in turn means we can use them for borders and fills without problem.</p><p>The type is called <code>ImagePaint</code>, and it’s created using one to three parameters. At the very least you need to give it an <code>Image</code> to work with as its first parameter, but you can also provide a rectangle within that image to use as the source of your drawing specified in the range of 0 to 1 (the second parameter), and a scale for that image (the third parameter). Those second and third parameters have sensible default values of “the whole image” and “100% scale”, so you can sometimes ignore them.</p><p>As an example, we could render an example image using a scale of 0.2, which means it’s shown at 1/5th the normal size:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">border</span><span class="token punctuation">(</span><span class="token class-name">ImagePaint</span><span class="token punctuation">(</span>image<span class="token punctuation">:</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Example&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> scale<span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you want to try using the <code>sourceRect</code> parameter, make sure you pass in a <code>CGRect</code> of relative sizes and positions: 0 means “start” and 1 means “end”. For example, this will show the entire width of our example image, but only the middle half:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">border</span><span class="token punctuation">(</span><span class="token class-name">ImagePaint</span><span class="token punctuation">(</span>image<span class="token punctuation">:</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Example&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> sourceRect<span class="token punctuation">:</span> <span class="token class-name">CGRect</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0.25</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> scale<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It’s worth adding that <code>ImagePaint</code> can be used for view backgrounds and also shape strokes. For example, we could create a capsule with our example image tiled as its stroke:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Capsule</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">strokeBorder</span><span class="token punctuation">(</span><span class="token class-name">ImagePaint</span><span class="token punctuation">(</span>image<span class="token punctuation">:</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Example&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> scale<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ImagePaint</code> will automatically keep tiling its image until it has filled its area – it can work with backgrounds, strokes, borders, and fills of any size.</p>`,17),P=n("h3",{id:"enabling-high-performance-metal-rendering-with-drawinggroup",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#enabling-high-performance-metal-rendering-with-drawinggroup"},[n("span",null,[a("Enabling high-performance Metal rendering with "),n("code",null,"drawingGroup()")])])],-1),A={class:"hint-container details"},G=n("summary",null,"Enabling high-performance Metal rendering with drawingGroup()",-1),D=l(`<p>SwiftUI uses Core Animation for its rendering by default, which offers great performance out of the box. However, for complex rendering you might find your code starts to slow down – anything below 60 frames per second (FPS) is a problem, but really you ought to aim higher because many iOS devices now render at 120fps.</p><p>To demonstrate this, let’s look at some example code. We’re going to create a color-cycling view that renders concentric circles in a range of colors. The result will look like a radial gradient, but we’re going to add two properties to make it more customizable: one to control how many circles should be drawn, and one to control the color cycle – it will be able to move the gradient start and end colors around.</p><p>We can get a color cycling effect by using the <code>Color(hue:saturation:brightness:)</code> initializer: hue is a value from 0 to 1 controlling the kind of color we see – red is both 0 and 1, with all other hues in between. To figure out the hue for a particular circle we can take our circle number (e.g. 25), divide that by how many circles there are (e.g. 100), then add our color cycle amount (e.g. 0.5). So, if we were circle 25 of 100 with a cycle amount of 0.5, our hue would be 0.75.</p><p>One small complexity here is that hues don’t automatically wrap after we reach 1.0, which means a hue of 1.0 is equal to a hue of 0.0, but a hue of 1.2 is <em>not</em> equal to a hue of 0.2. As a result, we’re going to wrap the hue by hand: if it’s over 1.0 we’ll subtract 1.0, to make sure it always lies in the range of 0.0 to 1.0.</p><p>Here’s the code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ColorCyclingCircle</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> amount <span class="token operator">=</span> <span class="token number">0.0</span></span>
<span class="line">    <span class="token keyword">var</span> steps <span class="token operator">=</span> <span class="token number">100</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ZStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span>steps<span class="token punctuation">)</span> <span class="token punctuation">{</span> value <span class="token keyword">in</span></span>
<span class="line">                <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">inset</span><span class="token punctuation">(</span>by<span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">strokeBorder</span><span class="token punctuation">(</span><span class="token function">color</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> value<span class="token punctuation">,</span> brightness<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">color</span><span class="token punctuation">(</span><span class="token keyword">for</span> value<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> brightness<span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">var</span> targetHue <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>steps<span class="token punctuation">)</span> <span class="token operator">+</span> amount</span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> targetHue <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">{</span></span>
<span class="line">            targetHue <span class="token operator">-=</span> <span class="token number">1</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Color</span><span class="token punctuation">(</span>hue<span class="token punctuation">:</span> targetHue<span class="token punctuation">,</span> saturation<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> brightness<span class="token punctuation">:</span> brightness<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can now use that in a layout, binding its color cycle to a local property controlled by a slider:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> colorCycle <span class="token operator">=</span> <span class="token number">0.0</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">ColorCyclingCircle</span><span class="token punctuation">(</span>amount<span class="token punctuation">:</span> colorCycle<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Slider</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> $colorCycle<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you run the app you’ll see we have a neat color wave effect controlled entirely by dragging around the slider, and it works really smoothly.</p><p>What you’re seeing right now is powered by Core Animation, which means it will turn our 100 circles into 100 individual views being drawn onto the screen. This is computationally expensive, but as you can see it works well enough – we get smooth performance.</p><p>However, if we increase the complexity a little we’ll find things aren’t quite so rosy. Replace the existing <code>strokeBorder()</code> modifier with this one:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">strokeBorder</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">LinearGradient</span><span class="token punctuation">(</span></span>
<span class="line">        gradient<span class="token punctuation">:</span> <span class="token class-name">Gradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span></span>
<span class="line">            <span class="token function">color</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> value<span class="token punctuation">,</span> brightness<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token function">color</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> value<span class="token punctuation">,</span> brightness<span class="token punctuation">:</span> <span class="token number">0.5</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span>
<span class="line">        startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">,</span></span>
<span class="line">        endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottom</span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">,</span> </span>
<span class="line">    lineWidth<span class="token punctuation">:</span> <span class="token number">2</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That now renders a gentle gradient, showing bright colors at the top of the circle down to darker colors at the bottom. And <em>now</em> when you run the app you’ll find it runs much slower – SwiftUI is struggling to render 100 gradients as part of 100 separate views.</p><p>We can fix this by applying one new modifier, called <code>drawingGroup()</code>. This tells SwiftUI it should render the contents of the view into an off-screen image before putting it back onto the screen as a single rendered output, which is significantly faster. Behind the scenes this is powered by Metal, which is Apple’s framework for working directly with the GPU for extremely fast graphics.</p><p>So, modify the <code>ColorCyclingCircle</code> body to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ZStack</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// existing code…</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">drawingGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now run it again – with that one tiny addition you’ll now find we get everything rendered correctly and we’re also back at full speed even with the gradients.</p><p><strong>Important</strong>: The <code>drawingGroup()</code> modifier is helpful to know about and to keep in your arsenal as a way to solve performance problems when you hit them, but you should not <em>use</em> it that often. Adding the off-screen render pass might slow down SwiftUI for simple drawing, so you should wait until you have an actual performance problem before trying to bring in <code>drawingGroup()</code>.</p>`,18),j=n("hr",null,null,-1);function W(r,V){const e=u("router-link"),t=u("VPCard"),c=u("VidStack");return h(),k("div",null,[n("h1",f,[n("a",v,[n("span",null,m(r.$frontmatter.title)+" 관련",1)])]),n("nav",b,[n("ul",null,[n("li",null,[s(e,{to:"#project-9-part-2"},{default:p(()=>[a("Project 9, part 2")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#transforming-shapes-using-cgaffinetransform-and-even-odd-fills"},{default:p(()=>[a("Transforming shapes using CGAffineTransform and even-odd fills")]),_:1})]),n("li",null,[s(e,{to:"#creative-borders-and-fills-using-imagepaint"},{default:p(()=>[a("Creative borders and fills using ImagePaint")]),_:1})]),n("li",null,[s(e,{to:"#enabling-high-performance-metal-rendering-with-drawinggroup"},{default:p(()=>[a("Enabling high-performance Metal rendering with drawingGroup()")]),_:1})])])])])]),w,s(t,o(i({title:"100 Days of SwiftUI - Day 44",desc:"Project 9, part 2",link:"https://www.hackingwithswift.com/100/swiftui/44",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),y,n("details",x,[_,s(t,o(i({title:"100 Days of SwiftUI - Day 44 - Transforming shapes using CGAffineTransform and even-odd fills",desc:"Transforming shapes using CGAffineTransform and even-odd fills",link:"https://hackingwithswift.com/books/ios-swiftui/transforming-shapes-using-cgaffinetransform-and-even-odd-fills",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/sQ89JRq0kvg"}),I]),T,n("details",C,[S,s(t,o(i({title:"100 Days of SwiftUI - Day 44 - Creative borders and fills using ImagePaint",desc:"Creative borders and fills using ImagePaint",link:"https://hackingwithswift.com/books/ios-swiftui/creative-borders-and-fills-using-imagepaint",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/23rvgRZVvLM"}),q]),P,n("details",A,[G,s(t,o(i({title:"100 Days of SwiftUI - Day 44 - Enabling high-performance Metal rendering with drawingGroup()",desc:"Enabling high-performance Metal rendering with drawingGroup()",link:"https://hackingwithswift.com/books/ios-swiftui/enabling-high-performance-metal-rendering-with-drawinggroup",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/OFf5ZEd3Yzw"}),D]),j])}const O=d(g,[["render",W],["__file","44.html.vue"]]),R=JSON.parse('{"path":"/swift/100-days-of-swiftui/44.html","title":"Day 44","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 44","description":"100 Days of SwiftUI > Day 44","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 44"},{"property":"og:description","content":"Day 44"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/44.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/44.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 44"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 44"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 44\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 9, part 2","slug":"project-9-part-2","link":"#project-9-part-2","children":[{"level":3,"title":"Transforming shapes using CGAffineTransform and even-odd fills","slug":"transforming-shapes-using-cgaffinetransform-and-even-odd-fills","link":"#transforming-shapes-using-cgaffinetransform-and-even-odd-fills","children":[]},{"level":3,"title":"Creative borders and fills using ImagePaint","slug":"creative-borders-and-fills-using-imagepaint","link":"#creative-borders-and-fills-using-imagepaint","children":[]},{"level":3,"title":"Enabling high-performance Metal rendering with drawingGroup()","slug":"enabling-high-performance-metal-rendering-with-drawinggroup","link":"#enabling-high-performance-metal-rendering-with-drawinggroup","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":8}]},"readingTime":{"minutes":9.02,"words":2705},"filePathRelative":"swift/100-days-of-swiftui/44.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{O as comp,R as data};
