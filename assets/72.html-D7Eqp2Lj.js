import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,a as n,t as m,b as s,w as o,n as i,g as p,d as a,e as r,r as c,o as g}from"./app-U_bew1in.js";const f={},w={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},b={class:"table-of-contents"},y=n("hr",null,null,-1),N=r('<h2 id="project-21-part-one" tabindex="-1"><a class="header-anchor" href="#project-21-part-one"><span>Project 21, part one</span></a></h2><p>Tim Ferriss is a well-known podcaster and angel investor, who once said ‚Äúin a digital world, there are numerous technologies that we are attached to that create infinite interruption.‚Äù And it‚Äôs true: there‚Äôs a little jolt of excitement when we see your iPhone screen light up, because it means something interesting has happened.</p><p>In iOS these app interruptions come in two forms: either the app has received some remote data from the internet and it needs to be shown immediately, or it scheduled a local alert to be shown at a specific day and time. Remote data, known as push notifications, takes quite a lot of üìéset up because you need a server capable of communicating with Apple‚Äôs push notification server (APNS), but <em>local</em> alerts aren‚Äôt hard at all, so they are what we‚Äôll be looking at today.</p><p>But please remember: just because you <em>can</em> show a notification doesn‚Äôt mean you <em>should</em> ‚Äì if the user grants you some permission you should be grateful, and try not to abuse that responsibility!</p><p><strong>Today you have three topics to work through, and you‚Äôll learn about <code>UNUserNotificationCenter</code>, requesting permission for notifications, the different kinds of notification trigger, and more.</strong></p><h3 id="setting-up" tabindex="-1"><a class="header-anchor" href="#setting-up"><span>Setting up</span></a></h3>',6),q={class:"hint-container details"},_=n("summary",null,"Setting up",-1),U=n("p",null,"This is going to be the easiest technique project in the entire series, and I expect you're extremely relieved to hear that because it can be hard going always having to learn new things!",-1),C=n("p",null,"What you're going to learn about are local notifications, which let you send reminders to your user's lock screen to show them information when your app isn't running. If you set a reminder in your calendar, making it pop up on your lock screen at the right time is a local notification.",-1),S=n("p",null,"These aren't the same as push notifications, and in fact they are quite a different beast from a development perspective. I would love to cover push notifications here, but they require a dedicated server (or service, if you outsource) to send from and that's outside the remit of this course. Much later on ‚Äì project 33 to be precise ‚Äì we look at CloudKit, which can send push notifications when data is changed, but I wouldn‚Äôt recommend skipping ahead.",-1),x=n("p",null,"To get started, create a new Single View App project in Xcode, and name it Project21.",-1),I=n("h3",{id:"scheduling-notifications-unusernotificationcenter-and-unnotificationrequest",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#scheduling-notifications-unusernotificationcenter-and-unnotificationrequest"},[n("span",null,[a("Scheduling notifications: "),n("code",null,"UNUserNotificationCenter"),a(" and "),n("code",null,"UNNotificationRequest")])])],-1),j={class:"hint-container details"},D=n("summary",null,"Scheduling notifications: UNUserNotificationCenter and UNNotificationRequest",-1),T=n("code",null,"Main.storyboard",-1),A=n("code",null,"ViewController.swift",-1),R=r(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@objc</span> <span class="token keyword">func</span> <span class="token function-definition function">registerLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token attribute atrule">@objc</span> <span class="token keyword">func</span> <span class="token function-definition function">scheduleLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now add this code to <code>viewDidLoad()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">navigationItem<span class="token punctuation">.</span>leftBarButtonItem <span class="token operator">=</span> <span class="token class-name">UIBarButtonItem</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Register&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>plain<span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> <span class="token other-directive property">#selector</span><span class="token punctuation">(</span>registerLocal<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">navigationItem<span class="token punctuation">.</span>rightBarButtonItem <span class="token operator">=</span> <span class="token class-name">UIBarButtonItem</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Schedule&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>plain<span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> <span class="token other-directive property">#selector</span><span class="token punctuation">(</span>scheduleLocal<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>OK, time to explain how this project needs to work. First, you can&#39;t post messages to the user&#39;s lock screen unless you have their permission. This is a sensible restriction ‚Äì it would, after all, be awfully annoying if any app could bother you when it pleased.</p><p>So, in order to send local notifications in our app, we first need to request permission, and that&#39;s what we&#39;ll put in the <code>registerLocal()</code> method. You register your settings based on what you actually need, and that&#39;s done with a method called <code>requestAuthorization()</code> on <code>UNUserNotificationCenter</code>. For this example we&#39;re going to request an alert (a message to show), along with a badge (for our icon) and a sound (because users just <em>love</em> those.)</p><p>You also need to provide a closure that will be executed when the user has granted or denied your permissions request. This will be given two parameters: a boolean that will be true if permission was granted, and an <code>Error?</code> containing a message if something went wrong.</p><p>All this functionality is contained in the UserNotifications framework, so before continuing add this <code>import</code> line now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token class-name">UserNotifications</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>OK, let‚Äôs go ‚Äì change your <code>registerLocal()</code> method to be this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@objc</span> <span class="token keyword">func</span> <span class="token function-definition function">registerLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> center <span class="token operator">=</span> <span class="token class-name">UNUserNotificationCenter</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    center<span class="token punctuation">.</span><span class="token function">requestAuthorization</span><span class="token punctuation">(</span>options<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>alert<span class="token punctuation">,</span> <span class="token punctuation">.</span>badge<span class="token punctuation">,</span> <span class="token punctuation">.</span>sound<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>granted<span class="token punctuation">,</span> error<span class="token punctuation">)</span> <span class="token keyword">in</span></span>
<span class="line">        <span class="token keyword">if</span> granted <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Yay!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;D&#39;oh&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Helpful tip: if you want to test allowing or denying permission, just reset the simulator and run the app again to get a clean slate. Choose the Hardware menu then ‚ÄúErase all Content and Settings&quot; to make this happen.</p><figure><img src="https://www.hackingwithswift.com/img/books/hws/21-1.png" alt="When you request permission to show notifications, iOS shows an alert like this one." tabindex="0" loading="lazy"><figcaption>When you request permission to show notifications, iOS shows an alert like this one.</figcaption></figure><p>Once we have user permission, it&#39;s time to fill in the <code>scheduleLocal()</code> method. This will configure all the data needed to schedule a notification, which is three things: content (what to show), a trigger (when to show it), and a request (the combination of content and trigger.)</p><p>Before I dive into the code, there are a few extra things I want to discuss.</p><p>First, the reason a notification request is split into two smaller components is because they are interchangeable. For example, the trigger ‚Äì when to show the notification ‚Äì can be a calendar trigger that shows the notification at an exact time, it can be an interval trigger that shows the notification after a certain time interval has lapsed, or it can be a geofence that shows the notification based on the user‚Äôs location.</p><p>I‚Äôll be demonstrating both calendar and interval triggers here, but to do calendar triggers requires learning another new data type called <code>DateComponents</code>. We‚Äôre going to start with a calendar notification, which is where you specify a day, a month, an hour, a minute, or any combination of those to produce specific times. For example, if you specify hour 8 and minute 30, and <em>don‚Äôt</em> specify a day, it means either ‚Äú8:30 tomorrow‚Äù or ‚Äú8:30 every day‚Äù depending on whether you ask for the notification to be repeated.</p><p>So, we could create a repeating alarm at 10:30am every morning like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> dateComponents <span class="token operator">=</span> <span class="token class-name">DateComponents</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">dateComponents<span class="token punctuation">.</span>hour <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line">dateComponents<span class="token punctuation">.</span>minute <span class="token operator">=</span> <span class="token number">30</span></span>
<span class="line"><span class="token keyword">let</span> trigger <span class="token operator">=</span> <span class="token class-name">UNCalendarNotificationTrigger</span><span class="token punctuation">(</span>dateMatching<span class="token punctuation">:</span> dateComponents<span class="token punctuation">,</span> repeats<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When it comes to <em>what</em> to show, we need to use the class <code>UNMutableNotificationContent</code>. This has lots of properties that customize the way the alert looks and works ‚Äì we‚Äôll be using these:</p><ul><li>The <code>title</code> property is used for the main title of the alert. This should be a couple of words at most.</li><li>The <code>body</code> property should contain your main text.</li><li>If you want to specify a sound you can create a custom <code>UNNotificationSound</code> object and attach it to the <code>sound</code> property, or just use <code>UNNotificationSound.default</code>.</li><li>To attach custom data to the notification, e.g. an internal ID, use the <code>userInfo</code> dictionary property.</li><li>You can also attach custom actions by specifying the <code>categoryIdentifier</code> property.</li></ul><p>Putting those all together, we could create some notification content like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token class-name">UNMutableNotificationContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">content<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Title goes here&quot;</span></span></span>
<span class="line">content<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Main text goes here&quot;</span></span></span>
<span class="line">content<span class="token punctuation">.</span>categoryIdentifier <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;customIdentifier&quot;</span></span></span>
<span class="line">content<span class="token punctuation">.</span>userInfo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;customData&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;fizzbuzz&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line">content<span class="token punctuation">.</span>sound <span class="token operator">=</span> <span class="token class-name">UNNotificationSound</span><span class="token punctuation">.</span><span class="token keyword">default</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The combination of content and trigger is enough to be combined into a request, but here notifications get clever: as well as content and a trigger, each notification also has a unique identifier. This is just a string you create, but it <em>does</em> need to be unique because it lets you update or remove notifications programmatically.</p><p>Apple‚Äôs example for this is an app that displays live sports scores to the user. When something interesting happens, what the user really wants is for the existing notification to be updated with new information, rather than have multiple notifications from the same app over time.</p><p>For technique project we don‚Äôt care what name is used for each notification, but we do want it to be unique. So, we‚Äôll be using the <code>UUID</code> class to generate unique identifiers ‚Äì we‚Äôve used this before, so hopefully you‚Äôre familiar.</p><p>OK, enough talk ‚Äì time for some code. Change the <code>scheduleLocal()</code> method to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@objc</span> <span class="token keyword">func</span> <span class="token function-definition function">scheduleLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> center <span class="token operator">=</span> <span class="token class-name">UNUserNotificationCenter</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token class-name">UNMutableNotificationContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    content<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Late wake up call&quot;</span></span></span>
<span class="line">    content<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;The early bird catches the worm, but the second mouse gets the cheese.&quot;</span></span></span>
<span class="line">    content<span class="token punctuation">.</span>categoryIdentifier <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;alarm&quot;</span></span></span>
<span class="line">    content<span class="token punctuation">.</span>userInfo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;customData&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;fizzbuzz&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line">    content<span class="token punctuation">.</span>sound <span class="token operator">=</span> <span class="token class-name">UNNotificationSound</span><span class="token punctuation">.</span><span class="token keyword">default</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> dateComponents <span class="token operator">=</span> <span class="token class-name">DateComponents</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    dateComponents<span class="token punctuation">.</span>hour <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line">    dateComponents<span class="token punctuation">.</span>minute <span class="token operator">=</span> <span class="token number">30</span></span>
<span class="line">    <span class="token keyword">let</span> trigger <span class="token operator">=</span> <span class="token class-name">UNCalendarNotificationTrigger</span><span class="token punctuation">(</span>dateMatching<span class="token punctuation">:</span> dateComponents<span class="token punctuation">,</span> repeats<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> request <span class="token operator">=</span> <span class="token class-name">UNNotificationRequest</span><span class="token punctuation">(</span>identifier<span class="token punctuation">:</span> <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>uuidString<span class="token punctuation">,</span> content<span class="token punctuation">:</span> content<span class="token punctuation">,</span> trigger<span class="token punctuation">:</span> trigger<span class="token punctuation">)</span></span>
<span class="line">    center<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you want to test out your notifications, there are two more things that will help.</p><p>First, you can cancel pending notifications ‚Äì i.e., notifications you have scheduled that have yet to be delivered because their trigger hasn‚Äôt been met ‚Äì using the <code>center.removeAllPendingNotificationRequests()</code> method, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">center<span class="token punctuation">.</span><span class="token function">removeAllPendingNotificationRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Second, chances are you‚Äôll find the interval trigger far easier to test with than the calendar trigger, because you can set it to a low number like 5 seconds to have your notification trigger almost immediately.</p><p>To do that, replace the existing trigger with this code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> trigger <span class="token operator">=</span> <span class="token class-name">UNTimeIntervalNotificationTrigger</span><span class="token punctuation">(</span>timeInterval<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> repeats<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>With that small change you should be able to click Schedule in the simulator, then press <kbd>Cmd</kbd>+<kbd>L</kbd> to lock the device and have it show an alert just a few seconds later.</p>`,34),V=n("h3",{id:"acting-on-responses",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#acting-on-responses"},[n("span",null,"Acting on responses")])],-1),z={class:"hint-container details"},O=n("summary",null,"Acting on responses",-1),P=r(`<p>There‚Äôs a lot more you can do with notifications, but chances are the thing you <em>most</em> want to do is act on the user‚Äôs response ‚Äì to show one or more options alongside your alert, then respond to the user‚Äôs choice.</p><p>We already set the <code>categoryIdentifier</code> property for our notification, which is a text string that identifies a type of alert. We can now use that same text string to create buttons for the user to choose from, and iOS will show them when any notifications of that type are shown.</p><p>This is done using two new classes: <code>UNNotificationAction</code> creates an individual button for the user to tap, and <code>UNNotificationCategory</code> groups multiple buttons together under a single identifier.</p><p>For this technique project we‚Äôre going to create one button, ‚ÄúShow me more‚Ä¶‚Äù, that will cause the app to launch when tapped. We‚Äôre also going to set the <code>delegate</code> property of the user notification center to be <code>self</code>, meaning that any alert-based messages that get sent will be routed to our view controller to be handled.</p><p>Creating a <code>UNNotificationAction</code> requires three parameters:</p><ol><li>An identifier, which is a unique text string that gets sent to you when the button is tapped.</li><li>A title, which is what user‚Äôs see in the interface.</li><li>Options, which describe any special options that relate to the action. You can choose from <code>.authenticationRequired</code>, <code>.destructive</code>, and <code>.foreground</code>.</li></ol><p>Once you have as many actions as you want, you group them together into a single <code>UNNotificationCategory</code> and give it the same identifier you used with a notification.</p><p>That‚Äôs it! Add this method to <code>ViewController</code> now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">registerCategories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> center <span class="token operator">=</span> <span class="token class-name">UNUserNotificationCenter</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    center<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">self</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> show <span class="token operator">=</span> <span class="token class-name">UNNotificationAction</span><span class="token punctuation">(</span>identifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;show&quot;</span></span><span class="token punctuation">,</span> title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Tell me more‚Ä¶&quot;</span></span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">.</span>foreground<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> category <span class="token operator">=</span> <span class="token class-name">UNNotificationCategory</span><span class="token punctuation">(</span>identifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;alarm&quot;</span></span><span class="token punctuation">,</span> actions<span class="token punctuation">:</span> <span class="token punctuation">[</span>show<span class="token punctuation">]</span><span class="token punctuation">,</span> intentIdentifiers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    center<span class="token punctuation">.</span><span class="token function">setNotificationCategories</span><span class="token punctuation">(</span><span class="token punctuation">[</span>category<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You might have noticed the empty <code>intentIdentifiers</code> parameter in the category initializer - this is used to connect your notifications to intents, if you have created any.</p><p>You‚Äôll get an error because you assigned <code>self</code> to be the delegate of the user notification center. To fix it, make the <code>ViewController</code> class conform to <code>UNUserNotificationCenterDelegate</code> like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">ViewController</span><span class="token punctuation">:</span> <span class="token class-name">UIViewController</span><span class="token punctuation">,</span> <span class="token class-name">UNUserNotificationCenterDelegate</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You can call <code>registerCategories()</code> wherever you want, but in this project the safest place is probably right at the beginning of the <code>scheduleLocal()</code> method.</p><p>Now that we have registered the ‚Äúalarm‚Äù category with a single button, the last thing to do is implement the <code>didReceive</code> method for the notification center. This is triggered on our view controller because we‚Äôre the center‚Äôs delegate, so it‚Äôs down to us to decide how to handle the notification.</p><p>We attached some customer data to the <code>userInfo</code> property of the notification content, and this is where it gets handed back ‚Äì it‚Äôs your chance to link the notification to whatever app content it relates to.</p><p>When the user acts on a notification you can read its <code>actionIdentifier</code> property to see what they did. We have a single button with the ‚Äúshow‚Äù identifier, but there‚Äôs also <code>UNNotificationDefaultActionIdentifier</code> that gets sent when the user swiped on the notification to unlock their device and launch the app.</p><p>So: we can pull out our user info then decide what to do based on what the user chose. The method also accepts a completion handler closure that you should call once you‚Äôve finished doing whatever you need to do. This might be much later on, so it‚Äôs marked with the <code>@escaping</code> keyword.</p><p>Here‚Äôs the code ‚Äì add this method to <code>ViewController</code> now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">userNotificationCenter</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> center<span class="token punctuation">:</span> <span class="token class-name">UNUserNotificationCenter</span><span class="token punctuation">,</span> didReceive response<span class="token punctuation">:</span> <span class="token class-name">UNNotificationResponse</span><span class="token punctuation">,</span> withCompletionHandler completionHandler<span class="token punctuation">:</span> <span class="token attribute atrule">@escaping</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// pull out the buried userInfo dictionary</span></span>
<span class="line">    <span class="token keyword">let</span> userInfo <span class="token operator">=</span> response<span class="token punctuation">.</span>notification<span class="token punctuation">.</span>request<span class="token punctuation">.</span>content<span class="token punctuation">.</span>userInfo</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> customData <span class="token operator">=</span> userInfo<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;customData&quot;</span></span><span class="token punctuation">]</span> <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Custom data received: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">customData</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">switch</span> response<span class="token punctuation">.</span>actionIdentifier <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token class-name">UNNotificationDefaultActionIdentifier</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token comment">// the user swiped to unlock</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Default identifier&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&quot;show&quot;</span></span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token comment">// the user tapped our &quot;show more info‚Ä¶&quot; button</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Show more information‚Ä¶&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">break</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// you must call the completion handler when you&#39;re done</span></span>
<span class="line">    <span class="token function">completionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Our project now creates notifications, attaches them to categories so you can create action buttons, then responds to whichever button was tapped by the user ‚Äì we‚Äôre done!</p>`,20),B=n("hr",null,null,-1);function L(d,W){const t=c("router-link"),e=c("VPCard"),l=c("VidStack"),u=c("FontIcon");return g(),k("div",null,[n("h1",w,[n("a",v,[n("span",null,m(d.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),n("nav",b,[n("ul",null,[n("li",null,[s(t,{to:"#project-21-part-one"},{default:o(()=>[a("Project 21, part one")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#setting-up"},{default:o(()=>[a("Setting up")]),_:1})]),n("li",null,[s(t,{to:"#scheduling-notifications-unusernotificationcenter-and-unnotificationrequest"},{default:o(()=>[a("Scheduling notifications: UNUserNotificationCenter and UNNotificationRequest")]),_:1})]),n("li",null,[s(t,{to:"#acting-on-responses"},{default:o(()=>[a("Acting on responses")]),_:1})])])])])]),y,s(e,i(p({title:"100 Days of Swift - Day 72",desc:"Project 21, part one",link:"https://www.hackingwithswift.com/100/72",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),N,n("details",q,[_,s(e,i(p({title:"100 Days of Swift - Day 72 - Setting up",desc:"Setting up",link:"https://hackingwithswift.com/read/21/1/setting-up",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(l,{src:"youtube/jb0SFRc28Ak"}),U,C,S,x]),I,n("details",j,[D,s(e,i(p({title:"100 Days of Swift - Day 72 - Scheduling notifications: UNUserNotificationCenter and UNNotificationRequest",desc:"Scheduling notifications: UNUserNotificationCenter and UNNotificationRequest",link:"https://hackingwithswift.com/read/21/2/scheduling-notifications-unusernotificationcenter-and-unnotificationrequest",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(l,{src:"youtube/QD_mVOeOaGA"}),n("p",null,[a("We only need two buttons to control the entire user interface for this project, and the easiest way to do that is using navigation bar buttons. So, open "),s(u,{icon:"fas fa-file-lines"}),T,a(" in Interface Builder and embed the view controller inside a navigation controller ‚Äì and that‚Äôs it for the interface.")]),n("p",null,[a("Open "),s(u,{icon:"fa-brands fa-swift"}),A,a(" and add these two method stubs:")]),R]),V,n("details",z,[O,s(e,i(p({title:"100 Days of Swift - Day 72 - Acting on responses",desc:"Acting on responses",link:"https://hackingwithswift.com/read/21/3/acting-on-responses",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(l,{src:"youtube/t0l0-Kx_4l0"}),P]),B])}const K=h(f,[["render",L],["__file","72.html.vue"]]),Y=JSON.parse('{"path":"/swift/100-days-of-swift/72.html","title":"Day 72","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 72","description":"100 Days of Swift > Day 72","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of Swift > Day 72"},{"property":"og:description","content":"Day 72"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swift/72.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swift/72.html"}],["meta",{"property":"og:site_name","content":"ü•ÅCrashcourse"}],["meta",{"property":"og:title","content":"Day 72"}],["meta",{"property":"og:description","content":"100 Days of Swift > Day 72"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.hackingwithswift.com/img/books/hws/21-1.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 72\\",\\"image\\":[\\"https://www.hackingwithswift.com/img/books/hws/21-1.png\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 21, part one","slug":"project-21-part-one","link":"#project-21-part-one","children":[{"level":3,"title":"Setting up","slug":"setting-up","link":"#setting-up","children":[]},{"level":3,"title":"Scheduling notifications: UNUserNotificationCenter and UNNotificationRequest","slug":"scheduling-notifications-unusernotificationcenter-and-unnotificationrequest","link":"#scheduling-notifications-unusernotificationcenter-and-unnotificationrequest","children":[]},{"level":3,"title":"Acting on responses","slug":"acting-on-responses","link":"#acting-on-responses","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":14}]},"readingTime":{"minutes":8.19,"words":2456},"filePathRelative":"swift/100-days-of-swift/72.md","localizedDate":"2023ÎÖÑ 12Ïõî 27Ïùº","excerpt":"\\n\\n<hr>\\n"}');export{K as comp,Y as data};
