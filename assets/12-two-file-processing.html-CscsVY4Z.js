import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,a as e,t as b,b as a,w as n,n as f,g,d as s,e as o,r as d,o as k}from"./app-U_bew1in.js";const _={},x={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},E=e("hr",null,null,-1),C=e("hr",null,null,-1),A=e("p",null,[s("This chapter focuses on solving problems which depend upon the contents of two or more files. These are usually based on comparing records and fields. Sometimes, record number plays a role too. You'll also learn about the "),e("code",null,"getline"),s(" built-in function.")],-1),N={class:"hint-container info"},R=e("p",{class:"hint-container-title"},"Info",-1),j={href:"https://github.com/learnbyexample/learn_gnuawk/tree/master/example_files",target:"_blank",rel:"noopener noreferrer"},S=o(`<hr><h2 id="comparing-records" tabindex="-1"><a class="header-anchor" href="#comparing-records"><span>Comparing records</span></a></h2><p>Consider the following input files which will be compared line wise to get the common and unique lines.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> colors_1.txt</span>
<span class="line"><span class="token comment"># teal</span></span>
<span class="line"><span class="token comment"># light blue</span></span>
<span class="line"><span class="token comment"># green</span></span>
<span class="line"><span class="token comment"># yellow</span></span>
<span class="line"><span class="token function">cat</span> colors_2.txt</span>
<span class="line"><span class="token comment"># light blue</span></span>
<span class="line"><span class="token comment"># black</span></span>
<span class="line"><span class="token comment"># dark green</span></span>
<span class="line"><span class="token comment"># yellow</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <em>key</em> features used in the solution below:</p><ul><li>For two files as input, <code>NR==FNR</code> will be <code>true</code> only when the first file is being processed</li><li><code>next</code> will skip rest of the script and fetch the next record</li><li><code>a[$0]</code> by itself is a valid statement. It will create an uninitialized element in array <code>a</code> with <code>$0</code> as the key (assuming the key doesn&#39;t exist yet)</li><li><code>$0</code> in a checks if the given string (<code>$0</code> here) exists as a key in the array <code>a</code></li></ul>`,6),$=e("p",null,"common lines",-1),T=e("blockquote",null,[e("p",null,[s("same as: "),e("code",null,"grep -Fxf colors_1.txt colors_2.txt")])],-1),F=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'NR==FNR{a[$0]; next} $0 in a'"),s(" colors_1.txt colors_2.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# light blue")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# yellow")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),I=e("code",null,"colors_2.txt",-1),P=e("code",null,"colors_1.txt",-1),G=e("blockquote",null,[e("p",null,[s("same as: "),e("code",null,"grep -vFxf colors_1.txt colors_2.txt")])],-1),J=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'NR==FNR{a[$0]; next} !($0 in a)'"),s(" colors_1.txt colors_2.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# black")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# dark green")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),D=e("code",null,"colors_1.txt",-1),M=e("code",null,"colors_2.txt",-1),O=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'NR==FNR{a[$0]; next} !($0 in a)'"),s(" colors_2.txt colors_1.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# teal")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# green")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),B=e("div",{class:"hint-container warning"},[e("p",{class:"hint-container-title"},"Warning"),e("p",null,[s("Note that the "),e("code",null,"NR==FNR"),s(" logic will fail if the first file is empty, since "),e("code",null,"NR"),s(" wouldn't get a chance to increment. You can set a flag after the first file has been processed to avoid this issue. See "),e("a",{href:"https://unix.stackexchange.com/a/237110/109046",target:"_blank",rel:"noopener noreferrer"},"this unix.stackexchange thread"),s(" for more workarounds.")])],-1),L=e("p",null,"no output",-1),Q=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'NR==FNR{a[$0]; next} !($0 in a)'"),s(" /dev/null greeting.txt")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1),z=e("p",null,"gives the expected output",-1),U=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'!f{a[$0]; next} !($0 in a)'"),s(" /dev/null "),e("span",{class:"token assign-left variable"},"f"),e("span",{class:"token operator"},"="),e("span",{class:"token number"},"1"),s(" greeting.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Hi there")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Have a nice day")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Good bye")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),q=o(`<hr><h2 id="comparing-fields" tabindex="-1"><a class="header-anchor" href="#comparing-fields"><span>Comparing fields</span></a></h2><p>In the previous section, you saw how to compare the contents of whole records between two files. This section will focus on comparing only specific fields. The below sample file will be one of the two file inputs for examples in this section.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> marks.txt</span>
<span class="line"><span class="token comment"># Dept    Name    Marks</span></span>
<span class="line"><span class="token comment"># ECE     Raj     53</span></span>
<span class="line"><span class="token comment"># ECE     Joel    72</span></span>
<span class="line"><span class="token comment"># EEE     Moi     68</span></span>
<span class="line"><span class="token comment"># CSE     Surya   81</span></span>
<span class="line"><span class="token comment"># EEE     Tia     59</span></span>
<span class="line"><span class="token comment"># ECE     Om      92</span></span>
<span class="line"><span class="token comment"># CSE     Amy     67</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),Y=e("code",null,"marks.txt",-1),H=e("code",null,"dept.txt",-1),V=o(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> dept.txt</span>
<span class="line"><span class="token comment"># CSE</span></span>
<span class="line"><span class="token comment"># ECE</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),K=e("code",null,"dept.txt",-1),W=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'NR==FNR{a[$1]; next} $1 in a'"),s(" dept.txt marks.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ECE     Raj     53")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ECE     Joel    72")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# CSE     Surya   81")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ECE     Om      92")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# CSE     Amy     67")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Z=e("p",null,"if the header is needed as well",-1),X=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'NR==FNR{a[$1]; next} FNR==1 || $1 in a'"),s(" dept.txt marks.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Dept    Name    Marks")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ECE     Raj     53")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ECE     Joel    72")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# CSE     Surya   81")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ECE     Om      92")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# CSE     Amy     67")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ee=o(`<p>For multiple field comparison, you need to construct the key robustly. Simply concatenating field values can lead to false matches. For example, field values <code>abc</code> and <code>123</code> will wrongly match <code>ab</code> and <code>c123</code>. To avoid this, you may introduce some string between the field values, say <code>&quot;_&quot;</code> (if you know the field themselves cannot have this character) or <code>FS</code> (safer option). You could also allow awk to bail you out. If you use the <code>,</code> symbol (not <code>&quot;,&quot;</code> as a string) between the field values, the value of the special variable <code>SUBSEP</code> is inserted. <code>SUBSEP</code> has a default value of the non-printing character <code>\\034</code> which is usually not used as part of text files.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> dept_name.txt</span>
<span class="line"><span class="token comment"># EEE Moi</span></span>
<span class="line"><span class="token comment"># CSE Amy</span></span>
<span class="line"><span class="token comment"># ECE Raj</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),se=e("p",null,[s("uses "),e("code",null,"SUBSEP"),s(" as a separator between the field values to construct the ke note the use of parentheses for key testing")],-1),ne=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'NR==FNR{a[$1,$2]; next} ($1,$2) in a'"),s(" dept_name.txt marks.txt")]),s(`
`),e("span",{class:"line"},[s("ECE     Raj     "),e("span",{class:"token number"},"53")]),s(`
`),e("span",{class:"line"},[s("EEE     Moi     "),e("span",{class:"token number"},"68")]),s(`
`),e("span",{class:"line"},[s("CSE     Amy     "),e("span",{class:"token number"},"67")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ae=o(`<p>In this example, one of the field is used for numerical comparison.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> dept_mark.txt</span>
<span class="line">ECE <span class="token number">70</span></span>
<span class="line">EEE <span class="token number">65</span></span>
<span class="line">CSE <span class="token number">80</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),le=e("code",null,"dept_mark.txt",-1),ie=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'NR==FNR{d[$1]=$2; next}"),s(`
`),e("span",{class:"line"},"     $1 in d && $3 >= d[$1]'"),s(" dept_mark.txt marks.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ECE     Joel    72")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# EEE     Moi     68")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# CSE     Surya   81")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ECE     Om      92")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),te=o(`<p>Here&#39;s an example of adding a new field.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> role.txt</span>
<span class="line"><span class="token comment"># Raj class_rep</span></span>
<span class="line"><span class="token comment"># Amy sports_rep</span></span>
<span class="line"><span class="token comment"># Tia placement_rep</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),ce=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token parameter variable"},"-v"),s(),e("span",{class:"token assign-left variable"},"OFS"),e("span",{class:"token operator"},"="),e("span",{class:"token string"},"'\\t'"),s(),e("span",{class:"token string"},"'NR==FNR{r[$1]=$2; next}"),s(`
`),e("span",{class:"line"},`       {$(NF+1) = FNR==1 ? "Role" : r[$2]} 1'`),s(" role.txt marks.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Dept    Name    Marks   Role")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ECE     Raj     53      class_rep")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ECE     Joel    72      ")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# EEE     Moi     68      ")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# CSE     Surya   81      ")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# EEE     Tia     59      placement_rep")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ECE     Om      92      ")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# CSE     Amy     67      sports_rep")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),oe=o('<hr><h2 id="getline" tabindex="-1"><a class="header-anchor" href="#getline"><span><code>getline</code></span></a></h2><p>As the name indicates, the <code>getline</code> function allows you to read a line from a file on demand. This is easiest to use when you need something based on line numbers. The following example shows how you can replace the <code>m</code>th line from a file with the <code>n</code>th line from another file. There are many syntax variations with <code>getline</code>, here the line read is saved in a variable.</p>',3),re=e("p",null,"return value handling is not shown here, but should be done ideally",-1),de=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token parameter variable"},"-v"),s(),e("span",{class:"token assign-left variable"},"m"),e("span",{class:"token operator"},"="),e("span",{class:"token number"},"3"),s(),e("span",{class:"token parameter variable"},"-v"),s(),e("span",{class:"token assign-left variable"},"n"),e("span",{class:"token operator"},"="),e("span",{class:"token number"},"2"),s(),e("span",{class:"token string"},`'BEGIN{while(n-- > 0) getline s < "greeting.txt"}`),s(`
`),e("span",{class:"line"},"                   FNR==m{$0=s} 1'"),s(" table.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# brown bread mat hair 42")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# blue cake mug shirt -7")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Have a nice day")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),pe=e("p",null,[s("Here's an example where two files are processed simultaneously. In this case, the return value of "),e("code",null,"getline"),s(" is also used. It will be "),e("code",null,"1"),s(" if the line was read successfully, "),e("code",null,"0"),s(" if there's no more input to be read as end of file has already been reached and "),e("code",null,"-1"),s(" if something went wrong. The "),e("code",null,"ERRNO"),s(" special variable will have the error details.")],-1),me=e("code",null,"greeting.txt",-1),ue=e("code",null,"table.txt",-1),he=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token parameter variable"},"-v"),s(),e("span",{class:"token assign-left variable"},"file"),e("span",{class:"token operator"},"="),e("span",{class:"token string"},"'table.txt'"),s(),e("span",{class:"token string"},"'(getline line < file)==1{n=split(line, a);"),s(`
`),e("span",{class:"line"},"                         if(a[n]>0) print}'"),s(" greeting.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Hi there")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Good bye")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ve=e("p",null,[s("If a file is passed as an argument to the "),e("code",null,"awk"),s(" command that cannot be opened, you get an error. For example:")],-1),be=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'{print $2}'"),s(" xyz.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# awk: fatal: cannot open file 'xyz.txt' for reading: No such file or directory")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),fe=e("p",null,[s("It is recommended to always check for the return value when using "),e("code",null,"getline"),s(" or perhaps use techniques from the previous sections to avoid "),e("code",null,"getline"),s(" altogether.")],-1),ge=e("code",null,"xyz.txt",-1),ke=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'{getline line < "xyz.txt"; print $NF, line}'`),s(" table.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 42 ")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# -7 ")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 3.14 ")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),_e=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token parameter variable"},"-v"),s(),e("span",{class:"token assign-left variable"},"file"),e("span",{class:"token operator"},"="),e("span",{class:"token string"},"'xyz.txt'"),s(),e("span",{class:"token string"},"'{ e=(getline line < file);"),s(`
`),e("span",{class:"line"},'                         if(e<0){print file ": " ERRNO; exit}'),s(`
`),e("span",{class:"line"},"                         print $NF, line }'"),s(" table.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# xyz.txt: No such file or directory")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),xe=o('<div class="hint-container info"><p class="hint-container-title">Info</p><p>See <a href="https://www.gnu.org/software/gawk/manual/gawk.html#Getline" target="_blank" rel="noopener noreferrer">gawk manual: getline</a> for details, especially about corner cases and errors. See also <a href="http://awk.freeshell.org/AllAboutGetline" target="_blank" rel="noopener noreferrer">awk.freeshell: getline caveats</a>.</p></div><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>This chapter discussed a few cases where you need to compare contents between two files. The <code>NR==FNR</code> trick is handy for such cases. You also saw a few examples with the <code>getline</code> function.</p><p>Next chapter will discuss how to handle duplicate contents.</p><hr><h2 id="exercises" tabindex="-1"><a class="header-anchor" href="#exercises"><span>Exercises</span></a></h2>',7),we={class:"hint-container info"},ye=e("p",{class:"hint-container-title"},"Info",-1),Ee={href:"https://github.com/learnbyexample/learn_gnuawk/tree/master/exercises",target:"_blank",rel:"noopener noreferrer"},Ce=e("h3",{id:"exercise-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#exercise-1"},[e("span",null,"Exercise 1")])],-1),Ae=e("code",null,"match_words.txt",-1),Ne=e("code",null,"jumbled.txt",-1),Re=e("code",null,"sample.txt",-1),je=e("code",null,"match_words.txt",-1),Se=o(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> match_words.txt</span>
<span class="line"><span class="token comment"># %whole(Hello)--{doubt}==ado==</span></span>
<span class="line"><span class="token comment"># just,\\joint*,concession&lt;=nice</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),$e=e("code",null,"match_words.txt",-1),Te=e("code",null,"jumbled.txt",-1),Fe=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token comment"},"##### add your solution here")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# wavering:concession/woof\\retailer")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# No doubt you like it too")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Ie=e("code",null,"match_words.txt",-1),Pe=e("code",null,"jumbled.txt",-1),Ge=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token parameter variable"},"-v"),s(),e("span",{class:"token assign-left variable"},"FPAT"),e("span",{class:"token operator"},"="),e("span",{class:"token string"},"'\\\\w+'"),s(),e("span",{class:"token string"},"'NR==FNR{a[$3]; next} $2 in a'"),s(" match_words.txt jumbled.txt sample.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# wavering:concession/woof\\retailer")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# No doubt you like it too")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Je=e("h3",{id:"exercise-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#exercise-2"},[e("span",null,"Exercise 2")])],-1),De=e("code",null,"secrets.txt",-1),Me=e("code",null,"-v",-1),Oe=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token parameter variable"},"-v"),s(),e("span",{class:"token assign-left variable"},"f"),e("span",{class:"token operator"},"="),e("span",{class:"token string"},"'table.txt'"),s(),e("span",{class:"token comment"},"##### add your solution here")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# stag area row tick")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# brown bread mat hair 42")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ---")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# deaf chi rate tall glad")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# blue cake mug shirt -7")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ---")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Bi tac toe - 42")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# yellow banana window shoes 3.14")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ---")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Be=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token parameter variable"},"-v"),s(),e("span",{class:"token assign-left variable"},"f"),e("span",{class:"token operator"},"="),e("span",{class:"token string"},"'table.txt'"),s(),e("span",{class:"token string"},`'{print; getline < f; print; print "---"}'`),s(" secrets.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# stag area row tick")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# brown bread mat hair 42")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ---")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# deaf chi rate tall glad")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# blue cake mug shirt -7")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ---")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Bi tac toe - 42")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# yellow banana window shoes 3.14")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ---")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Le=e("h3",{id:"exercise-3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#exercise-3"},[e("span",null,"Exercise 3")])],-1),Qe=e("code",null,"search_terms.txt",-1),ze=e("code",null,"awk",-1),Ue=e("code",null,"search_terms.txt",-1),qe=o(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> search_terms.txt</span>
<span class="line"><span class="token comment"># hello</span></span>
<span class="line"><span class="token comment"># row</span></span>
<span class="line"><span class="token comment"># you</span></span>
<span class="line"><span class="token comment"># is</span></span>
<span class="line"><span class="token comment"># at</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ye=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token comment"},"##### add your solution here")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"##file list## search_terms.txt jumbled.txt mixed_fs.txt secrets.txt table.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# at")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# row")]),s(`
`),e("span",{class:"line"}),s(`
`),e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token comment"},"##### add your solution here")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"##file list## search_terms.txt addr.txt sample.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# is")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# you")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# hello")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),He=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token parameter variable"},"-v"),s(),e("span",{class:"token assign-left variable"},"IGNORECASE"),e("span",{class:"token operator"},"="),e("span",{class:"token number"},"1"),s(),e("span",{class:"token string"},"'NR==FNR{s[$0]; next} {for(k in s) if($0 ~ k) a[k]}"),s(`
`),e("span",{class:"line"},"                     ENDFILE{for(k in a) s[k]++; delete a}"),s(`
`),e("span",{class:"line"},"                     END{for(k in s) if(s[k]==(ARGC-2)) print k}"),s(`
`),e("span",{class:"line"},"                    '"),s(" search_terms.txt jumbled.txt mixed_fs.txt secrets.txt table.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# at")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# row")]),s(`
`),e("span",{class:"line"}),s(`
`),e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token parameter variable"},"-v"),s(),e("span",{class:"token assign-left variable"},"IGNORECASE"),e("span",{class:"token operator"},"="),e("span",{class:"token number"},"1"),s(),e("span",{class:"token string"},"'NR==FNR{s[$0]; next} {for(k in s) if($0 ~ k) a[k]}"),s(`
`),e("span",{class:"line"},"                     ENDFILE{for(k in a) s[k]++; delete a}"),s(`
`),e("span",{class:"line"},"                     END{for(k in s) if(s[k]==(ARGC-2)) print k}"),s(`
`),e("span",{class:"line"},"                    '"),s(" search_terms.txt addr.txt sample.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# is")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# you")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# hello")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Ve=e("h3",{id:"exercise-4",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#exercise-4"},[e("span",null,"Exercise 4")])],-1),Ke=e("code",null,"scores.csv",-1),We=e("code",null,"names.txt",-1),Ze=o(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> names.txt</span>
<span class="line"><span class="token comment"># Lin</span></span>
<span class="line"><span class="token comment"># Cy</span></span>
<span class="line"><span class="token comment"># Ith</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Xe=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token comment"},"##### add your solution here")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Lin 78 83 80")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Cy 97 98 95")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Ith 100 100 100")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),es=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(" -F, "),e("span",{class:"token string"},"'NR==FNR{a[$1]; next} $1 in a{$1=$1; print}'"),s(" names.txt scores.csv")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Lin 78 83 80")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Cy 97 98 95")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Ith 100 100 100")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ss=e("h3",{id:"exercise-5",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#exercise-5"},[e("span",null,"Exercise 5")])],-1),ns=e("p",null,[s("What's the default value of the special variable "),e("code",null,"SUBSEP"),s("? Where is it commonly used?")],-1),as=e("h3",{id:"exercise-6",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#exercise-6"},[e("span",null,"Exercise 6")])],-1),ls=e("code",null,"result.csv",-1),is=e("code",null,"criteria.txt",-1),ts=e("code",null,"result.csv",-1),cs=e("code",null,"criteria.txt",-1),os=o(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> result.csv</span>
<span class="line"><span class="token comment"># Amy,maths,89</span></span>
<span class="line"><span class="token comment"># Amy,physics,75</span></span>
<span class="line"><span class="token comment"># Joe,maths,79</span></span>
<span class="line"><span class="token comment"># John,chemistry,77</span></span>
<span class="line"><span class="token comment"># John,physics,91</span></span>
<span class="line"><span class="token comment"># Moe,maths,81</span></span>
<span class="line"><span class="token comment"># Ravi,physics,84</span></span>
<span class="line"><span class="token comment"># Ravi,chemistry,70</span></span>
<span class="line"><span class="token comment"># Yui,maths,92</span></span>
<span class="line"></span>
<span class="line"><span class="token function">cat</span> criteria.txt</span>
<span class="line"><span class="token comment"># Amy maths</span></span>
<span class="line"><span class="token comment"># John chemistry</span></span>
<span class="line"><span class="token comment"># John physics</span></span>
<span class="line"><span class="token comment"># Ravi chemistry</span></span>
<span class="line"><span class="token comment"># Yui maths</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),rs=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token comment"},"##### add your solution here")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Amy,maths,89")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# John,physics,91")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Yui,maths,92")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ds=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'NR==FNR{a[$1,$2]; next} ($1,$2) in a && $3 > 80'"),s(" criteria.txt "),e("span",{class:"token assign-left variable"},"FS"),e("span",{class:"token operator"},"="),s(", result.csv")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Amy,maths,89")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# John,physics,91")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Yui,maths,92")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ps=e("hr",null,null,-1);function ms(p,us){const r=d("router-link"),m=d("VPCard"),t=d("FontIcon"),c=d("Tabs"),u=d("TagLinks");return k(),v("div",null,[e("h1",x,[e("a",w,[e("span",null,b(p.$frontmatter.title)+" 관련",1)])]),e("nav",y,[e("ul",null,[e("li",null,[a(r,{to:"#comparing-records"},{default:n(()=>[s("Comparing records")]),_:1})]),e("li",null,[a(r,{to:"#comparing-fields"},{default:n(()=>[s("Comparing fields")]),_:1})]),e("li",null,[a(r,{to:"#getline"},{default:n(()=>[s("getline")]),_:1})]),e("li",null,[a(r,{to:"#summary"},{default:n(()=>[s("Summary")]),_:1})]),e("li",null,[a(r,{to:"#exercises"},{default:n(()=>[s("Exercises")]),_:1}),e("ul",null,[e("li",null,[a(r,{to:"#exercise-1"},{default:n(()=>[s("Exercise 1")]),_:1})]),e("li",null,[a(r,{to:"#exercise-2"},{default:n(()=>[s("Exercise 2")]),_:1})]),e("li",null,[a(r,{to:"#exercise-3"},{default:n(()=>[s("Exercise 3")]),_:1})]),e("li",null,[a(r,{to:"#exercise-4"},{default:n(()=>[s("Exercise 4")]),_:1})]),e("li",null,[a(r,{to:"#exercise-5"},{default:n(()=>[s("Exercise 5")]),_:1})]),e("li",null,[a(r,{to:"#exercise-6"},{default:n(()=>[s("Exercise 6")]),_:1})])])])])]),E,a(m,f(g({title:"12. Two file processing",desc:"CLI Text Processing with GNU awk",link:"https://learnbyexample.github.io/learn_gnuawk/two-file-processing.html",logo:"https://learnbyexample.github.io/favicon.svg",background:"rgba(22,25,35,0.2)"})),null,16),C,A,e("div",N,[R,e("p",null,[s("The "),e("a",j,[a(t,{icon:"iconfont icon-github"}),s(" example_files")]),s(" directory has all the files used in the examples.")])]),S,a(c,{id:"50",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:n(({value:l,isActive:i})=>[s("Case 1")]),title1:n(({value:l,isActive:i})=>[s("Case 2")]),title2:n(({value:l,isActive:i})=>[s("Case 3")]),tab0:n(({value:l,isActive:i})=>[$,T,F]),tab1:n(({value:l,isActive:i})=>[e("p",null,[s("lines from "),a(t,{icon:"fas fa-file-lines"}),s(),I,s(" not present in "),a(t,{icon:"fas fa-file-lines"}),s(),P]),G,J]),tab2:n(({value:l,isActive:i})=>[e("p",null,[s("reversing the order of input files gives lines from "),a(t,{icon:"fas fa-file-lines"}),s(),D,s(" not present in "),a(t,{icon:"fas fa-file-lines"}),s(),M]),O]),_:1}),B,a(c,{id:"85",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:l,isActive:i})=>[s("Case 1")]),title1:n(({value:l,isActive:i})=>[s("Case 2")]),tab0:n(({value:l,isActive:i})=>[L,Q]),tab1:n(({value:l,isActive:i})=>[z,U]),_:1}),q,e("p",null,[s("To start with, here's a single field comparison. The problem statement is to fetch all records from "),a(t,{icon:"fas fa-file-lines"}),s(),Y,s(" if the first field matches any of the departments listed in the "),a(t,{icon:"fas fa-file-lines"}),s(),H,s(" file.")]),V,a(c,{id:"111",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:l,isActive:i})=>[s("Case 1")]),title1:n(({value:l,isActive:i})=>[s("Case 2")]),tab0:n(({value:l,isActive:i})=>[e("p",null,[s("note that "),a(t,{icon:"fas fa-file-lines"}),s(),K,s(" is used to build the array keys first")]),W]),tab1:n(({value:l,isActive:i})=>[Z,X]),_:1}),ee,a(c,{id:"129",data:[{id:"Case 1"}],active:0},{title0:n(({value:l,isActive:i})=>[s("Case 1")]),tab0:n(({value:l,isActive:i})=>[se,ne]),_:1}),ae,a(c,{id:"141",data:[{id:"Case 1"}],active:0},{title0:n(({value:l,isActive:i})=>[s("Case 1")]),tab0:n(({value:l,isActive:i})=>[e("p",null,[s("match Dept and minimum marks specified in "),a(t,{icon:"fas fa-file-lines"}),s(),le]),ie]),_:1}),te,a(c,{id:"153",data:[{id:"Case 1"}],active:0},{title0:n(({value:l,isActive:i})=>[s("Case 1")]),tab0:n(({value:l,isActive:i})=>[ce]),_:1}),oe,a(c,{id:"165",data:[{id:"Case 1"}],active:0},{title0:n(({value:l,isActive:i})=>[s("Case 1")]),tab0:n(({value:l,isActive:i})=>[re,de]),_:1}),pe,a(c,{id:"176",data:[{id:"Case 1"}],active:0},{title0:n(({value:l,isActive:i})=>[s("Case 1")]),tab0:n(({value:l,isActive:i})=>[e("p",null,[s("print line from "),a(t,{icon:"fas fa-file-lines"}),s(),me,s(" if the last column of the corresponding line from "),a(t,{icon:"fas fa-file-lines"}),s(),ue,s(" is a positive number")]),he]),_:1}),ve,a(c,{id:"187",data:[{id:"Case 1"}],active:0},{title0:n(({value:l,isActive:i})=>[s("Case 1")]),tab0:n(({value:l,isActive:i})=>[be]),_:1}),fe,a(c,{id:"195",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:l,isActive:i})=>[s("Case 1")]),title1:n(({value:l,isActive:i})=>[s("Case 2")]),tab0:n(({value:l,isActive:i})=>[a(t,{icon:"fas fa-file-lines"}),s(),ge,s(" doesn't exist, but output doesn't show something went wrong"),ke]),tab1:n(({value:l,isActive:i})=>[_e]),_:1}),xe,e("div",we,[ye,e("p",null,[s("The "),e("a",Ee,[a(t,{icon:"iconfont icon-github"}),s(" exercises")]),s(" directory has all the files used in this section.")])]),Ce,e("p",null,[s("Use the contents of "),a(t,{icon:"fas fa-file-lines"}),s(),Ae,s(" file to display matching lines from "),a(t,{icon:"fas fa-file-lines"}),s(),Ne,s(" and "),a(t,{icon:"fas fa-file-lines"}),s(),Re,s(". The matching criteria is that the second word of lines from these files should match the third word of lines from "),a(t,{icon:"fas fa-file-lines"}),s(),je,s(".")]),Se,a(c,{id:"236",data:[{id:"Question"},{id:"Solution"}],active:0},{title0:n(({value:l,isActive:i})=>[s("Question")]),title1:n(({value:l,isActive:i})=>[s("Solution")]),tab0:n(({value:l,isActive:i})=>[e("p",null,[s("'concession' is one of the third words from "),a(t,{icon:"fas fa-file-lines"}),s("'"),$e,s("' and second word from "),a(t,{icon:"fas fa-file-lines"}),s(" '"),Te,s("'")]),Fe]),tab1:n(({value:l,isActive:i})=>[e("p",null,[s("'concession' is one of the third words from "),a(t,{icon:"fas fa-file-lines"}),s("'"),Ie,s("' and second word from "),a(t,{icon:"fas fa-file-lines"}),s(" '"),Pe,s("'")]),Ge]),_:1}),Je,e("p",null,[s("Interleave the contents of "),a(t,{icon:"fas fa-file-lines"}),s(),De,s(" with the contents of a file passed via the "),Me,s(" option as shown below.")]),a(c,{id:"256",data:[{id:"Question"},{id:"Solution"}],active:0},{title0:n(({value:l,isActive:i})=>[s("Question")]),title1:n(({value:l,isActive:i})=>[s("Solution")]),tab0:n(({value:l,isActive:i})=>[Oe]),tab1:n(({value:l,isActive:i})=>[Be]),_:1}),Le,e("p",null,[s("The file "),a(t,{icon:"fas fa-file-lines"}),s(),Qe,s(" contains one search string per line, and these terms have no regexp metacharacters. Construct an "),ze,s(" command that reads this file and displays the search terms (matched case insensitively) that were found in every file passed as the arguments after "),a(t,{icon:"fas fa-file-lines"}),s(),Ue,s(". Note that these terms should be matched anywhere in the line (so, don't use word boundaries).")]),qe,a(c,{id:"271",data:[{id:"Question"},{id:"Solution"}],active:0},{title0:n(({value:l,isActive:i})=>[s("Question")]),title1:n(({value:l,isActive:i})=>[s("Solution")]),tab0:n(({value:l,isActive:i})=>[Ye]),tab1:n(({value:l,isActive:i})=>[He]),_:1}),Ve,e("p",null,[s("Display lines from "),a(t,{icon:"fas fa-file-csv"}),s(),Ke,s(" by matching the first field based on a list of names from the "),a(t,{icon:"fas fa-file-lines"}),s(),We,s(" file. Also, change the output field separator to a space character.")]),Ze,a(c,{id:"286",data:[{id:"Question"},{id:"Solution"}],active:0},{title0:n(({value:l,isActive:i})=>[s("Question")]),title1:n(({value:l,isActive:i})=>[s("Solution")]),tab0:n(({value:l,isActive:i})=>[Xe]),tab1:n(({value:l,isActive:i})=>[es]),_:1}),ss,ns,as,e("p",null,[s("The "),a(t,{icon:"fas fa-file-csv"}),s(),ls,s(" file has three columns — name, subject and mark. The "),a(t,{icon:"fas fa-file-lines"}),s(),is,s(" file has two columns — name and subject. Match lines from "),a(t,{icon:"fas fa-file-csv"}),s(),ts,s(" based on the two columns from "),a(t,{icon:"fas fa-file-lines"}),s(),cs,s(" provided the mark column is greater than 80.")]),os,a(c,{id:"307",data:[{id:"Question"},{id:"Solution"}],active:0},{title0:n(({value:l,isActive:i})=>[s("Question")]),title1:n(({value:l,isActive:i})=>[s("Solution")]),tab0:n(({value:l,isActive:i})=>[rs]),tab1:n(({value:l,isActive:i})=>[ds]),_:1}),ps,a(u)])}const bs=h(_,[["render",ms],["__file","12-two-file-processing.html.vue"]]),fs=JSON.parse('{"path":"/cli/text-processing-w-gnu-awk/12-two-file-processing.html","title":"12. Two file processing","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"12. Two file processing","description":"Text Processing with GNU awk > 12. Two file processing","category":["CLI","Linux"],"tags":["crashcourse","cli","sh","shell","gnu","linux","awk"],"head":[[{"meta":null},{"property":"og:title","content":"Text Processing with GNU awk > 12. Two file processing"},{"property":"og:description","content":"12. Two file processing"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/cli/text-processing-w-gnu-awk/12-two-file-processing.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/cli/text-processing-w-gnu-awk/12-two-file-processing.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"12. Two file processing"}],["meta",{"property":"og:description","content":"Text Processing with GNU awk > 12. Two file processing"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-04-24T07:16:44.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"cli"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:tag","content":"shell"}],["meta",{"property":"article:tag","content":"gnu"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:tag","content":"awk"}],["meta",{"property":"article:modified_time","content":"2024-04-24T07:16:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"12. Two file processing\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-24T07:16:44.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Comparing records","slug":"comparing-records","link":"#comparing-records","children":[]},{"level":2,"title":"Comparing fields","slug":"comparing-fields","link":"#comparing-fields","children":[]},{"level":2,"title":"getline","slug":"getline","link":"#getline","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]},{"level":2,"title":"Exercises","slug":"exercises","link":"#exercises","children":[{"level":3,"title":"Exercise 1","slug":"exercise-1","link":"#exercise-1","children":[]},{"level":3,"title":"Exercise 2","slug":"exercise-2","link":"#exercise-2","children":[]},{"level":3,"title":"Exercise 3","slug":"exercise-3","link":"#exercise-3","children":[]},{"level":3,"title":"Exercise 4","slug":"exercise-4","link":"#exercise-4","children":[]},{"level":3,"title":"Exercise 5","slug":"exercise-5","link":"#exercise-5","children":[]},{"level":3,"title":"Exercise 6","slug":"exercise-6","link":"#exercise-6","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1713943004000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":7}]},"readingTime":{"minutes":7.58,"words":2275},"filePathRelative":"cli/text-processing-w-gnu-awk/12-two-file-processing.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{bs as comp,fs as data};
