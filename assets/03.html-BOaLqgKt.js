import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,a as n,t as m,b as a,w as o,n as c,g as i,d as s,e,r as u,o as v}from"./app-U_bew1in.js";const b={},g={id:"frontmatter-title-관련",tabindex:"-1"},h={class:"header-anchor",href:"#frontmatter-title-관련"},_={class:"table-of-contents"},f=n("hr",null,null,-1),y=e('<hr><h2 id="_1-스프링-부트-핵심-기능" tabindex="-1"><a class="header-anchor" href="#_1-스프링-부트-핵심-기능"><span>1. 스프링 부트 핵심 기능</span></a></h2><h3 id="springapplication" tabindex="-1"><a class="header-anchor" href="#springapplication"><span>SpringApplication</span></a></h3><p><code>SpringApplication</code> 클래스에 대해서 조금 더 살펴 본다.</p><h4 id="로그" tabindex="-1"><a class="header-anchor" href="#로그"><span>로그</span></a></h4><ul><li>스프링 부트 애플리케이션의 기본 로그 레벨은 INFO 이다.</li><li>IntelliJ의 Edit Configuration에서 VM options값을 <code>-Ddebug</code> 로 할당해서 run하면, DEBUG 레벨의 로그도 볼 수 있다. <ul><li>DEBUG레벨로 로그를 찍을 때 한 가지 특이한 점은 어떤 자동 설정이 적용 됐는지, 적용 안된 자동 설정은 왜 안됐는지에 관한 로그를 볼 수 있다.</li></ul></li></ul><h4 id="failureanalyzers" tabindex="-1"><a class="header-anchor" href="#failureanalyzers"><span>FailureAnalyzers</span></a></h4><ul><li>애플리케이션 start과정에서 error가 발생했을 때, 에러 메세지를 보기 좋게 출력해준다.</li><li>기본적으로 스프링부트에는 여러가지 Failure Analyzer가 등록되어있다.</li></ul>',8),w=n("h4",{id:"배너",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#배너"},[n("span",null,"배너")])],-1),S=n("code",null,"src/main/resources",-1),j=n("code",null,"banner.txt",-1),T=n("code",null,"gif",-1),x=n("code",null,"jpg",-1),A=n("code",null,"png",-1),R=n("code",null,"yaml",-1),C=n("code",null,"spring.banner.location",-1),q=n("li",null,[s("Text to ASCII 제너레이터를 사용해서 하면 예쁘다 "),n("ul",null,[n("li",null,"http://patorjk.com/software/taag")])],-1),M=n("li",null,[s("배너에 사용할 수 있는 변수들도 있다. "),n("ul",null,[n("li",null,[n("code",null,"${spring-boot.version}"),s(" 등")])])],-1),B=n("li",null,[s("배너를 "),n("code",null,"app.setBanner(new Banner() { ... })"),s(" 로 직접 구현할 수 있다.")],-1),E=n("li",null,"배너 끄는 방법",-1),P=e(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@SpringBootApplication</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">SpringApplication</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        app<span class="token punctuation">.</span><span class="token function">setBannerMode</span><span class="token punctuation">(</span><span class="token class-name">Banner<span class="token punctuation">.</span>Mode</span><span class="token punctuation">.</span><span class="token constant">OFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>SpringApplicationBuilder</code>로 빌더 패턴 사용 가능</p><h4 id="applicationevent" tabindex="-1"><a class="header-anchor" href="#applicationevent"><span>ApplicationEvent</span></a></h4>`,3),O=e(`<p>이벤트 리스너 자체를 <code>@Component</code>로 만들어서 사용하면 <code>ApplicationContext</code>가 만들어지기 전에는 <code>ApplicationStartingEvent</code> 는 반응을 안한다. 아래의 코드이다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleListener</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApplicationStartingEvent</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">ApplicationStartingEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;========================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Application is starting&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;========================&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ApplicationStartingEvent</code> 대신 <code>ApplicationStartedEvent</code> 를 사용하거나,</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment">#    .   ____          _            __ _ _</span></span>
<span class="line"><span class="token comment">#   /\\\\ / ___&#39;_ __ _ _(_)_ __  __ _ \\ \\ \\ \\</span></span>
<span class="line"><span class="token comment">#  ( ( )\\___ | &#39;_ | &#39;_| | &#39;_ \\/ _\` | \\ \\ \\ \\</span></span>
<span class="line"><span class="token comment">#   \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span></span>
<span class="line"><span class="token comment">#    &#39;  |____| .__|_| |_|_| |_\\__, | / / / /</span></span>
<span class="line"><span class="token comment">#   =========|_|==============|___/=/_/_/_/</span></span>
<span class="line"><span class="token comment">#   :: Spring Boot ::        (v2.1.0.RELEASE)</span></span>
<span class="line"><span class="token comment">#  </span></span>
<span class="line"><span class="token comment">#  2018-11-15 15:19:41.137  INFO 15600 --- [           main] i.n.s.Application                        : Starting Application on DESKTOP-EI79USO with PID 15600 (C:\\document\\github\\spring-boot-concept-and-utilization\\out\\production\\classes started by njkim in C:\\document\\github\\spring-boot-concept-and-utilization)</span></span>
<span class="line"><span class="token comment">#    ...</span></span>
<span class="line"><span class="token comment">#    ...</span></span>
<span class="line"><span class="token comment">#    ...</span></span>
<span class="line"><span class="token comment">#  ========================</span></span>
<span class="line"><span class="token comment">#  Application is started!!!</span></span>
<span class="line"><span class="token comment">#  ========================</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>메인 클래스에서 <code>SpringApplication.addListeners()</code>를 사용해서 이벤트를 직접 등록해주면 된다. 이 때, <code>SampleListener</code>클래스는 <code>@Component</code> 선언을 해줄 필요가 없게 된다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@SpringBootApplication</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">SpringApplication</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        app<span class="token punctuation">.</span><span class="token function">addListeners</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SampleListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        app<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># ========================</span></span>
<span class="line"><span class="token comment"># Application is starting</span></span>
<span class="line"><span class="token comment"># ========================</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment">#   .   ____          _            __ _ _</span></span>
<span class="line"><span class="token comment">#   /\\\\ / ___&#39;_ __ _ _(_)_ __  __ _ \\ \\ \\ \\</span></span>
<span class="line"><span class="token comment"># ( ( )\\___ | &#39;_ | &#39;_| | &#39;_ \\/ _\` | \\ \\ \\ \\</span></span>
<span class="line"><span class="token comment">#   \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span></span>
<span class="line"><span class="token comment">#   &#39;  |____| .__|_| |_|_| |_\\__, | / / / /</span></span>
<span class="line"><span class="token comment">#   =========|_|==============|___/=/_/_/_/</span></span>
<span class="line"><span class="token comment">#   :: Spring Boot ::        (v2.1.0.RELEASE)</span></span>
<span class="line"><span class="token comment">#   </span></span>
<span class="line"><span class="token comment">#   ...</span></span>
<span class="line"><span class="token comment">#   ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="applicationarguments-사용하기" tabindex="-1"><a class="header-anchor" href="#applicationarguments-사용하기"><span><code>ApplicationArguments</code> 사용하기</span></a></h4><p><code>ApplicationArguments</code>를 빈으로 등록해 주니까 가져다 쓰면된다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArgumentsTester</span> <span class="token punctuation">{</span></span>
<span class="line">  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ArgumentsTester</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> arguments<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;foo: &quot;</span> <span class="token operator">+</span> arguments<span class="token punctuation">.</span><span class="token function">containsOption</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;bar: &quot;</span> <span class="token operator">+</span> arguments<span class="token punctuation">.</span><span class="token function">containsOption</span><span class="token punctuation">(</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>jar파일을 실행할 때 아래의 결과가 나온다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">java</span> <span class="token parameter variable">-jar</span> <span class="token punctuation">[</span>path<span class="token punctuation">]</span>/~~~SNAPSHOT.jar <span class="token parameter variable">-Dfoo</span> <span class="token parameter variable">--bar</span></span>
<span class="line"><span class="token comment"># ...</span></span>
<span class="line"><span class="token comment"># foo: false</span></span>
<span class="line"><span class="token comment"># bar: true</span></span>
<span class="line"><span class="token comment"># ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="애플리케이션-실행항-뒤-먼가-실행하고-싶을-때" tabindex="-1"><a class="header-anchor" href="#애플리케이션-실행항-뒤-먼가-실행하고-싶을-때"><span>애플리케이션 실행항 뒤 먼가 실행하고 싶을 때</span></a></h4><ul><li><code>ApplicationRunner</code>(추천) 또는 <code>CommandLineRunner</code></li><li><code>@Order</code>를 통해서 순서도 지정할 수 있다.</li></ul><h3 id="외부설정" tabindex="-1"><a class="header-anchor" href="#외부설정"><span>외부설정</span></a></h3><h4 id="프로퍼티-우선-순위" tabindex="-1"><a class="header-anchor" href="#프로퍼티-우선-순위"><span>프로퍼티 우선 순위</span></a></h4>`,16),L=n("code",null,"spring-boot-dev-tools.properties",-1),z=e("<li>테스트에 있는 <code>@TestPropertySource</code></li><li><code>@SpringBootTest</code> 애노테이션의 properties 애트리뷰트</li><li>커맨드라인 아규먼트</li><li><code>SPRING_APPLICATION_JSON</code> (환경 변수 또는 시스템 프로퍼티)에 들어있는 프로퍼티</li><li><code>ServletConfig</code> 파라미터</li><li><code>ServletContext</code> 파라미터</li><li>Java:comp/env JNDI 애트리뷰트</li><li><code>System.getProperties()</code> 자바 시스템 프로퍼티</li><li>OS 환경 변수</li><li><code>RandomValuePropertySource</code></li>",10),N=n("code",null,"application.properties",-1),D=n("code",null,"application.properties",-1),W=n("code",null,"application.properties",-1),I=n("code",null,"application.properties",-1),J=n("li",null,[n("code",null,"@PropertySource")],-1),F=n("li",null,[s("기본 프로퍼티("),n("code",null,"SpringApplication.setDefaultProperties"),s(")")],-1),V={id:"application-properties-우선-순위-높은게-낮은걸-덮어-쓴다",tabindex:"-1"},K={class:"header-anchor",href:"#application-properties-우선-순위-높은게-낮은걸-덮어-쓴다"},U=n("code",null,"application.properties",-1),G=n("code",null,"file:./config/",-1),$=n("code",null,"file:./",-1),H=n("code",null,"classpath:/config/",-1),Z=n("code",null,"classpath:/",-1),X=n("h4",{id:"properties에서-랜덤값-설정하기",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#properties에서-랜덤값-설정하기"},[n("span",null,[n("code",null,"properties"),s("에서 랜덤값 설정하기")])])],-1),Q=n("ul",null,[n("li",null,[n("code",null,"${random.자료형}")]),n("li",null,[n("code",null,"server.port"),s("의 경우 0을 할당해야 가용범위 안의 포트를 찾아서 맵핑해줌")])],-1),Y={class:"hint-container info"},nn=n("p",{class:"hint-container-title"},"커밋 로그",-1),sn={href:"https://github.com/namjunemy/spring-boot-concept-and-utilization/commit/8fa0a1cd7e0b569a5aa1e9613c8a9c03564d72f5",target:"_blank",rel:"noopener noreferrer"},an=n("code",null,"namjunemy/spring-boot-concept-and-utilization",-1),tn=n("code",null,"@ConfigurationProperties",-1),en={href:"https://github.com/namjunemy/spring-boot-concept-and-utilization/commit/ce9c5e9f811f8fc4902d29c7a9f703e18a43609c",target:"_blank",rel:"noopener noreferrer"},pn=n("code",null,"namjunemy/spring-boot-concept-and-utilization",-1),on=n("code",null,"@Validated",-1),ln=n("p",null,[s("타입-세이프라는 의미는 "),n("code",null,'@Value("${namjune.name}")'),s("과 같이 직접 프로퍼티 값을 입력해서 발생할수 있는 에러를 내지 않을 수 있다는 의미이다. "),n("code",null,"@ConfigurationProperties"),s("으로 정의하고 빈으로 만든 뒤 getter를 통해서 값을 가져오기 때문에 @Value로 직접 쓰는 것 보다 안전하게 사용할 수있다.")],-1),cn=n("blockquote",null,[n("p",null,"프로퍼티스 파일 자체가 타입-세이프 하다는 의미는 아니다.")],-1),un=n("h4",{id:"타입-세이프-프로퍼티-configurationproperties",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#타입-세이프-프로퍼티-configurationproperties"},[n("span",null,[s("타입-세이프 프로퍼티 "),n("code",null,"@ConfigurationProperties")])])],-1),rn=e("<li>여러 프로퍼티를 묶어서 읽어올 수 있음</li><li>빈으로 등록해서 다른 빈에 주입할 수 있음 <ul><li><code>@EnableConfigurationProperties</code></li><li><code>@Component</code></li><li><code>@Bean</code></li><li><strong>스프링부트 애플리케이션에서는 <code>@EnableConfigurationProperties</code>이 등록이 되어 있으므로 <code>@ConfigurationProperties</code>가 선언되어있는 클래스에 <code>@Component</code>를 추가하여 빈으로 만들어 주기만 하면 된다.</strong></li></ul></li><li>융통성 있는 바인딩(<code>RelaxedBinding</code>) <ul><li><code>context-path</code>(케밥)</li><li><code>context_path</code>(언더스코어)</li><li><code>contextPath</code>(카멜)</li><li><code>CONTEXTPATH</code></li></ul></li>",3),dn=n("li",null,"프로퍼티 파일에 txt가 문자로 입력되지만, int로 컨버전 되어서 들어간다.",-1),kn=n("code",null,"@DurationUnit",-1),mn=n("li",null,"시간정보를 받고 싶을 때 사용하면 컨버전이 이루어 진다.",-1),vn=n("code",null,"AppProperties.java",-1),bn=e(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppProperties</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line">  <span class="token annotation punctuation">@DurationUnit</span><span class="token punctuation">(</span><span class="token class-name">ChronoUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token class-name">Duration</span> sessionTimeout <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),gn=n("code",null,"application.yaml",-1),hn=e(`<div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">nj</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> namjune</span>
<span class="line">  <span class="token key atrule">age</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>random.int(0<span class="token punctuation">,</span>100)<span class="token punctuation">}</span></span>
<span class="line">  <span class="token key atrule">fullName</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>nj.name<span class="token punctuation">}</span> Kim</span>
<span class="line">  <span class="token key atrule">sessionTimeout</span><span class="token punctuation">:</span> <span class="token number">30</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-txt line-numbers-mode" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">==========================</span>
<span class="line">namjune</span>
<span class="line">64</span>
<span class="line">namjune Kim</span>
<span class="line">PT30S</span>
<span class="line">==========================</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="프로퍼티-값-검증" tabindex="-1"><a class="header-anchor" href="#프로퍼티-값-검증"><span>프로퍼티 값 검증</span></a></h4><ul><li>프로퍼티 값을 검증하고 싶을때, <code>@Validated</code> 애노테이션을 정의하고 JSR303 구현체인 <code>hibernate-validator</code> 애노테이션을 사용해서 검증한다.</li><li><code>@Validated</code></li><li>JSR-303(<code>@NotNull</code>, ...) 구현체 = <code>hibernate-validator</code></li><li>메타 정보 생성</li><li><code>@Value</code>에서는 <ul><li>SpEL 을 사용할 수 있지만..</li><li>위에 있는 기능들은 전부 사용 못한다.</li></ul></li></ul><h3 id="프로파일" tabindex="-1"><a class="header-anchor" href="#프로파일"><span>프로파일</span></a></h3>`,5),_n={class:"hint-container info"},fn=n("p",{class:"hint-container-title"},"커밋로그",-1),yn={href:"https://github.com/namjunemy/spring-boot-concept-and-utilization/commit/1cc4c087672fc7771dc8c896df21bb50405eb72d",target:"_blank",rel:"noopener noreferrer"},wn=n("code",null,"namjunemy/spring-boot-concept-and-utilization",-1),Sn=n("p",null,"어떤 특정한 프로파일에서만 특정한 빈을 등록하고 싶거나, 특정 프로파일에서만 애플리케이션의 동작을 다르게 하고 싶을때 프로파일을 사용했었다.",-1),jn=e("<li><code>@Profile</code> 애노테이션은 어디에? <ul><li><code>@Configuration</code></li><li><code>@Component</code></li></ul></li><li>어떤 프로파일을 활성화 할 것인가? <ul><li><code>spring.profiles.active</code></li></ul></li><li>어떤 프로파일을 추가할 것인가? <ul><li>프로파일안에 특정 프로파일이 정의된 프로퍼티 파일을 인클루드 해서 사용할 수 있다.</li><li><code>spring.profiles.include</code></li></ul></li>",3),Tn=n("code",null,"application-{profile}.properties",-1),xn=n("h3",{id:"로깅",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#로깅"},[n("span",null,"로깅")])],-1),An={class:"hint-container info"},Rn=n("p",{class:"hint-container-title"},"커밋로그",-1),Cn={href:"https://github.com/namjunemy/spring-boot-concept-and-utilization/commit/05da2843fd7c07671ff73eb1d7e98a8bd13a1afd",target:"_blank",rel:"noopener noreferrer"},qn=n("code",null,"namjunemy/spring-boot-concept-and-utilization",-1),Mn=e('<ul><li>스프링 부트는 기본적으로 로깅 파사드 <strong>Commons Logging</strong> 을 사용한다. 결국 SLF4j를 사용하게 된다. 소스코드에서도 SLF4j를 사용하면 된다. <ul><li>로깅 파사드는 실제 로깅을 하지 않고, 로거 API들을 추상화 해놓은 인터페이스들이다.</li><li>주로 프레임워크들은 로깅 파사드를 이용한다. 프레임워크를 사용하는 애플리케이션들의 로거 사용을 자유롭게 해주기 위해서.</li></ul></li><li>로깅 파사드의 장점은 로거들을 바꿔서 사용할 수 있다는 것이다. <ul><li>JUL(Java Utility Logging), Log4J2, <strong>Logback</strong></li></ul></li><li>정리하자면 스프링부트에서 찍히는 로그는 Commons Logging -&gt; SLF4j -&gt; Logback의 흐름을 타고 결국 __Logback__에 의해서 찍힌다.</li><li>아래의 <code>spring-boot-stater-logging</code> 의존성을 통해서 확인할 수 있다. <ul><li><code>jul-to-slf4j</code> 라이브러리와 <code>log4j-to-slf4j</code>를 통해서 <code>slf4j</code>로 로그를 보내고,</li><li><code>slf4j-api</code> 라이브러리를 통해서 받은 로그들을 결국 logback으로 처리한다.</li></ul></li></ul><figure><img src="https://github.com/namjunemy/TIL/blob/master/SpringBoot/img/03_logging_dependency.PNG?raw=true" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="스프링-부트-기본-로깅" tabindex="-1"><a class="header-anchor" href="#스프링-부트-기본-로깅"><span>스프링 부트 기본 로깅</span></a></h4><ul><li><code>--debug</code>: 일부 코어 라이브러리(embedded container, Hibernate, Spring Boot)만 디버깅 모드로</li><li><code>--trace</code>: 전부 다 디 버깅 모드로</li><li>컬러 출력: <code>spring.output.ansi.enabled</code></li><li>파일 출력 <ul><li><code>logging.file</code> 또는 <code>logging.path</code></li><li>로그파일은 기본적으로 10M까지 저장되고, 넘치면 아카이빙하는 등 여러가지 설정도 할 수 있다.</li></ul></li><li>로그 레벨 조정: <code>logging.level.패키지</code> = 로그 레벨</li></ul>',4),Bn={class:"hint-container info"},En=n("p",{class:"hint-container-title"},"커밋로그",-1),Pn={href:"https://github.com/namjunemy/spring-boot-concept-and-utilization/commit/cc1c9128b3ec013a33d11c65552be85a8d7824ed",target:"_blank",rel:"noopener noreferrer"},On=n("code",null,"namjunemy/spring-boot-concept-and-utilization",-1),Ln=n("h4",{id:"커스텀-로그-설정-파일-사용하기",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#커스텀-로그-설정-파일-사용하기"},[n("span",null,"커스텀 로그 설정 파일 사용하기")])],-1),zn=n("code",null,"logback-spring.xml",-1),Nn=n("ul",null,[n("li",null,"https://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html#howto-configure-logback-for-logging")],-1),Dn=n("code",null,"log4j2-spring.xml",-1),Wn=n("code",null,"logging.properties",-1),In=n("code",null,"logback-spring.xml",-1),Jn=n("code",null,"logback.xml",-1),Fn=n("li",null,[s("프로파일 "),n("code",null,'<springProfile name="프로파일"\\>')],-1),Vn=n("li",null,[s("Environment 프로퍼티 "),n("code",null,"<springProperty\\>")],-1),Kn=n("h4",{id:"로거를-log4j2로-변경하기",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#로거를-log4j2로-변경하기"},[n("span",null,"로거를 Log4j2로 변경하기")])],-1),Un=e('<h3 id="테스트" tabindex="-1"><a class="header-anchor" href="#테스트"><span>테스트</span></a></h3><ul><li>시작은 일단 <code>spring-boot-starter-test</code>를 추가하는 것 부터 <ul><li>test scope으로 추가</li></ul></li></ul><h4 id="springboottest" tabindex="-1"><a class="header-anchor" href="#springboottest"><span><code>@SpringBootTest</code></span></a></h4><ul><li><code>@SpringBootTest</code>가 하는 역할은 <code>@SpringBootApplication</code>을 찾아서 테스트를 위한 빈들을 다 생성한다. 그리고 <code>@MockBean</code>으로 정의된 빈을 찾아서 교체한다.</li><li><code>@RunWith(SpringRunner.class)</code>랑 같이 써야 함</li><li>빈 설정 파일은 안해주나? 알아서 찾는다. (<code>@SpringBootApplication</code>)</li></ul><h4 id="springboottest-webenvironment" tabindex="-1"><a class="header-anchor" href="#springboottest-webenvironment"><span><code>SpringBootTest.webEnvironment</code></span></a></h4><p>MOCK: mock servlet environment. 내장 톰캣 구동 안함.</p>',6),Gn={class:"hint-container info"},$n=n("p",{class:"hint-container-title"},"커밋로그",-1),Hn={href:"https://github.com/namjunemy/spring-boot-concept-and-utilization/commit/f051482f41506c88cb64fada0ff7b975fef0c099",target:"_blank",rel:"noopener noreferrer"},Zn=n("code",null,"namjunemy/spring-boot-concept-and-utilization",-1),Xn=n("code",null,"MockMvc",-1),Qn=e(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">io<span class="token punctuation">.</span>namjune<span class="token punctuation">.</span>springbootconceptandutilization<span class="token punctuation">.</span>sample</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token static">get</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span></span><span class="token class-name">MockMvcResultHandlers</span><span class="token punctuation">.</span><span class="token static">print</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span></span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token static">content</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span></span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token static">status</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">AutoConfigureMockMvc</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">MockMvc</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> <span class="token class-name">SpringBootTest<span class="token punctuation">.</span>WebEnvironment</span><span class="token punctuation">.</span><span class="token constant">MOCK</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@AutoConfigureMockMvc</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleControllerTest</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token class-name">MockMvc</span> mockMvc<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">&quot;hello namjune&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">andDo</span><span class="token punctuation">(</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>RANDOM_PORT</code>, <code>DEFINED_PORT</code>: 내장 톰캣 사용 함 <ul><li><code>RANDOM_PORT</code>를 사용하면 실제 내장 톰캣을 사용한다. 이때는 <code>MockMvc</code> 대신 <code>RestTemplate</code>를 사용할 수 있다.</li><li>실제 가용한 포트로 내장톰캣을 띄우고 응답을 받아서 테스트를 수행한다.</li></ul></li></ul>`,2),Yn={class:"hint-container info"},ns=n("p",{class:"hint-container-title"},"커밋로그",-1),ss={href:"https://github.com/namjunemy/spring-boot-concept-and-utilization/commit/6611dc0a8f2edb50b159272c1c728ffd5860ee6d",target:"_blank",rel:"noopener noreferrer"},as=n("code",null,"namjunemy/spring-boot-concept-and-utilization",-1),ts=e(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">io<span class="token punctuation">.</span>namjune<span class="token punctuation">.</span>springbootconceptandutilization<span class="token punctuation">.</span>sample</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>assertj<span class="token punctuation">.</span>core<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token static">assertThat</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span><span class="token punctuation">.</span><span class="token class-name">WebEnvironment</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">TestRestTemplate</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> <span class="token class-name">WebEnvironment</span><span class="token punctuation">.</span><span class="token constant">RANDOM_PORT</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleControllerTest</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token class-name">TestRestTemplate</span> testRestTemplate<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> result <span class="token operator">=</span> testRestTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">assertThat</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;hello namjune&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>spring5 webflux에서 추가된 <code>RestClient</code>중에 하나인 <code>WebTestClient</code>도 사용할 수 있다. 기존에 사용하던 <code>WebClient</code>는 synchronous하게 동작하기 때문에 요청 하나 보내고 그 요청이 끝나고 난 다음에 다음 요청을 보낼 수 있었지만, <code>WebTestClient</code>는 asynchronous하게 동작하므로 요청을 보내고 기다리지 않는다. 후에 응답이 오면, 콜백 이벤트를 실행할 수 있다. 따라서, Test코드에서도 <code>WebClient</code>와 비슷한 API를 사용할 수 있다. <ul><li>webflux 의존성을 추가해야 한다.</li><li>API가 restTemplate보다 가독성이 좋다.(추천)</li><li><strong>아래의 @MockBean 참고</strong></li></ul></li></ul>`,2),es={class:"hint-container info"},ps=n("p",{class:"hint-container-title"},"커밋로그",-1),os={href:"https://github.com/namjunemy/spring-boot-concept-and-utilization/commit/99a3bf23c989dd4c293473e54e71c492258a9543",target:"_blank",rel:"noopener noreferrer"},ls=n("code",null,"namjunemy/spring-boot-concept-and-utilization",-1),cs=e(`<div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy" data-title="groovy"><pre><code><span class="line"><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">&#39;org.springframework.boot:spring-boot-starter-webflux&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">io<span class="token punctuation">.</span>namjune<span class="token punctuation">.</span>springbootconceptandutilization<span class="token punctuation">.</span>sample</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token static">when</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span><span class="token punctuation">.</span><span class="token class-name">WebEnvironment</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">MockBean</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">WebTestClient</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> <span class="token class-name">WebEnvironment</span><span class="token punctuation">.</span><span class="token constant">RANDOM_PORT</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleControllerTest</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token class-name">WebTestClient</span> webTestClient<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@MockBean</span></span>
<span class="line">    <span class="token class-name">SampleService</span> mockSampleService<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">when</span><span class="token punctuation">(</span>mockSampleService<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token string">&quot;kim&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        webTestClient<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">expectStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">expectBody</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;hello kim&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>NONE: 서블릿 환경 제공 안 함.</p><h4 id="mockbean" tabindex="-1"><a class="header-anchor" href="#mockbean"><span><code>@MockBean</code></span></a></h4><ul><li>위의 경우 테스트가 너무 크다. Controller 테스트코드에서 Service단까지 흘러간다. 컨트롤러만 테스트하고 싶을 경우 서비스 객체를 <code>MockBean</code>으로 만들어서 사용할 수 있다.</li><li><code>ApplicationContext</code>에 들어있는 빈을 Mock으로 만든 객체로 교체함</li><li>모든 <code>@Test</code> 마다 자동으로 리셋. 직접 리셋을 관리 하지 않아도 된다.</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">io<span class="token punctuation">.</span>namjune<span class="token punctuation">.</span>springbootconceptandutilization<span class="token punctuation">.</span>sample</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>assertj<span class="token punctuation">.</span>core<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token static">assertThat</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token static">when</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunWith</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span><span class="token punctuation">.</span><span class="token class-name">WebEnvironment</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">MockBean</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">TestRestTemplate</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>junit4<span class="token punctuation">.</span></span><span class="token class-name">SpringRunner</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@SpringBootTest</span><span class="token punctuation">(</span>webEnvironment <span class="token operator">=</span> <span class="token class-name">WebEnvironment</span><span class="token punctuation">.</span><span class="token constant">RANDOM_PORT</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleControllerTest</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token class-name">TestRestTemplate</span> testRestTemplate<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@MockBean</span></span>
<span class="line">    <span class="token class-name">SampleService</span> mockSampleService<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">when</span><span class="token punctuation">(</span>mockSampleService<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token string">&quot;kim&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">String</span> result <span class="token operator">=</span> testRestTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">assertThat</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEqualTo</span><span class="token punctuation">(</span><span class="token string">&quot;hello kim&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="슬라이스-테스트" tabindex="-1"><a class="header-anchor" href="#슬라이스-테스트"><span>슬라이스 테스트</span></a></h4><p>레이어 별로 잘라서 테스트 하고 싶을 때</p><ul><li><code>@JsonTest</code><ul><li>json 테스트를 하고싶을 경우 <code>@SpringBootTest</code> 대신 <code>@JsonTest</code>를 선언하고, <code>JacksonTester</code>를 주입받아서 사용하면 된다.</li></ul></li><li><code>@WebMvcTest</code> 컨트롤러만 따로 테스트 할 경우 사용한다. 웹과 관련된 클래스들만 빈으로 등록이 되고 일반적인 컴포넌트들은 빈으로 등록이 되지 않는다. 이렇게 의존성이 끊기기 때문에, 사용하는 다른 의존성 예를 들면 서비스와 같은 객체들은 <code>@MockBean</code>을 사용해서 만들어 사용해야 한다.</li><li><code>@WebFluxTest</code></li><li><code>@DataJpaTest</code></li><li>...</li></ul><div class="hint-container info"><p class="hint-container-title">커밋로그</p><ul><li>https://github.com/namjunemy/spring-boot-concept-and-utilization/commit/76a0e095576f0b52b23f2cec3f60f050d1bb2042</li></ul></div><h3 id="테스트-유틸" tabindex="-1"><a class="header-anchor" href="#테스트-유틸"><span>테스트 유틸</span></a></h3><p>스프링 테스트가 제공하는 테스트 유틸리티가 4가지 있다.</p><ul><li><strong>OutputCapture</strong></li><li><code>TestPropertyValues</code></li><li><code>TestRestTemplate</code></li><li><code>ConfigFileApplicationContextInitializer</code></li></ul><ul><li>Junit에 있는 Rule을 확장해서 만든 OutputCapture가 제일 많이 쓰인다. <ul><li>OutputCapture는 로그를 비롯해서 콘솔에 찍히는 모든 것을 캡쳐한다. <ul><li>로그 메세지가 어떻게 찍히는지 테스트할 수 있다.</li></ul></li><li>@Rule을 선언하고,</li><li>Junit이 제공하는 OutputCapture를 public으로 만든다.(@Rule의 제약사항. 빈을 주입받는게 아님)</li></ul></li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@RestController</span></span>
<span class="line"><span class="token annotation punctuation">@RequiredArgsConstructor</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">SampleController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SampleService</span> sampleService<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;hello logger&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello sout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;hello &quot;</span> <span class="token operator">+</span> sampleService<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@WebMvcTest</span><span class="token punctuation">(</span><span class="token class-name">SampleController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SampleControllerTest</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Rule</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">OutputCapture</span> outputCapture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@MockBean</span></span>
<span class="line">    <span class="token class-name">SampleService</span> mockSampleService<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token class-name">MockMvc</span> mockMvc<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">when</span><span class="token punctuation">(</span>mockSampleService<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token string">&quot;kim&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">&quot;hello kim&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">assertThat</span><span class="token punctuation">(</span>outputCapture<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;sout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,17);function is(r,us){const p=u("router-link"),l=u("VPCard"),t=u("FontIcon");return v(),k("div",null,[n("h1",g,[n("a",h,[n("span",null,m(r.$frontmatter.title)+" 관련",1)])]),n("nav",_,[n("ul",null,[n("li",null,[a(p,{to:"#_1-스프링-부트-핵심-기능"},{default:o(()=>[s("1. 스프링 부트 핵심 기능")]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#springapplication"},{default:o(()=>[s("SpringApplication")]),_:1})]),n("li",null,[a(p,{to:"#외부설정"},{default:o(()=>[s("외부설정")]),_:1})]),n("li",null,[a(p,{to:"#프로파일"},{default:o(()=>[s("프로파일")]),_:1})]),n("li",null,[a(p,{to:"#로깅"},{default:o(()=>[s("로깅")]),_:1})]),n("li",null,[a(p,{to:"#테스트"},{default:o(()=>[s("테스트")]),_:1})]),n("li",null,[a(p,{to:"#테스트-유틸"},{default:o(()=>[s("테스트 유틸")]),_:1})])])])])]),f,a(l,c(i({title:"namjunemy/TIL - [스프링 부트 개념과 활용] 3. 스프링 부트 활용",desc:"[스프링 부트 개념과 활용] 3. 스프링 부트 활용",link:"https://github.com/namjunemy/TIL/blob/master/SpringBoot/03_springboot_utilization.md",logo:"https://github.githubassets.com/favicons/favicon-dark.png",background:"rgba(13,16,20,0.2)"})),null,16),y,a(l,c(i({title:"Spring Boot Reference Documentation",desc:"1.1. Startup Failure",link:"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.spring-application.startup-failure",logo:"https://docs.spring.io/favicon.ico",background:"rgba(125,77,69,0.2)"})),null,16),w,n("ul",null,[n("li",null,[s("."),a(t,{icon:"iconfont icon-fodler"}),S,s("의 하위에 "),j,s(" | "),T,s(" | "),x,s(" | "),A,s(" 파일을 위치시키면 된다.")]),n("li",null,[s("."),a(t,{icon:"iconfont icon-yaml"}),R,s(" 파일에 classpath 또는"),C,s("을 사용해서 위치를 지정할 수 있다.")]),q,M,B,E]),P,a(l,c(i({title:"Spring Boot Reference Documentation",desc:"1.7. Application Events and Listeners",link:"https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.spring-application.application-events-and-listeners",logo:"https://docs.spring.io/favicon.ico",background:"rgba(125,77,69,0.2)"})),null,16),O,n("ol",null,[n("li",null,[s("유저 홈 디렉토리에 있는 "),a(t,{icon:"fas fa-file-lines"}),L]),z,n("li",null,[s("JAR 밖에 있는 특정 프로파일용 "),a(t,{icon:"fas fa-file-lines"}),N]),n("li",null,[s("JAR 안에 있는 특정 프로파일용 "),a(t,{icon:"fas fa-file-lines"}),D]),n("li",null,[s("JAR 밖에 있는 "),a(t,{icon:"fas fa-file-lines"}),W]),n("li",null,[s("JAR 안에 있는 "),a(t,{icon:"fas fa-file-lines"}),I]),J,F]),n("h4",V,[n("a",K,[n("span",null,[a(t,{icon:"fas fa-file-lines"}),U,s(" 우선 순위(높은게 낮은걸 덮어 쓴다.)")])])]),n("ol",null,[n("li",null,[a(t,{icon:"fas fa-folder-open"}),G]),n("li",null,[a(t,{icon:"fas fa-folder-open"}),$]),n("li",null,[a(t,{icon:"fas fa-folder-open"}),H]),n("li",null,[a(t,{icon:"fas fa-folder-open"}),Z])]),X,Q,n("div",Y,[nn,n("ul",null,[n("li",null,[n("a",sn,[a(t,{icon:"iconfont icon-github"}),an,s(": 외부설정 - 타입-세이프 프로퍼티 "),tn,s(" 사용하기")])]),n("li",null,[n("a",en,[a(t,{icon:"iconfont icon-github"}),pn,s(": 외부설정 - 프로퍼티 타입 컨버전, 프로퍼티 값 검증 "),on])])])]),ln,cn,un,n("ul",null,[rn,n("li",null,[s("프로퍼티 타입 컨버전 "),n("ul",null,[dn,n("li",null,[kn,n("ul",null,[mn,n("li",null,[s("."),a(t,{icon:"fa-brands fa-java"}),vn])])])])])]),bn,n("blockquote",null,[n("p",null,[s("."),a(t,{icon:"iconfont icon-yaml"}),gn])]),hn,n("div",_n,[fn,n("ul",null,[n("li",null,[n("a",yn,[a(t,{icon:"iconfont icon-github"}),wn,s(": 스프링 부트 프로파일 설정")])])])]),Sn,n("ul",null,[jn,n("li",null,[s("프로파일용 프로퍼티 "),n("ul",null,[n("li",null,[s("."),a(t,{icon:"fas fa-file-lines"}),Tn])])])]),xn,n("div",An,[Rn,n("ul",null,[n("li",null,[n("a",Cn,[a(t,{icon:"iconfont icon-github"}),qn,s(": 기본 로깅 설정")])])])]),Mn,n("div",Bn,[En,n("ul",null,[n("li",null,[n("a",Pn,[a(t,{icon:"iconfont icon-github"}),On,s(": 커스텀 로깅 설정")])])])]),Ln,n("ul",null,[n("li",null,[s("Logback: "),a(t,{icon:"iconfont icon-code"}),zn,Nn]),n("li",null,[s("Log4J2: "),a(t,{icon:"iconfont icon-code"}),Dn]),n("li",null,[s("JUL(비추천): "),a(t,{icon:"fas fa-file-lines"}),Wn]),n("li",null,[s("Logback extension "),n("ul",null,[n("li",null,[n("strong",null,[a(t,{icon:"iconfont icon-code"}),In,s("을 사용하면 "),a(t,{icon:"iconfont icon-code"}),Jn,s("을 사용하는 것과 같고, 스프링부트에서 추가로 아래의 익스텐션을 사용할 수 있게 제공한다.")])]),Fn,Vn])])]),Kn,a(l,c(i({title:"Spring Boot Reference Documentation",desc:"7.2. Configure Log4j for Logging",link:"https://docs.spring.io/spring-boot/docs/current/reference/html/howto.html#howto.logging.log4j",logo:"https://docs.spring.io/favicon.ico",background:"rgba(125,77,69,0.2)"})),null,16),Un,n("div",Gn,[$n,n("p",null,[n("a",Hn,[a(t,{icon:"iconfont icon-github"}),Zn,s(": Test환경이 MOCK일 때, "),Xn,s("를 활용해서 테스트 하는 방법")])])]),Qn,n("div",Yn,[ns,n("ul",null,[n("li",null,[n("a",ss,[a(t,{icon:"iconfont icon-github"}),as,s(": ? ")])])])]),ts,n("div",es,[ps,n("ul",null,[n("li",null,[n("a",os,[a(t,{icon:"iconfont icon-github"}),ls,s(": ? ")])])])]),cs])}const ks=d(b,[["render",is],["__file","03.html.vue"]]),ms=JSON.parse('{"path":"/java/spring-boot-whiteship/03.html","title":"3. 스프링 부트 활용","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"3. 스프링 부트 활용","description":"스프링 부트 개념과 활용 > 3. 스프링 부트 활용","category":["Java","Spring","Spring Boot"],"tag":["crashcourse","java","jdk","jdk8","stream","spring","springframework","springboot"],"head":[[{"meta":null},{"property":"og:title","content":"스프링 부트 개념과 활용 > 3. 스프링 부트 활용"},{"property":"og:description","content":"3. 스프링 부트 활용"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/java/spring-boot-whiteship/03.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/java/spring-boot-whiteship/03.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"3. 스프링 부트 활용"}],["meta",{"property":"og:description","content":"스프링 부트 개념과 활용 > 3. 스프링 부트 활용"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://github.com/namjunemy/TIL/blob/master/SpringBoot/img/03_logging_dependency.PNG?raw=true"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"jdk"}],["meta",{"property":"article:tag","content":"jdk8"}],["meta",{"property":"article:tag","content":"stream"}],["meta",{"property":"article:tag","content":"spring"}],["meta",{"property":"article:tag","content":"springframework"}],["meta",{"property":"article:tag","content":"springboot"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3. 스프링 부트 활용\\",\\"image\\":[\\"https://github.com/namjunemy/TIL/blob/master/SpringBoot/img/03_logging_dependency.PNG?raw=true\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1. 스프링 부트 핵심 기능","slug":"_1-스프링-부트-핵심-기능","link":"#_1-스프링-부트-핵심-기능","children":[{"level":3,"title":"SpringApplication","slug":"springapplication","link":"#springapplication","children":[]},{"level":3,"title":"외부설정","slug":"외부설정","link":"#외부설정","children":[]},{"level":3,"title":"프로파일","slug":"프로파일","link":"#프로파일","children":[]},{"level":3,"title":"로깅","slug":"로깅","link":"#로깅","children":[]},{"level":3,"title":"테스트","slug":"테스트","link":"#테스트","children":[]},{"level":3,"title":"테스트 유틸","slug":"테스트-유틸","link":"#테스트-유틸","children":[]}]}],"git":{"createdTime":1711378270000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":4}]},"readingTime":{"minutes":4.61,"words":1383},"filePathRelative":"java/spring-boot-whiteship/03.md","localizedDate":"2024년 3월 25일","excerpt":"\\n\\n<hr>\\n"}');export{ks as comp,ms as data};
