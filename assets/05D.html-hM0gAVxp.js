import{_ as b}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,a as s,t as g,b as e,n as i,g as o,w as c,d as n,e as t,r as d,o as v}from"./app-U_bew1in.js";const h={},y={id:"frontmatter-title-관련",tabindex:"-1"},_={class:"header-anchor",href:"#frontmatter-title-관련"},f=s("nav",{class:"table-of-contents"},[s("ul")],-1),A=s("hr",null,null,-1),D=s("p",null,"이제 Spring Boot Docker 이미지를 생성하겠습니다. Spring Boot 프로젝트 생성 부분은 다음 문서를 참조하기 바랍니다.",-1),S=s("ul",null,[s("li",null,[s("a",{href:"https://pyrasis.com/jHLsAlwaysUpToDateDocker/Unit12/02",target:"_blank",rel:"noopener noreferrer"},"Spring Boot Dockerfile 작성하기")])],-1),E=s("p",null,"소스 코드는 다음 GitHub 저장소에서 받을 수 있습니다.",-1),T={href:"https://github.com/pyrasis/jHLsKubernetes/blob/main/Unit05/initial",target:"_blank",rel:"noopener noreferrer"},P=s("code",null,"jHLsKubernetes/Unit05/initial",-1),j=s("p",null,[n("소스 코드를 받은 뒤 "),s("code",null,"Unit05/initial"),n(" 폴더로 이동하여 Docker 이미지를 생성합니다.")],-1),U=s("ul",null,[s("li",null,[n("GitHub Packages 레지스트리를 사용한다고 했으므로 태그를 다음과 같은 형식으로 지정합니다. "),s("ul",null,[s("li",null,[s("code",null,"ghcr.io/<GitHub 계정>/spring-boot")])])])],-1),H=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"cd"),n(" jHLsKubernetes/Unit05/initial")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"docker"),n(" build "),s("span",{class:"token parameter variable"},"--tag"),n(" ghcr.io/"),s("span",{class:"token operator"},"<"),n("GitHub 계정"),s("span",{class:"token operator"},">"),n("/spring-boot "),s("span",{class:"token builtin class-name"},".")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),L=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"cd"),n(" jHLsKubernetes/Unit05/initial")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"docker"),n(" build "),s("span",{class:"token parameter variable"},"--tag"),n(" ghcr.io/"),s("span",{class:"token operator"},"<"),n("GitHub 계정"),s("span",{class:"token operator"},">"),n("/spring-boot "),s("span",{class:"token builtin class-name"},".")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),R=t(`<p>그리고 <code>docker push</code> 명령으로 이미지를 GitHub Packages 레지스트리에 푸시합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> push ghcr.io/<span class="token operator">&lt;</span>GitHub 계정<span class="token operator">&gt;</span>/spring-boot:latest</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,2),w=s("code",null,"spring-boot-deployment.yaml",-1),x=s("code",null,"spring-boot-deployment.yaml",-1),B=t(`<div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> spring<span class="token punctuation">-</span>boot</span>
<span class="line"><span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span></span>
<span class="line">  <span class="token key atrule">selector</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">app</span><span class="token punctuation">:</span> spring<span class="token punctuation">-</span>boot</span>
<span class="line">  <span class="token key atrule">template</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">labels</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">app</span><span class="token punctuation">:</span> spring<span class="token punctuation">-</span>boot</span>
<span class="line">    <span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">containers</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> spring<span class="token punctuation">-</span>boot</span>
<span class="line highlighted">          <span class="token key atrule">image</span><span class="token punctuation">:</span> ghcr.io/&lt;GitHub 계정<span class="token punctuation">&gt;</span>/spring<span class="token punctuation">-</span>boot<span class="token punctuation">:</span>latest</span>
<span class="line">          <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">8080</span></span>
<span class="line">          <span class="token key atrule">env</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> MYSQL_HOST</span>
<span class="line">              <span class="token key atrule">value</span><span class="token punctuation">:</span> mysql</span>
<span class="line highlighted">      <span class="token key atrule">imagePullSecrets</span><span class="token punctuation">:</span></span>
<span class="line highlighted">        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> ghcr<span class="token punctuation">-</span>cred</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>.apiVersion</code>: 현재 디플로이먼트의 버전은 <code>apps/v1</code>입니다.</li><li><code>.kind</code>: 디플로이먼트를 생성하므로 <code>Deployment</code>를 지정합니다.</li><li><code>.metadata.name</code>: 현재 디플로이먼트의 이름입니다. 여기서는 <code>spring-boot</code>를 설정합니다.</li><li><code>.spec.replicas</code>: 파드를 1개만 생성합니다.</li><li><code>.spec.selector</code>: 디플로이먼트가 관리할 파드를 찾는 방법을 정의합니다. 여기서는 <code>matchLabels</code>에 <code>spring-boot</code>로 설정했으므로 키가 <code>app</code>, 값이 <code>spring-boot</code>로 정확히 일치하는 파드를 찾습니다.</li><li><code>.spec.template</code>: 여기서부터 파드 설정입니다. <ul><li><code>metadata</code>: <code>labels</code>에 키-값을 설정하여 디플로이먼트가 찾을 수 있도록 합니다. 여기서는 <code>app: spring-boot</code>를 설정했습니다.</li><li><code>spec</code>: 파드의 <code>spec</code>입니다. 파드에는 컨테이너가 여러 개 들어갈 수 있어서 <code>containers</code>로 되어있고, 그 아래에는 <code>-</code>를 사용하여 배열(Array)로 값을 설정합니다. <ul><li><code>containers</code>: <ul><li><code>name</code>에는 컨테이너의 이름을 설정합니다. 여기서는 <code>spring-boot</code>로 설정했지만 셀렉터와는 상관이 없습니다.</li><li><code>image</code>에는 컨테이너를 실행할 Docker 이미지를 설정합니다. <code>&lt;이미지&gt;:&lt;태그&gt;</code> 형식이며 여기서는 <code>ghcr.io/&lt;GitHub 계정&gt;/spring-boot:latest</code>을 설정했습니다. <b>&lt;GitHub 계정&gt;</b> 부분은 반드시 본인의 GitHub 계정으로 수정해줍니다.</li><li><code>ports</code>: 배열 형태로 <code>containerPort</code>를 설정합니다. <code>containerPort</code>는 컨테이너에서 개방할 포트 번호를 뜻합니다. 여기서는 Spring Boot의 포트인 <strong>8080</strong>을 설정했습니다.</li><li><code>env</code>: 환경 변수입니다. 배열 형태로 설정하며 <code>name</code>, <code>value</code> 형식입니다. 여기서는 <code>MYSQL_HOST</code>에 <code>mysql</code>를 설정하여 스테이트풀셋에 연결된 서비스에 접근하도록 합니다.</li></ul></li><li><code>imagePullSecrets</code>: GitHub Packages 레지스트리에 접근하기 위한 시크릿입니다. <code>ghcr-cred</code> 시크릿은 뒤에서 만들겠습니다.</li></ul></li></ul></li></ul><p>이제 다음 명령으로 <code>ghcr-cred</code> 시크릿을 생성합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl create secret docker-registry ghcr-cred <span class="token punctuation">\\</span></span>
<span class="line">--docker-server<span class="token operator">=</span>ghcr.io <span class="token punctuation">\\</span></span>
<span class="line">--docker-username<span class="token operator">=</span><span class="token operator">&lt;</span>GitHub 계정<span class="token operator">&gt;</span> <span class="token punctuation">\\</span></span>
<span class="line">--docker-password<span class="token operator">=</span><span class="token operator">&lt;</span>Personal Access Token<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>시크릿 생성이 끝났으면 Spring Boot 디플로이먼트를 생성해봅니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl create <span class="token parameter variable">-f</span> spring-boot-deployment.yaml</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>kubectl get all</code> 명령으로 오브젝트 목록을 출력해보면 디플로이먼트, 레플리카셋, 파드가 생성된 것을 볼 수 있습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl get all</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># NAME                               READY   STATUS    RESTARTS   AGE</span></span>
<span class="line"><span class="token comment"># pod/mysql-0                        1/1     Running   0          4h51m</span></span>
<span class="line highlighted"><span class="token comment"># pod/spring-boot-85cc99859d-mpq28   1/1     Running   0          5s</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)    AGE</span></span>
<span class="line"><span class="token comment"># service/kubernetes   ClusterIP   10.96.0.1    &lt;none&gt;        443/TCP    6d2h</span></span>
<span class="line"><span class="token comment"># service/mysql        ClusterIP   None         &lt;none&gt;        3306/TCP   6h30m</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># NAME                          READY   UP-TO-DATE   AVAILABLE   AGE</span></span>
<span class="line highlighted"><span class="token comment"># deployment.apps/spring-boot   1/1     1            1           6s</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># NAME                                     DESIRED   CURRENT   READY   AGE</span></span>
<span class="line highlighted"><span class="token comment"># replicaset.apps/spring-boot-85cc99859d   1         1         1       6s</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># NAME                     READY   AGE</span></span>
<span class="line"><span class="token comment"># statefulset.apps/mysql   1/1     4h51m</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pyrasis.com/assets/images/jHLsAlwaysUpToDateKubernetes/Unit05/9.png" alt="Spring Boot 디플로이먼트" tabindex="0" loading="lazy"><figcaption>Spring Boot 디플로이먼트</figcaption></figure><p>이제 Spring Boot 서비스입니다. 다음 내용을 <code>spring-boot-service.yaml</code> 파일로 저장합니다.</p>`,10),K=s("code",null,"spring-boot-service.yaml",-1),C=t(`<div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Service</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> spring<span class="token punctuation">-</span>boot</span>
<span class="line"><span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">selector</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">app</span><span class="token punctuation">:</span> spring<span class="token punctuation">-</span>boot</span>
<span class="line">  <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP</span>
<span class="line">      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span></span>
<span class="line">      <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">8080</span></span>
<span class="line">  <span class="token key atrule">type</span><span class="token punctuation">:</span> ClusterIP</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>.apiVersion</code>: 현재 서비스의 버전은 <code>v1</code>입니다.</li><li><code>.kind</code>: 여기서는 서비스를 작성하므로 <code>Service</code>를 지정합니다.</li><li><code>.metadata.name</code>: 현재 서비스의 이름입니다. 여기서는 <code>spring-boot</code>를 설정합니다.</li><li><code>.spec.selector</code>: 서비스가 트래픽을 전달할 파드를 선택합니다. 여기서는 <code>app: spring-boot</code>을 설정했으므로 키가 <code>app</code>, 값이 <code>spring-boot</code>인 파드를 찾습니다.</li><li><code>.spec.ports</code>: <code>protocol</code>은 <strong><strong>TCP</strong></strong>, <code>port</code>는 서비스가 개방할 포트이며 <strong><strong>8080</strong></strong>으로 설정합니다. <code>targetPort</code>는 파드에 열려 있는 포트를 의미합니다. 따라서 <strong><strong>8080</strong></strong>을 설정합니다.</li><li><code>.spec.type</code>: 서비스의 <code>type</code>은 여러 가지가 있지만 여기서는 <code>ClusterIP</code>를 설정하여 쿠버네티스 네트워크 안에서만 포트를 노출하도록 합니다.</li></ul>`,2),G=t(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl create <span class="token parameter variable">-f</span> spring-boot-service.yaml</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>kubectl get all</code> 명령으로 오브젝트 목록을 출력해보면 서비스가 생성된 것을 볼 수 있습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl get all</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># NAME                               READY   STATUS    RESTARTS   AGE</span></span>
<span class="line"><span class="token comment"># pod/mysql-0                        1/1     Running   0          5h</span></span>
<span class="line"><span class="token comment"># pod/spring-boot-85cc99859d-mpq28   1/1     Running   0          9m17s</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># NAME                  TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE</span></span>
<span class="line"><span class="token comment"># service/kubernetes    ClusterIP   10.96.0.1        &lt;none&gt;        443/TCP    6d3h</span></span>
<span class="line"><span class="token comment"># service/mysql         ClusterIP   None             &lt;none&gt;        3306/TCP   6h39m</span></span>
<span class="line highlighted"><span class="token comment"># service/spring-boot   ClusterIP   10.111.229.189   &lt;none&gt;        8080/TCP   6s</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># NAME                          READY   UP-TO-DATE   AVAILABLE   AGE</span></span>
<span class="line"><span class="token comment"># deployment.apps/spring-boot   1/1     1            1           9m18s</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># NAME                                     DESIRED   CURRENT   READY   AGE</span></span>
<span class="line"><span class="token comment"># replicaset.apps/spring-boot-85cc99859d   1         1         1       9m18s</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># NAME                     READY   AGE</span></span>
<span class="line"><span class="token comment"># statefulset.apps/mysql   1/1     5h</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pyrasis.com/assets/images/jHLsAlwaysUpToDateKubernetes/Unit05/10.png" alt="Spring Boot 서비스" tabindex="0" loading="lazy"><figcaption>Spring Boot 서비스</figcaption></figure><p>그럼 <code>kubectl</code>의 <code>port-forward</code> 기능을 사용해서 서비스에 접근해보겠습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl port-forward service/spring-boot <span class="token number">8080</span>:8080</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># Forwarding from 127.0.0.1:8080 -&gt; 8080</span></span>
<span class="line"><span class="token comment"># Forwarding from [::1]:8080 -&gt; 8080</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pyrasis.com/assets/images/jHLsAlwaysUpToDateKubernetes/Unit05/11.png" alt="Spring Boot 디플로이먼트와 MySQL 스테이트풀셋" tabindex="0" loading="lazy"><figcaption>Spring Boot 디플로이먼트와 MySQL 스테이트풀셋</figcaption></figure>`,7),q=s("code",null,"http://127.0.0.1:8080",-1),N=t(`<div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token property">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;email&quot;</span><span class="token operator">:</span><span class="token string">&quot;hello@world.com&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>이렇게 MySQL 스테이트풀셋을 생성하고 Spring Boot 디플로이먼트(파드)에서 데이터를 읽고 쓰는 방법을 알아보았습니다.</p><div class="hint-container info"><p class="hint-container-title">Minikube 클러스터 정지, 삭제</p><p>MiniKube 클러스터를 정지하려면 <code>minikube stop</code> 명령을 실행합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">minikube stop</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>정지된 Minikube 클러스터는 <code>minikube start</code> 명령으로 다시 시작할 수 있습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">minikube start</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>클러스터를 삭제하고 싶다면 <code>minikube delete</code> 명령을 실행하면 됩니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">minikube delete</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>참고로 윈도우에서 위 명령을 실행하려면 PowerShell 또는 명령 프롬프트를 관리자 권한으로 실행하여야 합니다.</p></div><hr>`,4);function I(u,M){const l=d("VPCard"),a=d("FontIcon"),m=d("Tabs");return v(),k("div",null,[s("h1",y,[s("a",_,[s("span",null,g(u.$frontmatter.title)+" 관련",1)])]),e(l,i(o({title:"목차",desc:"언제나 최신 Kubernetes",link:"/k8s/always-up-to-date-kubernetes/README.md",logo:"https://pyrasis.com/assets/images/pyrasis.png",background:"rgba(31,41,55,0.2)"})),null,16),f,A,e(l,i(o({title:"Unit 5 - 5.4 Spring Boot Docker 이미지와 디플로이먼트 생성하기",desc:"언제나 최신 Kubernetes",link:"https://pyrasis.com/jHLsAlwaysUpToDateKubernetes/Unit05/04",logo:"https://pyrasis.com/assets/images/pyrasis.png",background:"rgba(31,41,55,0.2)"})),null,16),D,S,E,s("ul",null,[s("li",null,[s("a",T,[e(a,{icon:"fas fa-globe"}),P])])]),j,U,e(m,{id:"46",data:[{id:'<FontIcon icon="fa-brands fa-linux"/>리눅스, <FontIcon icon="iconfont icon-macos"/>macOS'},{id:'<FontIcon icon="iconfont icon-powershell"/>PowerShell'}],active:0},{title0:c(({value:p,isActive:r})=>[e(a,{icon:"fa-brands fa-linux"}),n("리눅스, "),e(a,{icon:"iconfont icon-macos"}),n("macOS")]),title1:c(({value:p,isActive:r})=>[e(a,{icon:"iconfont icon-powershell"}),n("PowerShell")]),tab0:c(({value:p,isActive:r})=>[H]),tab1:c(({value:p,isActive:r})=>[L]),_:1}),R,s("p",null,[n("다음 내용을 "),e(a,{icon:"iconfont icon-yaml"}),w,n(" 파일로 저장합니다.")]),e(l,i(o({title:"jHLsKubernetes/Unit05/spring-boot-deployment.yaml at main · pyrasis/jHLsKubernetes",desc:"...",link:"https://github.com/pyrasis/jHLsKubernetes/blob/main/Unit05/spring-boot-deployment.yaml",logo:"https://avatars.githubusercontent.com/u/210015?v=4",background:"rgba(10,10,10,0.2)"})),null,16),s("blockquote",null,[e(a,{icon:"iconfont icon-yaml"}),x]),B,e(l,i(o({title:"jHLsKubernetes/Unit05/spring-boot-service.yaml at main · pyrasis/jHLsKubernetes",desc:"...",link:"https://github.com/pyrasis/jHLsKubernetes/blob/main/Unit05/spring-boot-service.yaml",logo:"https://avatars.githubusercontent.com/u/210015?v=4",background:"rgba(10,10,10,0.2)"})),null,16),s("blockquote",null,[e(a,{icon:"iconfont icon-yaml"}),K]),C,s("p",null,[n("다음 명령으로 "),e(a,{icon:"iconfont icon-springboot"}),n("Spring Boot 서비스를 생성합니다.")]),G,s("p",null,[n("웹 브라우저를 열고 "),e(a,{icon:"fas fa-globe"}),q,n("에 접속하면 다음과 같은 내용이 표시됩니다(새로 고침하면 데이터가 계속 누적되서 표시될 것입니다).")]),N])}const O=b(h,[["render",I],["__file","05D.html.vue"]]),F=JSON.parse('{"path":"/k8s/always-up-to-date-kubernetes/05D.html","title":"05D. Spring Boot Docker 이미지와 디플로이먼트 생성하기","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"05D. Spring Boot Docker 이미지와 디플로이먼트 생성하기","description":"언제나 최신 Kubernetes > 05D. Spring Boot Docker 이미지와 디플로이먼트 생성하기","category":["Kubernetes"],"tag":["crashcourse","digitalocean","kubernetes","minkube","kubctl"],"head":[[{"meta":null},{"property":"og:title","content":"언제나 최신 Kubernetes > 05D. Spring Boot Docker 이미지와 디플로이먼트 생성하기"},{"property":"og:description","content":"05D. Spring Boot Docker 이미지와 디플로이먼트 생성하기"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/k8s/always-up-to-date-kubernetes/05D.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/k8s/always-up-to-date-kubernetes/05D.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"05D. Spring Boot Docker 이미지와 디플로이먼트 생성하기"}],["meta",{"property":"og:description","content":"언제나 최신 Kubernetes > 05D. Spring Boot Docker 이미지와 디플로이먼트 생성하기"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateKubernetes/Unit05/9.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"digitalocean"}],["meta",{"property":"article:tag","content":"kubernetes"}],["meta",{"property":"article:tag","content":"minkube"}],["meta",{"property":"article:tag","content":"kubctl"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"05D. Spring Boot Docker 이미지와 디플로이먼트 생성하기\\",\\"image\\":[\\"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateKubernetes/Unit05/9.png\\",\\"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateKubernetes/Unit05/10.png\\",\\"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateKubernetes/Unit05/11.png\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]],"next":"/k8s/always-up-to-date-kubernetes/06.md"},"headers":[],"git":{"createdTime":1712118043000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.6,"words":779},"filePathRelative":"k8s/always-up-to-date-kubernetes/05D.md","localizedDate":"2024년 4월 3일","excerpt":"\\n"}');export{O as comp,F as data};
