import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,a as e,t as i,b as n,w as a,e as r,r as l,o as p,d}from"./app-U_bew1in.js";const E={},h={id:"frontmatter-title-관련",tabindex:"-1"},N={class:"header-anchor",href:"#frontmatter-title-관련"},m={class:"table-of-contents"},u=r(`<hr><h2 id="hint" tabindex="-1"><a class="header-anchor" href="#hint"><span>Hint</span></a></h2><h3 id="기본-사용예" tabindex="-1"><a class="header-anchor" href="#기본-사용예"><span>기본 사용예</span></a></h3><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> <span class="token comment">/*+ INDEX(idx_col1) */</span> </span>
<span class="line">  id<span class="token punctuation">,</span> password<span class="token punctuation">,</span> name</span>
<span class="line"><span class="token keyword">FROM</span> </span>
<span class="line">  emp<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token comment">/*+ ORDERED  INDEX(b idx_col1) */</span> </span>
<span class="line">  id<span class="token punctuation">,</span> password<span class="token punctuation">,</span> name</span>
<span class="line"><span class="token keyword">FROM</span></span>
<span class="line">  emp a<span class="token punctuation">,</span> depart b</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>주의</strong>: 주석 표시 뒤에 <code>+</code> 기호가 있다</p></blockquote><hr><h2 id="hint-유형" tabindex="-1"><a class="header-anchor" href="#hint-유형"><span>Hint 유형</span></a></h2><h3 id="index-access-operation-related-hint" tabindex="-1"><a class="header-anchor" href="#index-access-operation-related-hint"><span>INDEX Access Operation related HINT</span></a></h3><table><thead><tr><th>Hint</th><th>Description</th><th>Usage</th></tr></thead><tbody><tr><td><code>INDEX</code></td><td><code>INDEX</code>를 순차적으로 스캔</td><td><code>INDEX(TABLE_name, INDEX_name)</code></td></tr><tr><td><code>INDEX_ASC</code></td><td><code>INDEX</code>를 내림차순으로 스캔.</td><td>_</td></tr><tr><td><code>INDEX_DESC</code></td><td><code>INDEX</code>를 오름차순으로 스캔.</td><td><code>INDEX_DESC(TABLE_name, INDEX_name)</code></td></tr><tr><td><code>INDEX_FFS</code></td><td><code>INDEX</code> FAST FULL SCAN</td><td><code>INDEX_FFS(TABLE_name, INDEX_name)</code></td></tr><tr><td><code>PARALLEL_INDEX</code></td><td><code>INDEX</code> PARALLEL SCAN</td><td><code>PARALLEL_INDEX(TABLE_name, INDEX_name)</code></td></tr><tr><td><code>NOPARALLEL_INDEX</code></td><td><code>INDEX</code> PARALLEL SCAN 제한</td><td><code>NOPARALLEL_INDEX(TABLE_name, INDEX_name)</code></td></tr><tr><td><code>AND_EQUALS</code></td><td>여러개의 <code>INDEX MARGE</code> 수행</td><td><code>AND_EQUALS(INDEX_name, INDEX_name)</code></td></tr><tr><td><code>FULL</code></td><td><code>FULL SCAN</code> 지정된 테이블에 대한 전체 스캔.</td><td><code>FULL(TABLE_name)</code></td></tr></tbody></table><h3 id="join-access-operator-related-hint" tabindex="-1"><a class="header-anchor" href="#join-access-operator-related-hint"><span><code>JOIN</code> Access Operator related HINT</span></a></h3><table><thead><tr><th>HINT</th><th>Description</th><th>Usage</th></tr></thead><tbody><tr><td><code>USE_NL</code></td><td>NESTED LOOP JOIN 옵티마이저가 NESTED LOOP JOIN을 사용하도록 한다. 먼저 특정 TABLE의 ROW에 액세스하고 그 값에 해당하는 다른 TABLE의 ROW를 찾는 작업을 해당범위까지 실행하는 조인.</td><td><code>USE_NL(TABLE1, TABLE2)</code></td></tr><tr><td><code>USE_NL_WITH_INDEX</code></td><td>INDEX를 사용해서 NESTED LOOP JOIN을 사용하도록 한다.</td><td><code>USE_NL_WITH_INDEX(TABLE INDEX)</code></td></tr><tr><td><code>USE_MERGE</code></td><td>SORT MERGE JOIN 옵티마이저가 SORT MERGE JOIN을 사용하도록 한다. 먼저 각각의 TABLE의 처리 범위를 스캔하여 SORT한 후, 서로 MERGE하면서 JOIN하는 방식.</td><td><code>USE_MERGE(TABLE1, TABLE2)</code></td></tr><tr><td><code>USE_HASH</code></td><td>HASH JOIN 옵티마이저가 HASH JOIN을 사용하도록 한다.</td><td><code>USE_HASH(TABLE1, TABLE2)</code></td></tr><tr><td><code>HASH_AJ</code></td><td>HASH ANTIJOIN</td><td><code>HASH_AJ(TABLE1, TABLE2)</code></td></tr><tr><td><code>HASH_SJ</code></td><td>HASH SEMIJOIN</td><td><code>HASH_SJ(TABLE1, TABLE2)</code></td></tr><tr><td><code>NL_AJ</code></td><td>NESTED LOOP ANTIJOIN</td><td><code>NL_AJ(TABLE1, TABLE2)</code></td></tr><tr><td><code>NL_SJ</code></td><td>NESTED LOOP SEMIJOIN</td><td><code>NL_SJ(TABLE1, TABLE2)</code></td></tr><tr><td><code>MERGE_AJ</code></td><td>SORT MERGE ANTIJOIN</td><td><code>MERGE_AJ(TABLE1, TABLE2)</code></td></tr><tr><td><code>MERGE_SJ</code></td><td>SORT MERGE SEMIJOIN</td><td><code>MERGE_SJ(TABLE1, TABLE2)</code></td></tr></tbody></table><h3 id="join시-driving-순서-결정-hint" tabindex="-1"><a class="header-anchor" href="#join시-driving-순서-결정-hint"><span><code>JOIN</code>시 DRIVING 순서 결정 HINT</span></a></h3><p>| HINT | Description | Usage | | <code>ORDERED</code> | FROM절에 명시된 테이블의 순서대로 DRIVING | _ | | <code>LEADING</code> | 파라미터에 명시된 테이블의 순서대로 JOIN | <code>LEAING(TABLE_name1, TABLE_name2, ...)</code> | | <code>DRIVING</code> | 해당 테이블을 먼저 DRIVING | <code>DRIVING(TABLE)</code> |</p><h3 id="misc-hint" tabindex="-1"><a class="header-anchor" href="#misc-hint"><span>Misc. HINT</span></a></h3><p>| HINT | Description | Usage | | <code>APPEND</code> | <code>INSERT</code>시 DIRECT LOADING | _ | | <code>PARALLEL</code> | <code>SELECT</code>, <code>INSERT</code>시 여러개의 프로세스로 수행 | <code>PARALLEL(TABLE, 개수)</code> | | <code>CACHE</code> | 데이터를 메모리에 CACHING | _ | | <code>NOCACHE</code> | 데이터를 메모리에 CACHING하지 않음 | _ | | <code>PUSH_SUBQ</code> | SUBQUERY를 먼저 수행 | _ | | <code>REWRITE</code> | QUERY REWRITE 수행 | _ | | <code>NOREWIRTE</code> | QUERY REWRITE를 수행 못함 | _ | | <code>USE_CONCAT</code> | IN절을 CONCATENATION ACCESS OPERATION으로 수행 | _ | | <code>USE_EXPAND</code> | IN절을 CONCATENATION ACCESS OPERATION으로 수행못하게 함 | _ | | <code>MERGE</code> | VIEW MERGING 수행 | _ | | <code>NO_MERGE</code> | VIEW MERGING 수행못하게 함 | _ | | <code>ALL_ROWS</code> | 가장 좋은 단위 처리량의 목표로 문 블록을 최적화하기 위해 cost-based 접근 방법을 선택합니다. (즉, 전체적인 최소의 자원 소비, 모든 레코드의 처리하는 시간의 최소화를 목적으로 최적화) | _ | | <code>FIRST_ROWS</code> | 가장 좋은 응답 시간의 목표로 문 블록을 최적화하기 위해 cost-based 접근 방법을 선택합니다. (첫번째 레코드의 추출 시간을 최소화할 목적으로 최적화) | _ | | <code>CHOOSE</code> | 최적자(optimizer)가 그 문에 의해 접근된 테이블을 위해 통계의 존재에 근거를 두는 SQL문을 위해 rule-based 접근 방법과 cost-based 접근 방법 사이에 선택하게 됩니다. | _ | | <code>CLUSTER</code> | 지정된 테이블에 대한 클러스터 스캔. | _ | | <code>HASH</code> | 지정된 테이블에 대한 해쉬 스캔. | _ | | <code>ROWID</code> | 지정된 테이블에 대한 ROWID에 의한 테이블 스캔. | _ | | <code>RULE</code> | explicitlly chooses rule-based optimization for a statement block. rule-base Optimizer를 사용 | _ |</p><hr><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references"><span>References</span></a></h2><ul><li>출처: <a href="http://annehouse.tistory.com/413" target="_blank" rel="noopener noreferrer">초록지붕의 앤</a></li><li>정리표 엑샐: <a href="http://wiki.gurubee.net/download/attachments/983183/HINT_Dictionray.xls?version=1" target="_blank" rel="noopener noreferrer">http://wiki.gurubee.net/download/attachments/983183/HINT_Dictionray.xls?version=1</a></li></ul>`,18);function I(s,_){const t=l("router-link");return p(),c("div",null,[e("h1",h,[e("a",N,[e("span",null,i(s.$frontmatter.title)+" 관련",1)])]),e("nav",m,[e("ul",null,[e("li",null,[n(t,{to:"#hint"},{default:a(()=>[d("Hint")]),_:1}),e("ul",null,[e("li",null,[n(t,{to:"#기본-사용예"},{default:a(()=>[d("기본 사용예")]),_:1})])])]),e("li",null,[n(t,{to:"#hint-유형"},{default:a(()=>[d("Hint 유형")]),_:1}),e("ul",null,[e("li",null,[n(t,{to:"#index-access-operation-related-hint"},{default:a(()=>[d("INDEX Access Operation related HINT")]),_:1})]),e("li",null,[n(t,{to:"#join-access-operator-related-hint"},{default:a(()=>[d("JOIN Access Operator related HINT")]),_:1})]),e("li",null,[n(t,{to:"#join시-driving-순서-결정-hint"},{default:a(()=>[d("JOIN시 DRIVING 순서 결정 HINT")]),_:1})]),e("li",null,[n(t,{to:"#misc-hint"},{default:a(()=>[d("Misc. HINT")]),_:1})])])]),e("li",null,[n(t,{to:"#references"},{default:a(()=>[d("References")]),_:1})])])]),u])}const L=o(E,[["render",I],["__file","03a.html.vue"]]),R=JSON.parse('{"path":"/misc/oracle-sql-db-tuning/03a.html","title":"03A","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"03A","description":"🙆‍♂️DB Server 성능 향상, 분석 및 튜닝 전문가 향상과정 > 03A","category":["Oracle DB"],"tag":["crashcourse","oracle","oracle-db","oracle-sql"],"head":[[{"meta":null},{"property":"og:title","content":"🙆‍♂️DB Server 성능 향상, 분석 및 튜닝 전문가 향상과정 > 03A"},{"property":"og:description","content":"03A"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/assets/misc/oracle-sql-db-tuning/03a.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/misc/oracle-sql-db-tuning/03a.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"03A"}],["meta",{"property":"og:description","content":"🙆‍♂️DB Server 성능 향상, 분석 및 튜닝 전문가 향상과정 > 03A"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"oracle"}],["meta",{"property":"article:tag","content":"oracle-db"}],["meta",{"property":"article:tag","content":"oracle-sql"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"03A\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Hint","slug":"hint","link":"#hint","children":[{"level":3,"title":"기본 사용예","slug":"기본-사용예","link":"#기본-사용예","children":[]}]},{"level":2,"title":"Hint 유형","slug":"hint-유형","link":"#hint-유형","children":[{"level":3,"title":"INDEX Access Operation related HINT","slug":"index-access-operation-related-hint","link":"#index-access-operation-related-hint","children":[]},{"level":3,"title":"JOIN Access Operator related HINT","slug":"join-access-operator-related-hint","link":"#join-access-operator-related-hint","children":[]},{"level":3,"title":"JOIN시 DRIVING 순서 결정 HINT","slug":"join시-driving-순서-결정-hint","link":"#join시-driving-순서-결정-hint","children":[]},{"level":3,"title":"Misc. HINT","slug":"misc-hint","link":"#misc-hint","children":[]}]},{"level":2,"title":"References","slug":"references","link":"#references","children":[]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":5}]},"readingTime":{"minutes":1.18,"words":355},"filePathRelative":"misc/oracle-sql-db-tuning/03a.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n<h2>Hint</h2>\\n<h3>기본 사용예</h3>\\n<div class=\\"language-sql line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"sql\\" data-title=\\"sql\\"><pre><code><span class=\\"line\\"><span class=\\"token keyword\\">SELECT</span> <span class=\\"token comment\\">/*+ INDEX(idx_col1) */</span> </span>\\n<span class=\\"line\\">  id<span class=\\"token punctuation\\">,</span> password<span class=\\"token punctuation\\">,</span> name</span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">FROM</span> </span>\\n<span class=\\"line\\">  emp<span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">SELECT</span> <span class=\\"token comment\\">/*+ ORDERED  INDEX(b idx_col1) */</span> </span>\\n<span class=\\"line\\">  id<span class=\\"token punctuation\\">,</span> password<span class=\\"token punctuation\\">,</span> name</span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">FROM</span></span>\\n<span class=\\"line\\">  emp a<span class=\\"token punctuation\\">,</span> depart b</span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{L as comp,R as data};
