import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,a as n,t as m,b as c,n as v,g,w as a,e as b,d as s,r as p,o as h}from"./app-U_bew1in.js";const f={},y={id:"frontmatter-title-관련",tabindex:"-1"},j={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"},_=n("hr",null,null,-1),S=b(`<h2 id="consider-static-factory-methods-instead-of-consturctors" tabindex="-1"><a class="header-anchor" href="#consider-static-factory-methods-instead-of-consturctors"><span>Consider static factory methods instead of consturctors</span></a></h2><p>클래스를 통해 객체를 만드는 일반적인 방법(<code>public</code> 생성자 이용)말고 또 다른 방법이 있다. 바로 <strong>public static factory method</strong>를 만드는 것이다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line highlighted"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Boolean</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> b <span class="token operator">?</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span> <span class="token operator">:</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="첫-번째-장점은-생성자와는-달리-정적-팩토리-메서드에는-이름-name-이-있다" tabindex="-1"><a class="header-anchor" href="#첫-번째-장점은-생성자와는-달리-정적-팩토리-메서드에는-이름-name-이-있다"><span>첫 번째 장점은, 생성자와는 달리 정적 팩토리 메서드에는 이름(<em>name</em>)이 있다</span></a></h3><p>생성자에 전달되는 인자(<code>parameter</code>)들은 어떤 객체가 생성되는지를 설명하지 못하지만, 정적 팩토리 메서드는 이름을 잘 짓기만 한다면 사용하기 쉽고, 클라이언트 코드의 가독성도 높아진다. 예를들어, 소수일 가능성이 높은 <code>BigInteger</code> 객체를 생성하는 생성자 <code>BigInteger(int, int, Random)</code>는 <code>BigInteger.probablePrime</code>과 같은 이름의 정적 팩토리 메서드로 표현했으면 더 이해하기 쉬웠을 것이다.</p><blockquote><p>이 메서드는 JDK 1.4 버전에 결국 추가됨</p></blockquote><p>같은 시그너처(메서드의 형태가 같은)를 갖는 생성자를 여러 개 정의할 필요가 있을 때는 그 생성자들을 정적 팩토리 메서드로 바꾸고, 메서드 이름을 보면 차이가 명확히 드러나도록 작명에 신경쓰자.</p><h3 id="두-번째-장점은-생성자와는-달리-호출할-때마다-새로운-객체를-생성할-필요가-없다" tabindex="-1"><a class="header-anchor" href="#두-번째-장점은-생성자와는-달리-호출할-때마다-새로운-객체를-생성할-필요가-없다"><span>두 번째 장점은, 생성자와는 달리 호출할 때마다 새로운 객체를 생성할 필요가 없다.</span></a></h3><p>앞서 살펴본 <code>Boolean.valueOf(Boolean)</code> 메서드는 이 기법을 활용한 좋은 사례다. 결코 객체를 생성하지 않는다. 동일한 객체가 요청되는 일이 잦고, 특히 객체를 만드는 비용이 클 때 적용하면 성능을 크게 개선할 수 있다.</p><h3 id="세-번째-장점은-생성자와는-달리-반환값-자료형-return-type-의-하위-자료형-객체-an-object-of-any-subtype-를-반환할-수-있다" tabindex="-1"><a class="header-anchor" href="#세-번째-장점은-생성자와는-달리-반환값-자료형-return-type-의-하위-자료형-객체-an-object-of-any-subtype-를-반환할-수-있다"><span>세 번째 장점은, 생성자와는 달리 반환값 자료형(<em>return type</em>)의 하위 자료형 객체(<em>an object of any subtype</em>)를 반환할 수 있다</span></a></h3><p>따라서 반환되는 클래스를 선택할 수 있는 유연함(flexibility)을 제공한다. 이걸 활용하면 <code>public</code>으로 선언되지 않은 클래스의 객체를 반환하는 API를 만들 수 있다. 그러면 구현 세부사항을 감출 수 있으므로 아주 간결한 API가 가능하다. 이 기법은 인터페이스 기반 프레임워크 (interface-based-framework) 구현에 적합한데, 이 프레임워크에서 인터페이스는 정적 팩토리 메서드의 반환값 자료형으로 이용된다. 인터페이스는 정적 메서드를 가질 수 없으므로 (Prior to Java 8, interfaces couldn&#39;t habve static methods), 관습상 반환값 자료형이 Type이라는 이름의 인터페이스인 정적 팩토리 메서드는 Types라는 이름의 객체 생성 불가능 클래스 안에 둔다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Collections</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Suppresses default constructor, ensuring non-instantiability.</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token class-name">Collections</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">synchronizedCollection</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">synchronizedCollection</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">,</span> <span class="token class-name">Object</span> mutex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> mutex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token doc-comment comment">/**</span>
<span class="line">   * <span class="token keyword">@serial</span> include</span>
<span class="line">   */</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedCollection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">3053995032091335093L</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">;</span>  <span class="token comment">// Backing Collection</span></span>
<span class="line">  <span class="token keyword">final</span> <span class="token class-name">Object</span> mutex<span class="token punctuation">;</span>   <span class="token comment">// Object on which to synchronize</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">SynchronizedCollection</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    mutex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>예를 들어, 자바의 컬렉션 프레임워크에는 45개의 컬렉션 인터페이스 구현체가 들어 있는데, 변경이 불가능한 컬렉션과 동기화된 (synchronized) 컬렉션 등이다. 이 구현체들 거의 전부는 <code>java.util.Collections</code>라는 객체 생성 불가능 클래스의 정적 팩토리 메서드를 통해 이요하는데, 반환되는 객체의 실제 클래스는 <code>public</code>이 아니다. 구현체별로 45개의 public 클래스들을 만들었다면 컬렉션 프레임워크 API의 규모는 더 커졌을 것이다.</p><p>인터페이스 기반 프레임워크 기법은 단순히 API 규모가 줄어든게 아니라 개념상의 무게감(conceptual weight)가 줄은 것이다. API 사용자는 반환된 객체가 인터페이스에 규정된 내용을 정확하게 따른다는 사실을 알고 있다. 또한 클라이언트가 구현된 클래스가 아닌 인터페이스를 참조해서 사용하게 되는데 일반적으로 좋은 습관이다.</p><div class="hint-container info"><p class="hint-container-title">3rd edition 추가</p><p>As of Java 8, the restriction that interfaces cannot contain <code>static</code> methods was eliminated, so there is typically little reason to provide a noninstantiable companion class for an interface. Many <code>public</code> static members that would have been at home in such a class should instead be put in the interface itself. <strong>Note, however that it may still be necessary to put the bulk of the implementation code behind these static methods in a separate package-private class</strong>. This is because Java 8 requires all static members of an interface to be <code>public</code>. Java 9 allows <code>private static</code> methods, but <code>static</code> fields and static member classes are still required to be <code>public</code>.</p><blockquote><p>자바8 부터는 인터페이스에 <code>static</code> 메서드를 포함시킬 수 없는 제약이 사라졌다. 그래서 <code>Collection</code> 인터페이스를 위해 <code>Collections</code> 같이 noninstantiable companion class를 제공할 이유가 줄었다. 그러나 여전히 인터페이스 대신에 별도의 클래스에 구현 코드를 뒤로 두는 것은 필요하다. 자바8 인터페이스의 <code>static</code> 멤버들이 다 <code>public</code>이기 때문이다. 그리고 인터페이스에 팩토리 메서드를 추가하면, 인터페이스에서 생성된 구현 클래스를 인터페이스가 직접 의존하게 된다. 개인적으로 인터페이스가 구현 클래스를 의존하는 방식이 좋아보이지 않는다. 자바9 부터는 <code>private static</code> 메서드를 허용하지만 <code>static</code> 필드들 and <code>static</code> 멤버 클래스는 여전히 <code>public</code>이다.</p></blockquote></div><p><strong>A fourth advantage of static factories is that the class of the returned object can vary from call to call as a fuction of the input parameters</strong></p><p>네번 째 장점은 정적 팩토리 메서드 인자에 따라 반환될 객체를 다양하게 할 수 있다. 메서드에 주어지는 인자를 이용하면 어떤 클래스의 객체를 만들지도 동적으로 결정할 수 있다. 반환될 객체의 클래스가 정적 팩토리 메서드의 반환값 자료형에 부합하기만 하면 된다. 릴리즈마다 반환되는 클래스가 달라질 수도 있다. <code>EnumSet</code>에는 <code>public</code> 생성자들이 없으며 정적 팩토리 메서드들 뿐이다.</p><p>OpenJDK 구현체에서 enum 상수 개수에 따라 두 개 구현체 가운데 하나를 골라 해당 클래스의 객체를 만들어 반환한다. enum 상수들이 64개 이하일 경우(대부분이 그렇다) 팩토리 메서드는 RegularEnumSet 객체를 반환하는데, 이 객체는 내부적으로 long 변수 하나만을 사용한다. enum 상수들이 64개보다 많을 경우에는 JumboEnumSet 객체를 반환하는데, 이 객체는 내부적으로 long 형의 배열을 사용한다.</p><p>클라이언트는 팩토리 메서드가 반환하는 객체의 실제 클래스를 알 수도 없고, 알 필요도 없다. 단지 EnumSet의 하위 클래스라는 사실만 중요할 뿐이다.</p><p><strong>A fifth advantage of static factories is that the class of the returned object need not exist when the class containing the method is written</strong></p><p>다섯번 째 장점은 정적 팩토리 메서드가 반환하는 객체의 클래스는 정적 팩토리 메서드가 정의된 클래스의 코드가 작성되는 순간에 존재하지 않아도 무방하다. JDBC와 같은 서비스 제공자 프레임워크의 근간을 이루는 것이 바로 유연한 정적 팩토리 메서드들이다.</p><figure><img src="https://1371820085-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-Lej4tgjCgS0Wyj6JGe2%2F-Lf3aFiJ5iI8PxEdUh03%2F-Lf3aSzuk-hjBobqZJt4%2Fserviceproviderframework.PNG?generation=1558076584392580&amp;alt=media" alt="서비스 제공자 프레임워크" tabindex="0" loading="lazy"><figcaption>서비스 제공자 프레임워크</figcaption></figure><p>Service Provider Framework는 세 가지의 핵심 컴포넌트로 구성된다.</p><ol><li>service interface: <code>Connection</code> (서비스 제공자가 구현한다).</li><li>provider registration api: <code>DriverManager.registerDriver</code> (구현체를 시스템에 등록하여 클라이언트가 쓸수 있도록 한다).</li><li>service access api: <code>DriverManager.getConnection</code> (클라이언트에게 실제 서비스 구현체를 제공한다).</li><li>service provider interface(option): <code>Driver</code> (서비스 제공자가 구현하고 서비스 구현체의 객체를 생성하기 위한 것이다. 서비스 제공자 인터페이스가 없는 경우 구현체는 클래스 이름으로 등록되며 자바의 리플렉션 기능을 통해 객체로 만들어진다.)</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  </span>
<span class="line"></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;jdbc:mysql://localhost:3306/jdbcTest&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">String</span> id <span class="token operator">=</span> <span class="token string">&quot;testid&quot;</span><span class="token punctuation">;</span>     </span>
<span class="line">  <span class="token class-name">String</span> pw <span class="token operator">=</span> <span class="token string">&quot;testpw&quot;</span><span class="token punctuation">;</span>     </span>
<span class="line">  <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.jdbc.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>id<span class="token punctuation">,</span>pw<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>서비스 제공자 인터페이스의 대략적인 모습</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 서비스 인터페이스 ex)Connection</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ... 서비스에 고유한 메서드들이 이 자리에 온다. </span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 서비스 제공자 인터페이스 ex) Driver (서비스 구현체의 객체를 생성하기 위한것) </span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Provider</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">Service</span> <span class="token function">newService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 서비스 등록과 접근에 사용되는 객체 생성 불가능 클래스 ex) DriverManager</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Services</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token class-name">Services</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 서비스 이름과 서비스 간 대응관계 보관</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Provider</span><span class="token punctuation">&gt;</span></span> providers <span class="token operator">=</span> </span>
<span class="line">  <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Provider</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DEFAULT_PROVIDER_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;&lt;def&gt;&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 제공자 등록 API ex) DriverManager.registerDriver</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">registerDefaultProvider</span><span class="token punctuation">(</span><span class="token class-name">Provider</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">registerProvider</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_PROVIDER_NAME</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">registerProvider</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Provider</span> p<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    providers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">//서비스 접근 API ex) DriverManager.getConnection</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Service</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_PROVIDER_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Service</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">Provider</span> p <span class="token operator">=</span> providers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;No provider registered with name: &quot;</span><span class="token operator">+</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">newService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>자바6부터 service provider framework를 지원하는 <code>ServiceLoader</code>가 지원된다. 그래서 직접 만들 필요는 없다. JDBC는 <code>ServiceLoader</code>보다 먼저 존재했기 때문에 <code>ServiceLoader</code>를 사용하지 않는다.</p><p><strong>정적 팩토리 메서드만 있는 클래스를 만들면 생기는 가장 큰 문제는, <code>public</code>이나 <code>protected</code>로 선언된 생성자가 없으므로 하위 클래스를 만들 수 없다는 것이다.</strong></p><p>예를 들어, <code>java.util.Collections</code>에 구현된 클래스들을 편하게 쓰기 위한 하위 클래스를 만들 수 없다. 그런데 이건 틀림없이 축복이 될 수 있다. 왜냐하면 상속보다는 구성(to use composition instead of inheritance)이 더 좋기 때문이다.</p><p><strong>두 번째 단점은 정적 팩토리 메서드가 다른 정적 메서드와 확연히 구분되지 않는다.</strong></p><p>지금으로선 클래스나 인터페이스 주석을 통해 정적 팩토리 메서드임을 널리 알리거나, 이름을 지을 때 조심하는 수밖에 없다. 보통 정적 팩토리 메서드의 이름으로는 다음과 같은 것들을 사용한다.</p>`,32),C=n("p",null,"A type-conversion method that takes a single parameter and returns a corresponding instance of this type",-1),A=n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token class-name"},"Date"),s(" d "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Date"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"from"),n("span",{class:"token punctuation"},"("),s("instant"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1),x=n("p",null,"형변환 메서드.",-1),I=n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token class-name"},"BigInteger"),s(" prime "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"BigInteger"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"valueOf"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Integer"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"MAX_VALUE"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1),T=n("p",null,[n("code",null,"valueOf"),s("를 더 간단하게 쓴것이다. "),n("code",null,"EnumSet"),s(" 덕분에 인기를 모은 이름이다.")],-1),E=n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token class-name"},"Set"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Rank"),n("span",{class:"token punctuation"},">")]),s(" faceCards "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"EnumSet"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"of"),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"JACK"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"QUEEN"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"KING"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1),P=n("p",null,"인자에 기술된 객체를 반환하지만, 인자와 같은 값을 갖지 않을 수도 있다. 싱글톤일 경우, 이 메서드는 인자 없이 항상 같은 객체를 반환한다.",-1),D=n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token class-name"},"StackWalker"),s(" luke "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"StackWalker"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getInstance"),n("span",{class:"token punctuation"},"("),s("options"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1),J=n("p",null,[n("code",null,"getInstance"),s("와 같지만 호출할 때마다 다른 객체를 반환한다.")],-1),L=n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token class-name"},"Object"),s(" newArray "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Array"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"newInstance"),n("span",{class:"token punctuation"},"("),s("classObject"),n("span",{class:"token punctuation"},","),s(" arrayLen"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1),q=n("p",null,[n("code",null,"getInstance"),s("와 같지만, 반환될 객체의 클래스와 다른 클래스에 팩토리 메서드가 있을 때 사용한다. "),n("code",null,"Type"),s("은 팩토리 메서드가 반환할 객체의 자료형이다.")],-1),F=n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token class-name"},"FileStore"),s(" fs "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Files"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getFileStore"),n("span",{class:"token punctuation"},"("),s("path"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1),B=n("p",null,[n("code",null,"newInstance"),s("와 같지만, 반환될 객체의 클래스와 다른 클래스에 팩토리 메서드가 있을 때 사용한다. "),n("code",null,"Type"),s("은 팩토리 메서드가 반환할 객체의 자료형이다.")],-1),M=n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token class-name"},"BufferedReader"),s(" br "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Files"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"newBufferedReader"),n("span",{class:"token punctuation"},"("),s("path"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1),O=n("p",null,[s("A concise alternative to "),n("code",null,"getType"),s(" and "),n("code",null,"newType")],-1),R=n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java","data-title":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"Complaint"),n("span",{class:"token punctuation"},">")]),s(" litany "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"Collections"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"list"),n("span",{class:"token punctuation"},"("),s("legacyLitany"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1),N=n("hr",null,null,-1),U=n("h2",{id:"요약",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#요약"},[n("span",null,"요약")])],-1),z=n("p",null,[s("정적 팩토리 메서드와 "),n("code",null,"public"),s(" 생성자는 용도가 서로 다르며, 정적 팩토리 메서드를 고려해 보지도 않고 무조건 "),n("code",null,"public"),s(" 생성자를 만드는 것은 삼가기 바란다.")],-1),K=n("hr",null,null,-1),V=n("hr",null,null,-1);function Z(l,G){const i=p("VPCard"),o=p("router-link"),u=p("SiteInfo"),r=p("Tabs");return h(),k("div",null,[n("h1",y,[n("a",j,[n("span",null,m(l.$frontmatter.title)+" 관련",1)])]),c(i,v(g({title:"목차",desc:"Effective Java",link:"/java/effective-java/README.md",logo:"https://81465973-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/spaces%2F-Lej4tgjCgS0Wyj6JGe2%2Favatar.png?generation=1557720343650540&alt=media",background:"rgba(31,31,31,0.2)"})),null,16),n("nav",w,[n("ul",null,[n("li",null,[c(o,{to:"#consider-static-factory-methods-instead-of-consturctors"},{default:a(()=>[s("Consider static factory methods instead of consturctors")]),_:1}),n("ul",null,[n("li",null,[c(o,{to:"#첫-번째-장점은-생성자와는-달리-정적-팩토리-메서드에는-이름-name-이-있다"},{default:a(()=>[s("첫 번째 장점은, 생성자와는 달리 정적 팩토리 메서드에는 이름(name)이 있다")]),_:1})]),n("li",null,[c(o,{to:"#두-번째-장점은-생성자와는-달리-호출할-때마다-새로운-객체를-생성할-필요가-없다"},{default:a(()=>[s("두 번째 장점은, 생성자와는 달리 호출할 때마다 새로운 객체를 생성할 필요가 없다.")]),_:1})]),n("li",null,[c(o,{to:"#세-번째-장점은-생성자와는-달리-반환값-자료형-return-type-의-하위-자료형-객체-an-object-of-any-subtype-를-반환할-수-있다"},{default:a(()=>[s("세 번째 장점은, 생성자와는 달리 반환값 자료형(return type)의 하위 자료형 객체(an object of any subtype)를 반환할 수 있다")]),_:1})])])]),n("li",null,[c(o,{to:"#요약"},{default:a(()=>[s("요약")]),_:1})])])]),_,c(u,{name:"객체의 생성과 삭제 | 양봉수 블로그",desc:"객체를 만들어야하는 시점과 그 방법, 객체 생성을 피해야 하는 경우와 그 방법, 적절한 순간에 객체가 삭제되도록 보장하는 방법, 그리고 삭제 전에 반드시 이루어져야 하는 청소 작업들을 관리하는 방법을 살펴본다.",url:"https://yangbongsoo.gitbook.io/study/effective-java/creating_and_destroying_objects",logo:"https://81465973-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/spaces%2F-Lej4tgjCgS0Wyj6JGe2%2Favatar.png?generation=1557720343650540&alt=media",preview:"https://yangbongsoo.gitbook.io/study/~gitbook/ogimage/-Lf3aHUKi8T1aUZM7Y49"}),S,c(r,{id:"125",data:[{id:"from(3rd edition 추가)"},{id:"valueOf"},{id:"of"},{id:"getInstance"},{id:"newInstance"},{id:"getType"},{id:"newType"},{id:"type(3rd edition 추가)"}],active:0},{title0:a(({value:e,isActive:t})=>[s("from(3rd edition 추가)")]),title1:a(({value:e,isActive:t})=>[s("valueOf")]),title2:a(({value:e,isActive:t})=>[s("of")]),title3:a(({value:e,isActive:t})=>[s("getInstance")]),title4:a(({value:e,isActive:t})=>[s("newInstance")]),title5:a(({value:e,isActive:t})=>[s("getType")]),title6:a(({value:e,isActive:t})=>[s("newType")]),title7:a(({value:e,isActive:t})=>[s("type(3rd edition 추가)")]),tab0:a(({value:e,isActive:t})=>[C,A]),tab1:a(({value:e,isActive:t})=>[x,I]),tab2:a(({value:e,isActive:t})=>[T,E]),tab3:a(({value:e,isActive:t})=>[P,D]),tab4:a(({value:e,isActive:t})=>[J,L]),tab5:a(({value:e,isActive:t})=>[q,F]),tab6:a(({value:e,isActive:t})=>[B,M]),tab7:a(({value:e,isActive:t})=>[O,R]),_:1}),N,U,z,K,V])}const Y=d(f,[["render",Z],["__file","01.html.vue"]]),Q=JSON.parse('{"path":"/java/effective-java/01.html","title":"규칙1 : 생성자 대신 정적 팩터리 메서드를 사용할 수 없는지 생각해보라","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"규칙1 : 생성자 대신 정적 팩터리 메서드를 사용할 수 없는지 생각해보라","description":"Effective Java > 규칙1 : 생성자 대신 정적 팩터리 메서드를 사용할 수 없는지 생각해보라","category":["Java"],"tag":["crashcourse","java","jdk","jdk8"],"head":[[{"meta":null},{"property":"og:title","content":"Effective Java > 규칙1 : 생성자 대신 정적 팩터리 메서드를 사용할 수 없는지 생각해보라"},{"property":"og:description","content":"규칙1 : 생성자 대신 정적 팩터리 메서드를 사용할 수 없는지 생각해보라"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/java/effective-java/01.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/java/effective-java/01.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"규칙1 : 생성자 대신 정적 팩터리 메서드를 사용할 수 없는지 생각해보라"}],["meta",{"property":"og:description","content":"Effective Java > 규칙1 : 생성자 대신 정적 팩터리 메서드를 사용할 수 없는지 생각해보라"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://yangbongsoo.gitbook.io/study/~gitbook/ogimage/-Lf3aHUKi8T1aUZM7Y49"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://yangbongsoo.gitbook.io/study/~gitbook/ogimage/-Lf3aHUKi8T1aUZM7Y49"}],["meta",{"name":"twitter:image:alt","content":"규칙1 : 생성자 대신 정적 팩터리 메서드를 사용할 수 없는지 생각해보라"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"jdk"}],["meta",{"property":"article:tag","content":"jdk8"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"규칙1 : 생성자 대신 정적 팩터리 메서드를 사용할 수 없는지 생각해보라\\",\\"image\\":[\\"https://1371820085-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-Lej4tgjCgS0Wyj6JGe2%2F-Lf3aFiJ5iI8PxEdUh03%2F-Lf3aSzuk-hjBobqZJt4%2Fserviceproviderframework.PNG?generation=1558076584392580&alt=media\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]],"isOriginal":false,"cover":"https://yangbongsoo.gitbook.io/study/~gitbook/ogimage/-Lf3aHUKi8T1aUZM7Y49"},"headers":[{"level":2,"title":"Consider static factory methods instead of consturctors","slug":"consider-static-factory-methods-instead-of-consturctors","link":"#consider-static-factory-methods-instead-of-consturctors","children":[{"level":3,"title":"첫 번째 장점은, 생성자와는 달리 정적 팩토리 메서드에는 이름(name)이 있다","slug":"첫-번째-장점은-생성자와는-달리-정적-팩토리-메서드에는-이름-name-이-있다","link":"#첫-번째-장점은-생성자와는-달리-정적-팩토리-메서드에는-이름-name-이-있다","children":[]},{"level":3,"title":"두 번째 장점은, 생성자와는 달리 호출할 때마다 새로운 객체를 생성할 필요가 없다.","slug":"두-번째-장점은-생성자와는-달리-호출할-때마다-새로운-객체를-생성할-필요가-없다","link":"#두-번째-장점은-생성자와는-달리-호출할-때마다-새로운-객체를-생성할-필요가-없다","children":[]},{"level":3,"title":"세 번째 장점은, 생성자와는 달리 반환값 자료형(return type)의 하위 자료형 객체(an object of any subtype)를 반환할 수 있다","slug":"세-번째-장점은-생성자와는-달리-반환값-자료형-return-type-의-하위-자료형-객체-an-object-of-any-subtype-를-반환할-수-있다","link":"#세-번째-장점은-생성자와는-달리-반환값-자료형-return-type-의-하위-자료형-객체-an-object-of-any-subtype-를-반환할-수-있다","children":[]}]},{"level":2,"title":"요약","slug":"요약","link":"#요약","children":[]}],"git":{"createdTime":1720075859000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":2.72,"words":816},"filePathRelative":"java/effective-java/01.md","localizedDate":"2024년 7월 4일","excerpt":"\\n"}');export{Y as comp,Q as data};
