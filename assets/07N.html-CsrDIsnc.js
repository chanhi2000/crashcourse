import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as e,t as p,b as n,n as u,g as m,d as s,e as o,r as t,o as k}from"./app-U_bew1in.js";const h={},b={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"},g=e("nav",{class:"table-of-contents"},[e("ul")],-1),_=e("hr",null,null,-1),f=e("p",null,[e("code",null,"ONBUILD"),s("는 생성한 이미지를 기반으로 다른 이미지가 생성될 때 명령을 실행(trigger)합니다. 최초에 "),e("code",null,"ONBUILD"),s("를 사용한 상태에서는 아무 명령도 실행하지 않습니다. 다음 번에 이미지가 "),e("code",null,"FROM"),s("으로 사용될 때 실행할 명령을 예약하는 기능이라 할 수 있습니다.")],-1),y=e("code",null,"Dockerfile",-1),N=o(`<div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line"><span class="token instruction"><span class="token keyword">ONBUILD</span> <span class="token keyword">RUN</span> touch /hello.txt</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">ONBUILD</span> <span class="token keyword">ADD</span> world.txt /world.txt</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),D=e("code",null,"ONBUILD <Dockerfile 명령> <Dockerfile 명령의 매개 변수>",-1),x=e("code",null,"FROM",-1),O=e("code",null,"MAINTAINER",-1),B=e("code",null,"ONBUILD",-1),I=e("code",null,"Dockerfile",-1),U=e("p",null,[e("code",null,"ONBUILD"),s("는 이미지를 생성한 뒤 해당 이미지를 기반으로 커스터마이징을 할 때 활용할 수 있습니다.")],-1),L=e("p",null,[s("다음과 같이 "),e("code",null,"ONBUILD"),s("를 사용하여 "),e("code",null,"RUN touch /hello.txt"),s("를 실행하도록 설정합니다.")],-1),w=e("code",null,"Dockerfile",-1),R=o(`<div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line"><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:latest</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">ONBUILD</span> <span class="token keyword">RUN</span> touch /hello.txt</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>docker build</code> 명령으로 <code>example</code> 이미지를 생성한 뒤 <code>docker run</code> 명령으로 컨테이너를 생성합니다. 컨테이너의 Bash 셸이 실행되면 <code>ls</code> 명령으로 <code>/</code>의 파일 목록을 출력합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> build <span class="token parameter variable">--tag</span> example <span class="token builtin class-name">.</span></span>
<span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-i</span> <span class="token parameter variable">-t</span> example /bin/bash</span>
<span class="line"><span class="token function">ls</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># bin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ONBUILD로 설정했기 때문에 <code>example</code> 이미지에는 <code>/hello.txt</code> 파일이 생성되지 않았습니다.</p><p>이제 FROM을 사용하여 <code>example</code> 이미지를 기반으로 새 이미지를 생성합니다.</p>`,5),T=e("code",null,"Dockerfile",-1),q=o(`<div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line">&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;FROM example</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>docker build</code> 명령으로 <code>example2</code> 이미지를 생성한 뒤 <code>docker run</code> 명령으로 컨테이너를 생성합니다. 컨테이너의 Bash 셸이 실행되면 <code>ls</code> 명령으로 <code>/</code>의 파일 목록을 출력합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> build <span class="token parameter variable">--tag</span> example2 <span class="token builtin class-name">.</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Sending build context to Docker daemon  2.048kB</span></span>
<span class="line"><span class="token comment"># Step 1/1 : FROM example</span></span>
<span class="line"><span class="token comment"># Executing 1 build trigger</span></span>
<span class="line"><span class="token comment">#  ---&gt; Running in 51affb087bfb</span></span>
<span class="line"><span class="token comment"># Removing intermediate container 51affb087bfb</span></span>
<span class="line"><span class="token comment">#  ---&gt; da3e74dad967</span></span>
<span class="line"><span class="token comment"># Successfully built da3e74dad967</span></span>
<span class="line"><span class="token comment"># Successfully tagged example2:latest</span></span>
<span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-i</span> <span class="token parameter variable">-t</span> example2 /bin/bash</span>
<span class="line"><span class="token function">ls</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># bin  boot  dev  etc  hello.txt  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>docker build</code> 명령을 실행할 때 <code># Executing 1 build triggers</code>라고 출력되고 그 아래부터 <code>ONBUILD</code>로 설정한 명령이 실행됩니다. 이제 <code>ONBUILD</code>를 통해 <code>example2</code> 이미지에 <code>/hello.txt</code> 파일이 생성되었습니다.</p><p><code>ONBUILD</code>는 바로 아래 자식 이미지를 생성할 때만 적용되고, 손자 이미지에는 적용되지 않습니다. 즉 <code>ONBUILD</code> 설정은 상속되지 않습니다.</p><div class="hint-container note"><p class="hint-container-title">참고</p><p><code>docker inspect</code> 명령으로 이미지의 <code>ONBUILD</code> 설정을 확인할 수 있습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> inspect <span class="token parameter variable">-f</span> <span class="token string">&quot;{{ .ContainerConfig.OnBuild }}&quot;</span> example</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># [RUN touch /hello.txt]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr>`,7);function M(l,S){const c=t("VPCard"),i=t("SiteInfo"),a=t("FontIcon");return k(),r("div",null,[e("h1",b,[e("a",v,[e("span",null,p(l.$frontmatter.title)+" 관련",1)])]),n(c,u(m({title:"목차",desc:"언제나 최신 Docker",link:"/docker/always-up-to-date-docker/README.md",logo:"https://pyrasis.com/assets/images/pyrasis.png",background:"rgba(31,41,55,0.2)"})),null,16),g,_,n(i,{name:"7장 - 14. ONBUILD",desc:"언제나 최신 Docker",url:"https://pyrasis.com/jHLsAlwaysUpToDateDocker/Unit07/14",logo:"https://pyrasis.com/assets/images/pyrasis.png",preview:"https://pyrasis.com/assets/images/profile1.png"}),f,e("blockquote",null,[e("p",null,[s("."),n(a,{icon:"fa-brands fa-docker"}),y])]),N,e("p",null,[D,s(" 형식입니다. "),x,s(", "),O,s(", "),B,s("를 제외한 모든 "),n(a,{icon:"fa-brands fa-docker"}),I,s(" 명령을 사용할 수 있습니다.")]),U,L,e("blockquote",null,[e("p",null,[s("."),n(a,{icon:"fa-brands fa-docker"}),w])]),R,e("blockquote",null,[e("p",null,[s("."),n(a,{icon:"fa-brands fa-docker"}),T])]),q])}const A=d(h,[["render",M],["__file","07N.html.vue"]]),C=JSON.parse('{"path":"/docker/always-up-to-date-docker/07N.html","title":"07N. ONBUILD","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"07N. ONBUILD","description":"언제나 최신 Docker > 07N. ONBUILD","category":["DevOps","Docker"],"tag":["crashcourse","pyrasis.com","docker","devops"],"head":[[{"meta":null},{"property":"og:title","content":"언제나 최신 Docker > 07N. ONBUILD"},{"property":"og:description","content":"07N. ONBUILD"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/docker/always-up-to-date-docker/07N.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/docker/always-up-to-date-docker/07N.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"07N. ONBUILD"}],["meta",{"property":"og:description","content":"언제나 최신 Docker > 07N. ONBUILD"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"pyrasis.com"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:published_time","content":"2022-10-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"07N. ONBUILD\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]],"next":"/docker/always-up-to-date-docker/08.md","date":"2022-10-03T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"createdTime":1716977950000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":3}]},"readingTime":{"minutes":1.13,"words":340},"filePathRelative":"docker/always-up-to-date-docker/07N.md","localizedDate":"2022년 10월 3일","excerpt":"\\n"}');export{A as comp,C as data};
