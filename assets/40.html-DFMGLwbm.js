import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,a as n,t as m,b as a,w as l,n as p,g as c,d as s,e,r,o as w}from"./app-U_bew1in.js";const f={},g={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"},b={class:"table-of-contents"},y=n("hr",null,null,-1),S=e('<h2 id="project-8-part-2" tabindex="-1"><a class="header-anchor" href="#project-8-part-2"><span>Project 8, part 2</span></a></h2><p>Today we&#39;re going to be working through the first part of our application, and in particular we&#39;re going to be getting our data right. I realize that data isn&#39;t terribly exciting, but as your skills grow you&#39;ll start to see how data really defines what your app can do – no matter what fancy designs you add, or what slick animations you introduce, if your data isn&#39;t right your app just won&#39;t work.</p><p>Along the way you&#39;re going to meet an important Swift feature called <em>generics</em>. This is a feature I definitely class as well outside of beginner Swift, but as you&#39;ll see generics let us create highly reusable code with only a little extra thinking.</p><p>Reusable code is important, because it helps us accomplish bigger and better results with less work. However, as Ralph Johnson once said, “before software can be reusable it first has to be usable” – as nice as generics are, we&#39;ll only start using them once we&#39;ve solved the problem the easier way first.</p><p><strong>Today you have three topics to work through, in which you&#39;ll get more hands-on experience with <code>Codable</code>, take generics for a test drive, and more.</strong></p><h3 id="loading-a-specific-kind-of-codable-data" tabindex="-1"><a class="header-anchor" href="#loading-a-specific-kind-of-codable-data"><span>Loading a specific kind of <code>Codable</code> data</span></a></h3>',6),x={class:"hint-container details"},_=n("summary",null,"Loading a specific kind of Codable data",-1),T=e(`<p>In this app we’re going to load two different kinds of JSON into Swift structs: one for astronauts, and one for missions. Making this happen in a way that is easy to maintain and doesn’t clutter our code takes some thinking, but we’ll work towards it step by step.</p><p>First, drag in the two JSON files for this project. These are available in the GitHub repository for this book, under “project8-files” – look for astronauts.json and missions.json, then drag them into your project navigator. While we’re adding assets, you should also copy all the images into your asset catalog – these are in the “Images” subfolder. The images of astronauts and mission badges were all created by NASA, so under Title 17, Chapter 1, Section 105 of the US Code they are available for us to use under a public domain license.</p><p>If you look in astronauts.json, you’ll see each astronaut is defined by three fields: an ID (“grissom”, “white”, “chaffee”, etc), their name (“Virgil I. &quot;Gus&quot; Grissom”, etc), and a short description that has been copied from Wikipedia. If you intend to use the text in your own shipping projects, it’s important that you give credit to Wikipedia and its authors and make it clear that the work is licensed under CC-BY-SA available from here: https://creativecommons.org/licenses/by-sa/3.0.</p><p>Let’s convert that astronaut data into a Swift struct now – press <kbd>Cmd</kbd>+<kbd>N</kbd> to make a new file, choose Swift file, then name it Astronaut.swift. Give it this code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Astronaut</span><span class="token punctuation">:</span> <span class="token class-name">Codable</span><span class="token punctuation">,</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> id<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">let</span> description<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, I’ve made that conform to <code>Codable</code> so we can create instances of this struct straight from JSON, but also <code>Identifiable</code> so we can use arrays of astronauts inside <code>ForEach</code> and more – that <code>id</code> field will do just fine.</p>`,6),j=n("code",null,"astronauts.json",-1),C=n("code",null,"Astronaut",-1),D=n("code",null,"Bundle",-1),I=n("code",null,"Data",-1),A=n("code",null,"JSONDecoder",-1),N=n("code",null,"ContentView",-1),q=n("code",null,"Bundle",-1),V=n("p",null,[s("Create another new Swift file, this time called Bundle-Decodable.swift. This will mostly use code you’ve seen before, but there’s one small difference: previously we used "),n("code",null,"String(contentsOf:)"),s(" to load files into a string, but because "),n("code",null,"Codable"),s(" uses "),n("code",null,"Data"),s(" we are instead going to use "),n("code",null,"Data(contentsOf:)"),s(". It works in just the same way as "),n("code",null,"String(contentsOf:):"),s(" give it a file URL to load, and it either returns its contents or throws an error.")],-1),B=n("code",null,"Bundle-Decodable.swift",-1),F=e(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">Bundle</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">decode</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> file<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token class-name">Astronaut</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">guard</span> <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>forResource<span class="token punctuation">:</span> file<span class="token punctuation">,</span> withExtension<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Failed to locate </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">file</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> in bundle.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">guard</span> <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token class-name">Data</span><span class="token punctuation">(</span>contentsOf<span class="token punctuation">:</span> url<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Failed to load </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">file</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> from bundle.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">let</span> decoder <span class="token operator">=</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">guard</span> <span class="token keyword">let</span> loaded <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token class-name">Astronaut</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> data<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Failed to decode </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">file</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> from bundle.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> loaded</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, that makes liberal use of <code>fatalError()</code>: if the file can’t be found, loaded, or decoded the app will crash. As before, though, this will never actually happen unless you’ve made a mistake, for example if you forgot to copy the JSON file into your project.</p><p>Now, you might wonder why we used an extension here rather than a method, but the reason is about to become clear as we load that JSON into our content view. Add this property to the <code>ContentView</code> struct now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> astronauts <span class="token operator">=</span> <span class="token class-name">Bundle</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;astronauts.json&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Yes, that’s all it takes. Sure, all we’ve done is just moved code out of <code>ContentView</code> and into an extension, but there’s nothing wrong with that – anything we can do to help our views stay small and focused is a good thing.</p><p>If you want to double check that your JSON is loaded correctly, modify the default text view to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">astronauts<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That should display 32 rather than “Hello World”.</p>`,8),R=n("h3",{id:"using-generics-to-load-any-kind-of-codable-data",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#using-generics-to-load-any-kind-of-codable-data"},[n("span",null,[s("Using generics to load any kind of "),n("code",null,"Codable"),s(" data")])])],-1),z={class:"hint-container details"},M=n("summary",null,"Using generics to load any kind of Codable data",-1),O=e(`<p>We added a <code>Bundle</code> extension for loading one specific type of JSON data from our app bundle, but now we have a second type: missions.json. This contains slightly more complex JSON:</p><ul><li>Every mission has an ID number, which means we can use <code>Identifiable</code> easily.</li><li>Every mission has a description, which is a free text string taken from Wikipedia.</li><li>Every mission has an array of crew, where each crew member has a name and role.</li><li>All but one missions has a launch date. Sadly, Apollo 1 never launched because a launch rehearsal cabin fire destroyed the command module and killed the crew.</li></ul><p>Let&#39;s start converting that to code. Crew roles need to be represented as their own struct, storing the name string and role string. So, create a new Swift file called Mission.swift and give it this code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">CrewRole</span><span class="token punctuation">:</span> <span class="token class-name">Codable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">let</span> role<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As for the missions, this will be an ID integer, an array of <code>CrewRole</code>, and a description string. But what about the launch date – we might have one, but we also might not have one. What should <em>that</em> be?</p><p>Well, think about it: how does Swift represent this “maybe, maybe not” elsewhere? How would we store “might be a string, might be nothing at all”? I hope the answer is clear: we use optionals. In fact, if we mark a property as optional <code>Codable</code> will automatically skip over it if the value is missing from our input JSON.</p><p>So, add this second struct to Mission.swift now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Mission</span><span class="token punctuation">:</span> <span class="token class-name">Codable</span><span class="token punctuation">,</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> id<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line">    <span class="token keyword">let</span> launchDate<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span></span>
<span class="line">    <span class="token keyword">let</span> crew<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">CrewRole</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">let</span> description<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Before we look at how to load JSON into that, I want to demonstrate one more thing: our <code>CrewRole</code> struct was made specifically to hold data about missions, and as a result we can actually put the <code>CrewRole</code> struct <em>inside</em> the <code>Mission</code> struct like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Mission</span><span class="token punctuation">:</span> <span class="token class-name">Codable</span><span class="token punctuation">,</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">CrewRole</span><span class="token punctuation">:</span> <span class="token class-name">Codable</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">        <span class="token keyword">let</span> role<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> id<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line">    <span class="token keyword">let</span> launchDate<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span></span>
<span class="line">    <span class="token keyword">let</span> crew<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">CrewRole</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">let</span> description<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is called a <em>nested struct</em>, and is simply one struct placed inside of another. This won&#39;t affect our code in this project, but elsewhere it&#39;s useful to help keep your code organized: rather than saying <code>CrewRole</code> you&#39;d write <code>Mission.CrewRole</code>. If you can imagine a project with several hundred custom types, adding this extra context can really help!</p><p>Now let&#39;s think about how we can load missions.json into an array of <code>Mission</code> structs. We already added a <code>Bundle</code> extension that loads some JSON file into a dictionary of <code>Astronaut</code> structs, so we could very easily copy and paste that, then tweak it so it loads missions rather than astronauts. However, there&#39;s a better solution: we can leverage Swift&#39;s generics system, which is an advanced feature we touched on lightly back in project 3.</p><p>Generics allow us to write code that is capable of working with a variety of different types. In this project, we wrote the <code>Bundle</code> extension to work with dictionary of astronauts, but really we want to be able to handle dictionaries of astronauts, arrays of missions, or potentially lots of other things.</p><p>To make a method generic, we give it a placeholder for certain types. This is written in angle brackets (<code>&lt;</code> and <code>&gt;</code>) after the method name but before its parameters, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">decode</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> file<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token class-name">Astronaut</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We can use anything for that placeholder – we could have written “Type”, “TypeOfThing”, or even “Fish”; it doesn&#39;t matter. “T” is a bit of a convention in coding, as a short-hand placeholder for “type”.</p><p>Inside the method, we can now use “T” everywhere we would use <code>[String: Astronaut]</code> – it is literally a placeholder for the type we want to work with. So, rather than returning <code>[String: Astronaut]</code> we would use this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">decode</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> file<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">T</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>Be very careful</strong>: There is a big difference between <code>T</code> and <code>[T]</code>. Remember, <code>T</code> is a placeholder for whatever type we ask for, so if we say “decode our dictionary of astronauts,” then <code>T</code> becomes <code>[String: Astronaut]</code>. If we attempt to return <code>[T]</code> from <code>decode()</code> then we would actually be returning <code>[[String: Astronaut]]</code> – an array of dictionaries of astronauts!</p><p>Towards the end of the <code>decode()</code> method there&#39;s another place where <code>[String: Astronaut]</code> is used:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">guard</span> <span class="token keyword">let</span> loaded <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token class-name">Astronaut</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> data<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Again, please change that to <code>T</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">guard</span> <span class="token keyword">let</span> loaded <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> data<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>So, what we&#39;ve said is that <code>decode()</code> will be used with some sort of type, such as <code>[String: Astronaut]</code>, and it should attempt to decode the file it has loaded to be that type.</p><p>If you try compiling this code, you&#39;ll see an error in Xcode: “Instance method &#39;decode(_:from:)&#39; requires that &#39;T&#39; conform to &#39;Decodable&#39;”. What it means is that <code>T</code> could be anything: it could be a dictionary of astronauts, or it could be a dictionary of something else entirely. The problem is that Swift can&#39;t be sure the type we&#39;re working with conforms to the <code>Codable</code> protocol, so rather than take a risk it&#39;s refusing to build our code.</p><p>Fortunately we can fix this with a <em>constraint</em>: we can tell Swift that <code>T</code> can be whatever we want, as long as that thing conforms to <code>Codable</code>. That way Swift knows it&#39;s safe to use, and will make sure we don&#39;t try to use the method with a type that <em>doesn&#39;t</em> conform to <code>Codable</code>.</p><p>To add the constraint, change the method signature to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">decode</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Codable</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> file<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">T</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you try compiling again, you&#39;ll see that things <em>still</em> aren&#39;t working, but now it&#39;s for a different reason: “Generic parameter &#39;T&#39; could not be inferred”, over in the <code>astronauts</code> property of <code>ContentView</code>. This line worked fine before, but there has been an important change now: before <code>decode()</code> would always return a dictionary of astronauts, but now it returns anything we want as long as it conforms to <code>Codable</code>.</p><p><em>We</em> know it will <em>still</em> return a dictionary of astronauts because the actual underlying data hasn&#39;t changed, but Swift <em>doesn&#39;t</em> know that. Our problem is that <code>decode()</code> can return any type that conforms to <code>Codable</code>, but Swift needs more information – it wants to know exactly what type it will be.</p><p>So, to fix this we need to use a type annotation so Swift knows exactly what <code>astronauts</code> will be:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> astronauts<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token class-name">Astronaut</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Bundle</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;astronauts.json&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Finally – after all that work! – we can now also load mission.json into another property in <code>ContentView</code>. Please add this below <code>astronauts</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> missions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Mission</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Bundle</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;missions.json&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And <em>that</em> is the power of generics: we can use the same <code>decode()</code> method to load any JSON from our bundle into any Swift type that conforms to <code>Codable</code> – we don&#39;t need half a dozen variants of the same method.</p><p>Before we&#39;re done, there&#39;s one last thing I&#39;d like to explain. Earlier you saw the message “Instance method &#39;decode(_:from:)&#39; requires that &#39;T&#39; conform to &#39;Decodable&#39;”, and you might have wondered what <code>Decodable</code> was – after all, we&#39;ve been using <code>Codable</code> everywhere. Well, behind the scenes, <code>Codable</code> is just an alias for two separate protocols: <code>Encodable</code> and <code>Decodable</code>. You can use <code>Codable</code> if you want, or you can use <code>Encodable</code> and <code>Decodable</code> if you prefer being specific – it&#39;s down to you.</p>`,36),W=n("h3",{id:"formatting-our-mission-view",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#formatting-our-mission-view"},[n("span",null,"Formatting our mission view")])],-1),U={class:"hint-container details"},J=n("summary",null,"Formatting our mission view",-1),L=n("p",null,"Now that we have all our data in place, we can look at the design for our first screen: a grid of all the missions, next to their mission badges.",-1),E=n("code",null,"Mission",-1),P=n("code",null,"id",-1),G=n("code",null,'"apollo\\(mission.id)"',-1),H=n("code",null,'"Apollo \\(mission.id)"',-1),Y=e(`<p>Here, though, we&#39;re going to take a different approach: we&#39;re going to add some computed properties to the <code>Mission</code> struct to send that same data back. The result will be the same – “apollo1” and “Apollo 1” – but now the code is in one place: our <code>Mission</code> struct. This means any other views can use the same data without having to repeat our string interpolation code, which in turn means if we change the way these things are formatted – i.e., we change the image names to “apollo-1” or something – then we can just change the property in <code>Mission</code> and have all our code update.</p><p>So, please add these two properties to the <code>Mission</code> struct now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> displayName<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Apollo </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">id</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> image<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;apollo</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">id</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With those two in place we can now take a first pass at filling in <code>ContentView</code>: it will have a <code>NavigationView</code> with a title, a <code>LazyVGrid</code> using our <code>missions</code> array as input, and each row inside there will be a <code>NavigationLink</code> containing the image, name, and launch date of the mission. The only small complexity in there is that our launch date is an optional string, so we need to use nil coalescing to make sure there&#39;s a value for the text view to display.</p><p>First, add this property to <code>ContentView</code> to define an adaptive column layout:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> columns <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token class-name">GridItem</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">adaptive</span><span class="token punctuation">(</span>minimum<span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And now replace your existing body property with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">NavigationView</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ScrollView</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">LazyVGrid</span><span class="token punctuation">(</span>columns<span class="token punctuation">:</span> columns<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">ForEach</span><span class="token punctuation">(</span>missions<span class="token punctuation">)</span> <span class="token punctuation">{</span> mission <span class="token keyword">in</span></span>
<span class="line">                <span class="token class-name">NavigationLink</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Detail view&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span> label<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token class-name">Image</span><span class="token punctuation">(</span>mission<span class="token punctuation">.</span>image<span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">                        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">                            <span class="token class-name">Text</span><span class="token punctuation">(</span>mission<span class="token punctuation">.</span>displayName<span class="token punctuation">)</span></span>
<span class="line">                                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span></span>
<span class="line">                            <span class="token class-name">Text</span><span class="token punctuation">(</span>mission<span class="token punctuation">.</span>launchDate <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;N/A&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>caption<span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">}</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">:</span> <span class="token punctuation">.</span>infinity<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Moonshot&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I know it looks pretty ugly, but we&#39;ll fix it right up in just a moment. First, let&#39;s focus on what we have so far: a scrolling, vertical grid that uses <code>resizable()</code>, <code>scaledToFit()</code>, and <code>frame()</code> to make the image occupy a 100x100 space while also maintaining its original aspect ratio.</p><p>Run the program now, and apart from the scrappy layout changes you&#39;ll notice the dates aren&#39;t great – although <em>we</em> can look at “1968-12-21” and understand it&#39;s the 21st of December 1968, it&#39;s still an unnatural date format for almost everyone. We can do better than this!</p><p>Swift&#39;s <code>JSONDecoder</code> type has a property called <code>dateDecodingStrategy</code>, which determines how it should decode dates. We can provide that with a <code>DateFormatter</code> instance that describes how our dates are formatted. In this instance, our dates are written as year-month-day, which in the world of <code>DateFormat</code> is written as “y-MM-dd” – that means “a year, then a dash, then a zero-padded month, then a dash, then a zero-padded day”, with “zero-padded” meaning that January is written as “01” rather than “1”. <code>Warning: Date formats are case sensitive!</code>mm<code>means “zero-padded minute” and</code>MM\` means “zero-padded month.”</p><p>So, open Bundle-Decodable.swift and add this code directly after <code>let decoder = JSONDecoder()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> formatter <span class="token operator">=</span> <span class="token class-name">DateFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">formatter<span class="token punctuation">.</span>dateFormat <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;y-MM-dd&quot;</span></span></span>
<span class="line">decoder<span class="token punctuation">.</span>dateDecodingStrategy <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span>formatter<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That tells the decoder to parse dates in the exact format we expect.</p><p>Tip: When working with dates it is often a good idea to be specific about your time zone, otherwise the user&#39;s own time zone is used when parsing the date and time. However, we&#39;re also going to be <em>displaying</em> the date in the user&#39;s time zone, so there&#39;s no problem here.</p><p>If you run the code now… things will look exactly the same. Yes, nothing has changed, but that&#39;s OK: nothing has changed because Swift doesn&#39;t realize that <code>launchDate</code> is a date. After all, we declared it like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> launchDate<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now that our decoding code understands how our dates are formatted, we can change that property to be an optional <code>Date</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> launchDate<span class="token punctuation">:</span> <span class="token class-name">Date</span><span class="token operator">?</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>…and now our code won&#39;t even compile!</p>`,20),K=n("em",null,"now",-1),Z=n("code",null,"ContentView.swift",-1),X=e(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span>mission<span class="token punctuation">.</span>launchDate <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;N/A&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That attempts to use an optional <code>Date</code> inside a text view, or replace it with “N/A” if the date is empty. This is another place where a computed property works better: we can ask the mission itself to provide a formatted launch date that converts the optional date into a neatly formatted string or sends back “N/A” for missing dates.</p><p>This uses the same <code>formatted()</code> method we&#39;ve used previously, so this should be somewhat familiar for you. Add this computed property to <code>Mission</code> now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> formattedLaunchDate<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    launchDate<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span>date<span class="token punctuation">:</span> <span class="token punctuation">.</span>abbreviated<span class="token punctuation">,</span> time<span class="token punctuation">:</span> <span class="token punctuation">.</span>omitted<span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;N/A&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And now replace the broken text view in ContentView with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span>mission<span class="token punctuation">.</span>formattedLaunchDate<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>With that change our dates will be rendered in a much more natural way, and, even better, will be rendered in whatever way is region-appropriate for the user – what you see isn&#39;t necessarily what I see.</p><p>Now let&#39;s focus on the bigger problem: our layout is pretty dull!</p><p>To spruce it up a little, I want to introduce you to two useful features: how to share custom app colors easily, and how to force a dark theme for our app.</p><p>First, colors. There are two ways to do this, and both are useful: you can add colors to your asset catalog with specific names, or you can add them as Swift extensions. They both have their advantages – using the asset catalog lets you work visually, but using code makes it easier to monitor changes using something like GitHub.</p><p>I&#39;m not a big fan of the way asset catalogs force us to use strings for color names, just like we do with image names, so we&#39;re going to take the alternative approach and place our color names into Swift as extensions.</p><p>If we make these extensions on <code>Color</code> we can use them in a handful of places in SwiftUI, but Swift gives us a better option with only a little more code. You see, <code>Color</code> conforms to a bigger protocol called <code>ShapeStyle</code> that is what lets us use colors, gradients, materials, and more as if they were the same thing.</p><p>This <code>ShapeStyle</code> protocol is what the <code>background()</code> modifier uses, so what we really want to do is extend <code>Color</code> but do so in a way that all the SwiftUI modifiers using <code>ShapeStyle</code> work too. This can be done with a very precise extension that literally says “we want to add functionality to <code>ShapeStyle</code>, but only for times when it&#39;s being used as a color.”</p>`,13),$=n("code",null,"Color-Theme.swift",-1),Q=e(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">ShapeStyle</span> <span class="token keyword">where</span> <span class="token keyword">Self</span> <span class="token operator">==</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> darkBackground<span class="token punctuation">:</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Color</span><span class="token punctuation">(</span>red<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span> green<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span> blue<span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> lightBackground<span class="token punctuation">:</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Color</span><span class="token punctuation">(</span>red<span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">,</span> green<span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">,</span> blue<span class="token punctuation">:</span> <span class="token number">0.3</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That adds two new colors called <code>darkBackground</code> and <code>lightBackground</code>, each with precise values for red, green, and blue. But more importantly they place those inside a very specific extension that allows us to use those colors everywhere SwiftUI expects a <code>ShapeStyle</code>.</p><p>I want to put those new colors into action immediately. First, find the <code>VStack</code> containing the mission name and launch date – it should already have <code>.frame(maxWidth: .infinity)</code> on there, but I&#39;d like you to change its modifier order to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>vertical<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">:</span> <span class="token punctuation">.</span>infinity<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>lightBackground<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, I want to make the <em>outer</em> <code>VStack</code> – the one that is the whole label for our <code>NavigationLink</code> – look more like a box in our grid, which means drawing a line around it and clipping the shape just a little. To get that effect, add these modifiers to the end of it:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">.</span>lightBackground<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Third, we need to add a little padding to get things away from their edges just a touch. That means adding some simple padding to the mission images, directly after their 100x100 frame:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Then also adding some horizontal and bottom padding to the grid:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">,</span> <span class="token punctuation">.</span>bottom<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Important: This should be added to the <code>LazyVGrid</code>, <em>not</em> to the <code>ScrollView</code>. If you pad the scroll view you&#39;re also padding its scrollbars, which will look odd.</p><p>Now we can replace the white background with the custom background color we created earlier – add this modifier to the <code>ScrollView</code>, after its <code>navigationTitle()</code> modifier:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>darkBackground<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>At this point our custom layout is almost done, but to finish up we&#39;re going to look at the remaining colors we have – the light blue color used for our mission text isn&#39;t great, and the “Moonshot” title is black at the top, which is impossible to read against our dark blue background.</p><p>We can fix the first of these by assigning specific colors to those two text fields:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span>mission<span class="token punctuation">.</span>displayName<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span>mission<span class="token punctuation">.</span>formattedLaunchDate<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>caption<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Using a translucent white for the foreground color allows just a hint of the color behind to come through.</p><p>As for the Moonshot title, that belongs to our <code>NavigationView</code>, and will appear either black or white depending on whether the user is in light mode or dark mode. To fix this, we can tell SwiftUI our view prefers to be in dark mode <em>always</em> – this will cause the title to be in white no matter what, and will also darken other colors such as navigation bar backgrounds.</p><p>So, to finish up the design for this view please add this final modifier to the <code>ScrollView</code>, below its background color:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">preferredColorScheme</span><span class="token punctuation">(</span><span class="token punctuation">.</span>dark<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you run the app now you&#39;ll see we have a beautifully scrolling grid of mission data that will smoothly adapt to a wide range of device sizes, we have bright white navigation text and a dark navigation background no matter what appearance the user has enabled, and tapping any of our missions will bring in a temporary detail view. A great start!</p>`,21),nn=n("hr",null,null,-1);function sn(u,an){const o=r("router-link"),i=r("VPCard"),d=r("VidStack"),t=r("FontIcon");return w(),k("div",null,[n("h1",g,[n("a",v,[n("span",null,m(u.$frontmatter.title)+" 관련",1)])]),n("nav",b,[n("ul",null,[n("li",null,[a(o,{to:"#project-8-part-2"},{default:l(()=>[s("Project 8, part 2")]),_:1}),n("ul",null,[n("li",null,[a(o,{to:"#loading-a-specific-kind-of-codable-data"},{default:l(()=>[s("Loading a specific kind of Codable data")]),_:1})]),n("li",null,[a(o,{to:"#using-generics-to-load-any-kind-of-codable-data"},{default:l(()=>[s("Using generics to load any kind of Codable data")]),_:1})]),n("li",null,[a(o,{to:"#formatting-our-mission-view"},{default:l(()=>[s("Formatting our mission view")]),_:1})])])])])]),y,a(i,p(c({title:"100 Days of SwiftUI - Day 40",desc:"Project 8, part 2",link:"https://www.hackingwithswift.com/100/swiftui/40",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),S,n("details",x,[_,a(i,p(c({title:"100 Days of SwiftUI - Day 40 - Loading a specific kind of Codable data",desc:"Loading a specific kind of Codable data",link:"https://hackingwithswift.com/books/ios-swiftui/loading-a-specific-kind-of-codable-data",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(d,{src:"youtube/1z9WsuxjZr0"}),T,n("p",null,[s("Next we want to convert "),a(t,{icon:"iconfont icon-json"}),j,s(" into a dictionary of "),C,s(" instances, which means we need to use "),D,s(" to find the path to the file, load that into an instance of "),I,s(", and pass it through a "),A,s(". Previously we put this into a method on "),N,s(", but here I’d like to show you a better way: we’re going to write an extension on "),q,s(" to do it all in one centralized place.")]),V,n("p",null,[s("Add this to "),a(t,{icon:"fa-brands fa-swift"}),B,s(" now:")]),F]),R,n("details",z,[M,a(i,p(c({title:"100 Days of SwiftUI - Day 40 - Using generics to load any kind of Codable data",desc:"Using generics to load any kind of Codable data",link:"https://hackingwithswift.com/books/ios-swiftui/using-generics-to-load-any-kind-of-codable-data",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(d,{src:"youtube/EBoTlP1mnhs"}),O]),W,n("details",U,[J,a(i,p(c({title:"100 Days of SwiftUI - Day 40 - Formatting our mission view",desc:"Formatting our mission view",link:"https://hackingwithswift.com/books/ios-swiftui/formatting-our-mission-view",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(d,{src:"youtube/kD8nolPczTc"}),L,n("p",null,[s("The assets we added earlier contain pictures named "),a(t,{icon:"fas fa-file-lines"}),s("“apollo1@2x.png” and similar, which means they are accessible in the asset catalog as “apollo1”, “apollo12”, and so on. Our "),E,s(" struct has an "),P,s(" integer providing the number part, so we could use string interpolation such as "),G,s(" to get our image name and "),H,s(" to get the formatted display name of the mission.")]),Y,n("p",null,[s("The problem "),K,s(" is this line of code in "),a(t,{icon:"fa-brands fa-swift"}),s(),Z,s(":")]),X,n("p",null,[s("To try this out, make a new Swift file called "),a(t,{icon:"fas fa-file-lines"}),s(),$,s(", and give it this code:")]),Q]),nn])}const on=h(f,[["render",sn],["__file","40.html.vue"]]),ln=JSON.parse('{"path":"/swift/100-days-of-swiftui/40.html","title":"Day 40","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 40","description":"100 Days of SwiftUI > Day 40","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 40"},{"property":"og:description","content":"Day 40"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/40.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/40.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 40"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 40"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 40\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 8, part 2","slug":"project-8-part-2","link":"#project-8-part-2","children":[{"level":3,"title":"Loading a specific kind of Codable data","slug":"loading-a-specific-kind-of-codable-data","link":"#loading-a-specific-kind-of-codable-data","children":[]},{"level":3,"title":"Using generics to load any kind of Codable data","slug":"using-generics-to-load-any-kind-of-codable-data","link":"#using-generics-to-load-any-kind-of-codable-data","children":[]},{"level":3,"title":"Formatting our mission view","slug":"formatting-our-mission-view","link":"#formatting-our-mission-view","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":9}]},"readingTime":{"minutes":14.13,"words":4238},"filePathRelative":"swift/100-days-of-swiftui/40.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{on as comp,ln as data};
