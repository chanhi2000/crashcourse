import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,a as s,t as b,b as t,w as n,n as k,g,d as e,e as r,r as p,o as f}from"./app-U_bew1in.js";const _={},w={id:"frontmatter-title-관련",tabindex:"-1"},x={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},A=s("hr",null,null,-1),F=s("hr",null,null,-1),C=s("p",null,[e("Now that you are familiar with basic "),s("code",null,"awk"),e(" syntax and regular expressions, this chapter will dive deep into field processing. You'll learn how to set input and output field separators, how to use regexps for defining fields and how to work with fixed length fields.")],-1),S={class:"hint-container info"},$=s("p",{class:"hint-container-title"},"Info",-1),j={href:"https://github.com/learnbyexample/learn_gnuawk/tree/master/example_files",target:"_blank",rel:"noopener noreferrer"},E=r(`<hr><h2 id="default-field-separation" tabindex="-1"><a class="header-anchor" href="#default-field-separation"><span>Default field separation</span></a></h2><p>As seen earlier, <code>awk</code> automatically splits input into fields which are accessible using <code>$N</code> where <code>N</code> is the field number you need. You can also pass an expression instead of a numeric literal to specify the field required.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> table.txt</span>
<span class="line"><span class="token comment"># brown bread mat hair 42</span></span>
<span class="line"><span class="token comment"># blue cake mug shirt -7</span></span>
<span class="line"><span class="token comment"># yellow banana window shoes 3.14</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),N=s("p",null,[e("print the fourth field if the first field starts with '"),s("code",null,"b"),e("'")],-1),T=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'$1 ~ /^b/{print $4}'"),e(" table.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# hair")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# shirt")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),I=s("p",null,[e("print the field as specified by the value stored in the '"),s("code",null,"f"),e("' variable")],-1),q=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"f"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"3"),e(),s("span",{class:"token string"},"'{print $f}'"),e(" table.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# mat")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# mug")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# window")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),O=s("p",null,[e("The "),s("code",null,"NF"),e(" special variable will give you the number of fields for each input line. This is useful when you don't know how many fields are present in the input and you need to process fields from the end.")],-1),D=s("p",null,"print the last field of each input line",-1),P=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'{print $NF}'"),e(" table.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 42")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# -7")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3.14")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),R=s("p",null,"print the last but one field",-1),z=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'{print $(NF-1)}'"),e(" table.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# hair")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# shirt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# shoes")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Q=s("p",null,"don't forget the parentheses! this will subtract 1 from the last field and print it",-1),L=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'{print $NF-1}'"),e(" table.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 41")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# -8")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 2.14")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),W=s("code",null,"awk",-1),H=s("strong",null,"space",-1),B=s("strong",null,"tab",-1),G=s("strong",null,"newline",-1),V=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'   a   b   c   '"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'{print NF}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),U=s("p",null,"note that the leading spaces aren't part of the field content",-1),M=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'   a   b   c   '"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'{print $1}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# a")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Y=s("p",null,"note that the trailing spaces aren't part of the field content",-1),Z=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'   a   b   c   '"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{print $NF "."}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# c.")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),J=s("p",null,"here's another example with tab characters thrown in",-1),K=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'     one \\t two\\t\\t\\tthree  '"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'{print NF}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'     one \\t two\\t\\t\\tthree  '"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{print $2 "."}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# two.")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),X={class:"hint-container warning"},ss=s("p",{class:"hint-container-title"},"Warning",-1),es=s("p",null,"When passing an expression for field number, floating-point result is acceptable too. The fractional portion is ignored. However, as precision is limited, it could result in rounding instead of truncation.",-1),ns=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{printf "%.16f\\n", 2.999999999999999}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 2.9999999999999991")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{printf "%.16f\\n", 2.9999999999999999}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3.0000000000000000")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),as=s("blockquote",null,[s("p",null,[e("same as: "),s("code",null,"awk '{print $2}' table.txt")])],-1),ls=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'{print $2.999999999999999}'"),e(" table.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# bread")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# cake")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# banana")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ts=s("blockquote",null,[s("p",null,[e("same as: "),s("code",null,"awk '{print $3}' table.txt")])],-1),is=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'{print $2.9999999999999999}'"),e(" table.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# mat")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# mug")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# window")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),cs=s("hr",null,null,-1),os=s("h2",{id:"input-field-separator",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#input-field-separator"},[s("span",null,"Input field separator")])],-1),rs=s("p",null,[e("The most common way to change the default field separator is to use the "),s("code",null,"-F"),e(" command line option. The value passed to the option will be treated as a string literal and then converted to a regexp. For now, here are some examples without any special regexp characters.")],-1),ps=s("p",null,[e("use '"),s("code",null,":"),e("' as the input field separator")],-1),ds=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'goal:amazing:whistle:kwality'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F: "),s("span",{class:"token string"},"'{print $1}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# goal")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'goal:amazing:whistle:kwality'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F: "),s("span",{class:"token string"},"'{print $NF}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# kwality")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),us=s("p",null,"use quotes to avoid clashes with shell special characters",-1),ms=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'one;two;three;four'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F"),s("span",{class:"token string"},"';'"),e(),s("span",{class:"token string"},"'{print $3}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# three")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),hs=s("p",null,"first and last fields will have empty string as their values",-1),vs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'=a=b=c='"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-F"),s("span",{class:"token operator"},"="),e(),s("span",{class:"token string"},`'{print $1 "[" $NF "]"}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# []")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),bs=s("p",null,"difference between empty lines and lines without field separator",-1),ks=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'\\nhello\\napple,banana\\n'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F, "),s("span",{class:"token string"},"'{print NF}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 0")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 2")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),gs=s("p",null,[e("You can also directly set the special "),s("code",null,"FS"),e(" variable to change the input field separator. This can be done from the command line using "),s("code",null,"-v"),e(" option or within the code blocks.")],-1),fs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'goal:amazing:whistle:kwality'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"FS"),s("span",{class:"token operator"},"="),e(": "),s("span",{class:"token string"},"'{print $2}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# amazing")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),_s=s("p",null,"field separator can be multiple characters too",-1),ws=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'1e4SPT2k6SPT3a5SPT4z0'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{FS="SPT"} {print $3}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3a5")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),xs=s("p",null,"If you wish to split the input as individual characters, use an empty string as the field separator.",-1),ys=s("p",null,[e("note that the space between "),s("code",null,"-F"),e(" and "),s("code",null,"''"),e(" is necessary here")],-1),As=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'apple'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-F"),e(),s("span",{class:"token string"},"''"),e(),s("span",{class:"token string"},"'{print $1}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# a")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'apple'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"FS"),s("span",{class:"token operator"},"="),e(),s("span",{class:"token string"},"'{print $NF}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# e")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Fs=s("p",null,"depending upon the locale, you can work with multibyte characters too",-1),Cs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'αλεπού'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"FS"),s("span",{class:"token operator"},"="),e(),s("span",{class:"token string"},"'{print $3}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ε")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ss=s("p",null,[e("Here are some examples with regexp based field separators. The value passed to "),s("code",null,"-F"),e(" or "),s("code",null,"FS"),e(" is treated as a string and then converted to a regexp. So, you'll need "),s("code",null,"\\\\"),e(" instead of "),s("code",null,"\\"),e(" to mean a backslash character. The good news is that for single characters that are also regexp metacharacters, they'll be treated literally and you do not need to escape them.")],-1),$s=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'Sample123string42with777numbers'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F"),s("span",{class:"token string"},"'[0-9]+'"),e(),s("span",{class:"token string"},"'{print $2}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# string")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'Sample123string42with777numbers'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F"),s("span",{class:"token string"},"'[a-zA-Z]+'"),e(),s("span",{class:"token string"},"'{print $2}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 123")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),js=s("p",null,[e("note the use of "),s("code",null,"\\\\W"),e(" to indicate "),s("code",null,"\\W")],-1),Es=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'load;err_msg--\\ant,r2..not'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F"),s("span",{class:"token string"},"'\\\\W+'"),e(),s("span",{class:"token string"},"'{print $3}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ant")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ns=s("blockquote",null,[s("p",null,[e("same as: "),s("code",null,"awk -F'\\\\.' '{print $2}'")])],-1),Ts=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'hi.bye.hello'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F. "),s("span",{class:"token string"},"'{print $2}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# bye")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Is=s("p",null,[e("count the number of vowels for each input line note that empty lines will give "),s("code",null,"s"),e(" in the output")],-1),qs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'cool\\nnice car\\n'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F"),s("span",{class:"token string"},"'[aeiou]'"),e(),s("span",{class:"token string"},"'{print NF-1}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 2")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Os={class:"hint-container warning"},Ds=s("p",{class:"hint-container-title"},"Warning",-1),Ps=s("p",null,[e("The default value of "),s("code",null,"FS"),e(" is a single space character. So, if you set the input field separator to a single space, then it will be the same as if you are using the default split discussed in the previous section. If you want to override this behavior, you can use space inside a character class.")],-1),Rs=s("blockquote",null,[s("p",null,[e("same as: "),s("code",null,"awk '{print NF}'")])],-1),zs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'   a   b   c   '"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F"),s("span",{class:"token string"},"' '"),e(),s("span",{class:"token string"},"'{print NF}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Qs=s("p",null,"there are 12 space characters, thus 13 fields",-1),Ls=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'   a   b   c   '"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F"),s("span",{class:"token string"},"'[ ]'"),e(),s("span",{class:"token string"},"'{print NF}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 13")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ws=s("p",null,[e("If "),s("code",null,"IGNORECASE"),e(" is set, it will affect field separation as well. Except when the field separator is a single character, which can be worked around by using a character class.")],-1),Hs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'RECONSTRUCTED'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F"),s("span",{class:"token string"},"'[aeiou]+'"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"IGNORECASE"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"1"),e(),s("span",{class:"token string"},"'{print $NF}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# D")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Bs=s("p",null,[e("when "),s("code",null,"FS"),e(" is a single character")],-1),Gs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'RECONSTRUCTED'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F"),s("span",{class:"token string"},"'e'"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"IGNORECASE"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"1"),e(),s("span",{class:"token string"},"'{print $1}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# RECONSTRUCTED")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'RECONSTRUCTED'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F"),s("span",{class:"token string"},"'[e]'"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"IGNORECASE"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"1"),e(),s("span",{class:"token string"},"'{print $1}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# R")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Vs=r('<hr><h2 id="output-field-separator" tabindex="-1"><a class="header-anchor" href="#output-field-separator"><span>Output field separator</span></a></h2><p>The <code>OFS</code> special variable controls the output field separator. <code>OFS</code> is used as the string between multiple arguments passed to the <code>print</code> function. It is also used whenever <code>$0</code> has to be reconstructed as a result of field contents being modified. The default value for <code>OFS</code> is a single space character, just like <code>FS</code>. There is no equivalent command line option though, you&#39;ll have to change <code>OFS</code> directly.</p>',3),Us=s("p",null,[e("print the first and third fields, "),s("code",null,"OFS"),e(" is used to join these values note the use of "),s("code",null,","),e(" to separate print arguments")],-1),Ms=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'{print $1, $3}'"),e(" table.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# brown mat")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# blue mug")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# yellow window")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ys=s("blockquote",null,[s("p",null,[e("same "),s("code",null,"FS"),e(" and "),s("code",null,"OFS")])],-1),Zs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'goal:amazing:whistle:kwality'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F: "),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"OFS"),s("span",{class:"token operator"},"="),e(": "),s("span",{class:"token string"},"'{print $2, $NF}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# amazing:kwality")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'goal:amazing:whistle:kwality'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{FS=OFS=":"} {print $2, $NF}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# amazing:kwality")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Js=s("p",null,[e("different values for "),s("code",null,"FS"),e(" and "),s("code",null,"OFS")],-1),Ks=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'goal:amazing:whistle:kwality'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F: "),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"OFS"),s("span",{class:"token operator"},"="),e("- "),s("span",{class:"token string"},"'{print $2, $NF}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# amazing-kwality")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Xs=s("p",null,[e("Here are some examples for changing field contents and then printing "),s("code",null,"$0"),e(".")],-1),se=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'goal:amazing:whistle:kwality'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F: "),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"OFS"),s("span",{class:"token operator"},"="),e(": "),s("span",{class:"token string"},"'{$2 = 42} 1'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# goal:42:whistle:kwality")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'goal:amazing:whistle:kwality'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F: "),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"OFS"),s("span",{class:"token operator"},"="),e(", "),s("span",{class:"token string"},"'{$2 = 42} 1'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# goal,42,whistle,kwality")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ee=s("p",null,"recall that spaces at the start/end gets trimmed for default F`S",-1),ne=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'   a   b   c   '"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{$NF = "last"} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# a b last")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ae=s("p",null,[e("Sometimes you want to print the contents of "),s("code",null,"$0"),e(" with the new "),s("code",null,"OFS"),e(" value but field contents aren't being changed. In such cases, you can assign a field value to itself to force the reconstruction of "),s("code",null,"$0"),e(".")],-1),le=s("p",null,[e("no change because there was no trigger to rebuild "),s("code",null,"$0")],-1),te=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'Sample123string42with777numbers'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F"),s("span",{class:"token string"},"'[0-9]+'"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"OFS"),s("span",{class:"token operator"},"="),e(", "),s("span",{class:"token string"},"'1'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Sample123string42with777numbers")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ie=s("p",null,"assign a field to itself in such cases",-1),ce=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'Sample123string42with777numbers'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F"),s("span",{class:"token string"},"'[0-9]+'"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"OFS"),s("span",{class:"token operator"},"="),e(", "),s("span",{class:"token string"},"'{$1=$1} 1'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Sample,string,with,numbers")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),oe={class:"hint-container info"},re=s("p",{class:"hint-container-title"},"Info",-1),pe=s("p",null,"If you need to set the same input and output field separator, you can write a more concise one-liner using brace expansion. Here are some examples:",-1),de=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(" -v"),s("span",{class:"token punctuation"},"{"),e(",O"),s("span",{class:"token punctuation"},"}"),e("FS"),s("span",{class:"token operator"},"="),e(":")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# -vFS=: -vOFS=:")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ue=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'goal:amazing:whistle:kwality'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -v"),s("span",{class:"token punctuation"},"{"),e(",O"),s("span",{class:"token punctuation"},"}"),e("FS"),s("span",{class:"token operator"},"="),e(": "),s("span",{class:"token string"},"'{$2 = 42} 1'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# goal:42:whistle:kwality")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),me=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'goal:amazing:whistle:kwality'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'{$2 = 42} 1'"),e(),s("span",{class:"token punctuation"},"{"),e(",O"),s("span",{class:"token punctuation"},"}"),e("FS"),s("span",{class:"token operator"},"="),e(":")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# goal:42:whistle:kwality")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),he=s("p",null,"However, this is not commonly used and doesn't save too many characters to be preferred over explicit assignment.",-1),ve=s("hr",null,null,-1),be=s("h2",{id:"manipulating-nf",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#manipulating-nf"},[s("span",null,[e("Manipulating "),s("code",null,"NF")])])],-1),ke=s("p",null,[e("Changing the value of "),s("code",null,"NF"),e(" will rebuild "),s("code",null,"$0"),e(" as well. Here are some examples:")],-1),ge=s("p",null,"reducing fields",-1),fe=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'goal:amazing:whistle:kwality'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F: "),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"OFS"),s("span",{class:"token operator"},"="),e(", "),s("span",{class:"token string"},"'{NF=2} 1'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# goal,amazing")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),_e=s("p",null,"increasing fields",-1),we=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'goal:amazing:whistle:kwality'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F: "),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"OFS"),s("span",{class:"token operator"},"="),e(": "),s("span",{class:"token string"},`'{$(NF+1)="sea"} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# goal:amazing:whistle:kwality:sea")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),xe=s("p",null,"empty fields will be created as needed",-1),ye=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'goal:amazing:whistle:kwality'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F: "),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"OFS"),s("span",{class:"token operator"},"="),e(": "),s("span",{class:"token string"},`'{$8="go"} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# goal:amazing:whistle:kwality::::go")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ae=r(`<div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Assigning <code>NF</code> to <code>0</code> will delete all the fields. However, a negative value will result in an error.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;goal:amazing:whistle:kwality&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> -F: <span class="token parameter variable">-v</span> <span class="token assign-left variable">OFS</span><span class="token operator">=</span>: <span class="token string">&#39;{NF=-1} 1&#39;</span></span>
<span class="line"><span class="token comment"># awk: cmd. line:1: (FILENAME=- FNR=1) fatal: NF set to negative value</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="fpat" tabindex="-1"><a class="header-anchor" href="#fpat"><span>FPAT</span></a></h2><p>The FS variable allows you to define the input field separator. In contrast, FPAT (field pattern) allows you to define what should the fields be made up of.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div></div>`,5),Fe=s("p",null,"one or more consecutive digits",-1),Ce=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'Sample123string42with777numbers'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"FPAT"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'[0-9]+'"),e(),s("span",{class:"token string"},"'{print $2}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 42")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Se=s("p",null,"whole words made up of lowercase alphabets and digits only",-1),$e=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'coat Bin food tar12 best Apple fig_42'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"FPAT"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'\\\\<[a-z0-9]+\\\\>'"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"OFS"),s("span",{class:"token operator"},"="),e(", "),s("span",{class:"token string"},"'{$1=$1} 1'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# coat,food,tar12,best")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),je=s("p",null,"get the first double quoted item",-1),Ee=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},`'items: "apple" and "mango"'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"FPAT"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},`'"[^"]+"'`),e(),s("span",{class:"token string"},"'{print $1}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},'# "apple"')]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ne=r(`<p><code>FPAT</code> is often used for CSV input where fields can contain embedded delimiter characters. For example, a field content <code>&quot;fox,42&quot;</code> when <code>s</code> is the delimiter.</p><blockquote><p>simply using <code>,</code> as separator isn&#39;t sufficient</p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token string">&#39;eagle,&quot;fox,42&quot;,bee,frog&#39;</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$s</span>&quot;</span> <span class="token operator">|</span> <span class="token function">awk</span> -F, <span class="token string">&#39;{print $2}&#39;</span></span>
<span class="line"><span class="token comment"># &quot;fox</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For such simpler CSV input, FPAT helps to define fields as starting and ending with double quotes or containing non-comma characters.</p><blockquote><p><code>*</code> is used instead of <code>+</code> to allow empty fields</p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$s</span>&quot;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token parameter variable">-v</span> <span class="token assign-left variable">FPAT</span><span class="token operator">=</span><span class="token string">&#39;&quot;[^&quot;]*&quot;|[^,]*&#39;</span> <span class="token string">&#39;{print $2}&#39;</span></span>
<span class="line"><span class="token comment"># &quot;fox,42&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,6),Te={class:"hint-container warning"},Ie=s("p",{class:"hint-container-title"},"Warning",-1),qe=s("a",{href:"https://stackoverflow.com/q/45420535/4082052",target:"_blank",rel:"noopener noreferrer"},"stackoverflow: What's the most robust way to efficiently parse CSV using awk?",-1),Oe={href:"https://github.com/dbro/csvquote",target:"_blank",rel:"noopener noreferrer"},De={href:"https://github.com/BurntSushi/xsv",target:"_blank",rel:"noopener noreferrer"},Pe={class:"hint-container info"},Re=s("p",{class:"hint-container-title"},"Info",-1),ze={href:"https://github.com/ezrosent/frawk",target:"_blank",rel:"noopener noreferrer"},Qe=s("code",null,"awk",-1),Le={href:"https://github.com/benhoyt/goawk",target:"_blank",rel:"noopener noreferrer"},We=r(`<p>If <code>IGNORECASE</code> is set, it will affect field matching as well. Unlike <code>FS</code>, there is no different behavior for a single character pattern.</p><blockquote><p>count number of &#39;e&#39; in the input string</p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;Read Eat Sleep&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token parameter variable">-v</span> <span class="token assign-left variable">FPAT</span><span class="token operator">=</span><span class="token string">&#39;e&#39;</span> <span class="token string">&#39;{print NF}&#39;</span></span>
<span class="line"><span class="token comment"># 3</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;Read Eat Sleep&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token parameter variable">-v</span> <span class="token assign-left variable">IGNORECASE</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">-v</span> <span class="token assign-left variable">FPAT</span><span class="token operator">=</span><span class="token string">&#39;e&#39;</span> <span class="token string">&#39;{print NF}&#39;</span></span>
<span class="line"><span class="token comment"># 4</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;Read Eat Sleep&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token parameter variable">-v</span> <span class="token assign-left variable">IGNORECASE</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">-v</span> <span class="token assign-left variable">FPAT</span><span class="token operator">=</span><span class="token string">&#39;[e]&#39;</span> <span class="token string">&#39;{print NF}&#39;</span></span>
<span class="line"><span class="token comment"># 4</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="fieldwidths" tabindex="-1"><a class="header-anchor" href="#fieldwidths"><span>FIELDWIDTHS</span></a></h2><p><code>FIELDWIDTHS</code> is another feature where you get to define field contents. As indicated by the name, you have to specify the number of characters for each field. This method is useful to process fixed width data.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> items.txt</span>
<span class="line"><span class="token comment"># apple   fig banana</span></span>
<span class="line"><span class="token comment"># 50      10  200</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),He=s("p",null,"here field widths have been assigned such that extra spaces are placed at the end of each field",-1),Be=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"FIELDWIDTHS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'8 4 6'"),e(),s("span",{class:"token string"},"'{print $2}'"),e(" items.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# fig ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 10  ")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ge=s("p",null,"note that the field contents will include the spaces as well",-1),Ve=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"FIELDWIDTHS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'8 4 6'"),e(),s("span",{class:"token string"},`'{print "[" $2 "]"}'`),e(" items.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [fig ]")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [10  ]")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ue=s("p",null,"You can optionally prefix a field width with number of characters to be ignored.",-1),Me=s("p",null,"first field is 5 characters then 3 characters are ignored and 3 characters for the second field then 1 character is ignored and 6 characters for the third field",-1),Ye=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"FIELDWIDTHS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'5 3:3 1:6'"),e(),s("span",{class:"token string"},`'{print "[" $1 "]"}'`),e(" items.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [apple]")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [50   ]")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ze=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"FIELDWIDTHS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'5 3:3 1:6'"),e(),s("span",{class:"token string"},`'{print "[" $2 "]"}'`),e(" items.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [fig]")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [10 ]")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Je=s("p",null,[e("If an input line length exceeds the total width specified, the extra characters will simply be ignored. If you wish to access those characters, you can use "),s("code",null,"*"),e(" to represent the last field. See "),s("a",{href:"https://www.gnu.org/software/gawk/manual/gawk.html#Fields-with-fixed-data",target:"_blank",rel:"noopener noreferrer"},"gawk manual: FIELDWIDTHS"),e(" for more such corner cases.")],-1),Ke=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"FIELDWIDTHS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'5 *'"),e(),s("span",{class:"token string"},`'{print "[" $1 "]"}'`),e(" items.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [apple]")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [50   ]")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Xe=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"FIELDWIDTHS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'5 *'"),e(),s("span",{class:"token string"},`'{print "[" $2 "]"}'`),e(" items.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [   fig banana]")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [   10  200]")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),sn=r('<hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>Working with fields is the most popular feature of <code>awk</code>. This chapter discussed various ways in which you can split the input into fields and manipulate them. There are many more examples to be discussed related to fields in the coming chapters. I&#39;d highly suggest to also read through <a href="https://www.gnu.org/software/gawk/manual/gawk.html#Fields" target="_blank" rel="noopener noreferrer">gawk manual: Fields</a> for more details regarding field processing.</p><p>Next chapter will discuss various ways to use record separators and related special variables.</p><hr><h2 id="exercises" tabindex="-1"><a class="header-anchor" href="#exercises"><span>Exercises</span></a></h2>',6),en={class:"hint-container info"},nn=s("p",{class:"hint-container-title"},"Info",-1),an={href:"https://github.com/learnbyexample/learn_gnuawk/tree/master/exercises",target:"_blank",rel:"noopener noreferrer"},ln=s("h3",{id:"exercise-1",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-1"},[s("span",null,"Exercise 1")])],-1),tn=s("code",null,"brackets.txt",-1),cn=s("code",null,"()",-1),on=s("code",null,")(",-1),rn=s("code",null,"()",-1),pn=r(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> brackets.txt</span>
<span class="line"><span class="token comment"># foo blah blah(ice) 123 xyz$ </span></span>
<span class="line"><span class="token comment"># (almond-pista) choco</span></span>
<span class="line"><span class="token comment"># yo )yoyo( yo</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),dn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ice")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# almond-pista")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# yoyo")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),un=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(" -F"),s("span",{class:"token string"},"'[()]'"),e(),s("span",{class:"token string"},"'{print $2}'"),e(" brackets.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ice")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# almond-pista")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# yoyo")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),mn=s("h3",{id:"exercise-2",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-2"},[s("span",null,"Exercise 2")])],-1),hn=s("code",null,"scores.csv",-1),vn=r(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> scores.csv</span>
<span class="line"><span class="token comment"># Name,Maths,Physics,Chemistry</span></span>
<span class="line"><span class="token comment"># Blue,67,46,99</span></span>
<span class="line"><span class="token comment"># Lin,78,83,80</span></span>
<span class="line"><span class="token comment"># Er,56,79,92</span></span>
<span class="line"><span class="token comment"># Cy,97,98,95</span></span>
<span class="line"><span class="token comment"># Ort,68,72,66</span></span>
<span class="line"><span class="token comment"># Ith,100,100,100</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),bn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Name:Physics")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Blue:46")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Lin:83")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Er:79")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Cy:98")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Ort:72")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Ith:100")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),kn=s("blockquote",null,[s("p",null,[e("can also use: "),s("code",null,`awk -F, '{print $1 ":" $3}' scores.csv`)])],-1),gn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(" -F, "),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"OFS"),s("span",{class:"token operator"},"="),e(": "),s("span",{class:"token string"},"'{print $1, $3}'"),e(" scores.csv")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Name:Physics")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Blue:46")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Lin:83")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Er:79")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Cy:98")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Ort:72")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Ith:100")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),fn=s("h3",{id:"exercise-3",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-3"},[s("span",null,"Exercise 3")])],-1),_n=s("code",null,"scores.csv",-1),wn=r(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> scores.csv</span>
<span class="line"><span class="token comment"># Name,Maths,Physics,Chemistry</span></span>
<span class="line"><span class="token comment"># Blue,67,46,99</span></span>
<span class="line"><span class="token comment"># Lin,78,83,80</span></span>
<span class="line"><span class="token comment"># Er,56,79,92</span></span>
<span class="line"><span class="token comment"># Cy,97,98,95</span></span>
<span class="line"><span class="token comment"># Ort,68,72,66</span></span>
<span class="line"><span class="token comment"># Ith,100,100,100</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),xn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Lin")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Cy")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Ith")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),yn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(" -F, "),s("span",{class:"token string"},"'+$2>70{print $1}'"),e(" scores.csv")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Lin")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Cy")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Ith")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),An=s("h3",{id:"exercise-4",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-4"},[s("span",null,"Exercise 4")])],-1),Fn=s("p",null,"Display the number of word characters for the given inputs. Word definition here is same as used in regular expressions. Can you construct a solution with gsub and one without substitution functions?",-1),Cn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'hi there'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 7")]),e(`
`),s("span",{class:"line"}),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},`'u-no;co%."(do_12:as'`),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 12")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Sn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'hi there'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{print gsub(/\\w/, "")}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 7")]),e(`
`),s("span",{class:"line"}),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},`'u-no;co%."(do_12:as'`),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F"),s("span",{class:"token string"},"'\\\\w'"),e(),s("span",{class:"token string"},"'{print NF-1}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 12")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),$n=s("p",null,[s("strong",null,"Note"),e(" that the first solution will print "),s("code",null,"0"),e(" for lines not containing any word character, while the second one will print "),s("code",null,"-1"),e(". You can use "),s("code",null,"print NF ? NF-1 : 0"),e(" to cover such corner cases.")],-1),jn=s("h3",{id:"exercise-5",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-5"},[s("span",null,"Exercise 5")])],-1),En=s("code",null,"quoted.txt",-1),Nn=r(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> quoted.txt</span>
<span class="line"><span class="token comment"># 1 &quot;grape&quot; and &quot;mango&quot; and &quot;guava&quot;</span></span>
<span class="line"><span class="token comment"># (&quot;a 1&quot;&quot;b&quot;&quot;c-2&quot;&quot;d&quot;)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Tn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},'# "grape","guava"')]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},'# "a 1","c-2"')]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),In=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"FPAT"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},`'"[^"]+"'`),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"OFS"),s("span",{class:"token operator"},"="),e(", "),s("span",{class:"token string"},"'{print $1, $3}'"),e(" quoted.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},'# "grape'),s("span",{class:"token string"},'","'),e("guava"),s("span",{class:"token string"},'"'),e(`
`),s("span",{class:"line"},'# "'),e("a "),s("span",{class:"token number"},"1"),s("span",{class:"token string"},'","'),e('c-2"')]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),qn=s("h3",{id:"exercise-6",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-6"},[s("span",null,"Exercise 6")])],-1),On=s("code",null,"varying_fields.txt",-1),Dn=r(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> varying_fields.txt</span>
<span class="line"><span class="token comment"># hi,bye,there,was,here,to</span></span>
<span class="line"><span class="token comment"># 1,2,3,4,5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Pn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# hi,bye,to")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1,2,5")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Rn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(" -F, "),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"OFS"),s("span",{class:"token operator"},"="),e(", "),s("span",{class:"token string"},"'{$3=$NF; NF=3} 1'"),e(" varying_fields.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# hi,bye,to")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1,2,5")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),zn=s("h3",{id:"exercise-7",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-7"},[s("span",null,"Exercise 7")])],-1),Qn=s("code",null,"fw.txt",-1),Ln=s("em",null,"i.e.",-1),Wn=r(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> fw.txt</span>
<span class="line"><span class="token comment"># 1.3  rs   90  0.134563</span></span>
<span class="line"><span class="token comment"># 3.8           6</span></span>
<span class="line"><span class="token comment"># 5.2  ye       8.2387</span></span>
<span class="line"><span class="token comment"># 4.2  kt   32  45.1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Hn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1.3,rs,0.134563")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3.8,NA,6")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 5.2,ye,8.2387")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 4.2,kt,45.1")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Bn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"FIELDWIDTHS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'3 2:2 3:2 2:*'"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"OFS"),s("span",{class:"token operator"},"="),e(", "),s("span",{class:"token string"},`'$2=="  "{$2="NA"} {print $1, $2, $4}'`),e(" fw.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token number"},"1.3"),e(",rs,0.134563")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token number"},"3.8"),e(",NA,6")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token number"},"5.2"),e(",ye,8.2387")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token number"},"4.2"),e(",kt,45.1")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Gn=s("h3",{id:"exercise-8",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-8"},[s("span",null,"Exercise 8")])],-1),Vn=s("p",null,"Display only the third and fifth characters from each input line as shown below.",-1),Un=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'restore\\ncat one\\ncricket'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# so")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# to")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ik")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Mn=s("blockquote",null,[s("p",null,[e("can also use: "),s("code",null,"awk '{print substr($0, 3, 1) substr($0, 5, 1)}'")])],-1),Yn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'restore\\ncat one\\ncricket'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-F"),e(),s("span",{class:"token string"},"''"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"OFS"),s("span",{class:"token operator"},"="),e(),s("span",{class:"token string"},"'{print $3, $5}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# so")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# to")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ik")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Zn=s("h3",{id:"exercise-9",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-9"},[s("span",null,"Exercise 9")])],-1),Jn=s("code",null,"fields.txt",-1),Kn=s("code",null,":",-1),Xn=s("code",null,":",-1),sa=r(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> fields.txt</span>
<span class="line"><span class="token comment"># 42:cat</span></span>
<span class="line"><span class="token comment"># twelve:a2b</span></span>
<span class="line"><span class="token comment"># we:be:he:0:a:b:bother</span></span>
<span class="line"><span class="token comment"># apple:banana-42:cherry:</span></span>
<span class="line"><span class="token comment"># dragon:unicorn:centaur</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),ea=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 42")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# twelve:a2b")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# we:be:he:0:a:b")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# apple:banana-42:cherry")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# dragon:unicorn:centaur")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),na=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(" -F: "),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"OFS"),s("span",{class:"token operator"},"="),e(": "),s("span",{class:"token string"},"'/[0-9].*:/{NF--} 1'"),e(" fields.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 42")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# twelve:a2b")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# we:be:he:0:a:b")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# apple:banana-42:cherry")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# dragon:unicorn:centaur")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),aa=s("h3",{id:"exercise-10",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-10"},[s("span",null,"Exercise 10")])],-1),la=s("p",null,[e("Retain only the first three fields for the given sample string that uses "),s("code",null,"^"),e(" as the input field separator. Use "),s("code",null,","),e(" as the output field separator.")],-1),ta=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'sit^eat^very^eerie^near'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# sit,eat,very")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ia=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'sit^eat^very^eerie^near'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F"),s("span",{class:"token string"},"'^'"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"OFS"),s("span",{class:"token operator"},"="),e(", "),s("span",{class:"token string"},"'{NF=3} 1'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# sit,eat,very")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ca=s("h3",{id:"exercise-11",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-11"},[s("span",null,"Exercise 11")])],-1),oa=s("p",null,[e("The sample string shown below uses cat as the field separator (irrespective of case). Use space as the output field separator and add "),s("code",null,"42"),e(" as the last field.")],-1),ra=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'applecatfigCaT12345cAtbanana'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# apple fig 12345 banana 42")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),pa=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'applecatfigCaT12345cAtbanana'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F"),s("span",{class:"token string"},"'cat'"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"IGNORECASE"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"1"),e(),s("span",{class:"token string"},"'{$(NF+1)=42} 1'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# apple fig 12345 banana 42")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),da=s("h3",{id:"exercise-12",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-12"},[s("span",null,"Exercise 12")])],-1),ua=s("code",null,"sample.txt",-1),ma=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# No doubt you like it too")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Much ado about nothing")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ha=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(" -F"),s("span",{class:"token string"},"'[aeiou]'"),e(),s("span",{class:"token string"},"'NF>6'"),e(" sample.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# No doubt you like it too")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Much ado about nothing")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),va=s("h3",{id:"exercise-13",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-13"},[s("span",null,"Exercise 13")])],-1),ba=s("code",null,"concat.txt",-1),ka=s("code",null,"###",-1),ga=s("code",null,"1",-1),fa=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1) addr.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# How are you")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# This game is good")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Today is sunny")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 2) broken.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# top")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1234567890")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# bottom")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3) sample.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Just do-it")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Believe it")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 4) mixed_fs.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# pink blue white yellow")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# car,mat,ball,basket")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),_a=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'$1=="###"{$1 = ++c ")"} 1'`),e(" concat.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1) addr.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# How are you")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# This game is good")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Today is sunny")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 2) broken.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# top")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1234567890")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# bottom")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3) sample.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Just do-it")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Believe it")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 4) mixed_fs.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# pink blue white yellow")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# car,mat,ball,basket")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),wa=s("hr",null,null,-1);function xa(d,ya){const c=p("router-link"),u=p("VPCard"),o=p("FontIcon"),i=p("Tabs"),m=p("RouteLink");return f(),v("div",null,[s("h1",w,[s("a",x,[s("span",null,b(d.$frontmatter.title)+" 관련",1)])]),s("nav",y,[s("ul",null,[s("li",null,[t(c,{to:"#default-field-separation"},{default:n(()=>[e("Default field separation")]),_:1})]),s("li",null,[t(c,{to:"#input-field-separator"},{default:n(()=>[e("Input field separator")]),_:1})]),s("li",null,[t(c,{to:"#output-field-separator"},{default:n(()=>[e("Output field separator")]),_:1})]),s("li",null,[t(c,{to:"#manipulating-nf"},{default:n(()=>[e("Manipulating NF")]),_:1})]),s("li",null,[t(c,{to:"#fpat"},{default:n(()=>[e("FPAT")]),_:1})]),s("li",null,[t(c,{to:"#fieldwidths"},{default:n(()=>[e("FIELDWIDTHS")]),_:1})]),s("li",null,[t(c,{to:"#summary"},{default:n(()=>[e("Summary")]),_:1})]),s("li",null,[t(c,{to:"#exercises"},{default:n(()=>[e("Exercises")]),_:1}),s("ul",null,[s("li",null,[t(c,{to:"#exercise-1"},{default:n(()=>[e("Exercise 1")]),_:1})]),s("li",null,[t(c,{to:"#exercise-2"},{default:n(()=>[e("Exercise 2")]),_:1})]),s("li",null,[t(c,{to:"#exercise-3"},{default:n(()=>[e("Exercise 3")]),_:1})]),s("li",null,[t(c,{to:"#exercise-4"},{default:n(()=>[e("Exercise 4")]),_:1})]),s("li",null,[t(c,{to:"#exercise-5"},{default:n(()=>[e("Exercise 5")]),_:1})]),s("li",null,[t(c,{to:"#exercise-6"},{default:n(()=>[e("Exercise 6")]),_:1})]),s("li",null,[t(c,{to:"#exercise-7"},{default:n(()=>[e("Exercise 7")]),_:1})]),s("li",null,[t(c,{to:"#exercise-8"},{default:n(()=>[e("Exercise 8")]),_:1})]),s("li",null,[t(c,{to:"#exercise-9"},{default:n(()=>[e("Exercise 9")]),_:1})]),s("li",null,[t(c,{to:"#exercise-10"},{default:n(()=>[e("Exercise 10")]),_:1})]),s("li",null,[t(c,{to:"#exercise-11"},{default:n(()=>[e("Exercise 11")]),_:1})]),s("li",null,[t(c,{to:"#exercise-12"},{default:n(()=>[e("Exercise 12")]),_:1})]),s("li",null,[t(c,{to:"#exercise-13"},{default:n(()=>[e("Exercise 13")]),_:1})])])])])]),A,t(u,k(g({title:"4. Field separators",desc:"CLI Text Processing with GNU awk",link:"https://learnbyexample.github.io/learn_gnuawk/field-separators.html",logo:"https://learnbyexample.github.io/favicon.svg",background:"rgba(22,25,35,0.2)"})),null,16),F,C,s("div",S,[$,s("p",null,[e("The "),s("a",j,[t(o,{icon:"iconfont icon-github"}),e(" example_files")]),e(" directory has all the files used in the examples.")])]),E,t(i,{id:"25",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),tab0:n(({value:a,isActive:l})=>[N,T]),tab1:n(({value:a,isActive:l})=>[I,q]),_:1}),O,t(i,{id:"42",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),title2:n(({value:a,isActive:l})=>[e("Case 3")]),tab0:n(({value:a,isActive:l})=>[D,P]),tab1:n(({value:a,isActive:l})=>[R,z]),tab2:n(({value:a,isActive:l})=>[Q,L]),_:1}),s("p",null,[e("By default, "),W,e(" does more than split the input on spaces. It splits based on one or more sequence of "),H,e(" or "),B,e(" or "),G,e(" characters. In addition, any of these three characters at the start or end of input gets trimmed and won't be part of the field contents. Input containing newline characters will be covered in the "),t(m,{to:"/cli/text-processing-w-gnu-awk/05-record-separators.html"},{default:n(()=>[e("Record separators")]),_:1}),e(" chapter.")]),t(i,{id:"65",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"},{id:"Case 4"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),title2:n(({value:a,isActive:l})=>[e("Case 3")]),title3:n(({value:a,isActive:l})=>[e("Case 4")]),tab0:n(({value:a,isActive:l})=>[V]),tab1:n(({value:a,isActive:l})=>[U,M]),tab2:n(({value:a,isActive:l})=>[Y,Z]),tab3:n(({value:a,isActive:l})=>[J,K]),_:1}),s("div",X,[ss,es,t(i,{id:"92",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),title2:n(({value:a,isActive:l})=>[e("Case 3")]),tab0:n(({value:a,isActive:l})=>[ns]),tab1:n(({value:a,isActive:l})=>[as,ls]),tab2:n(({value:a,isActive:l})=>[ts,is]),_:1})]),cs,os,rs,t(i,{id:"121",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"},{id:"Case 4"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),title2:n(({value:a,isActive:l})=>[e("Case 3")]),title3:n(({value:a,isActive:l})=>[e("Case 4")]),tab0:n(({value:a,isActive:l})=>[ps,ds]),tab1:n(({value:a,isActive:l})=>[us,ms]),tab2:n(({value:a,isActive:l})=>[hs,vs]),tab3:n(({value:a,isActive:l})=>[bs,ks]),_:1}),gs,t(i,{id:"150",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),tab0:n(({value:a,isActive:l})=>[fs]),tab1:n(({value:a,isActive:l})=>[_s,ws]),_:1}),xs,t(i,{id:"164",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),tab0:n(({value:a,isActive:l})=>[ys,As]),tab1:n(({value:a,isActive:l})=>[Fs,Cs]),_:1}),Ss,t(i,{id:"181",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"},{id:"Case 4"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),title2:n(({value:a,isActive:l})=>[e("Case 3")]),title3:n(({value:a,isActive:l})=>[e("Case 4")]),tab0:n(({value:a,isActive:l})=>[$s]),tab1:n(({value:a,isActive:l})=>[js,Es]),tab2:n(({value:a,isActive:l})=>[Ns,Ts]),tab3:n(({value:a,isActive:l})=>[Is,qs]),_:1}),s("div",Os,[Ds,Ps,t(i,{id:"210",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),tab0:n(({value:a,isActive:l})=>[Rs,zs]),tab1:n(({value:a,isActive:l})=>[Qs,Ls]),_:1})]),Ws,t(i,{id:"230",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),tab0:n(({value:a,isActive:l})=>[Hs]),tab1:n(({value:a,isActive:l})=>[Bs,Gs]),_:1}),Vs,t(i,{id:"248",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),title2:n(({value:a,isActive:l})=>[e("Case 3")]),tab0:n(({value:a,isActive:l})=>[Us,Ms]),tab1:n(({value:a,isActive:l})=>[Ys,Zs]),tab2:n(({value:a,isActive:l})=>[Js,Ks]),_:1}),Xs,t(i,{id:"273",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),tab0:n(({value:a,isActive:l})=>[se]),tab1:n(({value:a,isActive:l})=>[ee,ne]),_:1}),ae,t(i,{id:"287",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),tab0:n(({value:a,isActive:l})=>[le,te]),tab1:n(({value:a,isActive:l})=>[ie,ce]),_:1}),s("div",oe,[re,pe,t(i,{id:"305",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),title2:n(({value:a,isActive:l})=>[e("Case 3")]),tab0:n(({value:a,isActive:l})=>[de]),tab1:n(({value:a,isActive:l})=>[ue]),tab2:n(({value:a,isActive:l})=>[me]),_:1})]),he,ve,be,ke,t(i,{id:"327",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),title2:n(({value:a,isActive:l})=>[e("Case 3")]),tab0:n(({value:a,isActive:l})=>[ge,fe]),tab1:n(({value:a,isActive:l})=>[_e,we]),tab2:n(({value:a,isActive:l})=>[xe,ye]),_:1}),Ae,t(i,{id:"361",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),title2:n(({value:a,isActive:l})=>[e("Case 3")]),tab0:n(({value:a,isActive:l})=>[Fe,Ce]),tab1:n(({value:a,isActive:l})=>[Se,$e]),tab2:n(({value:a,isActive:l})=>[je,Ee]),_:1}),Ne,s("div",Te,[Ie,s("p",null,[e("The above will not work for all kinds of CSV files, for example if fields contain escaped double quotes, newline characters, etc. See "),qe,e(" and "),s("a",Oe,[t(o,{icon:"iconfont icon-github"}),e(" dbro/csvquote")]),e(" for such cases. You could also use other programming languages such as Perl, Python, Ruby, etc which come with standard CSV parsing libraries or have easy access to third party solutions. There are also specialized command line tools such as "),s("a",De,[t(o,{icon:"iconfont icon-github"}),e(" BurntSushi/xsv")]),e(".")])]),s("div",Pe,[Re,s("p",null,[e("A proper CSV support is planned for a future version. You can also check out "),s("a",ze,[t(o,{icon:"iconfont icon-github"}),e(" ezrosent/frawk")]),e(", which is mostly similar to the "),Qe,e(" command but also supports CSV parsing. "),s("a",Le,[t(o,{icon:"iconfont icon-github"}),e(" benhoyt/goawk")]),e(" is another implementation with CSV support.")])]),We,t(i,{id:"426",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),tab0:n(({value:a,isActive:l})=>[He,Be]),tab1:n(({value:a,isActive:l})=>[Ge,Ve]),_:1}),Ue,Me,t(i,{id:"446",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),tab0:n(({value:a,isActive:l})=>[Ye]),tab1:n(({value:a,isActive:l})=>[Ze]),_:1}),Je,t(i,{id:"457",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),tab0:n(({value:a,isActive:l})=>[Ke]),tab1:n(({value:a,isActive:l})=>[Xe]),_:1}),sn,s("div",en,[nn,s("p",null,[e("The "),s("a",an,[t(o,{icon:"iconfont icon-github"}),e(" exercises")]),e(" directory has all the files used in this section.")])]),ln,s("p",null,[e("For the input file "),t(o,{icon:"fas fa-file-lines"}),tn,e(", extract only the contents between "),cn,e(" or "),on,e(" from each input line. Assume that "),rn,e(" characters will be present only once every line.")]),pn,t(i,{id:"491",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[dn]),tab1:n(({value:a,isActive:l})=>[un]),_:1}),mn,s("p",null,[e("For the input file "),t(o,{icon:"fas fa-file-csv"}),hn,e(", extract Name and Physics fields in the format shown below.")]),vn,t(i,{id:"506",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[bn]),tab1:n(({value:a,isActive:l})=>[kn,gn]),_:1}),fn,s("p",null,[e("For the input file "),t(o,{icon:"fas fa-file-csv"}),_n,e(", display names of those who've scored above 70 in Maths.")]),wn,t(i,{id:"526",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[xn]),tab1:n(({value:a,isActive:l})=>[yn]),_:1}),An,Fn,t(i,{id:"540",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[Cn]),tab1:n(({value:a,isActive:l})=>[Sn,$n]),_:1}),jn,s("p",null,[e("For the input file "),t(o,{icon:"fas fa-file-lines"}),En,e(", extract the first and third sequence of characters surrounded by double quotes and display them in the format shown below. Solution shouldn't use substitution functions.")]),Nn,t(i,{id:"558",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[Tn]),tab1:n(({value:a,isActive:l})=>[In]),_:1}),qn,s("p",null,[e("For the input file "),t(o,{icon:"fas fa-file-lines"}),On,e(", construct a solution to get the output shown below. Solution shouldn't use substitution functions.")]),Dn,t(i,{id:"573",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[Pn]),tab1:n(({value:a,isActive:l})=>[Rn]),_:1}),zn,s("p",null,[e("Transform the given input file "),t(o,{icon:"fas fa-file-lines"}),Qn,e(" to get the output as shown below. If a field is empty ("),Ln,e(" contains only space characters), replace it with NA.")]),Wn,t(i,{id:"588",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[Hn]),tab1:n(({value:a,isActive:l})=>[Bn]),_:1}),Gn,Vn,t(i,{id:"602",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[Un]),tab1:n(({value:a,isActive:l})=>[Mn,Yn]),_:1}),Zn,s("p",null,[e("The "),t(o,{icon:"fas fa-file-lines"}),Jn,e(" file has fields separated by the "),Kn,e(" character. Delete "),Xn,e(" and the last field if there is a digit character anywhere before the last field. Solution shouldn't use substitution functions.")]),sa,t(i,{id:"622",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[ea]),tab1:n(({value:a,isActive:l})=>[na]),_:1}),aa,la,t(i,{id:"636",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[ta]),tab1:n(({value:a,isActive:l})=>[ia]),_:1}),ca,oa,t(i,{id:"650",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[ra]),tab1:n(({value:a,isActive:l})=>[pa]),_:1}),da,s("p",null,[e("For the input file "),t(o,{icon:"fas fa-file-lines"}),ua,e(", filter lines containing 6 or more lowercase vowels.")]),t(i,{id:"664",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[ma]),tab1:n(({value:a,isActive:l})=>[ha]),_:1}),va,s("p",null,[e("The input file "),t(o,{icon:"fas fa-file-lines"}),ba,e(" has contents of various files preceded by a line starting with "),ka,e(". Replace such sequence of characters with an incrementing integer value (starting with "),ga,e(") in the format shown below.")]),t(i,{id:"678",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[fa]),tab1:n(({value:a,isActive:l})=>[_a]),_:1}),wa])}const Ca=h(_,[["render",xa],["__file","04-field-separators.html.vue"]]),Sa=JSON.parse('{"path":"/cli/text-processing-w-gnu-awk/04-field-separators.html","title":"4. Field separators","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"4. Field separators","description":"Text Processing with GNU awk > 4. Field separators","category":["CLI","Linux"],"tags":["crashcourse","cli","sh","shell","gnu","linux","awk"],"head":[[{"meta":null},{"property":"og:title","content":"Text Processing with GNU awk > 4. Field separators"},{"property":"og:description","content":"4. Field separators"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/cli/text-processing-w-gnu-awk/04-field-separators.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/cli/text-processing-w-gnu-awk/04-field-separators.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"4. Field separators"}],["meta",{"property":"og:description","content":"Text Processing with GNU awk > 4. Field separators"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"cli"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:tag","content":"shell"}],["meta",{"property":"article:tag","content":"gnu"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:tag","content":"awk"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4. Field separators\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Default field separation","slug":"default-field-separation","link":"#default-field-separation","children":[]},{"level":2,"title":"Input field separator","slug":"input-field-separator","link":"#input-field-separator","children":[]},{"level":2,"title":"Output field separator","slug":"output-field-separator","link":"#output-field-separator","children":[]},{"level":2,"title":"Manipulating NF","slug":"manipulating-nf","link":"#manipulating-nf","children":[]},{"level":2,"title":"FPAT","slug":"fpat","link":"#fpat","children":[]},{"level":2,"title":"FIELDWIDTHS","slug":"fieldwidths","link":"#fieldwidths","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]},{"level":2,"title":"Exercises","slug":"exercises","link":"#exercises","children":[{"level":3,"title":"Exercise 1","slug":"exercise-1","link":"#exercise-1","children":[]},{"level":3,"title":"Exercise 2","slug":"exercise-2","link":"#exercise-2","children":[]},{"level":3,"title":"Exercise 3","slug":"exercise-3","link":"#exercise-3","children":[]},{"level":3,"title":"Exercise 4","slug":"exercise-4","link":"#exercise-4","children":[]},{"level":3,"title":"Exercise 5","slug":"exercise-5","link":"#exercise-5","children":[]},{"level":3,"title":"Exercise 6","slug":"exercise-6","link":"#exercise-6","children":[]},{"level":3,"title":"Exercise 7","slug":"exercise-7","link":"#exercise-7","children":[]},{"level":3,"title":"Exercise 8","slug":"exercise-8","link":"#exercise-8","children":[]},{"level":3,"title":"Exercise 9","slug":"exercise-9","link":"#exercise-9","children":[]},{"level":3,"title":"Exercise 10","slug":"exercise-10","link":"#exercise-10","children":[]},{"level":3,"title":"Exercise 11","slug":"exercise-11","link":"#exercise-11","children":[]},{"level":3,"title":"Exercise 12","slug":"exercise-12","link":"#exercise-12","children":[]},{"level":3,"title":"Exercise 13","slug":"exercise-13","link":"#exercise-13","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":9}]},"readingTime":{"minutes":12.66,"words":3799},"filePathRelative":"cli/text-processing-w-gnu-awk/04-field-separators.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{Ca as comp,Sa as data};
