import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,a as n,t as v,b as a,w as p,n as c,g as r,d as s,e as o,r as l,o as b}from"./app-U_bew1in.js";const h={},g={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},_={class:"table-of-contents"},w=n("hr",null,null,-1),f=n("p",null,"Examples that expand on the conceptual examples to show how these minimal examples could be used to build common features in larger applications.",-1),x=n("hr",null,null,-1),A=n("h2",{id:"reading-and-writing-graphics",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reading-and-writing-graphics"},[n("span",null,"Reading and Writing Graphics")])],-1),E=o('<h3 id="overview" tabindex="-1"><a class="header-anchor" href="#overview"><span>Overview</span></a></h3><p>As stated before, <strong>WebAssembly is a great fit for computationally intensive tasks</strong>. For example, Tasks that involve things like big data, heavy logic with conditionals, or nested looping. Thus, generating / rendering graphics can get a significant speedup by moving these mentioned parts into WebAssembly. In this example, we will be generating 20x20 colored checkerboard images once per second, and displaying them on a <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API" target="_blank" rel="noopener noreferrer">HTML5 Canvas</a> using <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Pixel_manipulation_with_canvas" target="_blank" rel="noopener noreferrer">Pixel Manipulation on the ImageData Object</a>. In fancy graphics terms, this is a rasterizer.</p><div class="hint-container tip"><p class="hint-container-title">Note</p><p>This example will continue to build on our simple buffer/pointer memory passing. This could be implemented using higher-level data structures, and these data structures will be covered in later examples.</p></div><p>So let&#39;s get into the example:</p><h3 id="implementation" tabindex="-1"><a class="header-anchor" href="#implementation"><span>Implementation</span></a></h3>',5),R=n("code",null,"src/",-1),q=n("code",null,"lib.rs",-1),C=n("a",{href:"https://wasmbyexample.dev/example-redirect?exampleName=webassembly-linear-memory",target:"_blank",rel:"noopener noreferrer"},"WebAssembly Linear Memory example",-1),W=o(`<div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token comment">// The wasm-pack uses wasm-bindgen to build and generate JavaScript binding file.</span></span>
<span class="line"><span class="token comment">// Import the wasm-bindgen crate.</span></span>
<span class="line"><span class="token keyword">use</span> <span class="token namespace">wasm_bindgen<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Define the size of our &quot;checkerboard&quot;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">CHECKERBOARD_SIZE</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/*</span>
<span class="line"> * 1. What is going on here?</span>
<span class="line"> * Create a static mutable byte buffer.</span>
<span class="line"> * We will use for putting the output of our graphics,</span>
<span class="line"> * to pass the output to js.</span>
<span class="line"> * NOTE: global \`static mut\` means we will have &quot;unsafe&quot; code</span>
<span class="line"> * but for passing memory between js and wasm should be fine.</span>
<span class="line"> *</span>
<span class="line"> * 2. Why is the size CHECKERBOARD_SIZE * CHECKERBOARD_SIZE * 4?</span>
<span class="line"> * We want to have 20 pixels by 20 pixels. And 4 colors per pixel (r,g,b,a)</span>
<span class="line"> * Which, the Canvas API Supports.</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">OUTPUT_BUFFER_SIZE</span><span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> <span class="token constant">CHECKERBOARD_SIZE</span> <span class="token operator">*</span> <span class="token constant">CHECKERBOARD_SIZE</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">mut</span> <span class="token constant">OUTPUT_BUFFER</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">;</span> <span class="token constant">OUTPUT_BUFFER_SIZE</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token constant">OUTPUT_BUFFER_SIZE</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Function to return a pointer to our buffer</span></span>
<span class="line"><span class="token comment">// in wasm memory</span></span>
<span class="line"><span class="token attribute attr-name">#[wasm_bindgen]</span></span>
<span class="line"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_output_buffer_pointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token keyword">u8</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> pointer<span class="token punctuation">:</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token keyword">u8</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">unsafe</span> <span class="token punctuation">{</span></span>
<span class="line">    pointer <span class="token operator">=</span> <span class="token constant">OUTPUT_BUFFER</span><span class="token punctuation">.</span><span class="token function">as_ptr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> pointer<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Function to generate our checkerboard, pixel by pixel</span></span>
<span class="line"><span class="token attribute attr-name">#[wasm_bindgen]</span></span>
<span class="line"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">generate_checker_board</span><span class="token punctuation">(</span></span>
<span class="line">    dark_value_red<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">,</span></span>
<span class="line">    dark_value_green<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">,</span></span>
<span class="line">    dark_value_blue<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">,</span></span>
<span class="line">    light_value_red<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">,</span></span>
<span class="line">    light_value_green<span class="token punctuation">:</span> <span class="token keyword">u8</span><span class="token punctuation">,</span></span>
<span class="line">    light_value_blue<span class="token punctuation">:</span> <span class="token keyword">u8</span></span>
<span class="line">    <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Since Linear memory is a 1 dimensional array, but we want a grid</span></span>
<span class="line">  <span class="token comment">// we will be doing 2d to 1d mapping</span></span>
<span class="line">  <span class="token comment">// https://softwareengineering.stackexchange.com/questions/212808/treating-a-1d-data-structure-as-2d-grid</span></span>
<span class="line">  <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span><span class="token constant">CHECKERBOARD_SIZE</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span><span class="token constant">CHECKERBOARD_SIZE</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// Set our default case to be dark squares</span></span>
<span class="line">      <span class="token keyword">let</span> <span class="token keyword">mut</span> is_dark_square<span class="token punctuation">:</span> <span class="token keyword">bool</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// We should change our default case if</span></span>
<span class="line">      <span class="token comment">// We are on an odd y</span></span>
<span class="line">      <span class="token keyword">if</span> y <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">        is_dark_square <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// Lastly, alternate on our x value</span></span>
<span class="line">      <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">        is_dark_square <span class="token operator">=</span> <span class="token operator">!</span>is_dark_square<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// Now that we determined if we are dark or light,</span></span>
<span class="line">      <span class="token comment">// Let&#39;s set our square value</span></span>
<span class="line">      <span class="token keyword">let</span> <span class="token keyword">mut</span> square_value_red<span class="token punctuation">:</span> <span class="token keyword">u8</span> <span class="token operator">=</span> dark_value_red<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">let</span> <span class="token keyword">mut</span> square_value_green<span class="token punctuation">:</span> <span class="token keyword">u8</span> <span class="token operator">=</span> dark_value_green<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">let</span> <span class="token keyword">mut</span> square_value_blue<span class="token punctuation">:</span> <span class="token keyword">u8</span> <span class="token operator">=</span> dark_value_blue<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token operator">!</span>is_dark_square <span class="token punctuation">{</span></span>
<span class="line">        square_value_red <span class="token operator">=</span> light_value_red<span class="token punctuation">;</span></span>
<span class="line">        square_value_green <span class="token operator">=</span> light_value_green<span class="token punctuation">;</span></span>
<span class="line">        square_value_blue <span class="token operator">=</span> light_value_blue<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// Let&#39;s calculate our index, using our 2d -&gt; 1d mapping.</span></span>
<span class="line">      <span class="token comment">// And then multiple by 4, for each pixel property (r,g,b,a).</span></span>
<span class="line">      <span class="token keyword">let</span> square_number<span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> y <span class="token operator">*</span> <span class="token constant">CHECKERBOARD_SIZE</span> <span class="token operator">+</span> x<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">let</span> square_rgba_index<span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> square_number <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// Finally store the values.</span></span>
<span class="line">      <span class="token keyword">unsafe</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token constant">OUTPUT_BUFFER</span><span class="token punctuation">[</span>square_rgba_index <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> square_value_red<span class="token punctuation">;</span> <span class="token comment">// Red</span></span>
<span class="line">        <span class="token constant">OUTPUT_BUFFER</span><span class="token punctuation">[</span>square_rgba_index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> square_value_green<span class="token punctuation">;</span> <span class="token comment">// Green</span></span>
<span class="line">        <span class="token constant">OUTPUT_BUFFER</span><span class="token punctuation">[</span>square_rgba_index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> square_value_blue<span class="token punctuation">;</span> <span class="token comment">// Blue</span></span>
<span class="line">        <span class="token constant">OUTPUT_BUFFER</span><span class="token punctuation">[</span>square_rgba_index <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span> <span class="token comment">// Alpha (Always Opaque)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, we can compile the module following the <a href="https://wasmbyexample.dev/example-redirect?exampleName=hello-world" target="_blank" rel="noopener noreferrer">Hello World</a> examples compilation process, replacing the appropriate file names.</p>`,2),T=n("code",null,"index.js",-1),I=n("code",null,"pkg/",-1),B=n("code",null,"graphics.js",-1),D=n("code",null,"pkg/",-1),S=n("code",null,"graphics_bg.wasm",-1),U=n("a",{href:"https://wasmbyexample.dev/example-redirect?exampleName=webassembly-linear-memory",target:"_blank",rel:"noopener noreferrer"},"WebAssembly Linear Memory Example",-1),P=n("code",null,".slice",-1),O=n("code",null,"index.js",-1),F=o(`<div class="hint-container tip"><p class="hint-container-title">Note</p><p>In this example, we are using the exported function from the wasm module directly to help highlight the WebAssembly API. <code>wasm-bindgen</code> generates JavaScript bindings code that can be imported as an ES6 import, and is the reccomended way to work with your Rust Wasm modules. These JavaScript bindings are shown in the &quot;Passing High Level Data Types with <code>wasm-bindgen</code>&quot; example.</p></div><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line">import wasmInit from <span class="token string">&quot;./pkg/graphics.js&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> runWasm <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// Instantiate our wasm module</span></span>
<span class="line">  <span class="token keyword">const</span> rustWasm <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">wasmInit</span><span class="token punctuation">(</span><span class="token string">&quot;./pkg/graphics_bg.wasm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Create a Uint8Array to give us access to Wasm Memory</span></span>
<span class="line">  <span class="token keyword">const</span> wasmByteMemoryArray <span class="token operator">=</span> new <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>rustWasm<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Get our canvas element from our index.html</span></span>
<span class="line">  <span class="token keyword">const</span> canvasElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;canvas&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Set up Context and ImageData on the canvas</span></span>
<span class="line">  <span class="token keyword">const</span> canvasContext <span class="token operator">=</span> canvasElement<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&quot;2d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> canvasImageData <span class="token operator">=</span> canvasContext<span class="token punctuation">.</span><span class="token function">createImageData</span><span class="token punctuation">(</span></span>
<span class="line">    canvasElement<span class="token punctuation">.</span>width<span class="token punctuation">,</span></span>
<span class="line">    canvasElement<span class="token punctuation">.</span>height</span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Clear the canvas</span></span>
<span class="line">  canvasContext<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvasElement<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvasElement<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> getDarkValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> getLightValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">127</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">127</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> drawCheckerBoard <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> checkerBoardSize <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Generate a new checkboard in wasm</span></span>
<span class="line">    rustWasm<span class="token punctuation">.</span><span class="token function">generate_checker_board</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token function">getDarkValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token function">getDarkValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token function">getDarkValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token function">getLightValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token function">getLightValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token function">getLightValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Pull out the RGBA values from Wasm memory</span></span>
<span class="line">    <span class="token comment">// Starting at the memory index of out output buffer (given by our pointer)</span></span>
<span class="line">    <span class="token comment">// 20 * 20 * 4 = checkboard max X * checkerboard max Y * number of pixel properties (R,G.B,A)</span></span>
<span class="line">    <span class="token keyword">const</span> outputPointer <span class="token operator">=</span> rustWasm<span class="token punctuation">.</span><span class="token function">get_output_buffer_pointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> imageDataArray <span class="token operator">=</span> wasmByteMemoryArray<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span></span>
<span class="line">      outputPointer<span class="token punctuation">,</span></span>
<span class="line">      outputPointer <span class="token operator">+</span> checkerBoardSize <span class="token operator">*</span> checkerBoardSize <span class="token operator">*</span> <span class="token number">4</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Set the values to the canvas image data</span></span>
<span class="line">    canvasImageData<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>imageDataArray<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Clear the canvas</span></span>
<span class="line">    canvasContext<span class="token punctuation">.</span><span class="token function">clearRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> canvasElement<span class="token punctuation">.</span>width<span class="token punctuation">,</span> canvasElement<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Place the new generated checkerboard onto the canvas</span></span>
<span class="line">    canvasContext<span class="token punctuation">.</span><span class="token function">putImageData</span><span class="token punctuation">(</span>canvasImageData<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">drawCheckerBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">drawCheckerBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">runWasm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),L=n("code",null,"index.js",-1),j=n("code",null,"index.html",-1),z=o(`<div class="hint-container info"><p class="hint-container-title">Random tip</p><p>use the <a href="https://css-tricks.com/almanac/properties/i/image-rendering/" target="_blank" rel="noopener noreferrer">image-rendering</a> property to display pixel art, and other &quot;sharp&quot; images correctly.</p></div><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span></span>
<span class="line">    <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>20<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>20<span class="token punctuation">&quot;</span></span></span>
<span class="line">    <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">image-rendering</span><span class="token punctuation">:</span> pixelated<span class="token punctuation">;</span> <span class="token property">image-rendering</span><span class="token punctuation">:</span> crisp-edges<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span></span>
<span class="line">  <span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">&lt;!-- Other HTML here. --&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And you should get something similar to the demo (<a href="https://wasmbyexample.dev/source-redirect?path=examples/reading-and-writing-graphics/demo/rust" target="_blank" rel="noopener noreferrer">Source Code</a>) below!</p><h3 id="demo" tabindex="-1"><a class="header-anchor" href="#demo"><span>Demo</span></a></h3>`,4),M=n("iframe",{width:"300px",height:"300px",title:"Rust Demo",src:"https://wasmbyexample.dev/examples/reading-and-writing-graphics/demo/rust/?version=undefined"},null,-1),N=n("p",null,[s("Next, lets took a look at an example of implementing "),n("a",{href:"#reading-and-writing-audio"},"Reading and Writing Audio with WebAssembly"),s(".")],-1),V=n("hr",null,null,-1),Z=n("h2",{id:"reading-and-writing-audio",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#reading-and-writing-audio"},[n("span",null,"Reading and Writing Audio")])],-1),H=n("hr",null,null,-1);function G(u,K){const t=l("router-link"),i=l("VPCard"),e=l("FontIcon"),d=l("CodeDemo");return b(),m("div",null,[n("h1",g,[n("a",y,[n("span",null,v(u.$frontmatter.title)+" 관련",1)])]),n("nav",_,[n("ul",null,[n("li",null,[a(t,{to:"#reading-and-writing-graphics"},{default:p(()=>[s("Reading and Writing Graphics")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#overview"},{default:p(()=>[s("Overview")]),_:1})]),n("li",null,[a(t,{to:"#implementation"},{default:p(()=>[s("Implementation")]),_:1})]),n("li",null,[a(t,{to:"#demo"},{default:p(()=>[s("Demo")]),_:1})])])]),n("li",null,[a(t,{to:"#reading-and-writing-audio"},{default:p(()=>[s("Reading and Writing Audio")]),_:1})])])]),w,f,x,A,a(i,c(r({title:"Wasm By Example - Reading and Writing Graphics",desc:"Reading and Writing Graphics",link:"https://wasmbyexample.dev/examples/reading-and-writing-graphics/reading-and-writing-graphics.rust.en-us.html",logo:"https://wasmbyexample.dev/Web_Assembly_Logo.svg",background:"rgba(136,103,249,0.2)"})),null,16),E,n("p",null,[s("As usual, let's get started with our "),a(e,{icon:"fas fa-folder-open"}),R,a(e,{icon:"fa-brands fa-rust"}),q,s(" file. You will notice here we set up a buffer, similar to the "),C,s(". By doing this, Javascript can read the values placed into the buffer later. Please be sure to read the comments in the following code examples, and be sure to follow links or look at previous examples if something does not make sense. Let's get into it:")]),W,n("p",null,[s("Next, lets create an "),a(e,{icon:"fa-brands fa-js"}),T,s(" file to load and run our wasm output. Let's import the wasm initialization module from "),a(e,{icon:"fas fa-folder-open"}),I,a(e,{icon:"fa-brands fa-js"}),B,s(" that was generated by wasm-pack. Then, let's call the module passing in the path to our wasm file at "),a(e,{icon:"fas fa-folder-open"}),D,a(e,{icon:"fas fa-file-lines"}),S,s(" that was generated by wasm-pack. A lot of the logic here is expanding on the "),U,s(", but applying the learnings to a DOM API. The most important thing here is probably how we are copying out memory from Wasm, using "),P,s(" calls. Please see the reference links if things get confusing. Here is the "),a(e,{icon:"fa-brands fa-js"}),O,s(" below!")]),F,n("p",null,[s("Lastly, lets load our ES6 Module, "),a(e,{icon:"fa-brands fa-js"}),L,s(" Javascript file in our "),a(e,{icon:"fa-brands fa-html5"}),j,s(". And let's be sure to add a canvas element as well!")]),z,a(d,{id:"code-demo-64",type:"normal",title:"Demo",code:"eJyrrgUAAXUA+Q=="}),M,N,V,Z,a(i,c(r({title:"Wasm By Example - Reading and Writing Audio",desc:"Reading and Writing Audio",link:"https://wasmbyexample.dev/examples/reading-and-writing-audio/reading-and-writing-audio.rust.en-us.html",logo:"https://wasmbyexample.dev/Web_Assembly_Logo.svg",background:"rgba(136,103,249,0.2)"})),null,16),H])}const Y=k(h,[["render",G],["__file","02-applying-the-concepts.html.vue"]]),Q=JSON.parse('{"path":"/rust/wasm-by-example/02-applying-the-concepts.html","title":"02. Applying the Concepts","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"02. Applying the Concepts","description":"Wasm by Example (for Rust) > 02. Applying the Concepts","category":["Rust"],"tag":["crashcourse","rust","rs","wasm","assembly","assemblyscript","c","cpp"],"head":[[{"meta":null},{"property":"og:title","content":"Wasm by Example (for Rust) > 02. Applying the Concepts"},{"property":"og:description","content":"02. Applying the Concepts"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/rust/wasm-by-example/02-applying-the-concepts.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/rust/wasm-by-example/02-applying-the-concepts.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"02. Applying the Concepts"}],["meta",{"property":"og:description","content":"Wasm by Example (for Rust) > 02. Applying the Concepts"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"rust"}],["meta",{"property":"article:tag","content":"rs"}],["meta",{"property":"article:tag","content":"wasm"}],["meta",{"property":"article:tag","content":"assembly"}],["meta",{"property":"article:tag","content":"assemblyscript"}],["meta",{"property":"article:tag","content":"c"}],["meta",{"property":"article:tag","content":"cpp"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"02. Applying the Concepts\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Reading and Writing Graphics","slug":"reading-and-writing-graphics","link":"#reading-and-writing-graphics","children":[{"level":3,"title":"Overview","slug":"overview","link":"#overview","children":[]},{"level":3,"title":"Implementation","slug":"implementation","link":"#implementation","children":[]},{"level":3,"title":"Demo","slug":"demo","link":"#demo","children":[]}]},{"level":2,"title":"Reading and Writing Audio","slug":"reading-and-writing-audio","link":"#reading-and-writing-audio","children":[]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":12}]},"readingTime":{"minutes":4.52,"words":1356},"filePathRelative":"rust/wasm-by-example/02-applying-the-concepts.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n<p>Examples that expand on the conceptual examples to show how these minimal examples could be used to build common features in larger applications.</p>\\n<hr>\\n<h2>Reading and Writing Graphics</h2>\\n"}');export{Y as comp,Q as data};
