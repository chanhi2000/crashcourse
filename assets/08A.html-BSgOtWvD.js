import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as s,t as d,b as n,n as u,g as k,d as a,e as p,r as t,o as m}from"./app-U_bew1in.js";const v={},b={id:"frontmatter-title-관련",tabindex:"-1"},h={class:"header-anchor",href:"#frontmatter-title-관련"},g=s("nav",{class:"table-of-contents"},[s("ul")],-1),y=s("hr",null,null,-1),f=p(`<p>Docker Compose를 사용하기 전에 먼저 <code>docker run</code> 명령으로 MySQL 컨테이너를 생성해보겠습니다. 여기서는 <code>--link</code> 옵션 대신 <code>docker network create</code> 명령으로 네트워크를 생성하여 <code>app</code> 컨테이너가 MySQL 컨테이너에 접근할 수 있도록 하겠습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> network create example-network</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> mysql <span class="token parameter variable">--network</span> example-network <span class="token parameter variable">-v</span> mysql-data:/var/lib/mysql <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>examplepassword <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_DATABASE</span><span class="token operator">=</span>db <span class="token punctuation">\\</span></span>
<span class="line">  mysql:5.7</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이제 <code>mysql</code> 명령으로 데이터베이스에 접근해보겠습니다.</p><p>다음과 같이 <code>docker exec</code> 명령을 사용하여 mysql 컨테이너 안의 <code>mysql</code> 명령을 실행합니다. <code>Enter password:</code>가 표시되면 <code>examplepassword</code>를 입력합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Enter password:</span></span>
<span class="line"><span class="token comment"># Welcome to the MySQL monitor.  Commands end with ; or \\g.</span></span>
<span class="line"><span class="token comment"># Your MySQL connection id is 2</span></span>
<span class="line"><span class="token comment"># Server version: 5.7.39 MySQL Community Server (GPL)</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Copyright (c) 2000, 2022, Oracle and/or its affiliates.</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Oracle is a registered trademark of Oracle Corporation and/or its</span></span>
<span class="line"><span class="token comment"># affiliates. Other names may be trademarks of their respective</span></span>
<span class="line"><span class="token comment"># owners.</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Type &#39;help;&#39; or &#39;\\h&#39; for help. Type &#39;\\c&#39; to clear the current input statement.</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># mysql&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>다음과 같은 에러가 표시된다면 MySQL이 완전히 실행되지 않은 것이니 잠시 기다렸다가 다시 시도해보세요.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># ERROR 2002 (HY000): Can&#39;t connect to local MySQL server through socket &#39;/var/run/mysqld/mysqld.sock&#39; (2)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><p><code>mysql&gt;</code> 프롬프트가 표시되면 다음 SQL 쿼리를 입력하여 <code>Users</code> 테이블을 생성합니다. 그리고 <code>exit</code>를 입력하여 프롬프트에서 빠져나옵니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">mysql<span class="token operator">&gt;</span> USE db<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Database changed</span></span>
<span class="line">mysql<span class="token operator">&gt;</span> CREATE TABLE Users <span class="token punctuation">(</span>id VARCHAR<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> NOT NULL, password VARCHAR<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> NOT NULL, PRIMARY KEY <span class="token punctuation">(</span>id<span class="token punctuation">))</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Query OK, 0 rows affected (0.76 sec)</span></span>
<span class="line">mysql<span class="token operator">&gt;</span> <span class="token builtin class-name">exit</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Bye</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),_=s("code",null,"app",-1),q=s("code",null,"app",-1),S=s("code",null,"app.js",-1),w=s("code",null,"package.json",-1),j=p(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">mkdir</span> app</span>
<span class="line"><span class="token builtin class-name">cd</span> app</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),x=s("code",null,"app/",-1),A=s("code",null,"app.js",-1),L=p(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mysql&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> connection <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">host</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MYSQL_HOST</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">user</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MYSQL_USER</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">password</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MYSQL_PASSWORD</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">database</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MYSQL_DB</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&quot;INSERT INTO Users (id, password) VALUES (&#39;hellouser&#39;, &#39;examplepassword&#39;);&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> fields</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&#39;SELECT * from Users;&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> rows<span class="token punctuation">,</span> fields</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span></span>
<span class="line">      res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Express server listening on port 8080&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),D=s("code",null,"app/",-1),T=s("code",null,"package.json",-1),R=p(`<div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;app&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;express&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.18.1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;mysql&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^2.18.1&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),M=s("code",null,"node:16-alpine",-1),Q=s("code",null,"app.js",-1),C=p(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> app <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token parameter variable">-w</span> /app <span class="token parameter variable">-v</span> ~/app:/app <span class="token parameter variable">--network</span> example-network <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_HOST</span><span class="token operator">=</span>mysql <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_USER</span><span class="token operator">=</span>root <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_PASSWORD</span><span class="token operator">=</span>examplepassword <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_DB</span><span class="token operator">=</span>db <span class="token punctuation">\\</span></span>
<span class="line">  node:16-alpine <span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">&quot;npm install &amp;&amp; node app.js&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>웹 브라우저에서 <code>http://&lt;컨테이너 IP 주소 또는 도메인&gt;:8080</code>으로 접속해봅니다(Docker Desktop에서 실행했다면 <code>http://127.0.0.1:8080</code>입니다).</p><p>다음과 같은 데이터가 표시되면 MySQL 데이터베이스에 정상적으로 데이터를 쓰고 읽어온 것입니다.</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span><span class="token property">&quot;id&quot;</span><span class="token operator">:</span><span class="token string">&quot;hellouser&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;password&quot;</span><span class="token operator">:</span><span class="token string">&quot;examplepassword&quot;</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>위 컨테이너는 <kbd>Ctrl</kbd>+<kbd>C</kbd>로 정지되지 않을 수 있습니다. 여기서는 <kbd>Ctrl</kbd>+<kbd>P</kbd>, <kbd>Ctrl</kbd>+<kbd>Q</kbd>를 차례대로 입력하여 컨테이너에서 빠져나옵니다. 그리고 <code>app</code>, <code>mysql</code> 컨테이너를 삭제합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> app</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> mysql</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,7);function E(o,O){const l=t("VPCard"),c=t("SiteInfo"),e=t("FontIcon");return m(),r("div",null,[s("h1",b,[s("a",h,[s("span",null,d(o.$frontmatter.title)+" 관련",1)])]),n(l,u(k({title:"목차",desc:"언제나 최신 Docker",link:"/docker/always-up-to-date-docker/README.md",logo:"https://pyrasis.com/assets/images/pyrasis.png",background:"rgba(31,41,55,0.2)"})),null,16),g,y,n(c,{name:"08. Docker Compose 사용하기",desc:"언제나 최신 Docker",url:"https://pyrasis.com/jHLsAlwaysUpToDateDocker/Unit08",logo:"https://pyrasis.com/assets/images/pyrasis.png",preview:"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit08/1.png"}),f,s("p",null,[a("그리고 "),_,a(" 컨테이너를 생성해보겠습니다. "),n(e,{icon:"fas fa-folder-open"}),q,a(" 디렉터리를 만들고 다음 내용을 "),n(e,{icon:"fa-brands fa-js"}),S,a("와 "),n(e,{icon:"iconfont icon-json"}),w,a(" 파일로 저장합니다.")]),j,s("blockquote",null,[s("p",null,[a("."),n(e,{icon:"fas fa-folder-open"}),x,n(e,{icon:"fa-brands fa-js"}),A])]),L,s("blockquote",null,[s("p",null,[a("."),n(e,{icon:"fas fa-folder-open"}),D,n(e,{icon:"iconfont icon-json"}),T])]),R,s("p",null,[a("이제 "),M,a(" 이미지로 "),n(e,{icon:"fa-brands fa-js"}),Q,a(" 파일을 실행해보겠습니다.")]),C])}const P=i(v,[["render",E],["__file","08A.html.vue"]]),N=JSON.parse('{"path":"/docker/always-up-to-date-docker/08A.html","title":"08A. docker run으로 컨테이너 생성하기","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"08A. docker run으로 컨테이너 생성하기","description":"언제나 최신 Docker > 08A. docker run으로 컨테이너 생성하기","category":["DevOps","Docker"],"tag":["crashcourse","pyrasis.com","docker","devops"],"head":[[{"meta":null},{"property":"og:title","content":"언제나 최신 Docker > 08A. docker run으로 컨테이너 생성하기"},{"property":"og:description","content":"08A. docker run으로 컨테이너 생성하기"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/docker/always-up-to-date-docker/08A.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/docker/always-up-to-date-docker/08A.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"08A. docker run으로 컨테이너 생성하기"}],["meta",{"property":"og:description","content":"언제나 최신 Docker > 08A. docker run으로 컨테이너 생성하기"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"pyrasis.com"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:published_time","content":"2022-10-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"08A. docker run으로 컨테이너 생성하기\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]],"date":"2022-10-03T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"createdTime":1718788955000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.72,"words":515},"filePathRelative":"docker/always-up-to-date-docker/08A.md","localizedDate":"2022년 10월 3일","excerpt":"\\n"}');export{P as comp,N as data};
