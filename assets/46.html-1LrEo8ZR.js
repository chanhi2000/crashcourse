import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,a as n,t as h,b as a,w as p,n as i,g as l,e,d as s,r as u,o as m}from"./app-U_bew1in.js";const b={},g={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},v={class:"table-of-contents"},y=n("hr",null,null,-1),f=e('<h2 id="project-11-part-two" tabindex="-1"><a class="header-anchor" href="#project-11-part-two"><span>Project 11, part two</span></a></h2><p>“In the beginning there was nothing, which exploded.” That’s a quote from Terry Pratchett’s book <em>Lords and Ladies</em>, and gives us an inkling of just how complicated physics is in the real world.</p><p>Fortunately, SpriteKit’s version of physics is much easier. You’ve already seen how it lets us create boxes and balls easily enough, but today we’re going to look at the way it reports collisions back to us so we can take action.</p><p>This <em>does</em> mean learning a few new things, but I’ve tried to take a few shortcuts to lessen the learning curve. I’m not skipping them entirely, though: we’re going to return to concepts such as bitmasks in future days, because they are important.</p><p><strong>Today you have three topics to work through, and you’ll learn about <code>SKAction</code>, <code>SKPhysicsContactDelegate</code>, <code>SKLabelNode</code>, and more.</strong></p><h3 id="spinning-slots-skaction" tabindex="-1"><a class="header-anchor" href="#spinning-slots-skaction"><span>Spinning slots: <code>SKAction</code></span></a></h3>',6),S={class:"hint-container details"},x=n("summary",null,"Spinning slots: SKAction",-1),B=e(`<p>The purpose of the game will be to drop your balls in such a way that they land in good slots and not bad ones. We have bouncers in place, but we need to fill the gaps between them with something so the player knows where to aim.</p><p>We&#39;ll be filling the gaps with two types of target slots: good ones (colored green) and bad ones (colored red). As with bouncers, we&#39;ll need to place a few of these, which means we need to make a method. This needs to load the slot base graphic, position it where we said, then add it to the scene, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">makeSlot</span><span class="token punctuation">(</span>at position<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">,</span> isGood<span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> slotBase<span class="token punctuation">:</span> <span class="token class-name">SKSpriteNode</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> isGood <span class="token punctuation">{</span></span>
<span class="line">        slotBase <span class="token operator">=</span> <span class="token class-name">SKSpriteNode</span><span class="token punctuation">(</span>imageNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;slotBaseGood&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        slotBase <span class="token operator">=</span> <span class="token class-name">SKSpriteNode</span><span class="token punctuation">(</span>imageNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;slotBaseBad&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    slotBase<span class="token punctuation">.</span>position <span class="token operator">=</span> position</span>
<span class="line">    <span class="token function">addChild</span><span class="token punctuation">(</span>slotBase<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Unlike <code>makeBouncer(at:)</code>, this method has a second parameter – whether the slot is good or not – and that affects which image gets loaded. But first, we need to call the new method, so add these lines just before the calls to <code>makeBouncer(at:)</code> in <code>didMove(to:)</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">makeSlot</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">128</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> isGood<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">makeSlot</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">384</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> isGood<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">makeSlot</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">640</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> isGood<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">makeSlot</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">896</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> isGood<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The X positions are exactly between the bouncers, so if you run the game now you&#39;ll see bouncer / slot / bouncer / slot and so on.</p><p>One of the obvious-but-nice things about using methods to create the bouncers and slots is that if we want to change the way slots look we only need to change it in one place. For example, we can make the slot colors look more obvious by adding a glow image behind them:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">makeSlot</span><span class="token punctuation">(</span>at position<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token punctuation">,</span> isGood<span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> slotBase<span class="token punctuation">:</span> <span class="token class-name">SKSpriteNode</span></span>
<span class="line">    <span class="token keyword">var</span> slotGlow<span class="token punctuation">:</span> <span class="token class-name">SKSpriteNode</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> isGood <span class="token punctuation">{</span></span>
<span class="line">        slotBase <span class="token operator">=</span> <span class="token class-name">SKSpriteNode</span><span class="token punctuation">(</span>imageNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;slotBaseGood&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        slotGlow <span class="token operator">=</span> <span class="token class-name">SKSpriteNode</span><span class="token punctuation">(</span>imageNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;slotGlowGood&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        slotBase <span class="token operator">=</span> <span class="token class-name">SKSpriteNode</span><span class="token punctuation">(</span>imageNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;slotBaseBad&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        slotGlow <span class="token operator">=</span> <span class="token class-name">SKSpriteNode</span><span class="token punctuation">(</span>imageNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;slotGlowBad&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    slotBase<span class="token punctuation">.</span>position <span class="token operator">=</span> position</span>
<span class="line">    slotGlow<span class="token punctuation">.</span>position <span class="token operator">=</span> position</span>
<span class="line"></span>
<span class="line">    <span class="token function">addChild</span><span class="token punctuation">(</span>slotBase<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">addChild</span><span class="token punctuation">(</span>slotGlow<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That basically doubles every line of code, changing &quot;Base&quot; to &quot;Glow&quot;, but the end result is quite pleasing and it&#39;s clear now which slots are good and which are bad.</p><p>We could even make the slots spin slowly by using a new class called <code>SKAction</code>. SpriteKit actions are ridiculously powerful and we&#39;re going to do some great things with them in later projects, but for now we just want the glow to rotate very gently.</p><p>Before we look at the code to make this happen, you need to learn a few things up front:</p>`,11),q=n("ul",null,[n("li",null,[s("Angles are specified in radians, not degrees. This is true in UIKit too. 360 degrees is equal to the value of "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"2"),n("mo",null,"×"),n("mi",null,"π")]),n("annotation",{encoding:"application/x-tex"},"2\\times\\pi")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"2"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"π")])])]),s(" – that is, the mathematical value "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"π")]),n("annotation",{encoding:"application/x-tex"},"\\pi")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"π")])])]),s(". Therefore "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"π")]),n("annotation",{encoding:"application/x-tex"},"\\pi")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"π")])])]),s(" radians is equal to 180 degrees.")]),n("li",null,[s("Rather than have you try to memorize it, there is a built-in value of "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"π")]),n("annotation",{encoding:"application/x-tex"},"\\pi")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"π")])])]),s(" called "),n("code",null,"CGFloat.pi"),s(".")]),n("li",null,[s("Yes "),n("code",null,"CGFloat"),s(" is yet another way of representing decimal numbers, just like "),n("code",null,"Double"),s(" and "),n("code",null,"Float"),s(". Behind the scenes, "),n("code",null,"CGFloat"),s(" can be either a Double or a "),n("code",null,"Float"),s(" depending on the device your code runs on. Swift also has "),n("code",null,"Double.pi"),s(" and "),n("code",null,"Float.pi"),s(" for when you need it at different precisions.")]),n("li",null,[s("When you create an action it will execute once. If you want it to run forever, you create another action to wrap the first using the "),n("code",null,"repeatForever()"),s(" method, then run that.")])],-1),j=e(`<p>Our new code will rotate the node by 180 degrees (available as the constant <code>CGFloat.pi</code> or just <code>.pi</code>) over 10 seconds, repeating forever. Put this code just before the end of the <code>makeSlot(at:)</code> method:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> spin <span class="token operator">=</span> <span class="token class-name">SKAction</span><span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>byAngle<span class="token punctuation">:</span> <span class="token punctuation">.</span>pi<span class="token punctuation">,</span> duration<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> spinForever <span class="token operator">=</span> <span class="token class-name">SKAction</span><span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span>spin<span class="token punctuation">)</span></span>
<span class="line">slotGlow<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>spinForever<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you run the game now, you&#39;ll see that the glow spins around very gently. It&#39;s a simple effect, but it makes a big difference.</p><figure><img src="https://www.hackingwithswift.com/img/books/hws/11-2.png" alt="With bouncers and slots now in place, this pachinko game is starting to come together." tabindex="0" loading="lazy"><figcaption>With bouncers and slots now in place, this pachinko game is starting to come together.</figcaption></figure>`,4),K=n("h3",{id:"collision-detection-skphysicscontactdelegate",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#collision-detection-skphysicscontactdelegate"},[n("span",null,[s("Collision detection: "),n("code",null,"SKPhysicsContactDelegate")])])],-1),_={class:"hint-container details"},N=n("summary",null,"Collision detection: SKPhysicsContactDelegate",-1),T=e(`<p>Just by adding a physics body to the balls and bouncers we already have some collision detection because the objects bounce off each other. But it&#39;s not being detected by <em>us</em>, which means we can&#39;t do anything about it.</p><p>In this game, we want the player to win or lose depending on how many green or red slots they hit, so we need to make a few changes:</p><ol><li>Add rectangle physics to our slots.</li><li>Name the slots so we know which is which, then name the balls too.</li><li>Make our scene the contact delegate of the physics world – this means, &quot;tell us when contact occurs between two bodies.&quot;</li><li>Create a method that handles contacts and does something appropriate.</li></ol><p>The first step is easy enough: add these two lines just before you call <code>addChild()</code> for <code>slotBase</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">slotBase<span class="token punctuation">.</span>physicsBody <span class="token operator">=</span> <span class="token class-name">SKPhysicsBody</span><span class="token punctuation">(</span>rectangleOf<span class="token punctuation">:</span> slotBase<span class="token punctuation">.</span>size<span class="token punctuation">)</span></span>
<span class="line">slotBase<span class="token punctuation">.</span>physicsBody<span class="token operator">?</span><span class="token punctuation">.</span>isDynamic <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>The slot base needs to be non-dynamic because we don&#39;t want it to move out of the way when a player ball hits.</p><p>The second step is also easy, but bears some explanation. As with UIKit, it&#39;s easy enough to store a variable pointing at specific nodes in your scene for when you want to make something happen, and there are lots of times when that&#39;s the right solution.</p><p>But for general use, Apple recommends assigning names to your nodes, then checking the name to see what node it is. We need to have three names in our code: good slots, bad slots and balls. This is really easy to do – just modify your <code>makeSlot(at:)</code> method so the <code>SKSpriteNode</code> creation looks like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> isGood <span class="token punctuation">{</span></span>
<span class="line">    slotBase <span class="token operator">=</span> <span class="token class-name">SKSpriteNode</span><span class="token punctuation">(</span>imageNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;slotBaseGood&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    slotGlow <span class="token operator">=</span> <span class="token class-name">SKSpriteNode</span><span class="token punctuation">(</span>imageNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;slotGlowGood&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    slotBase<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;good&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    slotBase <span class="token operator">=</span> <span class="token class-name">SKSpriteNode</span><span class="token punctuation">(</span>imageNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;slotBaseBad&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    slotGlow <span class="token operator">=</span> <span class="token class-name">SKSpriteNode</span><span class="token punctuation">(</span>imageNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;slotGlowBad&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    slotBase<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;bad&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then add this to the code where you create the balls:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">ball<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;ball&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We don&#39;t need to name the bouncers, because we don&#39;t actually care when their collisions happen.</p><p>Now comes the tricky part, which is setting up our scene to be the contact delegate of the physics world. The initial change is easy: we just need to conform to the <code>SKPhysicsContactDelegate</code> protocol then assign the physics world&#39;s <code>contactDelegate</code> property to be our scene. But by default, you still won&#39;t get notified when things collide.</p><p>What we need to do is change the <code>contactTestBitMask</code> property of our physics objects, which sets the contact notifications we want to receive. This needs to introduce a whole new concept – bitmasks – and really it doesn&#39;t matter at this point, so we&#39;re going to take a shortcut for now, then return to it in a later project.</p><p>Let&#39;s set up all the contact delegates and bitmasks now. First, make your class conform to the <code>SKPhysicsContactDelegate</code> protocol by modifying its definition to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">GameScene</span><span class="token punctuation">:</span> <span class="token class-name">SKScene</span><span class="token punctuation">,</span> <span class="token class-name">SKPhysicsContactDelegate</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Then assign the current scene to be the physics world&#39;s contact delegate by putting this line of code in <code>didMove(to:)</code>, just below where we set the scene&#39;s physics body:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">physicsWorld<span class="token punctuation">.</span>contactDelegate <span class="token operator">=</span> <span class="token keyword">self</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now for our shortcut: we&#39;re going to tell all the ball nodes to set their <code>contactTestBitMask</code> property to be equal to their <code>collisionBitMask</code>. Two bitmasks, with confusingly similar names but quite different jobs.</p><p>The <code>collisionBitMask</code> bitmask means &quot;which nodes should I bump into?&quot; By default, it&#39;s set to everything, which is why our ball are already hitting each other and the bouncers. The <code>contactTestBitMask</code> bitmask means &quot;which collisions do you want to know about?&quot; and by default it&#39;s set to nothing. So by setting <code>contactTestBitMask</code> to the value of <code>collisionBitMask</code> we&#39;re saying, &quot;tell me about every collision.&quot;</p><p>This isn&#39;t particularly efficient in complicated games, but it will make no difference at all in this current project. And, like I said, we&#39;ll return to this in a later project to explain more. Until then, add this line just before you set each ball&#39;s <code>restitution</code> property:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">ball<span class="token punctuation">.</span>physicsBody<span class="token operator">!</span><span class="token punctuation">.</span>contactTestBitMask <span class="token operator">=</span> ball<span class="token punctuation">.</span>physicsBody<span class="token operator">!</span><span class="token punctuation">.</span>collisionBitMask       </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That’s the only change required for us to detect collisions, so now it&#39;s time to write the code that does the hard work.</p><p>But first, a little explanation: when contact between two physics bodies occurs, we don&#39;t know what order it will come in. That is, did the ball hit the slot, did the slot hit the ball, or did <em>both</em> happen? I know this sounds like pointless philosophy, but it&#39;s important because we need to know which one is the ball!</p><p>Before looking at the actual contact method, I want to look at two other methods first, because this is our ultimate goal. The first one, <code>collisionBetween()</code> will be called when a ball collides with something else. The second one, <code>destroy()</code> is going to be called when we&#39;re finished with the ball and want to get rid of it.</p><p>Put these new methods into to your code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">collisionBetween</span><span class="token punctuation">(</span>ball<span class="token punctuation">:</span> <span class="token class-name">SKNode</span><span class="token punctuation">,</span> object<span class="token punctuation">:</span> <span class="token class-name">SKNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> object<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;good&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">destroy</span><span class="token punctuation">(</span>ball<span class="token punctuation">:</span> ball<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> object<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;bad&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">destroy</span><span class="token punctuation">(</span>ball<span class="token punctuation">:</span> ball<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">destroy</span><span class="token punctuation">(</span>ball<span class="token punctuation">:</span> <span class="token class-name">SKNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    ball<span class="token punctuation">.</span><span class="token function">removeFromParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>removeFromParent()</code> method removes a node from your node tree. Or, in plain English, it removes the node from your game.</p><p>You might look at that and think it&#39;s utterly redundant, because no matter what happens it&#39;s effectively the same as writing this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">collisionBetween</span><span class="token punctuation">(</span>ball<span class="token punctuation">:</span> <span class="token class-name">SKNode</span><span class="token punctuation">,</span> object<span class="token punctuation">:</span> <span class="token class-name">SKNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    ball<span class="token punctuation">.</span><span class="token function">removeFromParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But trust me on this: we&#39;re going to make these methods do more shortly, so get it right now and it will save refactoring later.</p><p>With those two in place, our contact checking method almost writes itself. We&#39;ll get told which two bodies collided, and the contact method needs to determine which one is the ball so that it can call <code>collisionBetween()</code> with the correct parameters. This is as simple as checking the names of both properties to see which is the ball, so here&#39;s the new method to do contact checking:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">didBegin</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> contact<span class="token punctuation">:</span> <span class="token class-name">SKPhysicsContact</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> contact<span class="token punctuation">.</span>bodyA<span class="token punctuation">.</span>node<span class="token operator">?</span><span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;ball&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">collisionBetween</span><span class="token punctuation">(</span>ball<span class="token punctuation">:</span> contact<span class="token punctuation">.</span>bodyA<span class="token punctuation">.</span>node<span class="token operator">!</span><span class="token punctuation">,</span> object<span class="token punctuation">:</span> contact<span class="token punctuation">.</span>bodyB<span class="token punctuation">.</span>node<span class="token operator">!</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> contact<span class="token punctuation">.</span>bodyB<span class="token punctuation">.</span>node<span class="token operator">?</span><span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;ball&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">collisionBetween</span><span class="token punctuation">(</span>ball<span class="token punctuation">:</span> contact<span class="token punctuation">.</span>bodyB<span class="token punctuation">.</span>node<span class="token operator">!</span><span class="token punctuation">,</span> object<span class="token punctuation">:</span> contact<span class="token punctuation">.</span>bodyA<span class="token punctuation">.</span>node<span class="token operator">!</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you&#39;re particularly observant, you may have noticed that we don&#39;t have a special case in there for when both bodies are balls – i.e., if one ball collides with another. This is because our <code>collisionBetween()</code> method will ignore that particular case, because it triggers code only if the other node is named &quot;good&quot; or &quot;bad&quot;.</p><p>Run the game now and you&#39;ll start to see things coming together: you can drop balls on the bouncers and they will bounce, but if they touch one of the good or bad slots the balls will be destroyed. It works, but it&#39;s boring. Players want to score points so they feel like they achieved something, even if that &quot;something&quot; is just nudging up a number on a CPU.</p><p>Before I move on, I want to return to my philosophical question from earlier: “did the ball hit the slot, did the slot hit the ball, or did <em>both</em> happen?” That last case won’t happen all the time, but it will happen <em>sometimes</em>, and it’s important to take it into account.</p><p>If SpriteKit reports a collision twice – i.e. “ball hit slot <em>and</em> slot hit ball” – then we have a problem. Look at this line of code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">collisionBetween</span><span class="token punctuation">(</span>ball<span class="token punctuation">:</span> contact<span class="token punctuation">.</span>bodyA<span class="token punctuation">.</span>node<span class="token operator">!</span><span class="token punctuation">,</span> object<span class="token punctuation">:</span> contact<span class="token punctuation">.</span>bodyB<span class="token punctuation">.</span>node<span class="token operator">!</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And now this line of code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">ball<span class="token punctuation">.</span><span class="token function">removeFromParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The first time that code runs, we force unwrap both nodes and remove the ball – so far so good. The <em>second</em> time that code runs (for the other half of the same collision), our problem strikes: we try to force unwrap something we already removed, and our game will crash.</p><p>To solve this, we’re going to rewrite the <code>didBegin()</code> method to be clearer and safer: we’ll use <code>guard</code> to ensure both <code>bodyA</code> and <code>bodyB</code> have nodes attached. If either of them don’t then this is a ghost collision and we can bail out immediately.</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">didBegin</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> contact<span class="token punctuation">:</span> <span class="token class-name">SKPhysicsContact</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">guard</span> <span class="token keyword">let</span> nodeA <span class="token operator">=</span> contact<span class="token punctuation">.</span>bodyA<span class="token punctuation">.</span>node <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">guard</span> <span class="token keyword">let</span> nodeB <span class="token operator">=</span> contact<span class="token punctuation">.</span>bodyB<span class="token punctuation">.</span>node <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> nodeA<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;ball&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">collisionBetween</span><span class="token punctuation">(</span>ball<span class="token punctuation">:</span> nodeA<span class="token punctuation">,</span> object<span class="token punctuation">:</span> nodeB<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> nodeB<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;ball&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">collisionBetween</span><span class="token punctuation">(</span>ball<span class="token punctuation">:</span> nodeB<span class="token punctuation">,</span> object<span class="token punctuation">:</span> nodeA<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It takes a little more explanation and a little more code, but the result is safer – and that’s always worth striving for!</p>`,44),C=n("h3",{id:"scores-on-the-board-sklabelnode",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#scores-on-the-board-sklabelnode"},[n("span",null,[s("Scores on the board: "),n("code",null,"SKLabelNode")])])],-1),G={class:"hint-container details"},D=n("summary",null,"Scores on the board: SKLabelNode",-1),P=e(`<p>To make a score show on the screen we need to do two things: create a score integer that tracks the value itself, then create a new node type, <code>SKLabelNode</code>, that displays the value to players.</p><p>The <code>SKLabelNode</code> class is somewhat similar to <code>UILabel</code> in that it has a <code>text</code> property, a font, a position, an alignment, and so on. Plus we can use Swift&#39;s string interpolation to set the text of the label easily, and we&#39;re even going to use the property observers you learned about in project 8 to make the label update itself when the score value changes.</p><p>Declare these properties at the top of your class:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> scoreLabel<span class="token punctuation">:</span> <span class="token class-name">SKLabelNode</span><span class="token operator">!</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">didSet</span> <span class="token punctuation">{</span></span>
<span class="line">        scoreLabel<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Score: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">score</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We&#39;re going to use the Chalkduster font, then align the label to the right and position it on the top-right edge of the scene. Put this code into your <code>didMove(to:)</code> method, just before the end:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">scoreLabel <span class="token operator">=</span> <span class="token class-name">SKLabelNode</span><span class="token punctuation">(</span>fontNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Chalkduster&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">scoreLabel<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Score: 0&quot;</span></span></span>
<span class="line">scoreLabel<span class="token punctuation">.</span>horizontalAlignmentMode <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token keyword">right</span></span>
<span class="line">scoreLabel<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">980</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">addChild</span><span class="token punctuation">(</span>scoreLabel<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That places the label into the scene, and the property observer automatically updates the label as the <code>score</code> value changes. But it&#39;s not complete yet because we don&#39;t ever modify the player&#39;s score. Fortunately, we already have places in the <code>collisionBetween()</code> method where we can do exactly that, so modify the method to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">collisionBetween</span><span class="token punctuation">(</span>ball<span class="token punctuation">:</span> <span class="token class-name">SKNode</span><span class="token punctuation">,</span> object<span class="token punctuation">:</span> <span class="token class-name">SKNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> object<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;good&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">destroy</span><span class="token punctuation">(</span>ball<span class="token punctuation">:</span> ball<span class="token punctuation">)</span></span>
<span class="line">        score <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> object<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;bad&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">destroy</span><span class="token punctuation">(</span>ball<span class="token punctuation">:</span> ball<span class="token punctuation">)</span></span>
<span class="line">        score <span class="token operator">-=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>+=</code> and <code>-=</code> operators add or subtract one to the variable depending on whether a good or bad slot was struck. When we change the variable, the property observer will spot the change and update the label.</p><p>We have a score, so that means players have the achievement they were craving, right? Well, no. Clearly all it takes to get a number even higher than Gangnam Style&#39;s YouTube views is to sit and tap at the top of the screen directly above a green slot.</p><p>Let&#39;s add some actual challenge: we&#39;re going to let you place obstacles between the top of the scene and the slots at the bottom, so that players have to position their balls exactly correctly to bounce off things in the right ways.</p><p>To make this work, we&#39;re going to add two more properties. The first one will hold a label that says either &quot;Edit&quot; or &quot;Done&quot;, and one to hold a boolean that tracks whether we&#39;re in editing mode or not. Add these two alongside the score properties from earlier:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> editLabel<span class="token punctuation">:</span> <span class="token class-name">SKLabelNode</span><span class="token operator">!</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> editingMode<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">didSet</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> editingMode <span class="token punctuation">{</span></span>
<span class="line">            editLabel<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Done&quot;</span></span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            editLabel<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Edit&quot;</span></span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then add this to <code>didMove(to:)</code> to create the edit label in the top-left corner of the scene:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">editLabel <span class="token operator">=</span> <span class="token class-name">SKLabelNode</span><span class="token punctuation">(</span>fontNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Chalkduster&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">editLabel<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Edit&quot;</span></span></span>
<span class="line">editLabel<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">addChild</span><span class="token punctuation">(</span>editLabel<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That&#39;s pretty much identical to creating the score label, so nothing to see here. We&#39;re using a property observer again to automatically change the editing label&#39;s text when edit mode is changed.</p><p>But what <em>is</em> new is detecting whether the user tapped the edit/done button or is trying to create a ball. To make this work, we&#39;re going to ask SpriteKit to give us a list of all the nodes at the point that was tapped, and check whether it contains our edit label. If it does, we&#39;ll flip the value of our <code>editingMode</code> boolean; if it doesn&#39;t, we want to execute the previous ball-creation code.</p><p>We&#39;re going to insert this change just after <code>let location =</code> and before <code>let ball =</code>, i.e. right here:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> location <span class="token operator">=</span> touch<span class="token punctuation">.</span><span class="token function">location</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// new code to go here!</span></span>
<span class="line"><span class="token keyword">let</span> ball <span class="token operator">=</span> <span class="token class-name">SKSpriteNode</span><span class="token punctuation">(</span>imageNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;ballRed&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token class-name">Change</span> that to be<span class="token punctuation">:</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> location <span class="token operator">=</span> touch<span class="token punctuation">.</span><span class="token function">location</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> objects <span class="token operator">=</span> <span class="token function">nodes</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> location<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> objects<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>editLabel<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    editingMode<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> ball <span class="token operator">=</span> <span class="token class-name">SKSpriteNode</span><span class="token punctuation">(</span>imageNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;ballRed&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// rest of ball code</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Did you notice I slipped in a small but important new method there? <code>editingMode.toggle()</code> changes <code>editingMode</code> to true if it’s currently false, and to false if it was true. We could have written <code>editingMode = !editingMode</code> there and it would do the same thing, but <code>toggle()</code> is both shorter and clearer. That change will be picked up by the property observer, and the label will be updated to reflect the change.</p><p>Obviously the <code>// rest of ball code</code> comment is where the rest of the ball-creating code goes, but note that you need to add the new closing brace after you&#39;ve created the ball, to close the <code>else</code> block.</p><p>Now that we have a boolean telling us whether we&#39;re in editing mode or not, we&#39;re going to extend <code>touchesBegan()</code> even further so that if we&#39;re in editing mode we add blocks to the screen of random sizes, and if we&#39;re not it drops a ball.</p><p>To get the structure right, this is what you want to have:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> objects<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>editLabel<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    editingMode<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> editingMode <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// create a box</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// create a ball</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>// create a ball</code> comment is where your current ball creation code goes. The <code>// create a box</code> comment is what we&#39;re going to write in just a moment.</p><p>First, we&#39;re going to use a new property on nodes called <code>zRotation</code>. When creating the background image, we gave it a Z position, which adjusts its depth on the screen, front to back. If you imagine sticking a skewer through the Z position – i.e., going directly into your screen – and through a node, then you can imagine Z rotation: it rotates a node on the screen as if it had been skewered straight through the screen.</p><p>To create randomness we’re going to be using both <code>Int.random(in:)</code> for integer values and <code>CGFloat.random(in:)</code> for <code>CGFloat</code> values, with the latter being used to create random red, green, and blue values for a <code>UIColor</code>. So, replace the <code>// create a box</code> comment with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> size <span class="token operator">=</span> <span class="token class-name">CGSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token operator">...</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> box <span class="token operator">=</span> <span class="token class-name">SKSpriteNode</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">UIColor</span><span class="token punctuation">(</span>red<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> green<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> blue<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> alpha<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> size<span class="token punctuation">:</span> size<span class="token punctuation">)</span></span>
<span class="line">box<span class="token punctuation">.</span>zRotation <span class="token operator">=</span> <span class="token class-name">CGFloat</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">box<span class="token punctuation">.</span>position <span class="token operator">=</span> location</span>
<span class="line"></span>
<span class="line">box<span class="token punctuation">.</span>physicsBody <span class="token operator">=</span> <span class="token class-name">SKPhysicsBody</span><span class="token punctuation">(</span>rectangleOf<span class="token punctuation">:</span> box<span class="token punctuation">.</span>size<span class="token punctuation">)</span></span>
<span class="line">box<span class="token punctuation">.</span>physicsBody<span class="token operator">?</span><span class="token punctuation">.</span>isDynamic <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line"><span class="token function">addChild</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So, we create a size with a height of 16 and a width between 16 and 128, then create an <code>SKSpriteNode</code> with the random size we made along with a random color, then give the new box a random rotation and place it at the location that was tapped on the screen. For a physics body, it&#39;s just a rectangle, but we need to make it non-dynamic so the boxes don&#39;t move when hit.</p><p>At this point, we almost have a game: you can tap Edit, place as many blocks as you want, then tap Done and try to score by dropping balls. It&#39;s not perfect because we don&#39;t force the Y position of new balls to be the top of the screen, but that&#39;s something you can fix yourself – how else would you learn, right?</p><figure><img src="https://www.hackingwithswift.com/img/books/hws/11-3.png" alt="Once the edit button has been tapped, users can create as many obstacles as they want." tabindex="0" loading="lazy"><figcaption>Once the edit button has been tapped, users can create as many obstacles as they want.</figcaption></figure>`,31),L=n("p",null,"Trust me, by the time you’ve gone through those three your game will really be coming together – I hope you’re impressed by how much work SpriteKit does for us!",-1),M=n("hr",null,null,-1);function A(r,I){const t=u("router-link"),o=u("VPCard"),c=u("VidStack");return m(),k("div",null,[n("h1",g,[n("a",w,[n("span",null,h(r.$frontmatter.title)+" 관련",1)])]),n("nav",v,[n("ul",null,[n("li",null,[a(t,{to:"#project-11-part-two"},{default:p(()=>[s("Project 11, part two")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#spinning-slots-skaction"},{default:p(()=>[s("Spinning slots: SKAction")]),_:1})]),n("li",null,[a(t,{to:"#collision-detection-skphysicscontactdelegate"},{default:p(()=>[s("Collision detection: SKPhysicsContactDelegate")]),_:1})]),n("li",null,[a(t,{to:"#scores-on-the-board-sklabelnode"},{default:p(()=>[s("Scores on the board: SKLabelNode")]),_:1})])])])])]),y,a(o,i(l({title:"100 Days of Swift - Day 46",desc:"Project 11, part two",link:"https://www.hackingwithswift.com/100/46",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),f,n("details",S,[x,a(o,i(l({title:"100 Days of Swift - Day 46 - Spinning slots: SKAction",desc:"Spinning slots: SKAction",link:"https://hackingwithswift.com/read/11/4/spinning-slots-skaction",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/7t9Vy529unw"}),B,q,j]),K,n("details",_,[N,a(o,i(l({title:"100 Days of Swift - Day 46 - Collision detection: SKPhysicsContactDelegate",desc:"Collision detection: SKPhysicsContactDelegate",link:"https://hackingwithswift.com/read/11/5/collision-detection-skphysicscontactdelegate",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/etL7NXfpZR8"}),T]),C,n("details",G,[D,a(o,i(l({title:"100 Days of Swift - Day 46 - Scores on the board: SKLabelNode",desc:"Scores on the board: SKLabelNode",link:"https://hackingwithswift.com/read/11/6/scores-on-the-board-sklabelnode",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/kSMS0h9qR7s"}),P]),L,M])}const z=d(b,[["render",A],["__file","46.html.vue"]]),R=JSON.parse('{"path":"/swift/100-days-of-swift/46.html","title":"Day 46","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 46","description":"100 Days of Swift > Day 46","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of Swift > Day 46"},{"property":"og:description","content":"Day 46"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swift/46.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swift/46.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 46"}],["meta",{"property":"og:description","content":"100 Days of Swift > Day 46"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.hackingwithswift.com/img/books/hws/11-2.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 46\\",\\"image\\":[\\"https://www.hackingwithswift.com/img/books/hws/11-2.png\\",\\"https://www.hackingwithswift.com/img/books/hws/11-3.png\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 11, part two","slug":"project-11-part-two","link":"#project-11-part-two","children":[{"level":3,"title":"Spinning slots: SKAction","slug":"spinning-slots-skaction","link":"#spinning-slots-skaction","children":[]},{"level":3,"title":"Collision detection: SKPhysicsContactDelegate","slug":"collision-detection-skphysicscontactdelegate","link":"#collision-detection-skphysicscontactdelegate","children":[]},{"level":3,"title":"Scores on the board: SKLabelNode","slug":"scores-on-the-board-sklabelnode","link":"#scores-on-the-board-sklabelnode","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":9}]},"readingTime":{"minutes":12.28,"words":3684},"filePathRelative":"swift/100-days-of-swift/46.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{z as comp,R as data};
