import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,a as s,t as k,b as n,w as o,n as p,g as l,d as a,e as t,r as c,o as w}from"./app-U_bew1in.js";const v={},f={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},b={class:"table-of-contents"},y=s("hr",null,null,-1),_=s("h2",{id:"project-16-part-4",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#project-16-part-4"},[s("span",null,"Project 16, part 4")])],-1),S=s("p",null,"It’s time to start putting your new techniques into action, and this project is so big it takes three implementation days to complete. But this is day 82, so you’ve shown you have the willpower to make amazing things – as the aviation pioneer Amelia Earhart once said, “the most difficult thing is the decision to act, the rest is merely tenacity.”",-1),q=s("p",null,"Today we're going to return to SwiftData, because this app is a great candidate for storing data there. I know you might think we're just repeating old stuff, but trust me: repetition is one of the most important parts of learning, and I left quite a few days between today and the previous SwiftData material specifically because adding that extra space helps re-enforcement. (If you're curious, it's a technique called spaced repetition – it works!)",-1),D=s("p",null,"Anyway, enough chat – you have lots to get through today, so let’s get on to the code.",-1),P=s("p",null,[s("strong",null,"Today you have three topics to work through, in which we'll cover tab views, SwiftData filtering, and more.")],-1),x=s("h3",{id:"building-our-tab-bar",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#building-our-tab-bar"},[s("span",null,"Building our tab bar")])],-1),V={class:"hint-container details"},T=s("summary",null,"Building our tab bar",-1),I=t(`<p>This app is going to display four SwiftUI views inside a tab bar: one to show everyone that you met, one to show people you have contacted, another to show people you <em>haven’t</em> contacted, and a final one showing your personal information for others to scan.</p><p>Those first three views are variations on the same concept, but the last one is quite different. As a result, we can represent all our UI with just three views: one to display people, one to show our data, and one to bring all the others together using <code>TabView</code>.</p><p>So, our first step will be to create placeholder views for our tabs that we can come back and fill in later. Press <kbd>Cmd</kbd>+<kbd>N</kbd> to make a new SwiftUI view and call it “ProspectsView”, then create another SwiftUI view called “MeView”. You can leave both of them with the default “Hello, World!” text view; it doesn’t matter for now.</p><p>For now, what matters is <code>ContentView</code>, because that’s where we’re going to store our <code>TabView</code> that contains all the other views in our UI. We’re going to add some more logic here shortly, but for now this is just going to be a <code>TabView</code> with three instances of <code>ProspectsView</code> and one <code>MeView</code>. Each of those views will have a <code>tabItem()</code> modifier with an image that I picked out from SF Symbols and some text.</p><p>Replace the body of your current <code>ContentView</code> with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">TabView</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ProspectsView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span>tabItem <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Everyone&quot;</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;person.3&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token class-name">ProspectsView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span>tabItem <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Contacted&quot;</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;checkmark.circle&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token class-name">ProspectsView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span>tabItem <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Uncontacted&quot;</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;questionmark.diamond&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token class-name">MeView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span>tabItem <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Me&quot;</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;person.crop.square&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you run the app now you’ll see a neat tab bar across the bottom of the screen, allowing us to tap through each of our four views.</p><p>Now, obviously creating three instances of <code>ProspectsView</code> will be weird in practice because they’ll just be identical, but we can fix that by customizing each view. Remember, we want the first one to show every person you’ve met, the second to show people you have contacted, and the third to show people you <em>haven’t</em> contacted, and we can represent that with an enum plus a property on <code>ProspectsView</code>.</p><p>So, add this enum inside <code>ProspectsView</code> now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">FilterType</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token keyword">none</span><span class="token punctuation">,</span> contacted<span class="token punctuation">,</span> uncontacted</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we can use that to allow each instance of <code>ProspectsView</code> to be slightly different by giving it a new property:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> filter<span class="token punctuation">:</span> <span class="token class-name">FilterType</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This will immediately break <code>ContentView</code> and its preview because they need to provide a value for that property when creating <code>ProspectsView</code>, but first let’s use it to customize each of the three views just a little by giving them a navigation bar title.</p><p>Start by adding this computed property to <code>ProspectsView</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">switch</span> filter <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token keyword">none</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token string-literal"><span class="token string">&quot;Everyone&quot;</span></span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span>contacted<span class="token punctuation">:</span></span>
<span class="line">        <span class="token string-literal"><span class="token string">&quot;Contacted people&quot;</span></span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span>uncontacted<span class="token punctuation">:</span></span>
<span class="line">        <span class="token string-literal"><span class="token string">&quot;Uncontacted people&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now replace the default “Hello, World!” body text with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">NavigationStack</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, World!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That at least makes each of the <code>ProspectsView</code> instances look slightly different so we can be sure the tabs are working correctly.</p><p>To make our code compile again we need to make sure that every <code>ProspectsView</code> initializer is called with a filter. So, change your preview code to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">ProspectsView</span><span class="token punctuation">(</span>filter<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">none</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Then change the three <code>ProspectsView</code> instances in <code>ContentView</code> so they have <code>filter: .none</code>, <code>filter: .contacted</code>, and <code>filter: .uncontacted</code> respectively.</p><p>If you run the app now you’ll see it’s looking better. Now let&#39;s bring in some data…</p>`,22),j=s("h3",{id:"storing-our-data-with-swiftdata",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#storing-our-data-with-swiftdata"},[s("span",null,"Storing our data with SwiftData")])],-1),C={class:"hint-container details"},U=s("summary",null,"Storing our data with SwiftData",-1),N=t(`<p>Lots of apps are great candidates for SwiftData, and most of the time it takes surprisingly little work to get it all set up.</p><p>In our app we have a <code>TabView</code> that contains three instances of <code>ProspectsView</code>, and we want all three of those to work as different views on the same shared data. In SwiftData terms, this means they all access the same model context, but using slightly different queries.</p><p>So, start by making a new Swift file called Prospect.swift, replacing its Foundation import with SwiftData, then giving it this code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Model</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Prospect</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> emailAddress<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> isContacted<span class="token punctuation">:</span> <span class="token class-name">Bool</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Once you have that, just type <code>in</code> below the <code>isContacted</code> property to have Xcode autocomplete the initializer for you.</p><p>Remember, SwiftData&#39;s <code>@Model</code> macro can only be used on a class, but it means we can share instances of that object in several views to have them all kept up to date automatically.</p>`,6),B=s("code",null,"HotProspectsApp.swift",-1),A=s("code",null,"modelContainer(for:)",-1),F=t(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">WindowGroup</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">modelContainer</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token class-name">Prospect</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That creates storage for our <code>Prospect</code> class, but also places a shared SwiftData model context into every SwiftUI view in our app, all with one line of code.</p><p>We want all our <code>ProspectsView</code> instances to share that model data, so they are all pointing to the same underlying data. This means adding two properties: one to access the model context that was just created for us, and one to perform a query for <code>Prospect</code> objects.</p>`,3),z=s("code",null,"ProspectsView.swift",-1),O=s("code",null,"ProspectsView",-1),W=t(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>sort<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token class-name">Prospect</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token keyword">var</span> prospects<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Prospect</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>modelContext<span class="token punctuation">)</span> <span class="token keyword">var</span> modelContext</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Tip: If you intend to use Xcode&#39;s previews, add <code>modelContainer(for: Prospect.self)</code> to your preview code.</p><p>That really is all it takes – I don’t think there’s a way SwiftData could make this any easier.</p><p>Soon we’re going to be adding code to add prospects by scanning QR codes, but for now we’re going to add a navigation bar item that just adds test data and shows it on-screen.</p><p>Change the <code>body</code> property of <code>ProspectsView</code> to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">NavigationStack</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;People: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">prospects<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span>toolbar <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Scan&quot;</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;qrcode.viewfinder&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">let</span> prospect <span class="token operator">=</span> <span class="token class-name">Prospect</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Paul Hudson&quot;</span></span><span class="token punctuation">,</span> emailAddress<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;paul@hackingwithswift.com&quot;</span></span><span class="token punctuation">,</span> isContacted<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line">                modelContext<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>prospect<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now you’ll see a “Scan” button on the first three views of our tab view, and tapping it adds a person to all three simultaneously – you’ll see the count increment no matter which button you tap.</p>`,7),R=s("h3",{id:"dynamically-filtering-our-swiftdata-query",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#dynamically-filtering-our-swiftdata-query"},[s("span",null,"Dynamically filtering our SwiftData query")])],-1),E={class:"hint-container details"},L=s("summary",null,"Dynamically filtering our SwiftData query",-1),M=t(`<p>Our basic SwiftData query looks like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Query</span><span class="token punctuation">(</span>sort<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token class-name">Prospect</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token keyword">var</span> prospects<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Prospect</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>By default that will load all <code>Prospect</code> model objects, sorting them by name, and while that&#39;s fine for the Everyone tab, it&#39;s not enough for the other two.</p><p>In our app, we have three instances of <code>ProspectsView</code> that vary only according to the <code>FilterType</code> property that gets passed in from our tab view. We’re already using that to set the title of each view, but we can also use it to filter our query.</p><p>Yes, we already have a default query in place, but if we add an initializer we can override that when a filter is set.</p><p>Add this initializer to <code>ProspectsView</code> now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">init</span><span class="token punctuation">(</span>filter<span class="token punctuation">:</span> <span class="token class-name">FilterType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">self</span><span class="token punctuation">.</span>filter <span class="token operator">=</span> filter</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> filter <span class="token operator">!=</span> <span class="token punctuation">.</span><span class="token keyword">none</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> showContactedOnly <span class="token operator">=</span> filter <span class="token operator">==</span> <span class="token punctuation">.</span>contacted</span>
<span class="line"></span>
<span class="line">        _prospects <span class="token operator">=</span> <span class="token class-name">Query</span><span class="token punctuation">(</span>filter<span class="token punctuation">:</span> <span class="token other-directive property">#Predicate</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token short-argument">$0</span><span class="token punctuation">.</span>isContacted <span class="token operator">==</span> showContactedOnly</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span> sort<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">SortDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token class-name">Prospect</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We&#39;ve looked at creating queries manually previously, but there is one line that really stands out:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> showContactedOnly <span class="token operator">=</span> filter <span class="token operator">==</span> <span class="token punctuation">.</span>contacted </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If that made you do a double take, break it down into two parts. First, this check:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">filter <span class="token operator">==</span> <span class="token punctuation">.</span>contacted </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That will return true if <code>filter</code> is equal to <code>.contacted</code>, or false otherwise. And now this part:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> showContactedOnly <span class="token operator">=</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That will assign the result of <code>filter == .contacted</code> to a new constant called <code>showContactedOnly</code>. So, if we read the whole line, it means &quot;set <code>showContactedOnly</code> to true if our filter is set to <code>.contacted</code>.&quot; This makes our SwiftData predicate easy, because we can compare that constant directly against <code>isContacted</code>.</p><p>With that initializer in place, we can now create a <code>List</code> to loop over the resulting array. This will show both the title and email address for each prospect using a <code>VStack</code> – replace the existing text view in <code>ProspectsView</code> with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">List</span><span class="token punctuation">(</span>prospects<span class="token punctuation">)</span> <span class="token punctuation">{</span> prospect <span class="token keyword">in</span></span>
<span class="line">    <span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span>prospect<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span>prospect<span class="token punctuation">.</span>emailAddress<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>secondary<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you run the app again you’ll see things are starting to look much better.</p>`,17),H=s("hr",null,null,-1);function Y(d,K){const e=c("router-link"),i=c("VPCard"),r=c("YouTube"),u=c("FontIcon");return w(),m("div",null,[s("h1",f,[s("a",g,[s("span",null,k(d.$frontmatter.title)+" 관련",1)])]),s("nav",b,[s("ul",null,[s("li",null,[n(e,{to:"#project-16-part-4"},{default:o(()=>[a("Project 16, part 4")]),_:1}),s("ul",null,[s("li",null,[n(e,{to:"#building-our-tab-bar"},{default:o(()=>[a("Building our tab bar")]),_:1})]),s("li",null,[n(e,{to:"#storing-our-data-with-swiftdata"},{default:o(()=>[a("Storing our data with SwiftData")]),_:1})]),s("li",null,[n(e,{to:"#dynamically-filtering-our-swiftdata-query"},{default:o(()=>[a("Dynamically filtering our SwiftData query")]),_:1})])])])])]),y,n(i,p(l({title:"100 Days of SwiftUI - Day 82",desc:"Project 16, part 4",link:"https://www.hackingwithswift.com/100/swiftui/82",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),_,S,q,D,P,x,s("details",V,[T,n(i,p(l({title:"100 Days of SwiftUI - Day 82 - Building our tab bar",desc:"Building our tab bar",link:"https://hackingwithswift.com/books/ios-swiftui/building-our-tab-bar",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(r,{id:"1ThJ0S-c2Dk"}),I]),j,s("details",C,[U,n(i,p(l({title:"100 Days of SwiftUI - Day 82 - Storing our data with SwiftData",desc:"Storing our data with SwiftData",link:"https://hackingwithswift.com/books/ios-swiftui/storing-our-data-with-swiftdata",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(r,{id:"AYymiXF8G40"}),N,s("p",null,[a("Now that we have something to store, we can tell SwiftData to create a model container for it. This means going to "),n(u,{icon:"fa-brands fa-swift"}),B,a(", giving it an import for SwiftData, then adding the "),A,a(" modifier like this:")]),F,s("p",null,[a("So, go ahead and open "),n(u,{icon:"fa-brands fa-swift"}),z,a(", give it an import for SwiftData, then add these two new properties to the "),O,a(" struct:")]),W]),R,s("details",E,[L,n(i,p(l({title:"100 Days of SwiftUI - Day 82 - Dynamically filtering our SwiftData query",desc:"Dynamically filtering our SwiftData query",link:"https://hackingwithswift.com/books/ios-swiftui/dynamically-filtering-our-swiftdata-query",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(r,{id:"vWKOXetgr4g"}),M]),H])}const Z=h(v,[["render",Y],["__file","82.html.vue"]]),G=JSON.parse('{"path":"/swift/100-days-of-swiftui/82.html","title":"Day 82","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 82","description":"100 Days of SwiftUI > Day 82","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 82"},{"property":"og:description","content":"Day 82"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/82.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/82.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 82"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 82"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 82\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 16, part 4","slug":"project-16-part-4","link":"#project-16-part-4","children":[{"level":3,"title":"Building our tab bar","slug":"building-our-tab-bar","link":"#building-our-tab-bar","children":[]},{"level":3,"title":"Storing our data with SwiftData","slug":"storing-our-data-with-swiftdata","link":"#storing-our-data-with-swiftdata","children":[]},{"level":3,"title":"Dynamically filtering our SwiftData query","slug":"dynamically-filtering-our-swiftdata-query","link":"#dynamically-filtering-our-swiftdata-query","children":[]}]}],"git":{"createdTime":1708602914000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":6}]},"readingTime":{"minutes":6.02,"words":1807},"filePathRelative":"swift/100-days-of-swiftui/82.md","localizedDate":"2024년 2월 22일","excerpt":"\\n\\n<hr>\\n"}');export{Z as comp,G as data};
