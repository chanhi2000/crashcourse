import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,a as s,t as d,b as e,n as t,g as i,d as n,e as o,r as c,o as u}from"./app-U_bew1in.js";const v={},b={id:"frontmatter-title-관련",tabindex:"-1"},h={class:"header-anchor",href:"#frontmatter-title-관련"},k=s("nav",{class:"table-of-contents"},[s("ul")],-1),g=s("hr",null,null,-1),y=s("p",null,"Helm을 설치했으니 이제 Helm으로 쿠버네티스 클러스터에 MySQL을 설치해보겠습니다. 참고로 Helm은 Minikube 클러스터나 kubeadm, kOps로 만든 클러스터 모두 사용 가능합니다.",-1),f={href:"https://artifacthub.io/",target:"_blank",rel:"noopener noreferrer"},S=o(`<p>다음 명령을 입력하여 bitnami 저장소를 추가합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">helm repo <span class="token function">add</span> bitnami https://charts.bitnami.com/bitnami</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>이제 <code>helm</code> 명령으로 MySQL을 설치해야 하는데 <code>helm</code> 명령의 기본 형식은 다음과 같습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">helm <span class="token function">install</span> <span class="token operator">&lt;</span>릴리스 이름<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>옵션<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>저장소 이름<span class="token operator">&gt;</span>/<span class="token operator">&lt;</span>차트 이름<span class="token operator">&gt;</span>\`</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,4),_={href:"https://artifacthub.io/packages/helm/bitnami/mysql",target:"_blank",rel:"noopener noreferrer"},q=s("code",null,"helm install hello-mysql bitnami/mysql",-1),T={href:"https://artifacthub.io/packages/helm/bitnami/mysql#parameters",target:"_blank",rel:"noopener noreferrer"},M=o(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">helm <span class="token function">install</span> hello-mysql <span class="token parameter variable">--set</span> <span class="token assign-left variable">auth.rootPassword</span><span class="token operator">=</span>hellopassword bitnami/mysql</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># NAME: hello-mysql</span></span>
<span class="line"><span class="token comment"># LAST DEPLOYED: Fri Dec  2 12:16:56 2022</span></span>
<span class="line"><span class="token comment"># NAMESPACE: default</span></span>
<span class="line"><span class="token comment"># STATUS: deployed</span></span>
<span class="line"><span class="token comment"># REVISION: 1</span></span>
<span class="line"><span class="token comment"># TEST SUITE: None</span></span>
<span class="line"><span class="token comment"># NOTES:</span></span>
<span class="line"><span class="token comment"># CHART NAME: mysql</span></span>
<span class="line"><span class="token comment"># CHART VERSION: 9.4.4</span></span>
<span class="line"><span class="token comment"># APP VERSION: 8.0.31</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># ** Please be patient while the chart is being deployed **</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Tip:</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment">#   Watch the deployment status using the command: kubectl get pods -w --namespace default</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Services:</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment">#   echo Primary: hello-mysql.default.svc.cluster.local:3306</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Execute the following to get the administrator credentials:</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment">#   echo Username: root</span></span>
<span class="line"><span class="token comment">#   MYSQL_ROOT_PASSWORD=$(kubectl get secret --namespace default hello-mysql -o jsonpath=&quot;{.data.mysql-root-password}&quot; | base64 -d)</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># To connect to your database:</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment">#   1. Run a pod that you can use as a client:</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment">#       kubectl run hello-mysql-client --rm --tty -i --restart=&#39;Never&#39; --image  docker.io/bitnami/mysql:8.0.31-debian-11-r10 --namespace default --env MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD --command -- bash</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment">#   2. To connect to primary service (read/write):</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment">#       mysql -h hello-mysql.default.svc.cluster.local -uroot -p&quot;$MYSQL_ROOT_PASSWORD&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>helm install hello-mysql --set auth.rootPassword=hellopassword bitnami/mysql</code><ul><li><code>helm install</code>: Helm 설치 명령입니다.</li><li><code>hello-mysql</code>: Helm 차트를 클러스터에 설치했을 때 릴리스 이름입니다. 이후 이 이름으로 쿠버네티스의 오브젝트들이 생성됩니다.</li><li><code>--set auth.rootPassword=hellopassword</code>: 각종 설정값을 설정하는 부분입니다. <code>--set</code> 뒤에 <code>&lt;키&gt;=&lt;값&gt;</code> 형식으로 설정해주면 됩니다. 여러 개를 설정할 때는 <code>&lt;키&gt;=&lt;값&gt;,&lt;키&gt;=&lt;값&gt;</code>와 같이 키와 값을 콤마(,)로 구분해줍니다. 여기서는 <code>auth.rootPassword=hellopassword</code>와 같이 root 패스워드를 설정하였습니다.</li><li><code>bitnami/mysql</code>: 우리는 <code>bitnami</code> 저장소를 추가했고, <code>mysql</code> 차트를 설치할 것이므로 <code>bitnami/mysql</code>로 입력해줍니다.</li></ul></li></ul><p>MySQL 차트 설치가 끝났으니, 설치된 릴리스 목록을 출력해보겠습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">helm <span class="token function">ls</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># NAME            NAMESPACE       REVISION        UPDATED                                 STATUS          CHART           APP VERSION</span></span>
<span class="line"><span class="token comment"># hello-mysql     default         1               2022-12-02 12:16:56.8201411 +0900 KST   deployed        mysql-9.4.4     8.0.31</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>릴리스 이름으로 <code>hello-mysql</code>이 설치된 것을 볼 수 있습니다.</p><p>이제 설치된 MySQL 데이터베이스에 접속해보겠습니다. 위에 나와있는 <b>1. Run a pod that you can use as a client:</b>에서 <code>$MYSQL_ROOT_PASSWORD</code> 부분을 <code>hellopassword</code>로 바꾸고, <code>-p&quot;$MYSQL_ROOT_PASSWORD&quot;</code> 부분을 <code>-phellopassword</code>으로 바꿔서 실행해봅니다. 그리고 <code>show databases;</code> 명령을 실행하여 데이터베이스 목록을 출력해봅니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl run hello-mysql-client <span class="token parameter variable">--rm</span> <span class="token parameter variable">--tty</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">--restart</span><span class="token operator">=</span><span class="token string">&#39;Never&#39;</span> <span class="token parameter variable">--image</span> docker.io/bitnami/mysql:8.0.31-debian-11-r10 <span class="token parameter variable">--namespace</span> default <span class="token parameter variable">--env</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>hellopassword <span class="token parameter variable">--command</span> -- <span class="token function">bash</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line highlighted"><span class="token comment"># If you don&#39;t see a command prompt, try pressing enter.</span></span>
<span class="line"><span class="token comment"># I have no name!@hello-mysql-client:/$ mysql -h hello-mysql.default.svc.cluster.local -uroot -phellopassword</span></span>
<span class="line"><span class="token comment"># mysql: [Warning] Using a password on the command line interface can be insecure.</span></span>
<span class="line"><span class="token comment"># Welcome to the MySQL monitor.  Commands end with ; or \\g.</span></span>
<span class="line"><span class="token comment"># Your MySQL connection id is 6504</span></span>
<span class="line"><span class="token comment"># Server version: 8.0.31 Source distribution</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Copyright (c) 2000, 2022, Oracle and/or its affiliates.</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Oracle is a registered trademark of Oracle Corporation and/or its</span></span>
<span class="line"><span class="token comment"># affiliates. Other names may be trademarks of their respective</span></span>
<span class="line"><span class="token comment"># owners.</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Type &#39;help;&#39; or &#39;\\h&#39; for help. Type &#39;\\c&#39; to clear the current input statement.</span></span>
<span class="line highlighted"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># mysql&gt; show databases;</span></span>
<span class="line"><span class="token comment"># +--------------------+</span></span>
<span class="line"><span class="token comment"># | Database           |</span></span>
<span class="line"><span class="token comment"># +--------------------+</span></span>
<span class="line"><span class="token comment"># | information_schema |</span></span>
<span class="line"><span class="token comment"># | my_database        |</span></span>
<span class="line"><span class="token comment"># | mysql              |</span></span>
<span class="line"><span class="token comment"># | performance_schema |</span></span>
<span class="line"><span class="token comment"># | sys                |</span></span>
<span class="line"><span class="token comment"># +--------------------+</span></span>
<span class="line"><span class="token comment"># 5 rows in set (0.00 sec)</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># mysql&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>데이터베이스 목록이 잘 출력되는 것을 볼 수 있습니다. <kbd>Ctrl</kbd>+<kbd>D</kbd>를 두 번 입력하여 MySQL 클라이언트와 파드에서 빠져나옵니다.</p><div class="hint-container info"><p class="hint-container-title">컨텍스트 전환</p><p>Helm은 현재 컨텍스트에 연결된 클러스터에 차트를 설치합니다. 먼저 <code>.kube/config</code>에 저장된 컨텍스트 목록을 확인하는 명령은 <code>kubectl config get-contexts</code>입니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl config get-contexts</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># CURRENT   NAME                               CLUSTER                            AUTHINFO                           NAMESPACE</span></span>
<span class="line"><span class="token comment"># *         k8s.ap-northeast-2.aws.hello.com   k8s.ap-northeast-2.aws.hello.com   k8s.ap-northeast-2.aws.hello.com</span></span>
<span class="line"><span class="token comment">#           kubernetes-admin@kubernetes        kubernetes                         kubernetes-admin</span></span>
<span class="line"><span class="token comment">#           minikube                           minikube                           minikube                           default</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>만약 <code>minikube</code> 컨텍스트로 전환하고 싶다면 <code>kubectl config use-context</code> 명령을 사용합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl config use-context minikube</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Switched to context &quot;minikube&quot;.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이렇게 하면 Minikube 클러스터에 Helm으로 차트를 설치하게 됩니다.</p></div><div class="hint-container info"><p class="hint-container-title">릴리스 삭제</p><p>설치된 릴리스를 삭제할 때는 <code>helm uninstall</code> 명령을 사용합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">helm uninstall hello-mysql</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># release &quot;hello-mysql&quot; uninstalled</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr>`,11);function O(p,w){const l=c("VPCard"),a=c("FontIcon");return u(),m("div",null,[s("h1",b,[s("a",h,[s("span",null,d(p.$frontmatter.title)+" 관련",1)])]),e(l,t(i({title:"목차",desc:"언제나 최신 Kubernetes",link:"/k8s/always-up-to-date-kubernetes/README.md",logo:"https://pyrasis.com/assets/images/pyrasis.png",background:"rgba(31,41,55,0.2)"})),null,16),k,g,e(l,t(i({title:"Unit 8.2 Helm으로 MySQL 설치하기",desc:"언제나 최신 Kubernetes",link:"https://pyrasis.com/jHLsAlwaysUpToDateKubernetes/Unit08/02",logo:"https://pyrasis.com/assets/images/pyrasis.png",background:"rgba(31,41,55,0.2)"})),null,16),y,s("p",null,[n("참고로 Helm에서는 패키지를 차트(Chart)라고 부르는데, Helm 공식 저장소(리포지토리)는 차트들이 유지보수가 되지 않은지 오래 되었습니다. 따라서 여기서는 "),s("a",f,[e(a,{icon:"fas fa-globe"}),n("https://artifacthub.io/")]),n("에 올라와있는 저장소를 사용하도록 하겠습니다.")]),S,s("p",null,[n("우리가 설치할 MySQL 차트는 "),s("a",_,[e(a,{icon:"fas fa-globe"}),n("https://artifacthub.io/packages/helm/bitnami/mysql")]),n("입니다. 이 차트를 "),q,n("과 같이 기본 설정으로 설치해도 되지만, 여기서는 각종 설정도 추가해서 설치해보겠습니다. 각 설정값(Parameter)은 "),s("a",T,[e(a,{icon:"fas fa-globe"}),n("https://artifacthub.io/packages/helm/bitnami/mysql#parameters")]),n("에 잘 나와있습니다.")]),M])}const E=r(v,[["render",O],["__file","08B.html.vue"]]),P=JSON.parse('{"path":"/k8s/always-up-to-date-kubernetes/08B.html","title":"08B. Helm으로 MySQL 설치하기","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"08B. Helm으로 MySQL 설치하기","description":"언제나 최신 Kubernetes > 08B. Helm으로 MySQL 설치하기","category":["Kubernetes"],"tag":["crashcourse","digitalocean","kubernetes","minkube","kubctl"],"head":[[{"meta":null},{"property":"og:title","content":"언제나 최신 Kubernetes > 08B. Helm으로 MySQL 설치하기"},{"property":"og:description","content":"08B. Helm으로 MySQL 설치하기"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/k8s/always-up-to-date-kubernetes/08B.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/k8s/always-up-to-date-kubernetes/08B.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"08B. Helm으로 MySQL 설치하기"}],["meta",{"property":"og:description","content":"언제나 최신 Kubernetes > 08B. Helm으로 MySQL 설치하기"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"digitalocean"}],["meta",{"property":"article:tag","content":"kubernetes"}],["meta",{"property":"article:tag","content":"minkube"}],["meta",{"property":"article:tag","content":"kubctl"}],["meta",{"property":"article:published_time","content":"2022-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"08B. Helm으로 MySQL 설치하기\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]],"next":"/k8s/always-up-to-date-kubernetes/README.md","date":"2022-10-22T00:00:00.000Z","isOrignial":false},"headers":[],"git":{"createdTime":1712118043000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":3}]},"readingTime":{"minutes":2.11,"words":634},"filePathRelative":"k8s/always-up-to-date-kubernetes/08B.md","localizedDate":"2022년 10월 22일","excerpt":"\\n"}');export{E as comp,P as data};
