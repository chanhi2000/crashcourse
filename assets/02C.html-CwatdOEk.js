import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,a as n,t as m,b as a,w as l,n as h,g,d as s,e as t,r as i,o as k}from"./app-U_bew1in.js";const v={},b={id:"frontmatter-title-관련",tabindex:"-1"},_={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},y=n("hr",null,null,-1),j=n("hr",null,null,-1),q={href:"https://github.com/pahkey/sbb3/tree/2-03",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"pahkey/sbb3",-1),O=n("code",null,"2-03",-1),A=t(`<p>우리가 만들 SBB는 질문 답변 게시판이다. 질문이나 답변을 작성하면 데이터가 생성된다. 그러므로 데이터를 저장하거나 조회하거나 수정하는 등의 기능을 구현해야 한다. 웹 서비스는 데이터를 처리할 때 대부분 데이터베이스를 사용한다.</p><figure><img src="https://wikidocs.net/images/page/161164/O_2-03_1.png" alt="SQL을 이용한 데이터 관리" tabindex="0" loading="lazy"><figcaption>SQL을 이용한 데이터 관리</figcaption></figure><p>그런데 데이터베이스를 사용하려면 SQL 쿼리(query)라는 구조화된 질의를 작성하고 실행하는 등의 복잡한 과정이 필요하다. 이때 ORM(object relational mapping)을 이용하면 자바 문법만으로도 데이터베이스를 다룰 수 있다. 즉, ORM을 이용하면 개발자가 쿼리를 직접 작성하지 않아도 데이터베이스의 데이터를 처리할 수 있다.</p><blockquote><p>이 책은 독자가 데이터베이스 개념이나 SQL 쿼리의 기초는 안다고 가정한다. 그러나 독자가 이런 기초지식이 없어도 이 책의 실습을 따라 하고 내용을 이해하는데 무리가 없도록 구성했다. ORM은 데이터베이스에 데이터를 저장하는 테이블을 자바 클래스로 만들어 관리하는 기술로 이해해도 좋다.</p></blockquote><hr><h2 id="orm" tabindex="-1"><a class="header-anchor" href="#orm"><span>ORM</span></a></h2><p>SQL 쿼리와 ORM을 비교해 보자. 다음과 같은 형태로 구성된 질문 테이블에 데이터를 입력한다고 가정해 보자.</p><h3 id="question-테이블-구성-예" tabindex="-1"><a class="header-anchor" href="#question-테이블-구성-예"><span><code>question</code> 테이블 구성 예</span></a></h3><table><thead><tr><th style="text-align:center;"><code>id</code></th><th style="text-align:left;"><code>subject</code></th><th style="text-align:left;"><code>content</code></th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:left;">안녕하세요</td><td style="text-align:left;">가입 인사드립니다 ^^</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:left;">질문 있습니다</td><td style="text-align:left;">ORM이 궁금합니다</td></tr><tr><td style="text-align:center;">...</td><td style="text-align:left;">...</td><td style="text-align:left;">...</td></tr></tbody></table><blockquote><p>표에서 <code>id</code>는 각 데이터를 구분하는 고윳값이다. 데이터베이스의 설정을 통해 값이 자동으로 증가되어 저장되도록 할수 있다.</p></blockquote><p>이렇게 구성된 <code>question</code> 테이블에 새로운 데이터를 삽입하는 쿼리는 보통 다음처럼 작성한다.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> question <span class="token punctuation">(</span>subject<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;안녕하세요&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;가입 인사드립니다 ^^&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> question <span class="token punctuation">(</span>subject<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;질문 있습니다&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ORM이 궁금합니다&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>하지만 ORM을 사용하면 쿼리 대신 자바 코드로 다음처럼 작성할 수 있다.</p><blockquote><p>다음코드는 작성할 필요없이 눈으로만 확인하자.</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Question</span> q1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Question</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">q1<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">&quot;안녕하세요&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">q1<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">&quot;가입 인사드립니다 ^^&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">this</span><span class="token punctuation">.</span>questionRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>q1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Question</span> q2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Question</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">q2<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">&quot;질문 있습니다&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">q2<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">&quot;ORM이 궁금합니다&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">this</span><span class="token punctuation">.</span>questionRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>q2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>위와 같이 ORM을 이용한 데이터의 삽입 예제는 코드 자체만 놓고 보면 양이 많아 보이지만 별도의 SQL 문법을 배우지 않아도 된다는 장점이 있다.</p></blockquote><p>코드에서 Question은 자바 클래스이며, 이처럼 데이터를 관리하는 데 사용하는 ORM 클래스를 엔티티(Entity)라고 한다. ORM을 사용하면 내부에서 SQL 쿼리를 자동으로 생성해 주므로 직접 작성하지 않아도 된다. 즉, 자바만 알아도 데이터베이스에 질의할 수 있다.</p><div class="hint-container info"><p class="hint-container-title">ORM의 장점을 더 알아보자</p><p>ORM을 이용하면 데이터베이스 종류에 상관 없이 일관된 코드를 유지할 수 있어서 프로그램을 유지·보수하기가 편리하다. 또한 내부에서 안전한 SQL 쿼리를 자동으로 생성해 주므로 개발자가 달라도 통일된 쿼리를 작성할 수 있고 오류 발생률도 줄일 수 있다.</p></div><hr><h2 id="jpa-란" tabindex="-1"><a class="header-anchor" href="#jpa-란"><span>JPA 란?</span></a></h2><p>스프링부트는 JPA(Java Persistence API)를 사용하여 데이터베이스를 처리한다. JPA는 자바 진영에서 ORM(Object-Relational Mapping)의 기술 표준으로 사용하는 인터페이스의 모음이다.</p><blockquote><p>JPA는 인터페이스이다. 따라서 인터페이스를 구현하는 실제 클래스가 필요하다. JPA를 구현한 대표적인 실제 클래스에는 하이버네이트(Hibernate)가 있다. SBB도 JPA + 하이버네이트 조합을 사용한다.</p></blockquote><hr><h2 id="h2-데이터베이스" tabindex="-1"><a class="header-anchor" href="#h2-데이터베이스"><span>H2 데이터베이스</span></a></h2><p>JPA를 사용하기 전에 데이터를 저장할 데이터베이스를 설치해 보자. 개발시에는 Oracle, MSSQL 등의 굵직한 데이터베이스 보다는 설치도 쉽고 사용도 편리한 H2 데이터베이스를 많이 사용한다.</p><div class="hint-container info"><p class="hint-container-title">H2 데이터베이스</p><p>H2 데이터베이스는 주로 개발용이나 소규모 프로젝트에서 사용되는 파일 기반의 경량 데이터베이스이다. 개발시에는 H2를 사용하여 빠르게 개발하고 실제 운영시스템은 좀 더 규모있는 DB를 사용하는 것이 일반적인 개발 패턴이다.</p></div><p>다음과 같이 H2 데이터베이스를 설치하자.</p>`,27),P=n("code",null,"/sbb",-1),J=n("code",null,"build.gradle",-1),x=t(`<div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy" data-title="groovy"><pre><code><span class="line"><span class="token comment">// (... 생략. ...)</span></span>
<span class="line"></span>
<span class="line">dependencies <span class="token punctuation">{</span></span>
<span class="line">    implementation <span class="token string">&#39;org.springframework.boot:spring-boot-starter-web&#39;</span></span>
<span class="line">    testImplementation <span class="token string">&#39;org.springframework.boot:spring-boot-starter-test&#39;</span></span>
<span class="line">    developmentOnly <span class="token string">&#39;org.springframework.boot:spring-boot-devtools&#39;</span></span>
<span class="line">    compileOnly <span class="token string">&#39;org.projectlombok:lombok&#39;</span></span>
<span class="line">    annotationProcessor <span class="token string">&#39;org.projectlombok:lombok&#39;</span></span>
<span class="line highlighted">    runtimeOnly <span class="token string">&#39;com.h2database:h2&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// (... 생략 ...)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>그리고 &quot;Refresh Gradle Project&quot;를 실행하여 필요한 라이브러리를 설치하자.</p>`,2),R={class:"hint-container info"},S=n("p",{class:"hint-container-title"},"runtimeOnly",-1),C=n("code",null,"build.gradle",-1),M=n("code",null,"runtimeOnly",-1),H=n("code",null,"runtimeOnly",-1),B=n("code",null,"compileOnly",-1),L=n("code",null,"application.properties",-1),Q=n("code",null,"application.properties",-1),T=n("code",null,"/sbb/src/main/resources/",-1),N=n("code",null,"application.properties",-1),D=t(`<div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token comment"># DATABASE</span></span>
<span class="line"><span class="token key attr-name">spring.h2.console.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span></span>
<span class="line"><span class="token key attr-name">spring.h2.console.path</span><span class="token punctuation">=</span><span class="token value attr-value">/h2-console</span></span>
<span class="line"><span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:h2:~/local</span></span>
<span class="line"><span class="token key attr-name">spring.datasource.driverClassName</span><span class="token punctuation">=</span><span class="token value attr-value">org.h2.Driver</span></span>
<span class="line"><span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">sa</span></span>
<span class="line"><span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>각각의 항목에 대해서 알아보자.</p><ul><li><code>spring.h2.console.enabled</code> - H2 콘솔의 접속을 허용할지의 여부이다. true로 설정한다.</li><li><code>spring.h2.console.path</code> - 콘솔 접속을 위한 URL 경로이다.</li><li><code>spring.datasource.url</code> - 데이터베이스 접속을 위한 경로이다.</li><li><code>spring.datasource.driverClassName</code> - 데이터베이스 접속시 사용하는 드라이버이다.</li><li><code>spring.datasource.username</code> - 데이터베이스의 사용자명이다. (사용자명은 기본 값인 sa로 설정한다.)</li><li><code>spring.datasource.password</code> - 데이터베이스의 패스워드이다. 로컬 개발 용도로만 사용하기 때문에 패스워드를 설정하지 않았다.</li></ul>`,3),I=n("code",null,"spring.datasource.url",-1),V=n("code",null,"spring.datasource.url",-1),E=n("code",null,"jdbc:h2:~/local",-1),U=n("code",null,"~",-1),z=n("code",null,"local.mv.db",-1),F=n("code",null,"jdbc:h2:~/test",-1),K=n("code",null,"test.mv.db",-1),Z=n("code",null,"C:\\Users\\(사용자명)",-1),G=n("code",null,"/Users/(사용자명)",-1),W=n("code",null,"local.mv.db",-1),$=t(`<div class="hint-container info"><p class="hint-container-title">맥 OS에서 local.mv.db 파일 생성하기</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">touch</span> local.mv.db</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><p>여기까지 마무리 되었으면 이제 H2 콘솔을 통해 데이터베이스에 접속할 수 있다. 브라우저에서 다음의 URL 주소로 H2 콘솔에 접속해 보자.</p><ul><li>http://localhost:8080/h2-console</li></ul><figure><img src="https://wikidocs.net/images/page/161164/O_2-03_2.png" alt="그러면 다음과 같은 H2 콘솔화면을 볼수 있다." tabindex="0" loading="lazy"><figcaption>그러면 다음과 같은 H2 콘솔화면을 볼수 있다.</figcaption></figure><blockquote><p>한국어를 지원하기 때문에 언어 설정을 &quot;한국어&quot;로 설정할수 있다.</p></blockquote>`,5),X=n("img",{src:"https://wikidocs.net/images/page/161164/C_2-03_3.png",alt:'콘솔 화면에서 JDBC URL 경로를 <FontIcon icon="fas fa-file-lines"/> 파일에 설정한 로 변경하고 "연결" 버튼을 눌러보자.',tabindex:"0",loading:"lazy"},null,-1),Y=n("code",null,"application.properties",-1),nn=n("code",null,"jdbc:h2:~/local",-1),sn=n("figure",null,[n("img",{src:"https://wikidocs.net/images/page/161164/O_2-03_4.png",alt:"그러면 다음과 같이 접속된 화면을 볼수 있다.",tabindex:"0",loading:"lazy"}),n("figcaption",null,"그러면 다음과 같이 접속된 화면을 볼수 있다.")],-1),an=n("hr",null,null,-1),en=n("h2",{id:"jpa-환경설정",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jpa-환경설정"},[n("span",null,"JPA 환경설정")])],-1),tn=n("p",null,"H2 데이터베이스를 사용할 준비가 완료되었다. 이제 자바 프로그램에서 H2 데이터베이스를 사용할 수 있게 해야한다. 자바 프로그램에서 데이터베이스에 데이터를 저장하거나 조회하려면 JPA를 사용해야 한다. 하지만 JPA를 사용하기 전에 JPA를 사용하기 위한 준비 작업이 필요하다.",-1),on=n("blockquote",null,[n("p",null,"JPA를 사용한 데이터 처리는 조금 후에 자세히 알아본다.")],-1),ln=n("code",null,"build.gradle",-1),pn=n("code",null,"/sbb",-1),cn=n("code",null,"build.gradle",-1),rn=t(`<div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy" data-title="groovy"><pre><code><span class="line"><span class="token comment">// (... 생략 ...)</span></span>
<span class="line"></span>
<span class="line">dependencies <span class="token punctuation">{</span></span>
<span class="line">    implementation <span class="token string">&#39;org.springframework.boot:spring-boot-starter-web&#39;</span></span>
<span class="line">    testImplementation <span class="token string">&#39;org.springframework.boot:spring-boot-starter-test&#39;</span></span>
<span class="line">    developmentOnly <span class="token string">&#39;org.springframework.boot:spring-boot-devtools&#39;</span></span>
<span class="line">    compileOnly <span class="token string">&#39;org.projectlombok:lombok&#39;</span></span>
<span class="line">    annotationProcessor <span class="token string">&#39;org.projectlombok:lombok&#39;</span></span>
<span class="line">    runtimeOnly <span class="token string">&#39;com.h2database:h2&#39;</span></span>
<span class="line highlighted">    implementation <span class="token string">&#39;org.springframework.boot:spring-boot-starter-data-jpa&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// (... 생략 ...)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>그리고 &quot;Refresh Gradle Project&quot;로 변경사항을 적용하면 JPA 라이브러리가 설치된다.</p>`,2),dn={class:"hint-container info"},un=n("p",{class:"hint-container-title"},"implementation",-1),mn=n("code",null,"build.gradle",-1),hn=n("code",null,"implementation",-1),gn=n("code",null,"implementation",-1),kn=n("code",null,"application.properties",-1),vn=n("code",null,"/sbb/src/main/resources/",-1),bn=n("code",null,"application.properties",-1),_n=t(`<div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token comment"># DATABASE</span></span>
<span class="line"><span class="token key attr-name">spring.h2.console.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span></span>
<span class="line"><span class="token key attr-name">spring.h2.console.path</span><span class="token punctuation">=</span><span class="token value attr-value">/h2-console</span></span>
<span class="line"><span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:h2:~/local</span></span>
<span class="line"><span class="token key attr-name">spring.datasource.driverClassName</span><span class="token punctuation">=</span><span class="token value attr-value">org.h2.Driver</span></span>
<span class="line"><span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">sa</span></span>
<span class="line"><span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span></span>
<span class="line"></span>
<span class="line highlighted"><span class="token comment"># JPA</span></span>
<span class="line highlighted"><span class="token key attr-name">spring.jpa.properties.hibernate.dialect</span><span class="token punctuation">=</span><span class="token value attr-value">org.hibernate.dialect.H2Dialect</span></span>
<span class="line highlighted"><span class="token key attr-name">spring.jpa.hibernate.ddl-auto</span><span class="token punctuation">=</span><span class="token value attr-value">update</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>추가한 항목을 간단하게 살펴보자.</p><ul><li><code>spring.jpa.properties.hibernate.dialect</code> - 데이터베이스 엔진 종류를 설정한다.</li><li><code>spring.jpa.hibernate.ddl-auto</code> - 엔티티를 기준으로 테이블을 생성하는 규칙을 정의한다.</li></ul><div class="hint-container info"><p class="hint-container-title">spring.jpa.hibernate.ddl-auto</p><p>위 설정에서 <code>spring.jpa.hibernate.ddl-auto</code>를 update로 설정했다. update와 같은 설정값에 대해서 간단히 알아보자.</p><ul><li><code>none</code> - 엔티티가 변경되더라도 데이터베이스를 변경하지 않는다.</li><li><code>update</code> - 엔티티의 변경된 부분만 적용한다.</li><li><code>validate</code> - 변경사항이 있는지 검사만 한다.</li><li><code>create</code> - 스프링부트 서버가 시작될때 모두 drop하고 다시 생성한다.</li><li><code>create-drop</code> - create와 동일하다. 하지만 종료시에도 모두 drop 한다.</li></ul><p>개발 환경에서는 보통 update 모드를 사용하고 운영환경에서는 none 또는 validate 모드를 사용한다.</p></div><hr>`,5);function fn(p,yn){const o=i("router-link"),c=i("VPCard"),e=i("FontIcon"),r=i("VidStack");return k(),u("div",null,[n("h1",b,[n("a",_,[n("span",null,m(p.$frontmatter.title)+" 관련",1)])]),n("nav",f,[n("ul",null,[n("li",null,[a(o,{to:"#orm"},{default:l(()=>[s("ORM")]),_:1}),n("ul",null,[n("li",null,[a(o,{to:"#question-테이블-구성-예"},{default:l(()=>[s("question 테이블 구성 예")]),_:1})])])]),n("li",null,[a(o,{to:"#jpa-란"},{default:l(()=>[s("JPA 란?")]),_:1})]),n("li",null,[a(o,{to:"#h2-데이터베이스"},{default:l(()=>[s("H2 데이터베이스")]),_:1})]),n("li",null,[a(o,{to:"#jpa-환경설정"},{default:l(()=>[s("JPA 환경설정")]),_:1})])])]),y,a(c,h(g({title:"2-03. JPA",desc:"점프 투 스프링부트 - WikiDocs",link:"https://wikidocs.net/161164",logo:"https://wikidocs.net/static/img/favicon.ico",background:"rgba(255,255,255,0.2)"})),null,16),j,n("blockquote",null,[n("p",null,[n("a",q,[a(e,{icon:"iconfont icon-github"}),s(),w,s(" - "),a(e,{icon:"fas fa-folder-open"}),s(),O])])]),a(r,{src:"youtube/mrvhAcqrMPE"}),A,n("blockquote",null,[n("p",null,[s("파일명: "),a(e,{icon:"fas fa-folder-open"}),P,s("/"),a(e,{icon:"iconfont icon-engine"}),J])]),x,n("div",R,[S,a(e,{icon:"iconfont icon-engine"}),s(),C,s(" 파일의 "),M,s("는 해당 라이브러리가 런타임(Runtime)시에만 필요한 경우에 사용한다. 컴파일(Compile)시에만 필요한 경우에는 "),H,s(" 대신 "),B,s("를 사용한다.")]),n("p",null,[s("설치한 H2 데이터베이스를 사용하기 위해서는 설정을 해야 한다. 다음과 같이 "),a(e,{icon:"fas fa-file-lines"}),L,s(" 파일을 수정하자.")]),n("p",null,[s("현재 "),a(e,{icon:"fas fa-file-lines"}),Q,s(" 파일에는 아무런 내용이 없을 것이다.")]),n("blockquote",null,[n("p",null,[s("파일명: "),a(e,{icon:"fas fa-folder-open"}),T,a(e,{icon:"fas fa-file-lines"}),N])]),D,n("p",null,[s("그리고 "),I,s("에 설정한 경로에 해당하는 데이터베이스 파일을 만들어야 한다. 위에서 "),V,s("을 "),E,s(" 로 설정했기 때문에 사용자의 "),a(e,{icon:"iconfont icon-home"}),s("홈디렉터리("),U,s(" 에 해당하는 경로) 밑에 "),a(e,{icon:"fas fa-database"}),z,s(" 라는 파일을 생성해야 한다. 만약 "),F,s("라고 설정했다면 "),a(e,{icon:"fas fa-database"}),K,s(" 라는 파일을 생성해야 한다.")]),n("p",null,[s("사용자의 홈디렉터리는 윈도우의 경우에는 "),a(e,{icon:"iconfont icon-home"}),Z,s(" 이고 맥OS의 경우에는 "),a(e,{icon:"iconfont icon-home"}),G,s(" 이다. 본인이 사용하는 OS에 맞는 홈디렉터리에 "),W,s(" 파일을 생성하자. 파일은 내용 없이 빈파일로 생성한다.")]),$,n("figure",null,[X,n("figcaption",null,[s("콘솔 화면에서 JDBC URL 경로를 "),a(e,{icon:"fas fa-file-lines"}),Y,s(" 파일에 설정한 "),nn,s('로 변경하고 "연결" 버튼을 눌러보자.')])]),sn,an,en,tn,on,n("p",null,[s("다음처럼 "),a(e,{icon:"iconfont icon-engine"}),ln,s(" 파일을 수정하자.")]),n("blockquote",null,[n("p",null,[s("파일명: "),a(e,{icon:"fas fa-folder-open"}),pn,s("/"),a(e,{icon:"iconfont icon-engine"}),cn])]),rn,n("div",dn,[un,a(e,{icon:"iconfont icon-engine"}),mn,s(" 파일의 "),hn,s("은 해당 라이브러리 설치를 위해 일반적으로 사용하는 설정이다. "),gn,s("은 해당 라이브러리가 변경되더라도 이 라이브러리와 연관된 모든 모듈들을 컴파일하지 않고 직접 관련이 있는 모듈들만 컴파일하기 때문에 rebuild 속도가 빠르다.")]),n("p",null,[s("그리고 JPA 설정을 위해 "),a(e,{icon:"fas fa-file-lines"}),kn,s(" 파일을 수정하자.")]),n("blockquote",null,[n("p",null,[s("파일명: "),a(e,{icon:"fas fa-folder-open"}),vn,a(e,{icon:"fas fa-file-lines"}),bn])]),_n])}const wn=d(v,[["render",fn],["__file","02C.html.vue"]]),On=JSON.parse('{"path":"/java/jump-to-spring-boot/02C.html","title":"02C. JPA","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"02C. JPA","description":"Jump to Spring Boot > 02C. JPA","category":["Java","Spring","AWS"],"tag":["crashcourse","java","jdk","jdk8","stream","spring","springframework","springboot","aws","aws-ec2"],"head":[[{"meta":null},{"property":"og:title","content":"Jump to Spring Boot > 02C. JPA"},{"property":"og:description","content":"02C. JPA"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/java/jump-to-spring-boot/02C.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/java/jump-to-spring-boot/02C.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"02C. JPA"}],["meta",{"property":"og:description","content":"Jump to Spring Boot > 02C. JPA"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://wikidocs.net/images/page/161164/O_2-03_1.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"jdk"}],["meta",{"property":"article:tag","content":"jdk8"}],["meta",{"property":"article:tag","content":"stream"}],["meta",{"property":"article:tag","content":"spring"}],["meta",{"property":"article:tag","content":"springframework"}],["meta",{"property":"article:tag","content":"springboot"}],["meta",{"property":"article:tag","content":"aws"}],["meta",{"property":"article:tag","content":"aws-ec2"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"02C. JPA\\",\\"image\\":[\\"https://wikidocs.net/images/page/161164/O_2-03_1.png\\",\\"https://wikidocs.net/images/page/161164/O_2-03_2.png\\",\\"https://wikidocs.net/images/page/161164/C_2-03_3.png\\",\\"https://wikidocs.net/images/page/161164/O_2-03_4.png\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"ORM","slug":"orm","link":"#orm","children":[{"level":3,"title":"question 테이블 구성 예","slug":"question-테이블-구성-예","link":"#question-테이블-구성-예","children":[]}]},{"level":2,"title":"JPA 란?","slug":"jpa-란","link":"#jpa-란","children":[]},{"level":2,"title":"H2 데이터베이스","slug":"h2-데이터베이스","link":"#h2-데이터베이스","children":[]},{"level":2,"title":"JPA 환경설정","slug":"jpa-환경설정","link":"#jpa-환경설정","children":[]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":10}]},"readingTime":{"minutes":2.18,"words":653},"filePathRelative":"java/jump-to-spring-boot/02C.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{wn as comp,On as data};
