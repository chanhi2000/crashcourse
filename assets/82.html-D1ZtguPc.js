import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,a as n,t as k,b as s,w as t,n as o,g as i,e as p,r as c,o as m,d as l}from"./app-U_bew1in.js";const h={},v={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},w=n("hr",null,null,-1),g=p('<h2 id="milestone-projects-22-24" tabindex="-1"><a class="header-anchor" href="#milestone-projects-22-24"><span>Milestone: Projects 22-24</span></a></h2><p>These last few projects haven’t been easy, and there’s a good chance you’re feeling really tired today. Well, I have two pieces of good news for you.</p><p>First, it’s a consolidation day, which means you won’t be learning a lot of new stuff today. Second, today’s challenge <em>isn’t</em> about building an app from scratch, so hopefully you’ll get through it relatively quickly and have time to take a break.</p><p>Cicero once said that “to know the laws is not to memorize their letter but to grasp their full force and meaning.” These same is true of these consolidation days: they are here to make sure you really <em>understand</em> what you’ve learned. It’s not enough just to memorize method names and pieces of code, because if you don’t grasp <em>why</em> they work like they do you’ll never be able to use them in other contexts.</p><p><strong>Today you have three topics to work through, one of which of is your challenge.</strong></p><h3 id="what-you-learned" tabindex="-1"><a class="header-anchor" href="#what-you-learned"><span>What you learned</span></a></h3>',6),b={class:"hint-container details"},x=n("summary",null,"What you learned",-1),_=p("<p>If everything is going to plan you should be starting to find the code for these projects easier and easier. That’s not to say it’s all plain sailing from now on – there are still some tough things to learn! – but it does show that your skills are advancing and you’re starting to retain what you’ve learned.</p><p>Let’s recap what you’ve learned in this milestone:</p><ul><li>You met <code>CLLocationManager</code> from the Core Location framework, which is the central point for location permissions and updates in iOS.</li><li>You learned to set “Always” or “When in use” in your Info.plist, so that iOS can show a meaningful permission request to your user.</li><li>We used <code>CLBeaconRegion</code> to scan for a particular iBeacon, using a UUID, major number, and minor number. That’s enough to identify anywhere in the world uniquely.</li><li>When a beacon was being ranged, we used <code>CLProximity</code> to determine how close it was. iBeacons use extremely low signal strengths to preserve battery life, so the proximity levels are quite vague!</li><li>You learned how to draw custom paths using <code>UIBezierPath</code>, then render them in SpriteKit using <code>SKShapeNode</code> – we used these to draw the swiping glow effect in Swifty Ninja.</li><li>We made the bomb sound play using <code>AVAudioPlayer</code>, because we wanted to be able to stop it at any point. In project 36 you’ll learn about <code>SKAudioNode</code>, which is able to achieve similar results.</li><li>You learned how Swift strings are more than just arrays of characters, which is why we can’t write <code>someString[3]</code> by default.</li><li>We looked at common methods of <code>String</code> and added some more of our own using extensions.</li><li>I introduced you to <code>NSAttributedString</code>, and how it lets us add colors, fonts, and more to text.</li></ul>",3),I=n("h3",{id:"key-points",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#key-points"},[n("span",null,"Key points")])],-1),j={class:"hint-container details"},S=n("summary",null,"Key points",-1),C=p(`<p>Before you continue to the next milestone, there are two things I’d like to discuss briefly.</p><p>First, project 22 introduced Core Location to enable scanning for iBeacons. That’s just one of several things that Core Location does, and I couldn’t possibly continue without at least giving you a taste of the others. For example, Core Location’s functionality includes:</p><ul><li>Providing co-ordinates for the user’s location at a granularity you specify.</li><li>Tracking the places the user has visited.</li><li>Indoor location, even down to what floor a user is on, for locations that have been configured by Apple.</li><li>Geocoding, which converts co-ordinates to user-friendly names like cities and streets.</li></ul><p>Using these things starts with what you have already: modifying the Info.plist to provide a description of how you intend to use location data, then requesting permission. If you intend to use visit tracking you should request the “always” permission because visits are delivered to you in the background.</p><p>Once you have permission, try using this to get the user’s location just once, rather than ongoing:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">locationManager <span class="token operator">=</span> <span class="token class-name">CLLocationManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">manager<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">self</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// request the user&#39;s coordinates</span></span>
<span class="line">locationManager<span class="token punctuation">.</span><span class="token function">requestLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">locationManager</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> manager<span class="token punctuation">:</span> <span class="token class-name">CLLocationManager</span><span class="token punctuation">,</span> didUpdateLocations locations<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">CLLocation</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> location <span class="token operator">=</span> locations<span class="token punctuation">.</span>first <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Found user&#39;s location: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">location</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">locationManager</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> manager<span class="token punctuation">:</span> <span class="token class-name">CLLocationManager</span><span class="token punctuation">,</span> didFailWithError error<span class="token punctuation">:</span> <span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Failed to find user&#39;s location: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">error<span class="token punctuation">.</span>localizedDescription</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also request visit monitoring, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token comment">// start monitoring visits</span></span>
<span class="line">locationManager<span class="token punctuation">.</span><span class="token function">startMonitoringVisits</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>When the user arrives or departs from a location, you’ll get a callback method if you implement it. The method is the same regardless of whether the user arrived or departed at the location, so you need to check the <code>departureDate</code> property to decide.</p><p>Here’s an example to get you started:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">locationManager</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> manager<span class="token punctuation">:</span> <span class="token class-name">CLLocationManager</span><span class="token punctuation">,</span> didVisit visit<span class="token punctuation">:</span> <span class="token class-name">CLVisit</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> visit<span class="token punctuation">.</span>departureDate <span class="token operator">==</span> <span class="token class-name">Date</span><span class="token punctuation">.</span>distantFuture <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;User arrived at location </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">visit<span class="token punctuation">.</span>coordinate</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> at time </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">visit<span class="token punctuation">.</span>arrivalDate</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;User departed location </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">visit<span class="token punctuation">.</span>coordinate</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> at time </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">visit<span class="token punctuation">.</span>departureDate</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note: the definition of a “visit” is pretty vague because iOS can’t tell whether the user has walked into a store or is just standing at a bus stop or sitting in traffic.</p><p>The second thing I’d like to discuss further is Swift extensions. These are extraordinarily powerful, because you can extend specific types (<em>e.g.</em> <code>Int</code> and <code>String</code>) but also whole protocols of types (<em>e.g.</em> “all collections”.) Protocol extensions allow us to build up functionality extremely quickly, and using it extensively – a technique known as protocol-oriented programming – is common.</p><p>We just wrote several extensions on <code>String</code>, which is what we call a <em>concrete</em> data type – a thing you can actually make. We can write extensions for other concrete types like <code>Int</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> isOdd<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">isMultiple</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> isEven<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">isMultiple</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, that will only extend <code>Int</code> – Swift has a variety of different sizes and types of integers to handle very specific situations. For example, <code>‌Int8</code> is a very small integer that holds between -128 and 127, for times when you don’t need much data but space is really restricted. Or there’s <code>UInt64</code>, which holds much larger numbers than a regular <code>Int</code>, but those numbers must always be positive.</p><p>Making extensions for whole protocols at once adds our functionality to many places, which in the case of integers means we can add <code>isOdd</code> and <code>isEven</code> to <code>Int</code>, <code>Int8</code>, <code>UInt64</code>, and more by extending the <code>BinaryInteger</code> protocol that covers them all:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">BinaryInteger</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> isOdd<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">isMultiple</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> isEven<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">isMultiple</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, where things get <em>really</em> interesting is if when we want only a subset of a protocol to be extended. For example, Swift has a <code>Collection</code> protocol that covers arrays, dictionaries, sets, and more, and if we wanted to write a method that counted how many odd and even numbers it held we might start by writing something like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">Collection</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">countOddEven</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span>odd<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> even<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// start with 0 even and odd</span></span>
<span class="line">        <span class="token keyword">var</span> even <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">        <span class="token keyword">var</span> odd <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// go over all values</span></span>
<span class="line">        <span class="token keyword">for</span> val <span class="token keyword">in</span> <span class="token keyword">self</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> val<span class="token punctuation">.</span><span class="token function">isMultiple</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// this is even; add one to our even count</span></span>
<span class="line">                even <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// this must be odd; add one to our odd count                </span></span>
<span class="line">                odd <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// send back our counts as a tuple</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span>odd<span class="token punctuation">,</span> even<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, that code won’t work. You see, we’re trying to extend all collections, which means we’re asking Swift to make the method available on arrays like this one:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Arya&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Bran&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Rickon&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Robb&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Sansa&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That array contains strings, and we can’t check whether a string is a multiple of 2 – it just doesn’t make sense.</p><p>What we <em>mean</em> to say is “add this method to all collections that contain integers, regardless of that integer type.” To make this work, you need to specify a <code>where</code> clause to filter where the extension is applied: we want this extension only for collections where the elements inside that collection conform to the <code>BinaryInteger</code> protocol.</p><p>This is actually surprisingly easy to do – just modify the extension to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">Collection</span> <span class="token keyword">where</span> <span class="token class-name">Element</span><span class="token punctuation">:</span> <span class="token class-name">BinaryInteger</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>As you’ll learn, these extension constraints are extraordinarily powerful, particularly when you constrain using a protocol rather than specific type. For example, if you extend <code>Array</code> so that your methods only apply to arrays that hold <code>Comparable</code> objects, the methods in that extension gain access to a whole range of built-in methods such as <code>firstIndex(of:)</code>, <code>contains()</code>, <code>sort()</code>, and more – because Swift knows the elements must all conform to <code>Comparable</code>.</p><p>If you want to try such a constraint yourself – and trust me, you’ll need it for one of the challenges coming up! – write your extensions like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">Array</span> <span class="token keyword">where</span> <span class="token class-name">Element</span><span class="token punctuation">:</span> <span class="token class-name">Comparable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">doStuff</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> <span class="token class-name">Element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Inside the <code>doStuff()</code> method, Swift will ensure that <code>Element</code> automatically means whatever type of element the array holds.</p><p>That’s just a teaser of what’s to come once your Swift skills advance a little further, but I hope you’re starting to see why Swift is called a protocol-oriented programming language – you can extend specific types if you want to, but it’s far more efficient – and powerful! – to extend whole groups of them at once.</p>`,31),q=n("h3",{id:"challenge",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#challenge"},[n("span",null,"Challenge")])],-1),D={class:"hint-container details"},T=n("summary",null,"Challenge",-1),M=p(`<p>Your challenge this time is <em>not</em> to build a project from scratch. Instead, I want you to implement three Swift language extensions using what you learned in project 24. I’ve ordered them easy to hard, so you should work your way from first to last if you want to make your life easy!</p><p>Here are the extensions I’d like you to implement:</p><ol><li>Extend <code>UIView</code> so that it has a <code>bounceOut(duration:)</code> method that uses animation to scale its size down to 0.0001 over a specified number of seconds.</li><li>Extend <code>Int</code> with a <code>times()</code> method that runs a closure as many times as the number is high. For example, <code>5.times { print(&quot;Hello!&quot;) }</code> will print “Hello” five times.</li><li>Extend <code>Array</code> so that it has a mutating <code>remove(item:)</code> method. If the item exists more than once, it should remove only the first instance it finds. Tip: you will need to add the <code>Comparable</code> constraint to make this work!</li></ol><p>As per usual, please try and complete this challenge yourself before you read my hints below. And again, don’t worry if you find this challenge <em>challenging</em> – the clue is in the name, these are designed to make you think!</p><p>Here are some hints in case you hit problems:</p><ol><li>Animation timings are specified using a <code>TimeInterval</code>, which is really just a <code>Double</code> behind the scenes. You should specify your method as <code>bounceOut(duration: TimeInterval)</code>.</li><li>If you’ve forgotten how to scale a view, look up <code>CGAffineTransform</code> in project 15.</li><li>To add <code>times()</code> you’ll need to make a method that accepts a closure, and that closure should accept no parameters and return nothing: <code>() -&gt; Void</code>.</li><li>Inside <code>times()</code> you should make a loop that references <code>self</code> as the upper end of a range – that’s the value of the integer you’re working with.</li><li>Integers can be negative. What happens if someone writes <code>let count = -5</code> then uses <code>count.times { … }</code> and how can you make that better?</li><li>When it comes to implementing the <code>remove(item:)</code> method, make sure you constrain your extension like this: <code>extension Array where Element: Comparable</code>.</li><li>You can implement <code>remove(item:)</code> using a call to <code>firstIndex(of:)</code> then <code>remove(at:)</code>.</li></ol><p>Those hints ought to be enough for you to solve the complete challenge, but if you still hit problems then read over my solutions below, or put this all into a playground to see it in action.</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token class-name">UIKit</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// extension 1: animate out a UIView</span></span>
<span class="line"><span class="token keyword">extension</span> <span class="token class-name">UIView</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">bounceOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token class-name">TimeInterval</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">UIView</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span>withDuration<span class="token punctuation">:</span> duration<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token keyword">unowned</span> <span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token keyword">in</span></span>
<span class="line">            <span class="token keyword">self</span><span class="token punctuation">.</span>transform <span class="token operator">=</span> <span class="token class-name">CGAffineTransform</span><span class="token punctuation">(</span>scaleX<span class="token punctuation">:</span> <span class="token number">0.0001</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0.0001</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// extension 2: create a times() method for integers</span></span>
<span class="line"><span class="token keyword">extension</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">times</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> closure<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">guard</span> <span class="token keyword">self</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">for</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span> <span class="token number">0</span> <span class="token operator">..&lt;</span> <span class="token keyword">self</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">closure</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span>    </span>
<span class="line"></span>
<span class="line"><span class="token comment">// extension 3: remove an item from an array</span></span>
<span class="line"><span class="token keyword">extension</span> <span class="token class-name">Array</span> <span class="token keyword">where</span> <span class="token class-name">Element</span><span class="token punctuation">:</span> <span class="token class-name">Comparable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">remove</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token class-name">Element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">let</span> location <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">firstIndex</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> location<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// some test code to make sure everything works</span></span>
<span class="line"><span class="token keyword">let</span> view <span class="token operator">=</span> <span class="token class-name">UIView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">view<span class="token punctuation">.</span><span class="token function">bounceOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token number">5</span><span class="token punctuation">.</span>times <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span></span>
<span class="line">numbers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),L=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"Note"),n("p",null,"Don’t worry if you don’t complete challenges in the day they were assigned – in future days you’ll find you have some time to spare here and there, so challenges are something you can return back to in the future.")],-1),A=n("hr",null,null,-1);function W(r,B){const a=c("router-link"),e=c("VPCard");return m(),d("div",null,[n("h1",v,[n("a",y,[n("span",null,k(r.$frontmatter.title)+" 관련",1)])]),n("nav",f,[n("ul",null,[n("li",null,[s(a,{to:"#milestone-projects-22-24"},{default:t(()=>[l("Milestone: Projects 22-24")]),_:1}),n("ul",null,[n("li",null,[s(a,{to:"#what-you-learned"},{default:t(()=>[l("What you learned")]),_:1})]),n("li",null,[s(a,{to:"#key-points"},{default:t(()=>[l("Key points")]),_:1})]),n("li",null,[s(a,{to:"#challenge"},{default:t(()=>[l("Challenge")]),_:1})])])])])]),w,s(e,o(i({title:"100 Days of Swift - Day 82",desc:"Milestone - Projects 22-24",link:"https://www.hackingwithswift.com/100/82",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),g,n("details",b,[x,s(e,o(i({title:"100 Days of Swift - Day 82 - What you learned",desc:"What you learned",link:"https://www.hackingwithswift.com/guide/9/1/what-you-learned",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),_]),I,n("details",j,[S,s(e,o(i({title:"100 Days of Swift - Day 82 - Key points",desc:"Key points",link:"https://www.hackingwithswift.com/guide/9/2/key-points",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),C]),q,n("details",D,[T,s(e,o(i({title:"100 Days of Swift - Day 82 - Challenge",desc:"Challenge",link:"https://www.hackingwithswift.com/guide/9/3/challenge",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),M]),L,A])}const U=u(h,[["render",W],["__file","82.html.vue"]]),O=JSON.parse('{"path":"/swift/100-days-of-swift/82.html","title":"Day 82","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 82","description":"100 Days of Swift > Day 82","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of Swift > Day 82"},{"property":"og:description","content":"Day 82"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swift/82.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swift/82.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 82"}],["meta",{"property":"og:description","content":"100 Days of Swift > Day 82"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 82\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Milestone: Projects 22-24","slug":"milestone-projects-22-24","link":"#milestone-projects-22-24","children":[{"level":3,"title":"What you learned","slug":"what-you-learned","link":"#what-you-learned","children":[]},{"level":3,"title":"Key points","slug":"key-points","link":"#key-points","children":[]},{"level":3,"title":"Challenge","slug":"challenge","link":"#challenge","children":[]}]}],"git":{"createdTime":1703729571000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":11}]},"readingTime":{"minutes":7.54,"words":2262},"filePathRelative":"swift/100-days-of-swift/82.md","localizedDate":"2023년 12월 28일","excerpt":"\\n\\n<hr>\\n"}');export{U as comp,O as data};
