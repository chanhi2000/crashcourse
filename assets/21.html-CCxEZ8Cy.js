import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as n,t as k,b as s,w as o,n as i,g as p,e as l,d as a,r,o as g}from"./app-U_bew1in.js";const m={},w={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},b={class:"table-of-contents"},v=n("hr",null,null,-1),y=l('<h2 id="project-2-part-2" tabindex="-1"><a class="header-anchor" href="#project-2-part-2"><span>Project 2, part 2</span></a></h2><p>One of the things people often complain about while learning to program is that they really want to get busy making The Big App Idea they had, but instead they need to follow tutorials making different apps entirely.</p><p>I know this can be annoying, but trust me: nothing you’re learning will be wasted. Sure, you might not ever make a flag guessing game, but the concepts you learn here – building layouts, tracking state, randomizing arrays, and more – will last you for years.</p><p>Oprah Winfrey once said, “do what you have to do until you can do what you want to do.” By the end of this 100 days course I hope you’ll be able to do exactly what you want, but in the meantime stick with it – you’re learning key skills here!</p><p><strong>Today you have three topics to work through, in which you’ll apply your knowledge of <code>VStack</code>, <code>LinearGradient</code>, alerts, and more.</strong></p><h3 id="stacking-up-buttons" tabindex="-1"><a class="header-anchor" href="#stacking-up-buttons"><span>Stacking up buttons</span></a></h3>',6),S={class:"hint-container details"},q=n("summary",null,"Stacking up buttons",-1),x=l(`<p>We’re going to start our app by building the basic UI structure, which will be two labels telling the user what to do, then three image buttons showing three world flags.</p><p>First, find the assets for this project and drag them into your asset catalog. That means opening Assets.xcassets in Xcode, then dragging in the flag images from the project2-files folder. You’ll notice that the images are named after their country, along with either @2x or @3x – these are images at double resolution and triple resolution to handle different types of iPhone screen.</p><p>Next, we need two properties to store our game data: an array of all the country images we want to show in the game, plus an integer storing which country image is correct.</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> countries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Estonia&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;France&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Germany&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Ireland&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Italy&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Nigeria&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Poland&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Russia&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Spain&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;UK&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;US&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">var</span> correctAnswer <span class="token operator">=</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>Int.random(in:)</code> method automatically picks a random number, which is perfect here – we’ll be using that to decide which country flag should be tapped.</p><p>Inside our body, we need to lay out our game prompt in a vertical stack, so let’s start with that:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Tap the flag of&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span>countries<span class="token punctuation">[</span>correctAnswer<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Below there we want to have our tappable flag buttons, and while we <em>could</em> just add them to the same <code>VStack</code> we can actually create a <em>second</em> <code>VStack</code> so that we have more control over the spacing.</p><p>The <code>VStack</code> we just created above holds two text views and has no spacing, but the flags are going to have 30 points of spacing between them so it looks better.</p><p>So, start by adding this <code>ForEach</code> loop directly below the end of the <code>VStack</code> we just created:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> number <span class="token keyword">in</span></span>
<span class="line">    <span class="token class-name">Button</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token comment">// flag was tapped</span></span>
<span class="line">    <span class="token punctuation">}</span> label<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Image</span><span class="token punctuation">(</span>countries<span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">renderingMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>original<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>renderingMode(.original)</code> modifier tells SwiftUI to render the original image pixels rather than trying to recolor them as a button.</p><p>And now we have a problem: our <code>body</code> property is trying to send back two views, a <code>VStack</code> and a <code>ForEach</code>, but that won’t work correctly. This is where our second <code>VStack</code> will come in: I’d like you to wrap the original <code>VStack</code> and the <code>ForEach</code> below in a new <code>VStack</code>, this time with a spacing of 30 points.</p><p>So your code should look like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">VStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Tap the flag of&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// etc</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> number <span class="token keyword">in</span></span>
<span class="line">            <span class="token comment">// etc</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Having two vertical stacks like this allows us to position things more precisely: the outer stack will space its views out by 30 points each, whereas the inner stack has no spacing.</p><p>That’s enough to give you a basic idea of our user interface, and already you’ll see it doesn’t look great – some flags have white in them, which blends into the background, and all the flags are centered vertically on the screen.</p><p>We’ll come back to polish the UI later, but for now let’s put in a blue background color to make the flags easier to see. Because this means putting something behind our outer <code>VStack</code>, we need to use a <code>ZStack</code> as well. Yes, we’ll have a <code>VStack</code> inside another <code>VStack</code> inside a <code>ZStack</code>, and that is perfectly normal.</p><p>Start by putting a <code>ZStack</code> around your outer <code>VStack</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ZStack</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// previous VStack code</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now put this just inside the <code>ZStack</code>, so it goes behind the outer <code>VStack</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Color</span><span class="token punctuation">.</span>blue</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>That <code>.ignoresSafeArea()</code> modifier ensures the color goes right to the edge of the screen.</p><p>Now that we have a darker background color, we should give the text something brighter so that it stands out better:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Tap the flag of&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span>countries<span class="token punctuation">[</span>correctAnswer<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This design is not going to set the world alight, but it’s a solid start!</p>`,26),_=n("h3",{id:"showing-the-player-s-score-with-an-alert",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#showing-the-player-s-score-with-an-alert"},[n("span",null,"Showing the player’s score with an alert")])],-1),T={class:"hint-container details"},j=n("summary",null,"Showing the player’s score with an alert",-1),I=l(`<p>In order for this game to be fun, we need to randomize the order in which flags are shown, trigger an alert telling them whether they were right or wrong whenever they tap a flag, then reshuffle the flags.</p><p>We already set <code>correctAnswer</code> to a random integer, but the flags always start in the <em>same</em> order. To fix that we need to shuffle the <code>countries</code> array when the game starts, so modify the property to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> countries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Estonia&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;France&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Germany&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Ireland&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Italy&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Nigeria&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Poland&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Russia&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Spain&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;UK&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;US&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shuffled</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>As you can see, the <code>shuffled()</code> method automatically takes care of randomizing the array order for us.</p><p>Now for the more interesting part: when a flag has been tapped, what should we do? We need to replace the <code>// flag was tapped</code> comment with some code that determines whether they tapped the correct flag or not, and the best way of doing <em>that</em> is with a new method that accepts the integer of the button and checks whether that matches our <code>correctAnswer</code> property.</p><p>Regardless of whether they were correct, we want to show the user an alert saying what happened so they can track their progress. So, add this property to store whether the alert is showing or not:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> showingScore <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And add this property to store the title that will be shown inside the alert:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> scoreTitle <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>So, whatever method we write will accept the number of the button that was tapped, compare that against the correct answer, then set those two new properties so we can show a meaningful alert.</p><p>Add this directly after the <code>body</code> property:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">flagTapped</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> number<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> number <span class="token operator">==</span> correctAnswer <span class="token punctuation">{</span></span>
<span class="line">        scoreTitle <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Correct&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        scoreTitle <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Wrong&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    showingScore <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can now call that by replacing the <code>// flag was tapped</code> comment with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">flagTapped</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We already have <code>number</code> because it’s given to us by <code>ForEach</code>, so it’s just a matter of passing that on to <code>flagTapped()</code>.</p><p>Before we show the alert, we need to think about what happens when the alert is dismissed. Obviously the game shouldn’t be over, otherwise the whole thing would be over immediately.</p><p>Instead we’re going to write an <code>askQuestion()</code> method that resets the game by shuffling up the countries and picking a new correct answer:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">askQuestion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    countries<span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    correctAnswer <span class="token operator">=</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That code won’t compile, and hopefully you’ll see why pretty quickly: we’re trying to change properties of our view that haven’t been marked with <code>@State</code>, which isn’t allowed. So, go to where <code>countries</code> and <code>correctAnswer</code> are declared, and put <code>@State private</code> before them, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> countries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Estonia&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;France&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Germany&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Ireland&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Italy&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Nigeria&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Poland&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Russia&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Spain&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;UK&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;US&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shuffled</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> correctAnswer <span class="token operator">=</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>And now we’re ready to show the alert. This needs to:</p><ol><li>Use the <code>alert()</code> modifier so the alert gets presented when <code>showingScore</code> is true.</li><li>Show the title we set in <code>scoreTitle</code>.</li><li>Have a dismiss button that calls <code>askQuestion()</code> when tapped.</li></ol><p>So, put this at the end of the <code>ZStack</code> in the <code>body</code> property:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span>scoreTitle<span class="token punctuation">,</span> isPresented<span class="token punctuation">:</span> $showingScore<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Continue&quot;</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> askQuestion<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> message<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Your score is ???&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Yes, there are three question marks that should hold a score value – you’ll be completing that part soon!</p>`,25),V=n("h3",{id:"styling-our-flags",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#styling-our-flags"},[n("span",null,"Styling our flags")])],-1),A={class:"hint-container details"},U=n("summary",null,"Styling our flags",-1),D=l(`<p>Our game now works, although it doesn’t look great. Fortunately, we can make a few small tweaks to our design to make the whole thing look better.</p><p>First, let’s replace the solid blue background color with a linear gradient from blue to black, which ensures that even if a flag has a similar blue stripe it will still stand out against the background.</p><p>So, find this line:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Color</span><span class="token punctuation">.</span>blue</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>And replace it with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">LinearGradient</span><span class="token punctuation">(</span>gradient<span class="token punctuation">:</span> <span class="token class-name">Gradient</span><span class="token punctuation">(</span>colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>blue<span class="token punctuation">,</span> <span class="token punctuation">.</span>black<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> startPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">,</span> endPoint<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottom<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>It still ignores the safe area, ensuring that the background goes edge to edge.</p><p>Now let’s adjust the fonts we’re using just a little, so that the country name – the part they need to guess – is the most prominent piece of text on the screen, while the “Tap the flag of” text is smaller and bold.</p><p>We can control the size and style of text using the <code>font()</code> modifier, which lets us select from one of the built-in font sizes on iOS. As for adjusting the <em>weight</em> of fonts – whether we want super-thin text, slightly bold text, etc – we can get fine-grained control over that by adding a <code>weight()</code> modifier to whatever font we ask for.</p><p>Let’s use both of these here, so you can see them in action. Add this directly after the “Tap the flag of” text:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>subheadline<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">.</span>heavy<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And put this modifiers directly after the <code>Text(countries[correctAnswer])</code> view:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">.</span>semibold<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>“Large title” is the largest built-in font size iOS offers us, and automatically scales up or down depending on what setting the user has for their fonts – a feature known as <em>Dynamic Type</em>. We’re overriding the weight of the font so it’s a little bolder, but it will still scale up or down as needed.</p><p>Finally, let’s jazz up those flag images a little. SwiftUI gives us a number of modifiers to affect the way views are presented, and we’re going to use two here: one to change the shape of flags, and one to add a shadow.</p><p>There are four built-in shapes in Swift: rectangle, rounded rectangle, circle, and capsule. We’ll be using capsule here: it ensures the corners of the shortest edges are fully rounded, while the longest edges remain straight – it looks great for buttons. Making our image capsule shaped is as easy as adding the <code>.clipShape(Capsule())</code> modifier, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">Capsule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And finally we want to apply a shadow effect around each flag, making them really stand out from the background. This is done using <code>shadow()</code>, which takes the color, radius, X, and Y offset of the shadow, but if you skip the color we get a translucent black, and if we skip X and Y it assumes 0 for them – all sensible defaults.</p><p>So, add this last modifier below the previous two:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>So, our finished flag image looks like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Image</span><span class="token punctuation">(</span>countries<span class="token punctuation">[</span>number<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">renderingMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>original<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">Capsule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">shadow</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SwiftUI has so many modifiers that help us adjust the way fonts and images are rendered. They all do exactly one thing, so it’s common to stack them up as you can see above.</p>`,23),P=n("h3",{id:"upgrading-our-design",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#upgrading-our-design"},[n("span",null,"Upgrading our design")])],-1),C={class:"hint-container details"},R=n("summary",null,"Upgrading our design",-1),z=l(`<p>At this point we’ve built the app and it works well, but with all the SwiftUI skills you’ve learned so far we can actually take what we’ve built and re-skin it – produce a different UI for the project we’ve currently built. This won’t affect the logic at all; we’re just trying out some different UI to see what you can do with your current knowledge.</p><p>Experimenting with designs like this is a lot of fun, but I do want to add one word of caution: at the very least, make sure you run your code on all sizes of iOS device, from the tiny iPod touch up to an iPhone 13 Pro Max. Finding something that works well on that wide range of screen sizes takes some thinking!</p><p>Let’s start off with the blue-black gradient we have behind our flags. It was okay to get us going, but now I want to try something a little fancier: a radial gradient with custom stops.</p><p>Previously I showed you how we can use very precise gradient stop locations to adjust the way our gradient is drawn. Well, if we create two stops that are <em>identical</em> to each other then the gradient goes away entirely – the color just switches from one to the other directly. Let’s try it out with our current design:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">RadialGradient</span><span class="token punctuation">(</span>stops<span class="token punctuation">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>blue<span class="token punctuation">,</span> location<span class="token punctuation">:</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token punctuation">.</span>red<span class="token punctuation">,</span> location<span class="token punctuation">:</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">,</span> center<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">,</span> startRadius<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> endRadius<span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That’s an interesting effect, I think – like we have a blue circle overlaid on top of a red background. That said, it’s also <em>ugly</em>: those red and blue colors together are much too bright.</p><p>So, we can send in toned-down versions of those same colors to get something looking more harmonious – shades that are much more common in flags:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">RadialGradient</span><span class="token punctuation">(</span>stops<span class="token punctuation">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">(</span>red<span class="token punctuation">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span> green<span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">,</span> blue<span class="token punctuation">:</span> <span class="token number">0.45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> location<span class="token punctuation">:</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>color<span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">(</span>red<span class="token punctuation">:</span> <span class="token number">0.76</span><span class="token punctuation">,</span> green<span class="token punctuation">:</span> <span class="token number">0.15</span><span class="token punctuation">,</span> blue<span class="token punctuation">:</span> <span class="token number">0.26</span><span class="token punctuation">)</span><span class="token punctuation">,</span> location<span class="token punctuation">:</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">,</span> center<span class="token punctuation">:</span> <span class="token punctuation">.</span>top<span class="token punctuation">,</span> startRadius<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> endRadius<span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">ignoresSafeArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, right now we have a <code>VStack</code> with spacing of 30 to place the question area and the flags, but I’d like to reduce that down to 15:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">VStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Why? Well, because we’re going to make that whole area into a visual element in our UI, making it a colored rounded rectangle so that part of the game stands out on the screen.</p><p>To do that, add these modifiers to the end of the same <code>VStack</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">:</span> <span class="token punctuation">.</span>infinity<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>vertical<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>regularMaterial<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That lets it resize to take up all the horizontal space it needs, adds a little vertical padding, applies a background material so that it stands out from the red-blue gradient the background, and finally clips the whole thing into the shape of a rounded rectangle.</p><p>I think that’s already looking a lot better, but let’s keep pressing on!</p><p>Our next step is to add a title before our main box, and a score placeholder after. This means <em>another</em> <code>VStack</code> around what we have so far, because the existing <code>VStack(spacing: 15)</code> we have is where we apply the material effect.</p><p>So, wrap your current <code>VStack</code> in a new one with a title at the top, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Guess the Flag&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">.</span><span class="token function">weight</span><span class="token punctuation">(</span><span class="token punctuation">.</span>bold<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// current VStack(spacing: 15) code</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tip: Asking for bold fonts is so common there’s actually a small shortcut: <code>.font(.largeTitle.bold())</code>.</p><p>That adds a new title at the top, but we can also slot in a score label at the bottom of that new <code>VStack</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Score: ???&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Both the “Guess the Flag” title and score label look great with white text, but the text inside our box <em>doesn’t</em> – we made it white because it was sitting on top of a dark background originally, but now it’s really hard to read.</p><p>To fix this, we can delete the <code>foregroundColor()</code> modifier for <code>Text(countries[correctAnswer])</code> so that it defaults to using the primary color for the system – black in light mode, and white in dark mode.</p><p>As for the white “Tap the flag of”, we can have that use the iOS vibrancy effect to let a little of the background color shine through. Change its <code>foregroundColor()</code> modifier to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">foregroundStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>secondary<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>At this point our UI more or less works, but I think it’s a little too squished up – if you’re on a larger device you’ll see the content all sits in the center of the screen with lots of space above and below, and the white box in the middle runs right to the edges of the screen.</p><p>To fix this we’re going to do two things: add a little padding to our outermost <code>VStack</code>, then add some <code>Spacer()</code> views to force the UI elements apart. On larger devices these spacers will split up the available space between them, but on small devices they’ll practically disappear – it’s a great way to make our UI work well on all screen sizes.</p><p>There are four spacers I’d like you to add:</p><ul><li>One directly before the “Guess the Flag” title.</li><li><em>Two</em> (yes, two) directly before the “Score: ???” text.</li><li>And one directly <em>after</em> the “Score: ???” text.</li></ul><p>Remember, when you have multiple spacers like this they will automatically divide the available space equally – having two spacers together will make them take up twice as much space as a single spacer.</p><p>And now all that remains is to add a little padding around the outermost <code>VStack</code>, with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And that’s our refreshed design complete! Having all those spacers means that on small devices such as the iPod touch, while also scaling up smoothly to look good even on Pro Max iPhones.</p><p>However, this is only <em>one</em> possible design for our app – maybe you prefer the old design over this one, or maybe you want to try something else. The point is, you’ve seen how even with the handful of SwiftUI skills you already have it’s possible to build very different designs, and if you have the time I would encourage you to have a play around and see where you end up!</p>`,34),F=n("p",null,[a("Admit it: building a SwiftUI app is "),n("em",null,"fast"),a(", isn’t it? Once you know the tools you’re working with, you can turn around a complete game in under 15 minutes, and then just like we did try playing around with the design until you find something you like.")],-1),W=n("hr",null,null,-1);function N(u,O){const t=r("router-link"),e=r("VPCard"),c=r("VidStack");return g(),h("div",null,[n("h1",w,[n("a",f,[n("span",null,k(u.$frontmatter.title)+" 관련",1)])]),n("nav",b,[n("ul",null,[n("li",null,[s(t,{to:"#project-2-part-2"},{default:o(()=>[a("Project 2, part 2")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#stacking-up-buttons"},{default:o(()=>[a("Stacking up buttons")]),_:1})]),n("li",null,[s(t,{to:"#showing-the-player-s-score-with-an-alert"},{default:o(()=>[a("Showing the player’s score with an alert")]),_:1})]),n("li",null,[s(t,{to:"#styling-our-flags"},{default:o(()=>[a("Styling our flags")]),_:1})]),n("li",null,[s(t,{to:"#upgrading-our-design"},{default:o(()=>[a("Upgrading our design")]),_:1})])])])])]),v,s(e,i(p({title:"100 Days of SwiftUI - Day 21",desc:"Project 2, part 2",link:"https://www.hackingwithswift.com/100/swiftui/21",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),y,n("details",S,[q,s(e,i(p({title:"100 Days of SwiftUI - Day 21 - Stacking up buttons",desc:"Stacking up buttons",link:"https://hackingwithswift.com/books/ios-swiftui/stacking-up-buttons",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/nXMeUe4J1s4"}),x]),_,n("details",T,[j,s(e,i(p({title:"100 Days of SwiftUI - Day 21 - Showing the player’s score with an alert",desc:"Showing the player’s score with an alert",link:"https://hackingwithswift.com/books/ios-swiftui/showing-the-players-score-with-an-alert",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/1_klyxHKyic"}),I]),V,n("details",A,[U,s(e,i(p({title:"100 Days of SwiftUI - Day 21 - Styling our flags",desc:"Styling our flags",link:"https://hackingwithswift.com/books/ios-swiftui/styling-our-flags",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/z5W0DiR0IuM"}),D]),P,n("details",C,[R,s(e,i(p({title:"100 Days of SwiftUI - Day 21 - Upgrading our design",desc:"Upgrading our design",link:"https://hackingwithswift.com/books/ios-swiftui/upgrading-our-design",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/z5W0DiR0IuM"}),z]),F,W])}const G=d(m,[["render",N],["__file","21.html.vue"]]),M=JSON.parse('{"path":"/swift/100-days-of-swiftui/21.html","title":"Day 21","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 21","description":"100 Days of SwiftUI > Day 21","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 21"},{"property":"og:description","content":"Day 21"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/21.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/21.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 21"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 21"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 21\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 2, part 2","slug":"project-2-part-2","link":"#project-2-part-2","children":[{"level":3,"title":"Stacking up buttons","slug":"stacking-up-buttons","link":"#stacking-up-buttons","children":[]},{"level":3,"title":"Showing the player’s score with an alert","slug":"showing-the-player-s-score-with-an-alert","link":"#showing-the-player-s-score-with-an-alert","children":[]},{"level":3,"title":"Styling our flags","slug":"styling-our-flags","link":"#styling-our-flags","children":[]},{"level":3,"title":"Upgrading our design","slug":"upgrading-our-design","link":"#upgrading-our-design","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":9}]},"readingTime":{"minutes":11.05,"words":3315},"filePathRelative":"swift/100-days-of-swiftui/21.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{G as comp,M as data};
