import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,a as n,t as r,b as e,n as u,g as h,d as s,e as t,r as o,o as m}from"./app-U_bew1in.js";const k={},_={id:"frontmatter-title-관련",tabindex:"-1"},b={class:"header-anchor",href:"#frontmatter-title-관련"},v=n("nav",{class:"table-of-contents"},[n("ul")],-1),g=n("hr",null,null,-1),f=n("code",null,"FROM",-1),y=n("code",null,"Dockerfile",-1),R=n("code",null,"FROM",-1),O=n("p",null,[s("다음과 같이 이미지 이름을 설정하거나 이미지 이름과 태그를 함께 설정할 수도 있습니다. 이미지 이름만 설정하면 "),n("code",null,"latest"),s("를 사용합니다. 또한, 이미지 이름은 생략할 수 없습니다.")],-1),M=n("code",null,"Dockerfile",-1),F=t(`<div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line"><span class="token instruction"><span class="token keyword">FROM</span> ubuntu</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1),D=n("code",null,"Dockerfile",-1),w=t(`<div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line"><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:22.04</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>FROM &lt;이미지&gt; 또는 FROM &lt;이미지&gt;:&lt;태그&gt;</code> 형식입니다.</p><p>앞에서 설명한 것처럼 <code>FROM</code>은 항상 설정해야 하고 맨 처음에 와야 합니다. 이미지를 생성할 때 <code>FROM</code>에 설정한 이미지가 로컬에 있으면 바로 사용하고, 없으면 Docker Hub에서 받아옵니다.</p>`,3),B=n("code",null,"Dockerfile",-1),x=n("code",null,"FROM",-1),T=n("code",null,"FROM",-1),C=n("code",null,"--tag",-1),P=n("code",null,"FROM",-1),j=n("p",null,[s("하지만, 이런 경우보다는 빌드와 파일 포함을 분리하고자 할 때 "),n("code",null,"FROM"),s("을 여러 개 사용합니다.")],-1),q=n("p",null,"예를 들어 C 언어 소스 파일을 컴파일한 뒤 소스 파일은 제외하고 실행 파일만 이미지에 넣어보겠습니다.",-1),S=n("code",null,"hello",-1),A=n("code",null,"hello",-1),N=t(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">mkdir</span> hello</span>
<span class="line"><span class="token builtin class-name">cd</span> hello</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),I=n("code",null,"hello.c",-1),V=t(`<blockquote><p>.hello.c</p></blockquote><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Docker\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>그리고 다음 내용을 Dockerfile로 저장합니다.</p>`,3),Z=n("code",null,"Dockerfile",-1),H=t(`<div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line"><span class="token instruction"><span class="token keyword">FROM</span> ubuntu:22.04 <span class="token keyword">AS</span> builder</span></span>
<span class="line"></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> apt update</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> apt install -y gcc</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">WORKDIR</span> /tmp</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">ADD</span> hello.c ./</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">RUN</span> gcc hello.c -static -o hello</span></span>
<span class="line"></span>
<span class="line"><span class="token instruction"><span class="token keyword">FROM</span> alpine:3.16.2</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">WORKDIR</span> /tmp</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">COPY</span> <span class="token options"><span class="token property">--from</span><span class="token punctuation">=</span><span class="token string">builder</span></span> /tmp/hello ./</span></span>
<span class="line"></span>
<span class="line"><span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;/tmp/hello&quot;</span>]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),K=n("code",null,"ubunbu:22.04",-1),U=n("code",null,"hello.c",-1),Y=n("code",null,"alpine:3.16.2",-1),E=n("code",null,"hello",-1),z=n("li",null,[n("code",null,"FROM ubuntu:22.04 AS builder"),s(": "),n("code",null,"ubuntu:22.04"),s(" 이미지를 builder로 약칭을 지정합니다.")],-1),W=n("code",null,"COPY --from=builder /tmp/hello ./",-1),J=n("code",null,"--from",-1),L=n("code",null,"--from=builder",-1),$=n("code",null,"FROM ubuntu:22.04 AS builder",-1),G=n("code",null,"/tmp/hello",-1),Q=n("code",null,"./",-1),X=t(`<p><code>docker build</code> 명령으로 이미지를 생성합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> build <span class="token parameter variable">--tag</span> hello:0.1 <span class="token builtin class-name">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>이제 <code>alpine:3.16.2</code> 이미지를 이용해서 만든 <code>hello:0.1</code> 이미지를 컨테이너로 생성합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">--rm</span> hello:0.1</span>
<span class="line">Hello Docker</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Hello Docker가 출력되면 실행 파일이 정상적으로 실행된 것입니다.</p>`,5),nn=n("code",null,"FROM ubuntu:22.04 AS builder",-1),sn=n("code",null,"hello.c",-1),en=n("code",null,"FROM alpine:3.16.2",-1),an=n("code",null,"COPY --from=builder /tmp/hello ./",-1),tn=n("code",null,"hello",-1),on=n("p",null,"즉, 이미지의 크기가 작아지면 이미지 저장 공간도 아낄 수 있고 push, pull 속도도 빨라집니다.",-1),ln=n("hr",null,null,-1);function cn(l,pn){const c=o("VPCard"),i=o("SiteInfo"),a=o("FontIcon");return m(),d("div",null,[n("h1",_,[n("a",b,[n("span",null,r(l.$frontmatter.title)+" 관련",1)])]),e(c,u(h({title:"목차",desc:"언제나 최신 Docker",link:"/docker/always-up-to-date-docker/README.md",logo:"https://pyrasis.com/assets/images/pyrasis.png",background:"rgba(31,41,55,0.2)"})),null,16),v,g,e(i,{name:"7장 - 2. FROM",desc:"언제나 최신 Docker",url:"https://pyrasis.com/jHLsAlwaysUpToDateDocker/Unit07/02",logo:"https://pyrasis.com/assets/images/pyrasis.png",preview:"https://pyrasis.com/assets/images/profile1.png"}),n("p",null,[f,s("은 어떤 이미지를 기반으로 이미지를 생성할지 설정합니다. "),e(a,{icon:"fa-brands fa-docker"}),y,s("로 이미지를 생성할 때는 항상 기존에 있는 이미지를 기반으로 생성하기 때문에 "),R,s("은 반드시 설정해야 합니다.")]),O,n("blockquote",null,[n("p",null,[s("."),e(a,{icon:"fa-brands fa-docker"}),M])]),F,n("blockquote",null,[n("p",null,[s("."),e(a,{icon:"fa-brands fa-docker"}),D])]),w,n("p",null,[s("."),e(a,{icon:"fa-brands fa-docker"}),B,s(" 파일 하나에 "),x,s("을 여러 개 설정할 수도 있습니다. "),T,s("을 두 개 설정했다면 이미지가 두 개 생성됩니다. "),C,s(" 옵션으로 이미지 이름을 설정했다면 맨 마지막 "),P,s("에 적용됩니다.")]),j,q,n("p",null,[s("먼저 "),e(a,{icon:"fas fa-folder-open"}),S,s(" 디렉터리를 생성한 뒤 "),e(a,{icon:"fas fa-folder-open"}),A,s(" 디렉터리로 이동합니다.")]),N,n("p",null,[s("다음 내용을 "),e(a,{icon:"iconfont icon-c"}),I,s("로 저장합니다.")]),V,n("blockquote",null,[n("p",null,[s("."),e(a,{icon:"fa-brands fa-docker"}),Z])]),H,n("p",null,[K,s(" 이미지에 gcc를 설치한 뒤 "),e(a,{icon:"iconfont icon-c"}),U,s(" 파일을 컴파일합니다. 그리고 "),Y,s(" 이미지를 기반으로 "),E,s(" 실행 파일만 추가하여 이미지를 생성합니다.")]),n("ul",null,[z,n("li",null,[W,s(": COPY로 파일을 복사할 때 "),J,s(" 옵션을 지정하면 로컬이 아닌 해당 이미지에서 파일을 복사해옵니다. 여기서는 "),L,s("이므로 "),$,s("의 builder에서 파일을 복사해옵니다. 즉, builder에 있는 "),e(a,{icon:"fas fa-folder-open"}),G,s("를 "),e(a,{icon:"fas fa-folder-open"}),Q,s("로 복사합니다.")])]),X,n("p",null,[s("이렇게 두 번의 과정을 거치는 이유는 최종 이미지 파일을 경량화하기 위해서입니다. 처음 "),nn,s("에서는 apt로 gcc를 설치하기 때문에 이미지의 크기가 커집니다. 그리고 실행에 필요없는 "),e(a,{icon:"iconfont icon-c"}),sn,s(" 소스 파일도 포함됩니다. 여기서는 다시 "),en,s("를 사용하여 "),an,s("로 "),tn,s(" 실행 파일만 복사하므로 이미지의 크기가 매우 작아집니다.")]),on,ln])}const un=p(k,[["render",cn],["__file","07B.html.vue"]]),hn=JSON.parse('{"path":"/docker/always-up-to-date-docker/07B.html","title":"07B. FROM","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"07B. FROM","description":"언제나 최신 Docker > 07B. FROM","category":["DevOps","Docker"],"tag":["crashcourse","pyrasis.com","docker","devops"],"head":[[{"meta":null},{"property":"og:title","content":"언제나 최신 Docker > 07B. FROM"},{"property":"og:description","content":"07B. FROM"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/docker/always-up-to-date-docker/07B.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/docker/always-up-to-date-docker/07B.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"07B. FROM"}],["meta",{"property":"og:description","content":"언제나 최신 Docker > 07B. FROM"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"pyrasis.com"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:published_time","content":"2022-10-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"07B. FROM\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]],"date":"2022-10-03T00:00:00.000Z","isOriginal":false},"headers":[],"git":{"createdTime":1716977950000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":3}]},"readingTime":{"minutes":1.22,"words":365},"filePathRelative":"docker/always-up-to-date-docker/07B.md","localizedDate":"2022년 10월 3일","excerpt":"\\n"}');export{un as comp,hn as data};
