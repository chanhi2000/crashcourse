import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as n,t as g,b as a,w as o,n as p,g as l,d as s,e as c,r as e,o as w}from"./app-U_bew1in.js";const k={},f={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},b=n("hr",null,null,-1),I=n("h2",{id:"project-13-part-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#project-13-part-2"},[n("span",null,"Project 13, part 2")])],-1),C=n("p",null,"Today we continue examining our project’s techniques, and we’re starting to venture more into places where SwiftUI feels a bit less pleasing to work with. Today you’re going to see how Core Image integrates with SwiftUI, and the answer is “not very well”. We’re also going to start looking at how UIKit integrates with SwiftUI, and again the answer isn’t great – we need to put in quite some work to squeeze UIKit’s round peg into a SwiftUI-shaped hole.",-1),S=n("p",null,"Would I want to see something better here? Absolutely – and perhaps it will come in a future update to SwiftUI. But there’s an anonymous saying I think fits well here: “never let the things you want make you forget the things you have.”",-1),x=n("p",null,"Yes, SwiftUI’s integration with other frameworks is a little shaky right now, but that doesn’t mean it should detract from the rest of the great work SwiftUI does for us.",-1),_=n("p",null,[n("strong",null,"Today you have just two topics to work through, in which you’ll learn how to manipulate images using Core Image, and how to handling missing content in your app.")],-1),U=n("h3",{id:"integrating-core-image-with-swiftui",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#integrating-core-image-with-swiftui"},[n("span",null,"Integrating Core Image with SwiftUI")])],-1),j={class:"hint-container details"},F=n("summary",null,"Integrating Core Image with SwiftUI",-1),V=c(`<p>Core Image is Apple&#39;s framework for manipulating images. This isn’t <em>drawing</em>, or at least for the most part it isn’t drawing, but instead it’s about changing existing images: applying sharpening, blurs, vignettes, pixellation, and more. If you ever used all the various photo effects available in Apple’s Photo Booth app, that should give you a good idea of what Core Image is good for!</p><p>However, Core Image doesn’t integrate into SwiftUI very well. In fact, I wouldn’t even say it integrates into Apple&#39;s older UIKit framework very well – they did some work to provide helpers, but it still takes quite a bit of thinking. Stick with me, though: the results are quite brilliant once you understand how it all works, and you’ll find it opens up a whole range of functionality for your apps in the future.</p><p>First, we’re going to put in some code to give us a basic image. I’m going to structure this in a slightly odd way, but it will make sense once we mix in Core Image: we’re going to create the <code>Image</code> view as an optional <code>@State</code> property, let it resize to be the same size as the screen, then add an <code>onAppear()</code> modifier to actually load the image.</p><p>Add an example image to your asset catalog, then modify your <code>ContentView</code> struct to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> image<span class="token punctuation">:</span> <span class="token class-name">Image</span><span class="token operator">?</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            image<span class="token operator">?</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">onAppear</span><span class="token punctuation">(</span>perform<span class="token punctuation">:</span> loadImage<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">loadImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        image <span class="token operator">=</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">.</span>example<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>First, notice how smoothly SwiftUI handles optional views – it just works! However, notice how I attached the <code>onAppear()</code> modifier to a <code>VStack</code> around the image, because if the optional image is <code>nil</code> then it won’t trigger the <code>onAppear()</code> function.</p><p>Anyway, when that code runs it should show the example image you added, neatly scaled to fit the screen.</p><p>Now for the complex part: what actually <em>is</em> an <code>Image</code>? As you know, it’s a <em>view</em>, which means it’s something we can position and size inside our SwiftUI view hierarchy. It also handles loading images from our asset catalog and SF Symbols, and it’s capable of loading from a handful of other sources too. However, ultimately it is something that gets displayed – we can’t write its contents to disk or otherwise transform them beyond applying a few simple SwiftUI filters.</p><p>If we want to use Core Image, SwiftUI’s <code>Image</code> view is a great end point, but it’s not useful to use elsewhere. That is, if we want to create images dynamically, apply Core Image filters, and so on, then SwiftUI’s images aren’t up to the job.</p><p>Apple gives us three other image types to work with, and cunningly we need to use all three if we want to work with Core Image. They might sound similar, but there is some subtle distinction between them, and it’s important that you use them correctly if you want to get anything meaningful out of Core Image.</p><p>Apart from SwiftUI’s <code>Image</code> view, the three other image types are:</p><ul><li><code>UIImage</code>, which comes from UIKit. This is an extremely powerful image type capable of working with a variety of image types, including bitmaps (like PNG), vectors (like SVG), and even sequences that form an animation. <code>UIImage</code> is the standard image type for UIKit, and of the three it’s closest to SwiftUI’s <code>Image</code> type.</li><li><code>CGImage</code>, which comes from Core Graphics. This is a simpler image type that is really just a two-dimensional array of pixels.</li><li><code>CIImage</code>, which comes from Core Image. This stores all the information required to produce an image but doesn’t actually turn that into pixels unless it’s asked to. Apple calls <code>CIImage</code> “an image recipe” rather than an actual image.</li></ul><p>There is some interoperability between the various image types:</p><ul><li>We can create a <code>UIImage</code> from a <code>CGImage</code>, and create a <code>CGImage</code> from a <code>UIImage</code>.</li><li>We can create a <code>CIImage</code> from a <code>UIImage</code> and from a <code>CGImage</code>, and can create a <code>CGImage</code> from a <code>CIImage</code>.</li><li>We can create a SwiftUI <code>Image</code> from both a <code>UIImage</code> and a <code>CGImage</code>.</li></ul><p>I know, I know: it’s confusing, but hopefully once you see the code you’ll feel better. What matters is that these image types are pure <em>data</em> – we can’t place them into a SwiftUI view hierarchy, but we can manipulate them freely then present the results in a SwiftUI <code>Image</code>.</p><p>We’re going to change <code>loadImage()</code> so that it creates a <code>UIImage</code> from our example image, then manipulate it using Core Image. More specifically, we’ll start with two tasks:</p><ol><li>We need to load our example image into a <code>UIImage</code>, which has an initializer called <code>UIImage(resource:)</code> to load images from our asset catalog.</li><li>We’ll convert that into a <code>CIImage</code>, which is what Core Image wants to work with.</li></ol><p>So, start by replacing your current <code>loadImage()</code> implementation with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">loadImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> inputImage <span class="token operator">=</span> <span class="token class-name">UIImage</span><span class="token punctuation">(</span>resource<span class="token punctuation">:</span> <span class="token punctuation">.</span>example<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> beginImage <span class="token operator">=</span> <span class="token class-name">CIImage</span><span class="token punctuation">(</span>image<span class="token punctuation">:</span> inputImage<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// more code to come</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The next step will be to create a Core Image context and a Core Image filter. Filters are the things that do the actual work of transforming image data somehow, such as blurring it, sharpening it, adjusting the colors, and so on, and contexts handle converting that processed data into a <code>CGImage</code> we can work with.</p>`,20),T=n("code",null,"ContentView.swift",-1),q=c(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token class-name">CoreImage</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token class-name">CoreImage</span><span class="token punctuation">.</span><span class="token class-name">CIFilterBuiltins</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Next we’ll create the context and filter. For this example we’re going to use a sepia tone filter, which applies a brown tone that makes a photo look like it was taken a long time ago.</p><p>So, replace the <code>// more code to come</code> comment with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> context <span class="token operator">=</span> <span class="token class-name">CIContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> currentFilter <span class="token operator">=</span> <span class="token class-name">CIFilter</span><span class="token punctuation">.</span><span class="token function">sepiaTone</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>We can now customize our filter to change the way it works. Sepia is a simple filter, so it only has two interesting properties: <code>inputImage</code> is the image we want to change, and <code>intensity</code> is how strongly the sepia effect should be applied, specified in the range 0 (original image) and 1 (full sepia).</p><p>So, add these two lines of code below the previous two:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">currentFilter<span class="token punctuation">.</span>inputImage <span class="token operator">=</span> beginImage</span>
<span class="line">currentFilter<span class="token punctuation">.</span>intensity <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>None of this is terribly hard, but here’s where that changes: we need to convert the output from our filter to a SwiftUI <code>Image</code> that we can display in our view. This is where we need to lean on all four image types at once, because the easiest thing to do is:</p><ul><li>Read the output image from our filter, which will be a <code>CIImage</code>. This might fail, so it returns an optional.</li><li>Ask our context to create a <code>CGImage</code> from that output image. This also might fail, so again it returns an optional.</li><li>Convert that <code>CGImage</code> into a <code>UIImage</code>.</li><li>Convert that <code>UIImage</code> into a SwiftUI <code>Image</code>.</li></ul><p>You <em>can</em> go direct from a <code>CGImage</code> to a SwiftUI <code>Image</code> but it requires extra parameters and it just adds even more complexity!</p><p>Here’s the final code for <code>loadImage()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token comment">// get a CIImage from our filter or exit if that fails</span></span>
<span class="line"><span class="token keyword">guard</span> <span class="token keyword">let</span> outputImage <span class="token operator">=</span> currentFilter<span class="token punctuation">.</span>outputImage <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// attempt to get a CGImage from our CIImage</span></span>
<span class="line"><span class="token keyword">guard</span> <span class="token keyword">let</span> cgImage <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createCGImage</span><span class="token punctuation">(</span>outputImage<span class="token punctuation">,</span> from<span class="token punctuation">:</span> outputImage<span class="token punctuation">.</span>extent<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// convert that to a UIImage</span></span>
<span class="line"><span class="token keyword">let</span> uiImage <span class="token operator">=</span> <span class="token class-name">UIImage</span><span class="token punctuation">(</span>cgImage<span class="token punctuation">:</span> cgImage<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// and convert that to a SwiftUI image</span></span>
<span class="line">image <span class="token operator">=</span> <span class="token class-name">Image</span><span class="token punctuation">(</span>uiImage<span class="token punctuation">:</span> uiImage<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you run the app again you should see your example image now has a sepia effect applied, all thanks to Core Image.</p><p>Now, you might well think that was a heck of a lot of work just to get a fairly simple result, but now that you have all the basics of Core Image in place it’s relatively easy to switch to different filters.</p><p>That being said, Core Image is a little bit… well… let’s say “creative”. It was introduced way back in iOS 5.0, and by that point Swift was already being developed inside Apple, but you really wouldn’t know it – for the longest time its API was the least Swifty thing you could imagine, and although Apple has slowly chipped away at its cruft sometimes you have no choice but to dig into its underbelly.</p><p>First, let’s look at the modern API – we could replace our sepia tone with a pixellation filter like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> currentFilter <span class="token operator">=</span> <span class="token class-name">CIFilter</span><span class="token punctuation">.</span><span class="token function">pixellate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">currentFilter<span class="token punctuation">.</span>inputImage <span class="token operator">=</span> beginImage</span>
<span class="line">currentFilter<span class="token punctuation">.</span>scale <span class="token operator">=</span> <span class="token number">100</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When that runs you’ll see our image looks pixellated. A scale of 100 should mean the pixels are 100 points across, but because my image is so big the pixels are relatively small.</p><p>Now let’s try a crystal effect like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> currentFilter <span class="token operator">=</span> <span class="token class-name">CIFilter</span><span class="token punctuation">.</span><span class="token function">crystallize</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">currentFilter<span class="token punctuation">.</span>inputImage <span class="token operator">=</span> beginImage</span>
<span class="line">currentFilter<span class="token punctuation">.</span>radius <span class="token operator">=</span> <span class="token number">200</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or we could add a twirl distortion filter like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> currentFilter <span class="token operator">=</span> <span class="token class-name">CIFilter</span><span class="token punctuation">.</span><span class="token function">twirlDistortion</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">currentFilter<span class="token punctuation">.</span>inputImage <span class="token operator">=</span> beginImage</span>
<span class="line">currentFilter<span class="token punctuation">.</span>radius <span class="token operator">=</span> <span class="token number">1000</span></span>
<span class="line">currentFilter<span class="token punctuation">.</span>center <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> inputImage<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> inputImage<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So, there’s a lot we can do using only the modern API. But for this project we’re going to use the older API for setting values such as <code>radius</code> and <code>scale</code> because it lets us set values dynamically – we can literally ask the current filter what values it supports, then send them on in.</p><p>Here’s how that looks:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> currentFilter <span class="token operator">=</span> <span class="token class-name">CIFilter</span><span class="token punctuation">.</span><span class="token function">twirlDistortion</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">currentFilter<span class="token punctuation">.</span>inputImage <span class="token operator">=</span> beginImage</span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> amount <span class="token operator">=</span> <span class="token number">1.0</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> inputKeys <span class="token operator">=</span> currentFilter<span class="token punctuation">.</span>inputKeys</span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> inputKeys<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token constant">kCIInputIntensityKey</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    currentFilter<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>amount<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token constant">kCIInputIntensityKey</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">if</span> inputKeys<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token constant">kCIInputRadiusKey</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> currentFilter<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>amount <span class="token operator">*</span> <span class="token number">200</span><span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token constant">kCIInputRadiusKey</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> inputKeys<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token constant">kCIInputScaleKey</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> currentFilter<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>amount <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token constant">kCIInputScaleKey</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With that in place, you can now change the twirl distortion to any other filter and the code will carry on working – each of the adjustment values are sent in only if they are supported.</p><p>Notice how that relies on setting values for keys, which might remind you of the way <code>UserDefaults</code> works. In fact, all those <code>kCIInput</code> keys are all implemented as strings behind the scenes, so it’s even more similar than you might have realized!</p><p>If you’re implementing precise Core Image adjustments you should definitely be using the newer API that uses exact property names and types, but in this project the older API comes in useful because it lets us send in adjustments regardless of what filter is actually used.</p>`,28),A=n("h3",{id:"showing-empty-states-with-contentunavailableview",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#showing-empty-states-with-contentunavailableview"},[n("span",null,[s("Showing empty states with "),n("code",null,"ContentUnavailableView")])])],-1),D={class:"hint-container details"},K=n("summary",null,"Showing empty states with ContentUnavailableView",-1),P=c(`<p>SwiftUI&#39;s <code>ContentUnavailableView</code> shows a standard user interface for when your app has nothing to display. I know, that sounds redundant, right? After all, if you have nothing to display, you have nothing to display!</p><p>But <code>ContentUnavailableView</code> is perfect for times your app relies on user information that hasn&#39;t been provided yet, such as when your user hasn&#39;t created any data, or if they are searching for something and there are no results.</p><p>As an example, if you were making an app that let users write down Swift code snippets they wanted to remember, it might start with no snippets by default. So, you could use <code>ContentUnavailableView</code> like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">ContentUnavailableView</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;No snippets&quot;</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;swift&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That will show a big Swift icon from SF Symbols, plus title text below saying &quot;No snippets&quot;.</p><p>You can also add an extra line of description text below, specified as a <code>Text</code> view so you can add extra styling such as a custom font, or a custom color:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">ContentUnavailableView</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;No snippets&quot;</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;swift&quot;</span></span><span class="token punctuation">,</span> description<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;You don&#39;t have any saved snippets yet.&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And if you want <em>full</em> control, you can provide individual views for the title and description, along with some buttons to display to help the user to get started:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">ContentUnavailableView</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;No snippets&quot;</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;swift&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> description<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;You don&#39;t have any saved snippets yet.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> actions<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Create Snippet&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// create a snippet</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>borderedProminent<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It&#39;s a really simple view to use, but it&#39;s much better than just showing a blank screen when the user first comes to your app!</p>`,10),G=n("p",null,"If you have some spare time, try experimenting with Core Image and seeing what you can do – screenshots are always fun to share!",-1),N=n("hr",null,null,-1);function z(u,B){const t=e("router-link"),i=e("VPCard"),r=e("VidStack"),d=e("FontIcon");return w(),h("div",null,[n("h1",f,[n("a",v,[n("span",null,g(u.$frontmatter.title)+" 관련",1)])]),n("nav",y,[n("ul",null,[n("li",null,[a(t,{to:"#project-13-part-2"},{default:o(()=>[s("Project 13, part 2")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#integrating-core-image-with-swiftui"},{default:o(()=>[s("Integrating Core Image with SwiftUI")]),_:1})]),n("li",null,[a(t,{to:"#showing-empty-states-with-contentunavailableview"},{default:o(()=>[s("Showing empty states with ContentUnavailableView")]),_:1})])])])])]),b,I,a(i,p(l({title:"100 Days of SwiftUI - Day 63",desc:"Project 13, part 2",link:"https://www.hackingwithswift.com/100/swiftui/63",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),C,S,x,_,U,n("details",j,[F,a(i,p(l({title:"100 Days of SwiftUI - Day 63 - Integrating Core Image with SwiftUI",desc:"Integrating Core Image with SwiftUI",link:"https://www.hackingwithswift.com/books/ios-swiftui/showing-empty-states-with-contentunavailableview",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(r,{src:"youtube/16YBGhRmyTE"}),V,n("p",null,[s("Both of these data types come from Core Image, so you’ll need to add two imports to make them available to us. So please start by adding these near the top of "),a(d,{icon:"fa-brands fa-swift"}),T,s(":")]),q]),A,n("details",D,[K,a(i,p(l({title:"100 Days of SwiftUI - Day 63 - Showing empty states with ContentUnavailableView",desc:"Showing empty states with ContentUnavailableView",link:"https://www.hackingwithswift.com/books/ios-swiftui/integrating-core-image-with-swiftui",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(r,{src:"youtube/16YBGhRmyTE"}),P]),G,N])}const Y=m(k,[["render",z],["__file","63.html.vue"]]),H=JSON.parse('{"path":"/swift/100-days-of-swiftui/63.html","title":"Day 63","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 63","description":"100 Days of SwiftUI > Day 63","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 63"},{"property":"og:description","content":"Day 63"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/63.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/63.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 63"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 63"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 63\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 13, part 2","slug":"project-13-part-2","link":"#project-13-part-2","children":[{"level":3,"title":"Integrating Core Image with SwiftUI","slug":"integrating-core-image-with-swiftui","link":"#integrating-core-image-with-swiftui","children":[]},{"level":3,"title":"Showing empty states with ContentUnavailableView","slug":"showing-empty-states-with-contentunavailableview","link":"#showing-empty-states-with-contentunavailableview","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":8}]},"readingTime":{"minutes":8.06,"words":2418},"filePathRelative":"swift/100-days-of-swiftui/63.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n<h2>Project 13, part 2</h2>\\n"}');export{Y as comp,H as data};
