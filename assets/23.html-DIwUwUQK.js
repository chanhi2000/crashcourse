import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,a as s,t as h,b as n,w as i,n as o,g as p,e as l,d as a,r as u,o as m}from"./app-U_bew1in.js";const w={},v={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},g={class:"table-of-contents"},b=s("hr",null,null,-1),y=l('<h2 id="project-3-part-1" tabindex="-1"><a class="header-anchor" href="#project-3-part-1"><span>Project 3, part 1</span></a></h2><p>Walt Disney once said, “there is no magic in magic, it’s all in the details.” The same is very much true of SwiftUI: it’s easy to look at it and think there’s all sorts of magic happening to make it work so efficiently, when really if you look behind the curtain you’ll start to see exactly how it works – and in doing so gain a better understanding of how to use it.</p><p>Today is our first technique project, and we’re focusing on two fundamental components of SwiftUI: views and modifiers. We’ve been using these already, but we’ve kind of glossed over exactly how they work. Well, that ends today: we’ll be going through lots of details about what they are, how they work, and <em>why</em> they work that as they do.</p><p>If everything goes to plan, the end result will be lots less magic and lots more detail – you’ll still enjoy using SwiftUI, but you’ll know exactly what makes it tick.</p><p><strong>Today you have 10 topics to work through, in which you’ll learn to build custom view modifiers and custom containers, as well as start to develop your understanding of how SwiftUI actually works internally.</strong></p><h3 id="views-and-modifiers-introduction" tabindex="-1"><a class="header-anchor" href="#views-and-modifiers-introduction"><span>Views and modifiers: Introduction</span></a></h3>',6),x={class:"hint-container details"},S=s("summary",null,"Views and modifiers: Introduction",-1),_=s("p",null,[a("This third SwiftUI project is actually our first "),s("em",null,"technique project"),a(" – a change in pace as we explore certain SwiftUI features in depth, looking at how they work in detail along with "),s("em",null,"why"),a(" they work that way.")],-1),I=s("p",null,[a("In this technique project we’re going to take a close look at views and view modifiers, and hopefully answer some of the most common questions folks have at this point – why does SwiftUI use structs for its views? Why does it use "),s("code",null,"some View"),a(" so much? "),s("em",null,"How do modifiers really work?"),a(" My hope is that by the end of this project you’ll have a thorough understanding of what makes SwiftUI tick.")],-1),V=s("p",null,"As with the other days it’s a good idea to work in an Xcode project so you can see your code in action, so please create a new App project called ViewsAndModifiers.",-1),T=s("h3",{id:"why-does-swiftui-use-structs-for-views",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#why-does-swiftui-use-structs-for-views"},[s("span",null,"Why does SwiftUI use structs for views?")])],-1),q={class:"hint-container details"},U=s("summary",null,"Why does SwiftUI use structs for views?",-1),C=l('<p>If you ever programmed for UIKit or AppKit (Apple’s original user interface frameworks for iOS and macOS) you’ll know that they use <em>classes</em> for views rather than structs. SwiftUI does not: we prefer to use structs for views across the board, and there are a couple of reasons why.</p><p>First, there is an element of performance: structs are simpler and faster than classes. I say <em>an element</em> of performance because lots of people think this is the primary reason SwiftUI uses structs, when really it’s just one part of the bigger picture.</p><p>In UIKit, every view descended from a class called <code>UIView</code> that had many properties and methods – a background color, constraints that determined how it was positioned, a layer for rendering its contents into, and more. There were <em>lots</em> of these, and every <code>UIView</code> and <code>UIView</code> subclass had to have them, because that’s how inheritance works.</p><p>In SwiftUI, all our views are trivial structs and are almost free to create. Think about it: if you make a struct that holds a single integer, the entire size of your struct is… that one integer. Nothing else. No surprise extra values inherited from parent classes, or grandparent classes, or great-grandparent classes, etc – they contain exactly what you can see and nothing more.</p><p>Thanks to the power of modern iPhones, I wouldn’t think twice about creating 1000 integers or even 100,000 integers – it would happen in the blink of an eye. The same is true of 1000 SwiftUI views or even 100,000 SwiftUI views; they are so fast it stops being worth thinking about.</p><p>However, even though performance is important there’s something much more important about views as structs: it forces us to think about isolating state in a clean way. You see, classes are able to change their values freely, which can lead to messier code – how would SwiftUI be able to know when a value changed in order to update the UI?</p><p>By producing views that don’t mutate over time, SwiftUI encourages us to move to a more functional design approach: our views become simple, inert things that convert data into UI, rather than intelligent things that can grow out of control.</p><p>You can see this in action when you look at the kinds of things that can be a view. We already used <code>Color.red</code> and <code>LinearGradient</code> as views – trivial types that hold very little data. In fact, you can’t get a great deal simpler than using <code>Color.red</code> as a view: it holds no information other than “fill my space with red”.</p><p>In comparison, Apple’s <a href="https://developer.apple.com/documentation/uikit/uiview" target="_blank" rel="noopener noreferrer">documentation for <code>UIView</code></a> lists about 200 properties and methods that <code>UIView</code> has, all of which get passed on to its subclasses whether they need them or not.</p><p><strong>Tip</strong>: If you use a class for your view you might find your code either doesn’t compile or crashes at runtime. Trust me on this: use a struct.</p>',10),j=s("h3",{id:"what-is-behind-the-main-swiftui-view",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#what-is-behind-the-main-swiftui-view"},[s("span",null,"What is behind the main SwiftUI view?")])],-1),W={class:"hint-container details"},D=s("summary",null,"What is behind the main SwiftUI view?",-1),H=l(`<p>When you’re just starting out with SwiftUI, you get this code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, world!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It’s common to then modify that text view with a background color and expect it to fill the screen:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, world!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, that doesn’t happen. Instead, we get a small red text view in the center of the screen, and a sea of white beyond it.</p><p>This confuses people, and usually leads to the question – “how do I make what’s behind the view turn red?”</p><p>Let me say this as clearly as I can: <strong>for SwiftUI developers, there is nothing behind our view</strong>. You shouldn’t try to make that white space turn red with weird hacks or workarounds, and you certainly shouldn’t try to reach outside of SwiftUI to do it.</p><p>Now, right now at least there is something behind our content view called a <code>UIHostingController</code>: it is the bridge between UIKit (Apple’s original iOS UI framework) and SwiftUI. However, if you start trying to modify that you’ll find that your code no longer works on Apple’s other platforms, and in fact might stop working entirely on iOS at some point in the future.</p><p>Instead, you should try to get into the mindset that there is nothing behind our view – that what you see is all we have.</p><p>Once you’re in that mindset, the correct solution is to make the text view take up more space; to allow it to fill the screen rather than being sized precisely around its content. We can do that by using the <code>frame()</code> modifier, passing in <code>.infinity</code> for both its maximum width and maximum height.</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, world!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">:</span> <span class="token punctuation">.</span>infinity<span class="token punctuation">,</span> maxHeight<span class="token punctuation">:</span> <span class="token punctuation">.</span>infinity<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Using <code>maxWidth</code> and <code>maxHeight</code> is different from using <code>width</code> and <code>height</code> – we’re not saying the text view <em>must</em> take up all that space, only that it <em>can</em>. If you have other views around, SwiftUI will make sure they all get enough space.</p>`,12),B=s("h3",{id:"why-modifier-order-matters",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#why-modifier-order-matters"},[s("span",null,"Why modifier order matters")])],-1),M={class:"hint-container details"},R=s("summary",null,"Why modifier order matters",-1),A=l(`<p>Whenever we apply a modifier to a SwiftUI view, we actually create a new view with that change applied – we don’t just modify the existing view in place. If you think about it, this behavior makes sense: our views only hold the exact properties we give them, so if we set the background color or font size there is no place to store that data.</p><p>We’re going to look at <em>why</em> this happens shortly, but first I want to look at the practical implications of this behavior. Take a look at this code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, world!&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// do nothing</span></span>
<span class="line"><span class="token punctuation">}</span>    </span>
<span class="line"><span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>What do you think that will look like when it runs?</p><p>Chances are you guessed wrong: you <em>won’t</em> see a 200x200 red button with &quot;Hello, world!&quot; in the middle. Instead, you’ll see a 200x200 empty square, with &quot;Hello, world!&quot; in the middle and with a red rectangle directly around &quot;Hello, world!&quot;.</p><p>You can understand what’s happening here if you think about the way modifiers work: each one creates a new struct with that modifier applied, rather than just setting a property on the view.</p><p>You can peek into the underbelly of SwiftUI by asking for the type of our view’s body. Modify the button to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, world!&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span>    </span>
<span class="line"><span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Swift’s <code>type(of:)</code> method prints the exact type of a particular value, and in this instance it will print the following: <code>ModifiedContent&lt;ModifiedContent&lt;Button&lt;Text&gt;, _BackgroundStyleModifier&lt;Color&gt;&gt;, _FrameLayout&gt;</code></p><p>You can see two things here:</p><ul><li>Every time we modify a view SwiftUI applies that modifier by using generics: <code>ModifiedContent&lt;OurThing, OurModifier&gt;</code>.</li><li>When we apply multiple modifiers, they just stack up: <code>ModifiedContent&lt;ModifiedContent&lt;…</code></li></ul><p>To read what the type is, start from the innermost type and work your way out:</p><ul><li>The innermost type is <code>ModifiedContent&lt;Button&lt;Text&gt;, _BackgroundStyleModifier&lt;Color&gt;</code>: our button has some text with a background color applied.</li><li>Around that we have <code>ModifiedContent&lt;…, _FrameLayout&gt;</code>, which takes our first view (button + background color) and gives it a larger frame.</li></ul><p>As you can see, we end with <code>ModifiedContent</code> types stacking up – each one takes a view to transform plus the actual change to make, rather than modifying the view directly.</p><p><strong>What this means is that the order of your modifiers matter.</strong> If we rewrite our code to apply the background color <em>after</em> the frame, then you might get the result you expected:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, world!&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The best way to think about it for now is to imagine that SwiftUI renders your view after every single modifier. So, as soon as you say <code>.background(.red</code>) it colors the background in red, regardless of what frame you give it. If you then later expand the frame, it won’t magically redraw the background – that was already applied.</p><p>Of course, this isn’t <em>actually</em> how SwiftUI works, because if it did it would be a performance nightmare, but it’s a neat mental shortcut to use while you’re learning.</p><p>An important side effect of using modifiers is that we can apply the same effect multiple times: each one simply adds to whatever was there before.</p><p>For example, SwiftUI gives us the <code>padding()</code> modifier, which adds a little space around a view so that it doesn’t push up against other views or the edge of the screen. If we apply padding then a background color, then more padding and a different background color, we can give a view multiple borders, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, world!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>yellow<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),F=s("h3",{id:"why-does-swiftui-use-some-view-for-its-view-type",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#why-does-swiftui-use-some-view-for-its-view-type"},[s("span",null,"Why does SwiftUI use “some View” for its view type?")])],-1),O={class:"hint-container details"},P=s("summary",null,"Why does SwiftUI use “some View” for its view type?",-1),N=l(`<p>SwiftUI relies very heavily on a Swift power feature called “opaque return types”, which you can see in action every time you write <code>some View</code>. This means “one object that conforms to the <code>View</code> protocol, but we don’t want to say what.”</p><p>Returning <code>some View</code> means even though we don’t know what view type is going back, the compiler does. That might sound small, but it has important implications.</p><p>First, using <code>some View</code> is important for performance: SwiftUI needs to be able to look at the views we are showing and understand how they change, so it can correctly update the user interface. If SwiftUI didn’t have this extra information, it would be really slow for SwiftUI to figure out exactly what changed – it would pretty much need to ditch everything and start again after every small change.</p><p>The second difference is important because of the way SwiftUI builds up its data using <code>ModifiedContent</code>. Previously I showed you this code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That creates a simple button then makes it print its exact Swift type, and gives some long output with a couple of instances of <code>ModifiedContent</code>.</p><p>The <code>View</code> protocol has an associated type attached to it, which is Swift’s way of saying that <code>View</code> by itself doesn’t mean anything – we need to say exactly what kind of view it is. It effectively has a hole in it, in a similar way to how Swift doesn’t let us say “this variable is an array” and instead requires that we say what’s <em>in</em> the array: “this variable is a string array.”</p><p>So, while it’s not allowed to write a view like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It is perfectly legal to write a view like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token class-name">Text</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Returning <code>View</code> makes no sense, because Swift wants to know what’s inside the view – it has a big hole that must be filled. On the other hand, returning <code>Text</code> is fine, because we’ve filled the hole; Swift knows what the view is.</p><p>Now let’s return to our code from earlier:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If we want to return one of those from our <code>body</code> property, what should we write? While you could try to figure out the exact combination of <code>ModifiedContent</code> structs to use, it’s hideously painful and the simple truth is that we don’t care because it’s all internal SwiftUI stuff.</p><p>What <code>some View</code> lets us do is say “this will be a view, such as <code>Button</code> or <code>Text</code>, but I don’t want to say what.” So, the hole that <code>View</code> has will be filled by a real view object, but we aren’t required to write out the exact long type.</p><p>There are two places where it gets a bit more complicated:</p><ol><li>How does <code>VStack</code> work – it conforms to the <code>View</code> protocol, but how does it fill the “what kind of content does it have?” hole if it can contain lots of different things inside it?</li><li>What happens if we send back two views directly from our <code>body</code> property, without wrapping them in a stack?</li></ol><p>To answer the first question first, if you create a <code>VStack</code> with two text views inside, SwiftUI silently creates a <code>TupleView</code> to contain those two views – a special type of view that holds exactly two views inside it. So, the <code>VStack</code> fills the “what kind of view is this?” with the answer “it’s a <code>TupleView</code> containing two text views.”</p><p>And what if you have three text views inside the <code>VStack</code>? Then it’s a <code>TupleView</code> containing three views. Or four views. Or eight views, or even ten views – there is literally a version of <code>TupleView</code> that tracks ten different kinds of content:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">TupleView</span><span class="token operator">&lt;</span><span class="token punctuation">(</span>C0<span class="token punctuation">,</span> C1<span class="token punctuation">,</span> C2<span class="token punctuation">,</span> C3<span class="token punctuation">,</span> C4<span class="token punctuation">,</span> C5<span class="token punctuation">,</span> C6<span class="token punctuation">,</span> C7<span class="token punctuation">,</span> C8<span class="token punctuation">,</span> C9<span class="token punctuation">)</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And that’s why SwiftUI doesn’t allow more than 10 views inside a parent: they wrote versions of <code>TupleView</code> that handle 2 views through 10, but no more.</p><p>As for the second question, Swift silently applies a special attribute to the <code>body</code> property called <code>@ViewBuilder</code>. This has the effect of silently wrapping multiple views in one of those <code>TupleView</code> containers, so that even though it looks like we’re sending back multiple views they get combined into one <code>TupleView</code>.</p><p>This behavior isn’t magic: if you right-click on the <code>View</code> protocol and choose “Jump to Definition”, you’ll see the requirement for the <code>body</code> property and also see that it’s marked with the <code>@ViewBuilder</code> attribute:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@ViewBuilder</span> <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">Self</span><span class="token punctuation">.</span><span class="token class-name">Body</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Of course, how SwiftUI interprets multiple views going back without a stack around them isn’t specifically defined anywhere, but as you’ll learn later on that’s actually helpful.</p>`,26),Y=s("h3",{id:"conditional-modifiers",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#conditional-modifiers"},[s("span",null,"Conditional modifiers")])],-1),L={class:"hint-container details"},G=s("summary",null,"Conditional modifiers",-1),E=l(`<p>It’s common to want modifiers that apply only when a certain condition is met, and in SwiftUI the easiest way to do that is with the ternary conditional operator.</p><p>As a reminder, to use the ternary operator you write your condition first, then a question mark and what should be used if the condition is true, then a colon followed by what should be used if the condition is false. If you forget this order a lot, remember <a href="https://twitter.com/scottmichaud/status/1087510756634083330" target="_blank" rel="noopener noreferrer">Scott Michaud’s helpful mnemonic</a>: What do you want to check, True, False, or “WTF” for short.</p><p>For example, if you had a property that could be either true or false, you could use that to control the foreground color of a button like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> useRedText <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// flip the Boolean between true and false</span></span>
<span class="line">            useRedText<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            </span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span>useRedText <span class="token operator">?</span> <span class="token punctuation">.</span>red <span class="token punctuation">:</span> <span class="token punctuation">.</span>blue<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So, when <code>useRedText</code> is true the modifier effectively reads <code>.foregroundColor(.red)</code>, and when it’s false the modifier becomes <code>.foregroundColor(.blue)</code>. Because SwiftUI watches for changes in our <code>@State</code> properties and re-invokes our <code>body</code> property, whenever that property changes the color will immediately update.</p><p>You can often use regular <code>if</code> conditions to return different views based on some state, but this actually creates more work for SwiftUI – rather than seeing one <code>Button</code> being used with different colors, it now sees two different <code>Button</code> views, and when we flip the Boolean condition it will destroy one to create the other rather than just recolor what it has.</p><p>So, this kind of code might <em>look</em> the same, but it’s actually less efficient:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> useRedText <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            useRedText<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            useRedText<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sometimes using <code>if</code> statements are unavoidable, but where possible prefer to use the ternary operator instead.</p>`,9),K=s("h3",{id:"environment-modifiers",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#environment-modifiers"},[s("span",null,"Environment modifiers")])],-1),z={class:"hint-container details"},J=s("summary",null,"Environment modifiers",-1),Z=l(`<p>Many modifiers can be applied to containers, which allows us to apply the same modifier to many views at the same time.</p><p>For example, if we have four text views in a <code>VStack</code> and want to give them all the same font modifier, we could apply the modifier to the <code>VStack</code> directly and have that change apply to all four text views:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Gryffindor&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hufflepuff&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Ravenclaw&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Slytherin&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is called an environment modifier, and is different from a regular modifier that is applied to a view.</p><p>From a coding perspective these modifiers are used exactly the same way as regular modifiers. However, they behave subtly differently because if any of those child views override the same modifier, the child’s version takes priority.</p><p>As an example, this shows our four text views with the title font, but one has a large title:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Gryffindor&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hufflepuff&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Ravenclaw&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Slytherin&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There, <code>font()</code> is an environment modifier, which means the Gryffindor text view can override it with a custom font.</p><p>However, this applies a blur effect to the <code>VStack</code> then attempts to disable blurring on one of the text views:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Gryffindor&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hufflepuff&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Ravenclaw&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Slytherin&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That won’t work the same way: <code>blur()</code> is a regular modifier, so any blurs applied to child views are <em>added</em> to the <code>VStack</code> blur rather than replacing it.</p><p>To the best of my knowledge there is no way of knowing ahead of time which modifiers are environment modifiers and which are regular modifiers other than reading the individual documentation for each modifier and hope it’s mentioned. Still, I’d rather have them than not: being able to apply one modifier everywhere is much better than copying and pasting the same thing into multiple places.</p>`,12),Q=s("h3",{id:"views-as-properties",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#views-as-properties"},[s("span",null,"Views as properties")])],-1),X={class:"hint-container details"},$=s("summary",null,"Views as properties",-1),ss=l(`<p>There are lots of ways to make it easier to use complex view hierarchies in SwiftUI, and one option is to use properties – to create a view as a property of your own view, then use that property inside your layouts.</p><p>For example, we could create two text views like this as properties, then use them inside a <code>VStack</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> motto1 <span class="token operator">=</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Draco dormiens&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> motto2 <span class="token operator">=</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;nunquam titillandus&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            motto1</span>
<span class="line">            motto2</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can even apply modifiers directly to those properties as they are being used, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">    motto1</span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line">    motto2</span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Creating views as properties can be helpful to keep your <code>body</code> code clearer – not only does it help avoid repetition, but it can also get more complex code out of the <code>body</code> property.</p><p>Swift doesn’t let us create one stored property that refers to other stored properties, because it would cause problems when the object is created. This means trying to create a <code>TextField</code> bound to a local property will cause problems.</p><p>However, you can create <em>computed</em> properties if you want, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> motto1<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Draco dormiens&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is often a great way to carve up your complex views into smaller chunks, but be careful: unlike the <code>body</code> property, Swift won’t automatically apply the <code>@ViewBuilder</code> attribute here, so if you want to send multiple views back you have three options.</p><p>First, you can place them in a stack, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> spells<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Lumos&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Obliviate&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you don’t specifically want to organize them in a stack, you can also send back a <code>Group</code>. When this happens, the arrangement of your views is determined by how you use them elsewhere in your code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> spells<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Group</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Lumos&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Obliviate&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The third option is to add the <code>@ViewBuilder</code> attribute yourself, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@ViewBuilder</span> <span class="token keyword">var</span> spells<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Lumos&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Obliviate&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Of them all, I prefer to use <code>@ViewBuilder</code> because it mimics the way <code>body</code> works, however I’m also wary when I see folks cram lots of functionality into their properties – it’s usually a sign that their views are getting a bit too complex, and need to be broken up. Speaking of which, let’s tackle that next…</p>`,17),ns=s("h3",{id:"view-composition",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#view-composition"},[s("span",null,"View composition")])],-1),as={class:"hint-container details"},es=s("summary",null,"View composition",-1),ts=l(`<p>SwiftUI lets us break complex views down into smaller views without incurring much if any performance impact. This means that we can split up one large view into multiple smaller views, and SwiftUI takes care of reassembling them for us.</p><p>For example, in this view we have a particular way of styling text views – they have a large font, some padding, foreground and background colors, plus a capsule shape:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;First&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">Capsule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Second&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">Capsule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Because those two text views are identical apart from their text, we can wrap them up in a new custom view, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">CapsuleText</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> text<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">Capsule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can then use that <code>CapsuleText</code> view inside our original view, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">CapsuleText</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;First&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token class-name">CapsuleText</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Second&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Of course, we can also store some modifiers in the view and customize others when we use them. For example, if we removed <code>foregroundColor()</code> from <code>CapsuleText</code>, we could then apply custom colors when creating instances of that view like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">VStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">CapsuleText</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;First&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">CapsuleText</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Second&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>yellow<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Don’t worry about performance issues here – it’s extremely efficient to break up SwiftUI views in this way.</p>`,10),is=s("h3",{id:"custom-modifiers",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#custom-modifiers"},[s("span",null,"Custom modifiers")])],-1),os={class:"hint-container details"},ps=s("summary",null,"Custom modifiers",-1),ls=l(`<p>SwiftUI gives us a range of built-in modifiers, such as <code>font()</code>, <code>background()</code>, and <code>clipShape()</code>. However, it’s also possible to create custom modifiers that do something specific.</p><p>To create a custom modifier, create a new struct that conforms to the <code>ViewModifier</code> protocol. This has only one requirement, which is a method called <code>body</code> that accepts whatever content it’s being given to work with, and must return <code>some View</code>.</p><p>For example, we might say that all titles in our app should have a particular style, so first we need to create a custom <code>ViewModifier</code> struct that does what we want:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Title</span><span class="token punctuation">:</span> <span class="token class-name">ViewModifier</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">body</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token class-name">Content</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        content</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can now use that with the <code>modifier()</code> modifier – yes, it’s a modifier called “modifier”, but it lets us apply any sort of modifier to a view, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">modifier</span><span class="token punctuation">(</span><span class="token class-name">Title</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>When working with custom modifiers, it’s usually a smart idea to create extensions on <code>View</code> that make them easier to use. For example, we might wrap the <code>Title</code> modifier in an extension such as this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">titleStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">modifier</span><span class="token punctuation">(</span><span class="token class-name">Title</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can now use the modifier like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">titleStyle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Custom modifiers can do much more than just apply other existing modifiers – they can also create new view structure, as needed. Remember, modifiers return new objects rather than modifying existing ones, so we could create one that embeds the view in a stack and adds another view:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Watermark</span><span class="token punctuation">:</span> <span class="token class-name">ViewModifier</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> text<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">body</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token class-name">Content</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ZStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>bottomTrailing<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            content</span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>caption<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>black<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">watermarked</span><span class="token punctuation">(</span>with text<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">modifier</span><span class="token punctuation">(</span><span class="token class-name">Watermark</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> text<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With that in place, we can now add a watermark to any view like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Color</span><span class="token punctuation">.</span>blue</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">watermarked</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Hacking with Swift&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Tip</strong>: Often folks wonder when it’s better to add a custom view modifier versus just adding a new method to <code>View</code>, and really it comes down to one main reason: custom view modifiers can have their own stored properties, whereas extensions to <code>View</code> cannot.</p>`,15),cs=s("p",null,[a("That’s a huge chunk of learning, but if you’re keen for more I have one bonus tutorial for you – it’s "),s("em",null,"optional"),a(", so only complete this if you have the time: "),s("a",{href:"https://www.hackingwithswift.com/books/ios-swiftui/custom-containers",target:"_blank",rel:"noopener noreferrer"},"Custom containers"),a(".")],-1),us=s("hr",null,null,-1);function rs(r,ds){const e=u("router-link"),t=u("VPCard"),c=u("VidStack");return m(),k("div",null,[s("h1",v,[s("a",f,[s("span",null,h(r.$frontmatter.title)+" 관련",1)])]),s("nav",g,[s("ul",null,[s("li",null,[n(e,{to:"#project-3-part-1"},{default:i(()=>[a("Project 3, part 1")]),_:1}),s("ul",null,[s("li",null,[n(e,{to:"#views-and-modifiers-introduction"},{default:i(()=>[a("Views and modifiers: Introduction")]),_:1})]),s("li",null,[n(e,{to:"#why-does-swiftui-use-structs-for-views"},{default:i(()=>[a("Why does SwiftUI use structs for views?")]),_:1})]),s("li",null,[n(e,{to:"#what-is-behind-the-main-swiftui-view"},{default:i(()=>[a("What is behind the main SwiftUI view?")]),_:1})]),s("li",null,[n(e,{to:"#why-modifier-order-matters"},{default:i(()=>[a("Why modifier order matters")]),_:1})]),s("li",null,[n(e,{to:"#why-does-swiftui-use-some-view-for-its-view-type"},{default:i(()=>[a("Why does SwiftUI use “some View” for its view type?")]),_:1})]),s("li",null,[n(e,{to:"#conditional-modifiers"},{default:i(()=>[a("Conditional modifiers")]),_:1})]),s("li",null,[n(e,{to:"#environment-modifiers"},{default:i(()=>[a("Environment modifiers")]),_:1})]),s("li",null,[n(e,{to:"#views-as-properties"},{default:i(()=>[a("Views as properties")]),_:1})]),s("li",null,[n(e,{to:"#view-composition"},{default:i(()=>[a("View composition")]),_:1})]),s("li",null,[n(e,{to:"#custom-modifiers"},{default:i(()=>[a("Custom modifiers")]),_:1})])])])])]),b,n(t,o(p({title:"100 Days of SwiftUI - Day 23",desc:"Project 3, part 1",link:"https://www.hackingwithswift.com/100/swiftui/23",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),y,s("details",x,[S,n(t,o(p({title:"100 Days of SwiftUI - Day 23 - Views and modifiers: Introduction",desc:"Views and modifiers: Introduction",link:"https://hackingwithswift.com/books/ios-swiftui/views-and-modifiers-introduction",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),_,I,V]),T,s("details",q,[U,n(t,o(p({title:"100 Days of SwiftUI - Day 23 - Why does SwiftUI use structs for views?",desc:"Why does SwiftUI use structs for views?",link:"https://hackingwithswift.com/books/ios-swiftui/why-does-swiftui-use-structs-for-views",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(c,{src:"youtube/s22TboJomT4"}),C]),j,s("details",W,[D,n(t,o(p({title:"100 Days of SwiftUI - Day 23 - What is behind the main SwiftUI view?",desc:"What is behind the main SwiftUI view?",link:"https://hackingwithswift.com/books/ios-swiftui/what-is-behind-the-main-swiftui-view",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(c,{src:"youtube/cfAkZ20gIHA"}),H]),B,s("details",M,[R,n(t,o(p({title:"100 Days of SwiftUI - Day 23 - Why modifier order matters",desc:"Why modifier order matters",link:"https://hackingwithswift.com/books/ios-swiftui/why-modifier-order-matters",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(c,{src:"youtube/q_6NLFVGedY"}),A]),F,s("details",O,[P,n(t,o(p({title:"100 Days of SwiftUI - Day 23 - Why does SwiftUI use “some View” for its view type?",desc:"Why does SwiftUI use “some View” for its view type?",link:"https://hackingwithswift.com/books/ios-swiftui/why-does-swiftui-use-some-view-for-its-view-type",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(c,{src:"youtube/kv5JqKQwL0c"}),N]),Y,s("details",L,[G,n(t,o(p({title:"100 Days of SwiftUI - Day 23 - Conditional modifiers",desc:"Conditional modifiers",link:"https://hackingwithswift.com/books/ios-swiftui/conditional-modifiers",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(c,{src:"youtube/1nvCl76AbB4"}),E]),K,s("details",z,[J,n(t,o(p({title:"100 Days of SwiftUI - Day 23 - Environment modifiers",desc:"Environment modifiers",link:"https://hackingwithswift.com/books/ios-swiftui/environment-modifiers",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(c,{src:"youtube/qQNs-jIboLg"}),Z]),Q,s("details",X,[$,n(t,o(p({title:"100 Days of SwiftUI - Day 23 - Views as properties",desc:"Views as properties",link:"https://hackingwithswift.com/books/ios-swiftui/views-as-properties",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(c,{src:"youtube/RY4GXxPyMJw"}),ss]),ns,s("details",as,[es,n(t,o(p({title:"100 Days of SwiftUI - Day 23 - View composition",desc:"View composition",link:"https://hackingwithswift.com/books/ios-swiftui/view-composition",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(c,{src:"youtube/YQf4Hfr8gWA"}),ts]),is,s("details",os,[ps,n(t,o(p({title:"100 Days of SwiftUI - Day 23 - Custom modifiers",desc:"Custom modifiers",link:"https://hackingwithswift.com/books/ios-swiftui/custom-modifiers",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(c,{src:"youtube/B6UaRlli5rw"}),ls]),cs,us])}const ms=d(w,[["render",rs],["__file","23.html.vue"]]),ws=JSON.parse('{"path":"/swift/100-days-of-swiftui/23.html","title":"Day 23","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 23","description":"100 Days of SwiftUI > Day 23","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 23"},{"property":"og:description","content":"Day 23"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/23.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/23.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 23"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 23"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 23\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 3, part 1","slug":"project-3-part-1","link":"#project-3-part-1","children":[{"level":3,"title":"Views and modifiers: Introduction","slug":"views-and-modifiers-introduction","link":"#views-and-modifiers-introduction","children":[]},{"level":3,"title":"Why does SwiftUI use structs for views?","slug":"why-does-swiftui-use-structs-for-views","link":"#why-does-swiftui-use-structs-for-views","children":[]},{"level":3,"title":"What is behind the main SwiftUI view?","slug":"what-is-behind-the-main-swiftui-view","link":"#what-is-behind-the-main-swiftui-view","children":[]},{"level":3,"title":"Why modifier order matters","slug":"why-modifier-order-matters","link":"#why-modifier-order-matters","children":[]},{"level":3,"title":"Why does SwiftUI use “some View” for its view type?","slug":"why-does-swiftui-use-some-view-for-its-view-type","link":"#why-does-swiftui-use-some-view-for-its-view-type","children":[]},{"level":3,"title":"Conditional modifiers","slug":"conditional-modifiers","link":"#conditional-modifiers","children":[]},{"level":3,"title":"Environment modifiers","slug":"environment-modifiers","link":"#environment-modifiers","children":[]},{"level":3,"title":"Views as properties","slug":"views-as-properties","link":"#views-as-properties","children":[]},{"level":3,"title":"View composition","slug":"view-composition","link":"#view-composition","children":[]},{"level":3,"title":"Custom modifiers","slug":"custom-modifiers","link":"#custom-modifiers","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":9}]},"readingTime":{"minutes":16.34,"words":4903},"filePathRelative":"swift/100-days-of-swiftui/23.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{ms as comp,ws as data};
