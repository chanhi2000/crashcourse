import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as s,t as m,b as n,w as t,n as i,g as o,e as p,r,o as k,d as l}from"./app-U_bew1in.js";const g={},w={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},v={class:"table-of-contents"},b=s("hr",null,null,-1),y=p('<h2 id="project-5-part-1" tabindex="-1"><a class="header-anchor" href="#project-5-part-1"><span>Project 5, part 1</span></a></h2><p>It’s time for another new project, and this is actually the last easy project we have on this course – after this the difficulty level ramps up a little as we tackle bigger apps, so enjoy this while it lasts!</p><p>In this app you’ll work with two of the real fundamentals of app development: <code>List</code> for working with tables of data, and strings, for handling text. Yes, we covered strings quite a bit already, but now we’re <em>really</em> going to dig into them, including how to work with their Unicode representation so we can get compatibility with older Objective-C frameworks.</p><p>Unicode is a standard for storing and representing text, which at first glance you might think sounds easy. But trust me on this: it really isn’t. You know how I said dates are hard? Well, dates are <em>easy</em> compared to storing text properly. In fact, there’s even a joke mug you can buy that says “I ? Unicode” – a painful reminder that when text representation goes bad all you see is a question mark where the symbol should be.</p><p><strong>Today you have four topics to work through, and you’ll meet <code>List</code>, <code>Bundle</code>, <code>UITextChecker</code>, and more.</strong></p><h3 id="word-scramble-introduction" tabindex="-1"><a class="header-anchor" href="#word-scramble-introduction"><span>Word Scramble: Introduction</span></a></h3>',6),x={class:"hint-container details"},q=s("summary",null,"Word Scramble: Introduction",-1),S=p("<p>This project will be another game, although really it’s just a sneaky way for me to introduce more Swift and SwiftUI knowledge! The game will show players a random eight-letter word, and ask them to make words out of it. For example, if the starter word is “alarming” they might spell “alarm”, “ring”, “main”, and so on.</p><p>Along the way you’ll meet <code>List</code>, <code>onAppear()</code>, <code>Bundle</code>, <code>fatalError()</code>, and more – all useful skills that you’ll use for years to come. You’ll also get some practice with <code>@State</code>, <code>NavigationView</code>, and more, which you should enjoy while you can – this is our last easy project!</p><p>To get started, please create a new App project called WordScramble. You’ll need to download the files for this project, as it contains a file called “start.txt” that you’ll be needing later on.</p><p>OK, let’s get into some code…</p>",4),_=s("h3",{id:"introducing-list-your-best-friend",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#introducing-list-your-best-friend"},[s("span",null,"Introducing List, your best friend")])],-1),j={class:"hint-container details"},I=s("summary",null,"Introducing List, your best friend",-1),T=p(`<p>Of all SwiftUI’s view types, <code>List</code> is the one you’ll rely on the most. That doesn’t mean you’ll <em>use</em> it the most – I’m sure <code>Text</code> or <code>VStack</code> will claim that crown – more that it’s such a workhorse that you’ll come back to it time and time again. And this isn’t new: the equivalent of <code>List</code> in UIKit was <code>UITableView</code>, and it got used just as much.</p><p>The job of <code>List</code> is to provide a scrolling table of data. In fact, it’s pretty much identical to <code>Form</code>, except it’s used for presentation of data rather than requesting user input. Don’t get me wrong: you’ll use <code>Form</code> quite a lot too, but really it’s just a specialized type of <code>List</code>.</p><p>Just like <code>Form</code>, you can provide <code>List</code> a selection of static views to have them rendered in individual rows:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">List</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can also switch to <code>ForEach</code> in order to create rows dynamically from an array or range:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">List</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Dynamic row </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token short-argument">$0</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Where things get more interesting is the way you can mix static and dynamic rows:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">List</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Static row 1&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Static row 2&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Dynamic row </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token short-argument">$0</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Static row 3&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Static row 4&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And of course we can combine that with sections, to make our list easier to read:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">List</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Section</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Section 1&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Static row 1&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Static row 2&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Section</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Section 2&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Dynamic row </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token short-argument">$0</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Section</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Section 3&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Static row 3&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Static row 4&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tip: As you can see, if your section header is just some text you can pass it in directly as a string – it’s a helpful shortcut for times you don’t need anything more advanced.</p><p>Being able to have both static and dynamic content side by side lets us recreate something like the Wi-Fi screen in Apple’s Settings app – a toggle to enable Wi-Fi system-wide, then a dynamic list of nearby networks, then some more static cells with options to auto-join hotspots and so on.</p><p>You’ll notice that this list looks similar to the form we had previously, but we can adjust how the list looks using the <code>listStyle()</code> modifier, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">listStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>grouped<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now, everything you’ve seen so far works fine with <code>Form</code> as well as <code>List</code> – even the dynamic content. But one thing <code>List</code> can do that <code>Form</code> can’t is to generate its rows entirely from dynamic content without needing a <code>ForEach</code>.</p><p>So, if your entire list is made up of dynamic rows, you can simply write this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">List</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Dynamic row </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token short-argument">$0</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This allows us to create lists really quickly, which is helpful given how common they are.</p><p>In this project we’re going to use <code>List</code> slightly differently, because we’ll be making it loop over an array of strings. We’ve used <code>ForEach</code> with ranges a lot, either hard-coded (<code>0..&lt;5</code>) or relying on variable data (<code>0..&lt;students.count</code>), and that works great because SwiftUI can identify each row uniquely based on its position in the range.</p><p>When working with an array of data, SwiftUI still needs to know how to identify each row uniquely, so if one gets removed it can simply remove that one rather than having to redraw the whole list. This is where the id parameter comes in, and it works identically in both <code>List</code> and <code>ForEach</code> – it lets us tell SwiftUI exactly what makes each item in the array unique.</p><p>When working with arrays of strings and numbers, the only thing that makes those values unique is the values themselves. That is, if we had the array <code>[2, 4, 6, 8, 10]</code>, then those numbers themselves are themselves the unique identifiers. After all, we don’t have anything else to work with!</p><p>When working with this kind of list data, we use <code>id: \\.self</code> like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> people <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Finn&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Leia&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Luke&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Rey&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That works just the same with <code>ForEach</code>, so if we wanted to mix static and dynamic rows we could have written this instead:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">List</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Static Row&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">ForEach</span><span class="token punctuation">(</span>people<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Static Row&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25),L=s("h3",{id:"loading-resources-from-your-app-bundle",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#loading-resources-from-your-app-bundle"},[s("span",null,"Loading resources from your app bundle")])],-1),U={class:"hint-container details"},W=s("summary",null,"Loading resources from your app bundle",-1),D=p(`<p>When we use <code>Image</code> views, SwiftUI knows to look in your app’s asset catalog to find the artwork, and it even automatically adjusts the artwork so it loads the correct picture for the current screen resolution – that’s the @2x and @3x stuff we looked at earlier.</p><p>For other data, such as text files, we need to do more work. This also applies if you have specific data formats such as XML or JSON – it takes the same work regardless of what file types you’re loading.</p><p>When Xcode builds your iOS app, it creates something called a “bundle”. This happens on all of Apple’s platforms, including macOS, and it allows the system to store all the files for a single app in one place – the binary code (the actual compiled Swift stuff we wrote), all the artwork, plus any extra files we need all in one place.</p><p>In the future, as your skills grow, you’ll learn how you can actually include multiple bundles in a single app, allowing you to write things like Siri extensions, iMessage apps, widgets, and more, all inside a single iOS app bundle. Although these get included with our app’s download from the App Store, these other bundles are stored separately from our main app bundle – our main iOS app code and resources.</p><p>All this matters because it’s common to want to look in a bundle for a file you placed there. This uses a new data type called <code>URL</code>, which stores pretty much exactly what you think: a URL such as <a href="https://www.hackingwithswift.com" target="_blank" rel="noopener noreferrer">https://www.hackingwithswift.com</a>. However, URLs are a bit more powerful than just storing web addresses – they can also store the locations of files, which is why they are useful here.</p><p>Let’s start writing some code. If we want to read the URL for a file in our main app bundle, we use <code>Bundle.main.url()</code>. If the file exists it will be sent back to us, otherwise we’ll get back <code>nil</code>, so this is an optional <code>URL</code>. That means we need to unwrap it like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> fileURL <span class="token operator">=</span> <span class="token class-name">Bundle</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>forResource<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;some-file&quot;</span></span><span class="token punctuation">,</span> withExtension<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;txt&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// we found the file in our bundle!</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>What’s inside the <code>URL</code> doesn’t really matter, because iOS uses paths that are impossible to guess – our app lives in its own sandbox, and we shouldn’t try to read outside of it.</p><p>Once we have a URL, we can load it into a string with a special initializer: <code>String(contentsOf:)</code>. We give this a file URL, and it will send back a string containing the contents of that file if it can be loaded. If it <em>can’t</em> be loaded it throws an error, so you you need to call this using <code>try</code> or <code>try?</code> like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> fileContents <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token class-name">String</span><span class="token punctuation">(</span>contentsOf<span class="token punctuation">:</span> fileURL<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// we loaded the file into a string!</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Once you have the contents of the file, you can do with it whatever you want – it’s just a regular string.</p>`,11),O=s("h3",{id:"working-with-strings",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#working-with-strings"},[s("span",null,"Working with strings")])],-1),F={class:"hint-container details"},C=s("summary",null,"Working with strings",-1),R=p(`<p>iOS gives us some really powerful APIs for working with strings, including the ability to split them into an array, remove whitespace, and even check spellings. We’ve looked at some of these previously, but there’s at least one major addition I want to look at.</p><p>In this app, we’re going to be loading a file from our app bundle that contains over 10,000 eight-letter words, each of which can be used to start the game. These words are stored one per line, so what we really want is to split that string up into an array of strings in order that we can pick one randomly.</p><p>Swift gives us a method called <code>components(separatedBy:)</code> that can converts a single string into an array of strings by breaking it up wherever another string is found. For example, this will create the array <code>[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> input <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;a b c&quot;</span></span></span>
<span class="line"><span class="token keyword">let</span> letters <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">components</span><span class="token punctuation">(</span>separatedBy<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot; &quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>We have a string where words are separated by line breaks, so to convert that into a string array we need to split on that.</p><p>In programming – almost universally, I think – we use a special character sequence to represent line breaks: <code>\\n</code>. So, we would write code like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> input <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;&quot;</span>
<span class="line">            a</span>
<span class="line">            b</span>
<span class="line">            c</span>
<span class="line">            &quot;&quot;&quot;</span></span></span>
<span class="line"><span class="token keyword">let</span> letters <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">components</span><span class="token punctuation">(</span>separatedBy<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;\\n&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Regardless of what string we split on, the result will be an array of strings. From there we can read individual values by indexing into the array, such as <code>letters[0]</code> or <code>letters[2]</code>, but Swift gives us a useful other option: the <code>randomElement()</code> method returns one random item from the array.</p><p>For example, this will read a random letter from our array:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> letter <span class="token operator">=</span> letters<span class="token punctuation">.</span><span class="token function">randomElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now, although we can see that the letters array will contain three items, Swift doesn’t know that – perhaps we tried to split up an empty string, for example. As a result, the <code>randomElement()</code> method returns an optional string, which we must either unwrap or use with nil coalescing.</p><p>Another useful string method is <code>trimmingCharacters(in:)</code>, which asks Swift to remove certain kinds of characters from the start and end of a string. This uses a new type called <code>CharacterSet</code>, but most of the time we want one particular behavior: removing whitespace and new lines – this refers to spaces, tabs, and line breaks, all at once.</p><p>This behavior is so common it’s built right into the <code>CharacterSet</code> struct, so we can ask Swift to trim all whitespace at the start and end of a string like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> trimmed <span class="token operator">=</span> letter<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">trimmingCharacters</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>whitespacesAndNewlines<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>There’s one last piece of string functionality I’d like to cover before we dive into the main project, and that is the ability to check for misspelled words.</p><p>This functionality is provided through the class <code>UITextChecker</code>. You might not realize this, but the “UI” part of that name carries two additional meanings with it:</p><ol><li>This class comes from UIKit. That doesn’t mean we’re loading all the old user interface framework, though; we actually get it automatically through SwiftUI.</li><li>It’s written using Apple’s older language, Objective-C. We don’t need to write Objective-C to use it, but there is a slightly unwieldy API for Swift users.</li></ol><p>Checking a string for misspelled words takes four steps in total. First, we create a word to check and an instance of <code>UITextChecker</code> that we can use to check that string:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> word <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;swift&quot;</span></span></span>
<span class="line"><span class="token keyword">let</span> checker <span class="token operator">=</span> <span class="token class-name">UITextChecker</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Second, we need to tell the checker how much of our string we want to check. If you imagine a spellchecker in a word processing app, you might want to check only the text the user selected rather than the entire document.</p><p>However, there’s a catch: Swift uses a very clever, very advanced way of working with strings, which allows it to use complex characters such as emoji in exactly the same way that it uses the English alphabet. However, Objective-C does <em>not</em> use this method of storing letters, which means we need to ask Swift to create an Objective-C string range using the entire length of all our characters, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> range <span class="token operator">=</span> <span class="token class-name">NSRange</span><span class="token punctuation">(</span>location<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">:</span> word<span class="token punctuation">.</span>utf16<span class="token punctuation">.</span>count<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>UTF-16 is what’s called a <em>character encoding</em> – a way of storing letters in a string. We use it here so that Objective-C can understand how Swift’s strings are stored; it’s a nice bridging format for us to connect the two.</p><p>Third, we can ask our text checker to report where it found any misspellings in our word, passing in the range to check, a position to start within the range (so we can do things like “Find Next”), whether it should wrap around once it reaches the end, and what language to use for the dictionary:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> misspelledRange <span class="token operator">=</span> checker<span class="token punctuation">.</span><span class="token function">rangeOfMisspelledWord</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> word<span class="token punctuation">,</span> range<span class="token punctuation">:</span> range<span class="token punctuation">,</span> startingAt<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> wrap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> language<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;en&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That sends back another Objective-C string range, telling us where the misspelling was found. Even then, there’s still one complexity here: Objective-C didn’t have any concept of optionals, so instead relied on special values to represent missing data.</p><p>In this instance, if the Objective-C range comes back as empty – i.e., if there was no spelling mistake because the string was spelled correctly – then we get back the special value <code>NSNotFound</code>.</p><p>So, we could check our spelling result to see whether there was a mistake or not like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> allGood <span class="token operator">=</span> misspelledRange<span class="token punctuation">.</span>location <span class="token operator">==</span> <span class="token class-name">NSNotFound</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>OK, that’s enough API exploration – let’s get into our actual project…</p>`,30),A=s("p",null,"Once you’re done, post a short message somewhere telling folks about your progress!",-1),E=s("hr",null,null,-1);function N(u,V){const a=r("router-link"),e=r("VPCard"),c=r("VidStack");return k(),h("div",null,[s("h1",w,[s("a",f,[s("span",null,m(u.$frontmatter.title)+" 관련",1)])]),s("nav",v,[s("ul",null,[s("li",null,[n(a,{to:"#project-5-part-1"},{default:t(()=>[l("Project 5, part 1")]),_:1}),s("ul",null,[s("li",null,[n(a,{to:"#word-scramble-introduction"},{default:t(()=>[l("Word Scramble: Introduction")]),_:1})]),s("li",null,[n(a,{to:"#introducing-list-your-best-friend"},{default:t(()=>[l("Introducing List, your best friend")]),_:1})]),s("li",null,[n(a,{to:"#loading-resources-from-your-app-bundle"},{default:t(()=>[l("Loading resources from your app bundle")]),_:1})]),s("li",null,[n(a,{to:"#working-with-strings"},{default:t(()=>[l("Working with strings")]),_:1})])])])])]),b,n(e,i(o({title:"100 Days of SwiftUI - Day 29",desc:"Project 5, part 1",link:"https://www.hackingwithswift.com/100/swiftui/29",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),y,s("details",x,[q,n(e,i(o({title:"100 Days of SwiftUI - Day 29 - Word Scramble: Introduction",desc:"Word Scramble: Introduction",link:"https://hackingwithswift.com/books/ios-swiftui/word-scramble-introduction",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),S]),_,s("details",j,[I,n(e,i(o({title:"100 Days of SwiftUI - Day 29 - Introducing List, your best friend",desc:"Introducing List, your best friend",link:"https://hackingwithswift.com/books/ios-swiftui/introducing-list-your-best-friend",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(c,{src:"youtube/U1NxVE02Og8"}),T]),L,s("details",U,[W,n(e,i(o({title:"100 Days of SwiftUI - Day 29 - Loading resources from your app bundle",desc:"Loading resources from your app bundle",link:"https://hackingwithswift.com/books/ios-swiftui/loading-resources-from-your-app-bundle",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(c,{src:"youtube/OHnb14dToLc"}),D]),O,s("details",F,[C,n(e,i(o({title:"100 Days of SwiftUI - Day 29 - Working with strings",desc:"Working with strings",link:"https://hackingwithswift.com/books/ios-swiftui/working-with-strings",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(c,{src:"youtube/KhWeTfGdz0Q"}),R]),A,E])}const K=d(g,[["render",N],["__file","29.html.vue"]]),H=JSON.parse('{"path":"/swift/100-days-of-swiftui/29.html","title":"Day 29","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 29","description":"100 Days of SwiftUI > Day 29","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 29"},{"property":"og:description","content":"Day 29"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/29.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/29.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 29"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 29"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 29\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 5, part 1","slug":"project-5-part-1","link":"#project-5-part-1","children":[{"level":3,"title":"Word Scramble: Introduction","slug":"word-scramble-introduction","link":"#word-scramble-introduction","children":[]},{"level":3,"title":"Introducing List, your best friend","slug":"introducing-list-your-best-friend","link":"#introducing-list-your-best-friend","children":[]},{"level":3,"title":"Loading resources from your app bundle","slug":"loading-resources-from-your-app-bundle","link":"#loading-resources-from-your-app-bundle","children":[]},{"level":3,"title":"Working with strings","slug":"working-with-strings","link":"#working-with-strings","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":8}]},"readingTime":{"minutes":9.39,"words":2817},"filePathRelative":"swift/100-days-of-swiftui/29.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{K as comp,H as data};
