import{_ as g}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,a as n,t as h,b as t,n as i,g as l,w as r,d as s,e as o,r as c,o as C}from"./app-U_bew1in.js";const f={},_={id:"frontmatter-title-관련",tabindex:"-1"},b={class:"header-anchor",href:"#frontmatter-title-관련"},v={class:"table-of-contents"},S=n("hr",null,null,-1),T=o('<p>CloudFront의 기본 오리진은 S3 입니다. S3 이외에 EC2 인스턴스, ELB, 외부 웹 서버를 오리진으로 사용하는 것을 커스텀 오리진<sup>Custom</sup> <sup>Origin</sup>이라고 합니다. 커스텀 오리진은 동적 콘텐츠 전송<sup>Dynamic</sup> <sup>Content</sup> <sup>Delivery</sup>이 필요할 때 사용합니다. Node.js 혹은 PHP, JSP, ASP 등의 서버 사이드 스크립트에서 동적으로 생성되는 웹 페이지를 캐시할 수 있습니다. 특히, 커스텀 오리진을 사용하면 동일한 도메인에서 POST, PUT, DELETE 등의 메서드를 사용할 수 있어 로그인이나 글 쓰기 기능도 구현할 수 있습니다.</p><p>커스텀 오리진의 필수 조건은 웹 서버입니다. 운영체제, 웹 서버 애플리케이션, 프로그래밍 언어의 종류와는 상관이 없습니다.</p><h2 id="ec2와-cloudfront-연동하기" tabindex="-1"><a class="header-anchor" href="#ec2와-cloudfront-연동하기"><span>EC2와 CloudFront 연동하기</span></a></h2><p>EC2 인스턴스에 웹 서버를 실행하고 CloudFront와 연동하는 방법을 알아보겠습니다.</p><figure><img src="https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter12/19.png" alt="EC2와 CloudFront 연동하기" tabindex="0" loading="lazy"><figcaption>EC2와 CloudFront 연동하기</figcaption></figure>',5),k=o(`<p>웹 서버는 Node.js로 간단하게 실행하겠습니다. 웹 서버는 Apache나 Nginx를 사용해도 상관 없습니다. SSH로 EC2 인스턴스 (Example Server)에 접속한 뒤 다음과 같이 입력하여 Node.js와 <code>npm</code>을 설치합니다. Node.js 소스를 컴파일 하기에는 시간이 오래 걸리기 때문에 패키지를 설치하겠습니다. <code>yum</code>은 Amazon Linux, RHEL, CentOS용 패키지 설치 명령입니다 (Amazon Linux는 EPEL 저장소가 이미 설치되어 있습니다).</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> nodejs <span class="token function">npm</span> <span class="token parameter variable">--enablerepo</span><span class="token operator">=</span>epel</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Amazon Linux, RHEL, CentOS와 EPEL</p><p>Amazon Linux, RHEL, CentOS는 엔터프라이즈용 배포판입니다. EPEL(Extra Packages for Enterprise Linux)는 뜻 그대로 엔터프라이즈 Linux를 위한 추가 패키지 저장소입니다.</p><p>Amazon Linux, RHEL, CentOS에서는 EPEL 저장소를 통해 Node.js를 설치할 수 있습니다.</p></div>`,3),y={class:"hint-container info"},E=o(`<p class="hint-container-title">Node.js를 패키지로 설치하지 않고 실행하기</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">wget</span> http://nodejs.org/dist/v0.10.28/node-v0.10.28-linux-x64.ta</span>
<span class="line"><span class="token function">tar</span> vxzf node-v0.10.28-linux-x64.tar.gz</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,2),A=n("code",null,"ExampleServer",-1),P=o(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">mkdir</span> ExampleServer</span>
<span class="line"><span class="token builtin class-name">cd</span> ExampleServer</span>
<span class="line"><span class="token function">npm</span> <span class="token function">install</span> express</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),F=n("code",null,"ExampleServer",-1),x=n("code",null,"app.js",-1),z=n("code",null,"app.js",-1),O=o(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/index.html&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Hello CloudFront - EC2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>파일 저장이 끝났으면 다음 명령을 입력하여 Node.js 서버를 실행합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">node</span> app.js</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>서버 실행이 완료되었습니다. 이제 웹 서버에 접속이 잘 되는지 확인해보겠습니다.</p>`,4),L=n("img",{src:"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter12/20_.png",alt:'EC2 인스턴스 목록(<FontIcon icon="iconfont icon-select"/> → )에서 EC2 인스턴스(Example Server)를 선택합니다. 아래 Description에서 Public DNS 부분이 이 EC2 인스턴스의 주소입니다.',tabindex:"0",loading:"lazy"},null,-1),w=n("code",null,"[INSTANCES]",-1),H=n("code",null,"[Instances]",-1),D=n("p",null,"웹 브라우저에서 Public DNS 주소로 접속합니다.",-1),N=n("figure",null,[n("img",{src:"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter12/21_.png",alt:"방금 작성한 간단한 웹 페이지 내용이 출력됩니다.",tabindex:"0",loading:"lazy"}),n("figcaption",null,"방금 작성한 간단한 웹 페이지 내용이 출력됩니다.")],-1),W={class:"hint-container tip"},j=n("p",{class:"hint-container-title"},"추가해설",-1),I=n("img",{src:"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter12/22_.png",alt:'이제 CloudFront 배포 목록으로 이동하여 위쪽 <FontIcon icon="iconfont icon-select"/> 버튼을 클릭합니다.',tabindex:"0",loading:"lazy"},null,-1),R=n("code",null,"[Create Distribution]",-1),U=n("p",null,"전송 방식을 선택합니다.",-1),B=n("ul",null,[n("li",null,[n("strong",null,"Web"),s(": 일반적인 웹 서버 방식입니다.")]),n("li",null,[n("strong",null,"RTMP"),s(": 동영상 실시간 스트리밍 프로토콜 입니다.")])],-1),M=n("img",{src:"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter12/23_.png",alt:'오리진이 일반적인 웹 서버이므로 Web의 <FontIcon icon="iconfont icon-select"/> 버튼을 클릭합니다.',tabindex:"0",loading:"lazy"},null,-1),V=n("code",null,"[Get Started]",-1),G=o('<p>커스텀 오리진(EC2 인스턴스)을 사용한 배포를 생성합니다.</p><ul><li><strong>Origin Domain Name</strong>: 커스텀 오리진을 사용하려면 이곳에 오리진 서버의 도메인을 설정하면 됩니다. EC2 인스턴스(Example Server)의 Public DNS를 입력합니다(예: <code>ec2-54-178-149-132.ap-northeast-1.compute.amazonaws</code>. <ul><li>ELB(Elastic Load Balancing)의 경우 S3와 마찬가지로 Origin Domain Name 부분을 클릭하면 현재 생성된 ELB의 목록이 표시됩니다. 여기서 ELB를 선택하면 되고, 나머지 설정은 EC2 인스턴스 오리진과 동일합니다.</li><li>EC2 인스턴스에 사용자가 구입한 도메인을 연결했다면 해당 도메인을 입력해도 됩니다(예: example.com).</li></ul></li><li><strong>Origin ID</strong>: 오리진을 구분하는 ID입니다. 크게 중요한 것은 아니며 Origin Domain Name을 설정하면 자동으로 생성됩니다.</li><li><strong>Origin Protocol Policy</strong>: CloudFront로 보여질 프로토콜 정책 입니다. 기본값 그대로 사용합니다. <ul><li><strong>HTTP Only</strong>: HTTP 프로토콜만 사용합니다.</li><li><strong>Match Viewer</strong>: CloudFront에 HTTP로 접속하면 HTTP로 전송하고, HTTPS로 접속하면 HTTPS로 전송합니다.</li></ul></li><li><strong>HTTP Port</strong>: HTTP 프로토콜의 포트 번호입니다. 기본값 그대로 사용합니다.</li><li><strong>HTTPS Port</strong>: HTTPS 프로토콜의 포트 번호입니다. 기본값 그대로 사용합니다.</li><li><strong>Path Pattern</strong>: CloudFront로 파일을 가져올 규칙입니다. 기본값은 <code>*</code>로 설정되어 있어서 모든 파일을 가져오게 됩니다. 이 부분은 여기서는 수정할 수 없고 배포(Distribution)를 생성한 뒤 따로 추가할 수 있습니다.</li><li><strong>Viewer Protocol Policy</strong>: CloudFront로 보여질 프로토콜 정책을 설정합니다. 기본값 그대로 사용합니다. <ul><li><strong>HTTP and HTTPS</strong>: HTTP와 HTTPS를 둘 다 사용합니다.</li><li><strong>Redirect HTTP to HTTPS</strong>: 모든 HTTP 접속을 HTTPS로 리다이렉트 합니다.</li><li><strong>HTTPS Only</strong>: HTTPS만 사용합니다.</li></ul></li><li><strong>Allowed HTTP Methods</strong>: 허용하는 HTTP 메서드 종류입니다. 기본값 그대로 사용합니다. <ul><li><strong>GET, HEAD</strong>: 파일을 읽기만 할 때 선택합니다.</li><li><strong>GET, HEAD, PUT, POST, PATCH, DELETE, OPTIONS</strong>: 동적 콘텐츠 전송을 사용할 때 선택합니다.</li></ul></li></ul><figure><img src="https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter12/24_.png" alt="CloudFront 배포 생성 설정" tabindex="0" loading="lazy"><figcaption>CloudFront 배포 생성 설정</figcaption></figure><div class="hint-container warning"><p class="hint-container-title">EC2 인스턴스 오리진과 Elastic IP</p><p>EC2 인스턴스를 오리진으로 사용할 때는 EC2 인스턴스에 Elastic IP를 연결했는지 확인합니다. Elastic IP를 연결하지 않았을 경우, EC2 인스턴스를 재부팅하면 IP 주소가 바뀌기 때문에 Public DNS도 사용할 수 없게 됩니다. 이후 CloudFront에서는 오리진에 접속할 수 없어서, 캐시 기능도 동작하지 않게 됩니다. 따라서 EC2 인스턴스를 오리진으로 사용할 경우 꼭 Elastic IP를 연결합니다.</p></div><p>이어지는 세부 설정입니다.</p><ul><li><strong>Object Caching</strong>: 파일의 캐시 유지 시간을 설정합니다. 유지 시간이 지나면 CloudFront에서 파일이 삭제됩니다. 기본값 그대로 사 <ul><li><strong>Use Origin Cache Headers</strong>: 오리진 HTTP 헤더의 캐시 설정(Cache-Control)을 따릅니다. 각 파일마다 캐시 설정을 다르게 할 수 있는 장점이 있습니다. 캐시 설정이 없으면 기본 캐시 유지 시간은 24시간 입니다.</li><li><strong>Customize</strong>: 기본 캐시 유지 시간을 따로 설 <ul><li><strong>Minimum TTL</strong>: 최소 캐시 유지시간 입니다. 초 단위로 설정해야 합니다. 이 Minimum TTL 설정 시간과 오리진 HTTP 헤더의 캐시 설정(Cache-Control) 시간 중 긴 시간이 적용됩니다.</li></ul></li></ul></li><li><strong>Forward Cookies</strong>: 오리진의 쿠키를 CloudFront를 거쳐 사용자에게 전달할지 설정합니다. 기본값 그대로 사 <ul><li><strong>None</strong>: 쿠키를 전달하지 않습니다. 캐시 성능이 좀더 향상됩니다.</li><li><strong>Whitelist</strong>: 쿠키를 선별하여 전 <ul><li><strong>Whitelist Cookies</strong>: 전달할 쿠키 이름을 설정합니다. 각 쿠키는 새 줄로 구분합니다.</li></ul></li></ul></li><li><strong>Forward Query Strings</strong>: CloudFront에서 오리진으로 쿼리 문자열을 전달합니다. 오리진에서 쿼리 문자열에 따라 파일을 구분하여 보여주고 싶을 때 설정합니다. 설정하지 않으면 캐시 성능이 향상됩니다. 기본값 그대로 사용합니다.</li><li><strong>Smooth Streaming</strong>: 실시간 스트리밍 프로토콜인 Microsoft Smooth Streaming을 사용하고 싶을 때 설정합니다. 기본값 그대로 사용합니다.</li><li><strong>Restrict Viewer Access</strong>: Signed URL로 CloudFront 사용을 제한하고 싶을 때 설정합니다. Signed URL에 대해서는 뒤에서 자세히 설명하겠습니다. 기본값 그대로 사용합니다.</li><li><strong>Price Class</strong>: 요금 수준입니다. 에지 로케이션 사용 범위를 설정하는데 실제 서비스에서 그다지 필요가 없는 지역을 제외할 때 설정합니다. 세부적으로 설정할 수는 없으며 3가지 옵션이 있습니다. 기본값 그대로 사 <ul><li><strong>Use Only US and Europe</strong>: 미국과 유럽의 에지 로케이션만 사용합니다.</li><li><strong>Use Only US, Europe and Asia</strong>: 미국과 유럽, 아시아의 에지 로케이션만 사용합니다.</li><li><strong>Use All Edge Locations</strong>: 모든 에지 로케이션을 사용합니다. 위의 두 옵션보다는 요금이 많이 나옵니다.</li></ul></li><li><strong>Alternate Domain Names</strong>: Route 53에서 도메인을 연결하려면 이 부분을 설정해야 합니다. 여러 도메인이라면 새 줄로 구분하고 최대 10개까지 설정할 수 있습니다. 각자 구입한 도메인 이름을 설정하면 됩니다. 기본값 그대로 비워둡니다.</li></ul><figure><img src="https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter12/25_.png" alt="CloudFront 배포 생성 설정" tabindex="0" loading="lazy"><figcaption>CloudFront 배포 생성 설정</figcaption></figure><p>이어지는 세부 설정입니다</p><ul><li><strong>SSL Certificate</strong>: HTTPS 프로토콜을 사용하기 위한 인증서 설정입니다. 기본값 그대로 사 <ul><li><strong>Default CloudFront Certificate</strong>: CloudFront의 인증서를 사용합니다.</li><li><strong>Custom SSL Certificate</strong>: 사용자가 구입한 도메인과 인증서를 사용하고 싶을 때 설정합니다. 인증서 저장은 IAM에서 할 수 있습니다.</li></ul></li><li><strong>Custom SSL Client Support</strong>: 커스텀 SSL 클라이언트 설정입니다. 앞에서 Custom SSL Certificate를 설정해야 <ul><li><strong>All Clients</strong>: 전용 IP 사용자 지정 SSL 설정입니다. <em>자세한 내용은 링크를 참조하기</em></li><li><strong>Only Clients that Support Server Name Indication</strong>: 서버 이름 표시(SNI)를 설정합니다. <em>자세한 내용은 링크를 참조하기</em></li></ul></li><li><strong>Default Root Object</strong>: CloudFront 배포 도메인의 최상위(Root)로 접속했을 때 기본적으로 보여줄 파일 이름입니다. index.html로 설정합니다(EC2 인스턴스에서 사용하는 서버 사이드 프로그래밍 언어에 따라 index.php, index.aspx, index.jsp 등도 가능합니다).</li><li><strong>Logging</strong>: CloudFront 접속 로그 설정입니다. 기본값 그대로 사 <ul><li><strong>Bucket for Logs</strong>: CloudFront 로그를 저장할 S3 버킷을 선택합니다.</li><li><strong>Log Prefix</strong>: S3 버킷에 로그를 저장할 때, 디렉터리 명을 설정합니다.</li></ul></li><li><strong>Comment</strong>: 메모입니다. 추가적인 설명을 기록하고 싶을 때 사용합니다. 기본값 그대로 비워둡니다.</li><li><strong>Distribution State</strong>: 배포를 생성한 뒤 배포 상태 설정입니다. Enabled로 설정하면 곧바로 사용할 수 있는 상태가 되며 Disabled로 설정하면 그냥 배포만 생성하고 비활성화 상태로 둡니다. 기본값 그대로 사용합니다.</li></ul>',9),q=n("img",{src:"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter12/26_.png",alt:'설정이 완료되었으면 <FontIcon icon="iconfont icon-select"/> 버튼을 클릭합니다.',tabindex:"0",loading:"lazy"},null,-1),K=n("code",null,"[Create Distribution]",-1),Z=n("p",null,"CloudFront 배포가 생성되었습니다.",-1),J=n("figure",null,[n("img",{src:"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter12/27_.png",alt:"를 보면 로 표시되며 인디케이터가 회전하고 있습니다. 배포가 모든 에지 로케이션에 전파되기까지 약 15~20분이 소요됩니다.",tabindex:"0",loading:"lazy"}),n("figcaption",null,[n("code",null,"Status"),s("를 보면 "),n("code",null,"InProgress"),s("로 표시되며 인디케이터가 회전하고 있습니다. 배포가 모든 에지 로케이션에 전파되기까지 약 15~20분이 소요됩니다.")])],-1),Q=n("p",null,[s("모든 에지 로케이션에 전파가 완료되면 "),n("code",null,"Status"),s("가 "),n("code",null,"Deployed"),s("로 바뀝니다.")],-1),$=n("img",{src:"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter12/28_.png",alt:'Domain Name에 CloudFront 배포의 도메인이 표시됩니다. CloudFront 배포 도메인 형태는 <FontIcon icon="fas fa-globe"/>이며 앞의  부분은 배포를 생성할 때마다 바뀝니다.',tabindex:"0",loading:"lazy"},null,-1),X=n("code",null,"http://d2patgbd6fey68.cloudfront.net",-1),Y=n("code",null,"d2patgbd6fey68",-1),nn=n("figure",null,[n("img",{src:"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter12/29_.png",alt:"웹 브라우저에서 CloudFront에 접속합니다. Node.js에서 작성했던 내용이 표시됩니다.",tabindex:"0",loading:"lazy"}),n("figcaption",null,"웹 브라우저에서 CloudFront에 접속합니다. Node.js에서 작성했던 내용이 표시됩니다.")],-1),sn=n("p",null,"이처럼 EC2 인스턴스에서 실행한 웹 서버를 오리진으로 CloudFront를 사용할 수 있습니다.",-1),tn=n("hr",null,null,-1),en=n("h2",{id:"외부-서버와-cloudfront-연동하기",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#외부-서버와-cloudfront-연동하기"},[n("span",null,"외부 서버와 CloudFront 연동하기")])],-1),on=n("hr",null,null,-1);function an(d,ln){const a=c("VPCard"),p=c("router-link"),u=c("RouteLink"),e=c("FontIcon");return C(),m("div",null,[n("h1",_,[n("a",b,[n("span",null,h(d.$frontmatter.title)+" 관련",1)])]),t(a,i(l({title:"목차",desc:"아마존 웹 서비스를 다루는 기술",link:"/aws/art-of-aws/README.md",logo:"https://pyrasis.com/assets/images/pyrasis.png",background:"rgba(31,41,55,0.2)"})),null,16),n("nav",v,[n("ul",null,[n("li",null,[t(p,{to:"#ec2와-cloudfront-연동하기"},{default:r(()=>[s("EC2와 CloudFront 연동하기")]),_:1})]),n("li",null,[t(p,{to:"#외부-서버와-cloudfront-연동하기"},{default:r(()=>[s("외부 서버와 CloudFront 연동하기")]),_:1})])])]),S,t(a,i(l({title:"12장 - 3. CloudFront 커스텀 오리진 사용하기",desc:"아마존 웹 서비스를 다루는 기술",link:"https://pyrasis.com/book/TheArtOfAmazonWebServices/Chapter12/03",logo:"https://pyrasis.com/favicon.ico",background:"rgba(31,41,55,0.2)"})),null,16),T,n("p",null,[s("이전에 생성한 EC2 인스턴스(Example Server)를 그대로 사용하겠습니다. EC2 인스턴스가 생성되어 있지 않다면 "),t(u,{to:"/aws/art-of-aws/04C.html"},{default:r(()=>[s("'4.3 EC2 인스턴스 생성하기'")]),_:1}),s("를 참조하여 EC2 인스턴스를 생성하기 바랍니다(Amazon Linux 설치를 권장합니다).")]),k,n("div",y,[E,n("p",null,[s("."),t(e,{icon:"fas fa-folder-open"}),A,s("라는 디렉터리를 생성하고, 이 디렉터리로 이동한 후 express 모듈을 설치합니다.")])]),P,n("p",null,[s("."),t(e,{icon:"fas fa-folder-open"}),F,s(" 디렉터리 안에 간단한 웹 페이지를 출력하는 코드를 작성합니다. 텍스트 편집기를 열고 아래와 같이 작성한 뒤 "),t(e,{icon:"fa-brands fa-js"}),x,s("로 저장합니다.")]),n("blockquote",null,[n("p",null,[s("."),t(e,{icon:"fa-brands fa-js"}),z])]),O,n("figure",null,[L,n("figcaption",null,[s("EC2 인스턴스 목록("),t(e,{icon:"iconfont icon-select"}),w,s(" → "),H,s(")에서 EC2 인스턴스(Example Server)를 선택합니다. 아래 Description에서 Public DNS 부분이 이 EC2 인스턴스의 주소입니다.")])]),D,N,n("div",W,[j,n("p",null,[s("웹 서버에 접속되지 않는 다면 EC2의 Security Group에서 Inboud 규칙에 HTTP(TCP 80번 포트)가 추가되어 있는지 확인합니다. 규칙 추가 방법은 "),t(u,{to:"/aws/art-of-aws/05.html"},{default:r(()=>[s("'5장 Security Group으로 방화벽 설정하기'")]),_:1}),s("를 참조하기 바랍니다.")])]),n("figure",null,[I,n("figcaption",null,[s("이제 CloudFront 배포 목록으로 이동하여 위쪽 "),t(e,{icon:"iconfont icon-select"}),R,s(" 버튼을 클릭합니다.")])]),U,B,n("figure",null,[M,n("figcaption",null,[s("오리진이 일반적인 웹 서버이므로 Web의 "),t(e,{icon:"iconfont icon-select"}),V,s(" 버튼을 클릭합니다.")])]),G,t(a,i(l({title:"사용자 지정 SSL | CDN(콘텐츠 전송 네트워크), 도메인 등록 | Amazon CloudFront",desc:"자체 도메인 이름과 자체 SSL 인증서를 사용하여 HTTPS를 통해 콘텐츠를 전달하려면 Amazon에서 제공하는 사용자 지정 SSL 인증서 지원 기능 중 하나를 사용할 수 있습니다. ",link:"https://aws.amazon.com/ko/cloudfront/custom-ssl-domains",logo:"https://aws.amazon.com/favicon.ico",background:"rgba(247,155,38,0.2)"})),null,16),t(a,i(l({title:"Using HTTPS with CloudFront - Amazon CloudFront",desc:"Learn how to require HTTPS connections with CloudFront.",link:"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/SecureConnections.html#cnames-https-dedicated-ip-or-sni",logo:"https://docs.aws.amazon.com/assets/images/favicon.ico",background:"rgba(247,155,38,0.2)"})),null,16),n("figure",null,[q,n("figcaption",null,[s("설정이 완료되었으면 "),t(e,{icon:"iconfont icon-select"}),K,s(" 버튼을 클릭합니다.")])]),Z,J,Q,n("figure",null,[$,n("figcaption",null,[s("Domain Name에 CloudFront 배포의 도메인이 표시됩니다. CloudFront 배포 도메인 형태는 "),t(e,{icon:"fas fa-globe"}),X,s("이며 앞의 "),Y,s(" 부분은 배포를 생성할 때마다 바뀝니다.")])]),nn,sn,tn,en,t(a,i(l({title:"12장 - 3.2. 외부 서버와 CloudFront 연동하기",desc:"아마존 웹 서비스를 다루는 기술",link:"https://pyrasis.com/book/TheArtOfAmazonWebServices/Chapter12/03/02",logo:"https://pyrasis.com/favicon.ico",background:"rgba(31,41,55,0.2)"})),null,16),on])}const pn=g(f,[["render",an],["__file","12C.html.vue"]]),un=JSON.parse('{"path":"/aws/art-of-aws/12C.html","title":"12C. CloudFront 커스텀 오리진 사용하기","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"12C. CloudFront 커스텀 오리진 사용하기","description":"아마존 웹 서비스를 다루는 기술 > 12C. CloudFront 커스텀 오리진 사용하기","category":["AWS"],"tag":["crashcourse","pyrasis","aws","amazon-web-services"],"head":[[{"meta":null},{"property":"og:title","content":"아마존 웹 서비스를 다루는 기술 > 12C. CloudFront 커스텀 오리진 사용하기"},{"property":"og:description","content":"12C. CloudFront 커스텀 오리진 사용하기"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/aws/art-of-aws/12C.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/aws/art-of-aws/12C.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"12C. CloudFront 커스텀 오리진 사용하기"}],["meta",{"property":"og:description","content":"아마존 웹 서비스를 다루는 기술 > 12C. CloudFront 커스텀 오리진 사용하기"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter12/19.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"pyrasis"}],["meta",{"property":"article:tag","content":"aws"}],["meta",{"property":"article:tag","content":"amazon-web-services"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"12C. CloudFront 커스텀 오리진 사용하기\\",\\"image\\":[\\"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter12/19.png\\",\\"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter12/20_.png\\",\\"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter12/21_.png\\",\\"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter12/22_.png\\",\\"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter12/23_.png\\",\\"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter12/24_.png\\",\\"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter12/25_.png\\",\\"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter12/26_.png\\",\\"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter12/27_.png\\",\\"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter12/28_.png\\",\\"https://pyrasis.com/assets/images/TheArtOfAmazonWebServicesChapter12/29_.png\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"EC2와 CloudFront 연동하기","slug":"ec2와-cloudfront-연동하기","link":"#ec2와-cloudfront-연동하기","children":[]},{"level":2,"title":"외부 서버와 CloudFront 연동하기","slug":"외부-서버와-cloudfront-연동하기","link":"#외부-서버와-cloudfront-연동하기","children":[]}],"git":{"createdTime":1712541541000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":3}]},"readingTime":{"minutes":2.65,"words":794},"filePathRelative":"aws/art-of-aws/12C.md","localizedDate":"2024년 4월 8일","excerpt":"\\n"}');export{pn as comp,un as data};
