import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,a as n,t as k,b as a,w as i,n as l,g as p,d as t,e as s,r,o as w}from"./app-U_bew1in.js";const g={},f={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},b=n("hr",null,null,-1),_=s('<h2 id="optionals" tabindex="-1"><a class="header-anchor" href="#optionals"><span>Optionals</span></a></h2><p>Null references – literally when a variable has no value – were invented by Tony Hoare way back in 1965. When asked about it in retrospect, he said “I call it my billion-dollar mistake” because they lead to so many problems.</p><p>This is the last day that you’ll be learning the fundamentals of Swift, and it’s devoted exclusively to Swift’s solution to null references, known as <em>optionals</em>. These are a really important language feature, but they can hurt your brain a little – don’t feel bad if you need to repeat some tutorials a few times.</p><p>In essence, an optional is trying to answer the question “what if our variable doesn’t have any sort of value at all?” Swift wants to make sure all our programs are as safe as possible, so it has some very specific – and very important! – techniques for handling this eventuality.</p><p><strong>Today you have five tutorials to work through, where you’ll meet optionals, optional unwrapping, nil coalescing, and more.</strong> Once you’ve watched each video and optionally gone through the extra reading, there are short tests to help make sure you’ve understood what was taught.</p><div class="hint-container tip"><p class="hint-container-title">Tip</p><p>Yes, there is optional reading about optionals, but <em>these</em> optionals aren’t empty!</p></div><h3 id="_1-how-to-handle-missing-data-with-optionals" tabindex="-1"><a class="header-anchor" href="#_1-how-to-handle-missing-data-with-optionals"><span>1. How to handle missing data with optionals</span></a></h3>',7),q={class:"hint-container details"},x=n("summary",null,"1. How to handle missing data with optionals",-1),S=s(`<p>Swift likes to be predictable, which means as much as possible it encourages us to write code that is safe and will work the way we expect. You’ve already met throwing functions, but Swift has another important way of ensuring predictability called <em>optionals</em> – a word meaning “this thing might have a value or might not.”</p><p>To see optionals in action, think about the following code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> opposites <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Mario&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Wario&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Luigi&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Waluigi&quot;</span></span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> peachOpposite <span class="token operator">=</span> opposites<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Peach&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There we create a <code>[String: String]</code> dictionary with two keys: Mario and Luigi. We then attempt to read the value attached to the key “Peach”, which doesn’t exist, and we <em>haven’t</em> provided a default value to send back in place of missing data.</p><p>What will <code>peachOpposite</code> be after that code runs? This is a <code>[String: String]</code> dictionary, which means the keys are strings and the values are strings, but we just tried to read a key that doesn’t exist – it wouldn’t make sense to get a string back if there isn’t a value there.</p><p>Swift’s solution is called <em>optionals</em>, which means data that might be present or might not. They are primarily represented by placing a question mark after your data type, so in this case <code>peachOpposite</code> would be a <code>String?</code> rather than a <code>String</code>.</p><p>Optionals are like a box that may or may not have something inside. So, a <code>String?</code> means there might be a string waiting inside for us, or there might be nothing at all – a special value called <code>nil</code>, that means “no value”. Any kind of data can be optional, including <code>Int</code>, <code>Double</code>, and <code>Bool</code>, as well as instances of enums, structs, and classes.</p><p>You’re probably thinking “so… what has actually changed here? Before we had a <code>String</code>, and now we have a <code>String?</code>, but how does that actually change the code we write?”</p><p>Well, here’s the clincher: Swift likes our code to be predictable, which means it won’t let us use data that might not be there. In the case of optionals, that means we need to <em>unwrap</em> the optional in order to use it – we need to look inside the box to see if there’s a value, and, if there is, take it out and use it.</p><p>Swift gives us two primary ways of unwrapping optionals, but the one you’ll see the most looks like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> marioOpposite <span class="token operator">=</span> opposites<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Mario&quot;</span></span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Mario&#39;s opposite is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">marioOpposite</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This <code>if let</code> syntax is <em>very</em> common in Swift, and combines creating a condition (<code>if</code>) with creating a constant (<code>let</code>). Together, it does three things:</p><ol><li>It reads the optional value from the dictionary.</li><li>If the optional has a string inside, it gets <em>unwrapped</em> – that means the string inside gets placed into the <code>marioOpposite</code> constant.</li><li>The condition has succeeded – we were able to unwrap the optional – so the condition’s body is run.</li></ol><p>The condition’s body will only be run if the optional had a value inside. Of course, if you want to add an <code>else</code> block you can – it’s just a normal condition, so this kind of code is fine:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> unwrappedName <span class="token operator">=</span> username <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;We got a user: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">unwrappedName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;The optional was empty.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Think of optionals a bit like Schrödinger’s data type: there might be a value inside the box or there might not be, but the only way to find out is to check.</p><p>This might seem rather academic so far, but optionals really are critical for helping us produce better software. You see, in the same way optionals mean data may or may not be present, <em>non</em>-optionals – regular strings, integers, etc – mean data <em>must</em> be available.</p><p>Think about it: if we have a non-optional <code>Int</code> it means there is definitely a number inside, always. It might be something like 1 million or 0, but it’s still a number and is guaranteed to be present. In comparison, an optional <code>Int</code> set to <code>nil</code> has no value at all – it’s not 0 or any other number, it’s nothing at all.</p><p>Similarly, if we have a non-optional <code>String</code> it means there is definitely a string in there: it might be something like “Hello” or an empty string, but both of those are different from an optional string set to <code>s</code>.</p><p>Every data type can be optional if needed, including collections such as <code>Array</code> and <code>Dictionary</code>. Again, an array of integers might contain one or more numbers, or perhaps no numbers at all, but both of those are different from optional arrays set to <code>nil</code>.</p><p>To be clear, an optional integer set to <code>nil</code> is <em>not</em> the same as a non-optional integer holding 0, an optional string set to <code>nil</code> is not the same as a non-optional string that is currently set to an empty string, and an optional array set to <code>nil</code> is not the same as a non-optional array that currently has no items – we’re talking about the absence of any data at all, empty or otherwise.</p>`,21),I=n("a",{href:"https://twitter.com/ZevEisenberg/status/1413107000867794950?s=20",target:"_blank",rel:"noopener noreferrer"},"Zev Eisenberg said",-1),T=s(`<p>You can see this in action if you try to pass an optional integer into a function that requires a non-optional integer, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">square</span><span class="token punctuation">(</span>number<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    number <span class="token operator">*</span> number</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> number<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">square</span><span class="token punctuation">(</span>number<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Swift will refuse to build that code, because the optional integer needs to be unwrapped – we can’t use an optional value where a non-optional is needed, because if there were no value inside we’d hit a problem.</p><p>So, to use the optional we must first <em>unwrap</em> it like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> unwrappedNumber <span class="token operator">=</span> number <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">square</span><span class="token punctuation">(</span>number<span class="token punctuation">:</span> unwrappedNumber<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Before we’re done, I want to mention one last thing: when unwrapping optionals, it’s very common to unwrap them into a constant of the same name. This is perfectly allowable in Swift, and means we don’t need to keep naming constants <code>unwrappedNumber</code> or similar.</p><p>Using this approach, we could rewrite the previous code to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> number <span class="token operator">=</span> number <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token function">square</span><span class="token punctuation">(</span>number<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This style is a bit confusing when you first read it, because now it feels like quantum physics – can <code>number</code> really be both optional <em>and</em> non-optional at the same time? Well, no.</p><p>What’s happening here is that we’re temporarily creating a second constant of the same name, available only inside the condition’s body. This is called <em>shadowing</em>, and it’s mainly used with optional unwraps like you can see above.</p><p>So, <em>inside</em> the condition’s body we have an unwrapped value to work with – a real <code>Int</code> rather than an optional <code>Int?</code> – but <em>outside</em> we still have the optional.</p>`,11),H=s('<div class="hint-container info"><p class="hint-container-title">1. How to handle missing data with optionals - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-have-optionals" target="_blank" rel="noopener noreferrer">Why does Swift have optionals?</a></li><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-make-us-unwrap-optionals" target="_blank" rel="noopener noreferrer">Why does Swift make us unwrap optionals?</a></li><li>Test: <a href="https://hackingwithswift.com/review/sixty/unwrapping-optionals" target="_blank" rel="noopener noreferrer">Unwrapping optionals</a></li></ul></div><h3 id="_2-how-to-unwrap-optionals-with-guard" tabindex="-1"><a class="header-anchor" href="#_2-how-to-unwrap-optionals-with-guard"><span>2. How to unwrap optionals with guard</span></a></h3>',2),O={class:"hint-container details"},D=n("summary",null,"2. How to unwrap optionals with guard",-1),j=s(`<p>You’ve already seen how Swift uses <code>if let</code> to unwrap optionals, and it’s the most common way of using optionals. But there is a second way that does much the same thing, and it’s almost as common: <code>guard let</code>.</p><p>It looks like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">printSquare</span><span class="token punctuation">(</span>of number<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">guard</span> <span class="token keyword">let</span> number <span class="token operator">=</span> number <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Missing input&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">number</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> x </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">number</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">number <span class="token operator">*</span> number</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Like <code>if let</code>, <code>guard let</code> checks whether there is a value inside an optional, and if there is it will retrieve the value and place it into a constant of our choosing.</p><p>However, the <em>way</em> it does so flips things around:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> myVar<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token number">3</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> unwrapped <span class="token operator">=</span> myVar <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Run if myVar has a value inside&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">guard</span> <span class="token keyword">let</span> unwrapped <span class="token operator">=</span> myVar <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Run if myVar doesn&#39;t have a value inside&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So, <code>if let</code> runs the code inside its braces if the optional had a value, and <code>guard let</code> runs the code inside its braces if the optional <em>didn’t</em> have a value. This explains the use of <code>else</code> in the code: “check that we can unwrap the optional, but if we can’t then…”</p><p>I realize that sounds like a small difference, but it has important ramifications. You see, what <code>guard</code> provides is the ability to check whether our program state is what we expect, and if it isn’t to bail out – to exit from the current function, for example.</p><p>This is sometimes called an <em>early return</em>: we check that all a function’s inputs are valid right as the function starts, and if any aren’t valid we get to run some code then exit straight away. If all our checks pass, our function can run exactly as intended.</p><p><code>guard</code> is designed exactly for this style of programming, and in fact does two things to help:</p><ol><li>If you use <code>guard</code> to check a function’s inputs are valid, Swift will always require you to use <code>return</code> if the check fails.</li><li>If the check passes and the optional you’re unwrapping has a value inside, you can use it <em>after</em> the <code>guard</code> code finishes.</li></ol><p>You can see both of these points in action if you look at the <code>printSquare()</code> function from earlier:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">printSquare</span><span class="token punctuation">(</span>of number<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">guard</span> <span class="token keyword">let</span> number <span class="token operator">=</span> number <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Missing input&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 1: We *must* exit the function here</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 2: \`number\` is still available outside of \`guard\`</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">number</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> x </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">number</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">number <span class="token operator">*</span> number</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So: use <code>if let</code> to unwrap optionals so you can process them somehow, and use <code>guard let</code> to ensure optionals have something inside them and exit otherwise.</p><p>Tip: You can use guard with any condition, including ones that don’t unwrap optionals. For example, you might use <code>guard someArray.isEmpty else { return }</code>.</p>`,15),A=s('<div class="hint-container info"><p class="hint-container-title">2. How to unwrap optionals with guard - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-to-use-guard-let-rather-than-if-let" target="_blank" rel="noopener noreferrer">When to use <code>guard let</code> rather than <code>if let</code></a></li><li>Test: <a href="https://hackingwithswift.com/review/sixty/unwrapping-with-guard" target="_blank" rel="noopener noreferrer">Unwrapping with <code>guard</code></a></li></ul></div><h3 id="_3-how-to-unwrap-optionals-with-nil-coalescing" tabindex="-1"><a class="header-anchor" href="#_3-how-to-unwrap-optionals-with-nil-coalescing"><span>3. How to unwrap optionals with nil coalescing</span></a></h3>',2),U={class:"hint-container details"},W=n("summary",null,"3. How to unwrap optionals with nil coalescing",-1),N=s(`<p>Wait… Swift has a <em>third</em> way of unwrapping optionals? Yep! And it’s really useful, too: it’s called the <em>nil coalescing operator</em> and it lets us unwrap an optional and provide a default value if the optional was empty.</p><p>Let’s rewind a bit:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> captains <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Enterprise&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Picard&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Voyager&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Janeway&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Defiant&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Sisko&quot;</span></span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> new <span class="token operator">=</span> captains<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Serenity&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That reads a non-existent key in our <code>captains</code> dictionary, which means <code>new</code> will be an optional string to set to <code>nil</code>.</p><p>With the nil coalescing operator, written <code>??</code>, we can provide a default value for any optional, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> new <span class="token operator">=</span> captains<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Serenity&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;N/A&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That will read the value from the <code>captains</code> dictionary and attempt to unwrap it. If the optional has a value inside it will be sent back and stored in <code>new</code>, but if it doesn’t then “N/A” will be used instead.</p><p>This means no matter what the optional contains – a value or <code>nil</code> – the end result is that <code>new</code> will be a real string, not an optional one. That might be the string from inside the <code>captains</code> value, or it might be “N/A”.</p><p>Now, I know what you’re thinking: can’t we just specify a default value when reading from the dictionary? If you’re thinking that you’re absolutely correct:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> new <span class="token operator">=</span> captains<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Serenity&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;N/A&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That produces exactly the same result, which might make it seem like the nil coalescing operator is pointless. However, not only does the nil coalescing operator work with dictionaries, but it works with <em>any</em> optionals.</p><p>For example, the <code>randomElement()</code> method on arrays returns one random item from the array, but it returns an optional because you might be calling it on an empty array. So, we can use nil coalescing to provide a default:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> tvShows <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Archer&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Babylon 5&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Ted Lasso&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">let</span> favorite <span class="token operator">=</span> tvShows<span class="token punctuation">.</span><span class="token function">randomElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;None&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Or perhaps you have a struct with an optional property, and want to provide a sensible default for when it’s missing:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">let</span> author<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> book <span class="token operator">=</span> <span class="token class-name">Book</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Beowulf&quot;</span></span><span class="token punctuation">,</span> author<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> author <span class="token operator">=</span> book<span class="token punctuation">.</span>author <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;Anonymous&quot;</span></span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It’s even useful if you create an integer from a string, where you actually get back an optional <code>Int?</code> because the conversion might have failed – you might have provided an invalid integer, such as “Hello”. Here we can use nil coalescing to provide a default value, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> input <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line"><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token class-name">Int</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token number">0</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, the nil coalescing operator is useful anywhere you have an optional and want to use the value inside or provide a default value if it’s missing.</p>`,18),B=s('<div class="hint-container info"><p class="hint-container-title">3. How to unwrap optionals with nil coalescing - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-should-you-use-nil-coalescing-in-swift" target="_blank" rel="noopener noreferrer">When should you use <code>nil</code> coalescing in Swift?</a></li><li>Test: <a href="https://hackingwithswift.com/review/sixty/nil-coalescing" target="_blank" rel="noopener noreferrer">Nil coalescing</a></li></ul></div><h3 id="_4-how-to-handle-multiple-optionals-using-optional" tabindex="-1"><a class="header-anchor" href="#_4-how-to-handle-multiple-optionals-using-optional"><span>4. How to handle multiple optionals using optional</span></a></h3>',2),V={class:"hint-container details"},E=n("summary",null,"4. How to handle multiple optionals using optional chaining",-1),Y=s(`<p>Optional chaining is a simplified syntax for reading optionals inside optionals. That might sound like something you’d want to use rarely, but if I show you an example you’ll see why it’s helpful.</p><p>Take a look at this code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Arya&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Bran&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Robb&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Sansa&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> chosen <span class="token operator">=</span> names<span class="token punctuation">.</span><span class="token function">randomElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">uppercased</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;No one&quot;</span></span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Next in line: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">chosen</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That uses two optional features at once: you’ve already seen how the nil coalescing operator helps provide a default value if an optional is empty, but before that you see <em>optional chaining</em> where we have a question mark followed by more code.</p><p>Optional chaining allows us to say “if the optional has a value inside, unwrap it then…” and we can add more code. In our case we’re saying “if we managed to get a random element from the array, then uppercase it.” Remember, <code>randomElement()</code> returns an optional because the array might be empty.</p><p>The magic of optional chaining is that it silently does nothing if the optional was empty – it will just send back the same optional you had before, still empty. This means the return value of an optional chain is always an optional, which is why we still need nil coalescing to provide a default value.</p><p>Optional chains can go as long as you want, and as soon as any part sends back <code>nil</code> the rest of the line of code is ignored and sends back <code>nil</code>.</p><p>To give you an example that pushes optional chaining harder, imagine this: we want to place books in alphabetical order based on their author names. If we break this right down, then:</p><ul><li>We have an optional instance of a <code>Book</code> struct – we might have a book to sort, or we might not.</li><li>The book might have an author, or might be anonymous.</li><li>If it does have an author string present, it might be an empty string or have text, so we can’t always rely on the first letter being there.</li><li>If the first letter is there, make sure it’s uppercase so that authors with lowercase names such as bell hooks are sorted correctly. Here’s how that would look:</li></ul><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">let</span> author<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> book<span class="token punctuation">:</span> <span class="token class-name">Book</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span></span>
<span class="line"><span class="token keyword">let</span> author <span class="token operator">=</span> book<span class="token operator">?</span><span class="token punctuation">.</span>author<span class="token operator">?</span><span class="token punctuation">.</span>first<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">uppercased</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;A&quot;</span></span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So, it reads “if we have a book, and the book has an author, and the author has a first letter, then uppercase it and send it back, otherwise send back A”.</p><p>Admittedly it’s unlikely you’ll ever dig <em>that</em> far through optionals, but I hope you can see how delightfully short the syntax is!</p>`,12),R=s('<div class="hint-container info"><p class="hint-container-title">4. How to handle multiple optionals using optional chaining - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-is-optional-chaining-so-important" target="_blank" rel="noopener noreferrer">Why is optional chaining so important?</a></li><li>Test: <a href="https://hackingwithswift.com/review/sixty/optional-chaining" target="_blank" rel="noopener noreferrer">Optional chaining</a></li></ul></div><h3 id="_5-how-to-handle-function-failure-with-optionals" tabindex="-1"><a class="header-anchor" href="#_5-how-to-handle-function-failure-with-optionals"><span>5. How to handle function failure with optionals</span></a></h3>',2),C={class:"hint-container details"},P=n("summary",null,"5. How to handle function failure with optionals",-1),F=s(`<p>When we call a function that might throw errors, we either call it using <code>try</code> and handle errors appropriately, or if we’re certain the function will not fail we use <code>try!</code> and accept that if we were wrong our code will crash. (Spoiler: you should use <code>try!</code> very rarely.)</p><p>However, there is an alternative: if all we care about is whether the function succeeded or failed, we can use an <em>optional</em> try to have the function return an optional value. If the function ran without throwing any errors then the optional will contain the return value, but if any error was thrown the function will return nil. This means we don’t get to know exactly what error was thrown, but often that’s fine – we might just care if the function worked or not.</p><p>Here’s how it looks:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">UserError</span><span class="token punctuation">:</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> badID<span class="token punctuation">,</span> networkFailed</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">getUser</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token class-name">UserError</span><span class="token punctuation">.</span>networkFailed</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token function">getUser</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;User: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>getUser()</code> function will always throw a <code>networkFailed</code> error, which is fine for our testing purposes, but we don’t actually care <em>what</em> error was thrown – all we care about is whether the call sent back a user or not.</p><p>This is where <code>try?</code> helps: it makes <code>getUser()</code> return an optional string, which will be nil if any errors are thrown. If you <em>want</em> to know exactly what error happened then this approach won’t be useful, but a lot of the time we just don’t care.</p><p>If you want, you can combine <code>try?</code> with nil coalescing, which means “attempt to get the return value from this function, but if it fails use this default value instead.”</p><p>Be careful, though: you need to add some parentheses before nil coalescing so that Swift understands exactly what you mean. For example, you’d write this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">try</span><span class="token operator">?</span> <span class="token function">getUser</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;Anonymous&quot;</span></span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>You’ll find <code>try?</code> is mainly used in three places:</p><ol><li>In combination with <code>guard let</code> to exit the current function if the <code>try?</code> call returns nil.</li><li>In combination with nil coalescing to attempt something or provide a default value on failure.</li><li>When calling any throwing function without a return value, when you genuinely don’t care if it succeeded or not – maybe you’re writing to a log file or sending analytics to a server, for example.</li></ol>`,11),M=s('<div class="hint-container info"><p class="hint-container-title">5. How to handle function failure with optionals - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-should-you-use-optional-try" target="_blank" rel="noopener noreferrer">When should you use optional try?</a></li><li>Test: <a href="https://hackingwithswift.com/review/sixty/optional-try" target="_blank" rel="noopener noreferrer">Optional try</a></li></ul></div><h3 id="_6-summary-optionals" tabindex="-1"><a class="header-anchor" href="#_6-summary-optionals"><span>6. Summary: Optionals</span></a></h3>',2),L={class:"hint-container details"},Z=n("summary",null,"6. Summary: Optionals",-1),z=s("<p>In these chapters we’ve covered one of Swift’s most important features, and although most people find optionals hard to understand at first almost everyone agrees they are useful in practice.</p><p>Let’s recap what we learned:</p><ul><li>Optionals let us represent the absence of data, which means we’re able to say “this integer has no value” – that’s different from a fixed number such as 0.</li><li>As a result, everything that <em>isn’t</em> optional definitely has a value inside, even if that’s just an empty string.</li><li>Unwrapping an optional is the process of looking inside a box to see what it contains: if there’s a value inside it’s sent back for use, otherwise there will be <code>nil</code> inside.</li><li>We can use <code>if let</code> to run some code if the optional has a value, or <code>guard let</code> to run some code if the optional <em>doesn’t</em> have a value – but with <code>guard</code> we must always exit the function afterwards.</li><li>The nil coalescing operator, <code>??</code>, unwraps and returns an optional’s value, or uses a default value instead.</li><li>Optional chaining lets us read an optional inside another optional with a convenient syntax.</li><li>If a function might throw errors, you can convert it into an optional using <code>try?</code> – you’ll either get back the function’s return value, or <code>nil</code> if an error is thrown.</li></ul><p>Optionals are second only to closures when it comes to language features folks struggle to learn, but I promise after a few months you’ll wonder how you could live without them!</p>",4),K=n("h3",{id:"_7-checkpoint-9",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-checkpoint-9"},[n("span",null,"7. Checkpoint 9")])],-1),J={class:"hint-container details"},G=n("summary",null,"7. Checkpoint 9",-1),Q=s("<p>Now that you understand a little about optionals, it’s time to pause for a few minutes and try a small coding challenge so you can see how much you’ve remembered.</p><p>Your challenge is this: write a function that accepts an optional array of integers, and returns one randomly. If the array is missing or empty, return a random number in the range 1 through 100.</p><p>If that sounds easy, it’s because I haven’t explained the catch yet: I want you to write your function in a single line of code. No, that doesn’t mean you should just write lots of code then remove all the line breaks – you should be able to write this whole thing in one line of code.</p><p>I’ll provide some hints in a moment, but first I recommend you go ahead and try it yourself.</p><p>Still here? Okay, here are some hints:</p><ol><li>Your function should accept an <code>[Int]?</code> – an array of integers that might be there, or might be <code>nil</code>.</li><li>It needs to return a non-optional <code>Int</code>.</li><li>You can use optional chaining to call <code>randomElement()</code> on the optional array, which will in turn return another optional.</li><li>Because you need to return a non-optional integer, you should use nil coalescing to pick a random number from 1 through 100.</li></ol>",6),$=n("hr",null,null,-1);function X(u,nn){const e=r("router-link"),o=r("VPCard"),c=r("VidStack"),d=r("FontIcon");return w(),m("div",null,[n("h1",f,[n("a",v,[n("span",null,k(u.$frontmatter.title)+" 관련",1)])]),n("nav",y,[n("ul",null,[n("li",null,[a(e,{to:"#optionals"},{default:i(()=>[t("Optionals")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#_1-how-to-handle-missing-data-with-optionals"},{default:i(()=>[t("1. How to handle missing data with optionals")]),_:1})]),n("li",null,[a(e,{to:"#_2-how-to-unwrap-optionals-with-guard"},{default:i(()=>[t("2. How to unwrap optionals with guard")]),_:1})]),n("li",null,[a(e,{to:"#_3-how-to-unwrap-optionals-with-nil-coalescing"},{default:i(()=>[t("3. How to unwrap optionals with nil coalescing")]),_:1})]),n("li",null,[a(e,{to:"#_4-how-to-handle-multiple-optionals-using-optional"},{default:i(()=>[t("4. How to handle multiple optionals using optional")]),_:1})]),n("li",null,[a(e,{to:"#_5-how-to-handle-function-failure-with-optionals"},{default:i(()=>[t("5. How to handle function failure with optionals")]),_:1})]),n("li",null,[a(e,{to:"#_6-summary-optionals"},{default:i(()=>[t("6. Summary: Optionals")]),_:1})]),n("li",null,[a(e,{to:"#_7-checkpoint-9"},{default:i(()=>[t("7. Checkpoint 9")]),_:1})])])])])]),b,a(o,l(p({title:"100 Days of SwiftUI - Day 14",desc:"Optionals",link:"https://www.hackingwithswift.com/100/swiftui/14",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),_,n("details",q,[x,a(o,l(p({title:"100 Days of SwiftUI - Day 14 - 1. How to handle missing data with optionals",desc:"1. How to handle missing data with optionals",link:"https://hackingwithswift.com/quick-start/beginners/how-to-handle-missing-data-with-optionals",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(c,{src:"youtube/O0ocR5kRzSA"}),S,n("p",null,[t("As "),a(d,{icon:"iconfont icon-selection"}),t(),I,t(", “Swift didn’t introduce optionals. It introduced non-optionals.”")]),T]),H,n("details",O,[D,a(o,l(p({title:"100 Days of SwiftUI - Day 14 - 2. How to unwrap optionals with guard",desc:"2. How to unwrap optionals with guard",link:"https://hackingwithswift.com/quick-start/beginners/how-to-unwrap-optionals-with-guard",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(c,{src:"youtube/sQrRf99diz0"}),j]),A,n("details",U,[W,a(o,l(p({title:"100 Days of SwiftUI - Day 14 - 3. How to unwrap optionals with nil coalescing",desc:"3. How to unwrap optionals with nil coalescing",link:"https://hackingwithswift.com/quick-start/beginners/how-to-unwrap-optionals-with-nil-coalescing",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(c,{src:"youtube/Vtx5W8YVkqs"}),N]),B,n("details",V,[E,a(o,l(p({title:"100 Days of SwiftUI - Day 14 - 4. How to handle multiple optionals using optional chaining",desc:"4. How to handle multiple optionals using optional chaining",link:"https://hackingwithswift.com/quick-start/beginners/how-to-handle-multiple-optionals-using-optional-chainingchaining</a>",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(c,{src:"youtube/QEVjbvb34Gg"}),Y]),R,n("details",C,[P,a(o,l(p({title:"100 Days of SwiftUI - Day 14 - 5. How to handle function failure with optionals",desc:"5. How to handle function failure with optionals",link:"https://hackingwithswift.com/quick-start/beginners/how-to-handle-function-failure-with-optionals",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(c,{src:"youtube/POK6Gijetek"}),F]),M,n("details",L,[Z,a(o,l(p({title:"100 Days of SwiftUI - Day 14 - 6. Summary: Optionals",desc:"6. Summary: Optionals",link:"https://hackingwithswift.com/quick-start/beginners/summary-optionals",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(c,{src:"youtube/ddowZcqemoI"}),z]),K,n("details",J,[G,a(o,l(p({title:"100 Days of SwiftUI - Day 14 - 7. Checkpoint 9",desc:"7. Checkpoint 9",link:"https://hackingwithswift.com/quick-start/beginners/checkpoint-9",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(c,{src:"youtube/-JmAbcISEmY"}),Q]),$])}const tn=h(g,[["render",X],["__file","14.html.vue"]]),en=JSON.parse('{"path":"/swift/100-days-of-swiftui/14.html","title":"Day 14","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 14","description":"100 Days of SwiftUI > Day 14","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 14"},{"property":"og:description","content":"Day 14"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/14.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/14.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 14"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 14"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 14\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Optionals","slug":"optionals","link":"#optionals","children":[{"level":3,"title":"1. How to handle missing data with optionals","slug":"_1-how-to-handle-missing-data-with-optionals","link":"#_1-how-to-handle-missing-data-with-optionals","children":[]},{"level":3,"title":"2. How to unwrap optionals with guard","slug":"_2-how-to-unwrap-optionals-with-guard","link":"#_2-how-to-unwrap-optionals-with-guard","children":[]},{"level":3,"title":"3. How to unwrap optionals with nil coalescing","slug":"_3-how-to-unwrap-optionals-with-nil-coalescing","link":"#_3-how-to-unwrap-optionals-with-nil-coalescing","children":[]},{"level":3,"title":"4. How to handle multiple optionals using optional","slug":"_4-how-to-handle-multiple-optionals-using-optional","link":"#_4-how-to-handle-multiple-optionals-using-optional","children":[]},{"level":3,"title":"5. How to handle function failure with optionals","slug":"_5-how-to-handle-function-failure-with-optionals","link":"#_5-how-to-handle-function-failure-with-optionals","children":[]},{"level":3,"title":"6. Summary: Optionals","slug":"_6-summary-optionals","link":"#_6-summary-optionals","children":[]},{"level":3,"title":"7. Checkpoint 9","slug":"_7-checkpoint-9","link":"#_7-checkpoint-9","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":9}]},"readingTime":{"minutes":14.66,"words":4397},"filePathRelative":"swift/100-days-of-swiftui/14.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{tn as comp,en as data};
