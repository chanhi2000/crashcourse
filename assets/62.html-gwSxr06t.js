import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as n,t as m,b as s,w as o,n as i,g as p,d as a,e as r,r as c,o as k}from"./app-U_bew1in.js";const w={},g={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},b=n("hr",null,null,-1),y=n("h2",{id:"project-13-part-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#project-13-part-1"},[n("span",null,"Project 13, part 1")])],-1),_=n("p",null,"This is the first of two projects that start looking at how we push beyond the boundaries of SwiftUI so that we can connect it to Apple’s other frameworks. Apple has provided approaches for us to do this, but it takes a little thinking – it’s very different from the regular SwiftUI code you’ve been writing so far, and it’s even quite different from the kind of code UIKit developers are used to!",-1),S=n("p",null,"Don’t worry, we’ll be tackling it step by step. I’ll provide the tutorials and a project to work towards; all you need to do is bring your brain and the willpower to push through. Remember, as the writer John Ortberg says, “if you want to walk on water, you have to get out of the boat”!",-1),I=n("p",null,[n("strong",null,"Today you have four topics to work through, in which you’ll learn about responding to state changes, showing confirmation dialogs, and more.")],-1),x=n("h3",{id:"instafilter-introduction",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#instafilter-introduction"},[n("span",null,"Instafilter: Introduction")])],-1),A={class:"hint-container details"},C=n("summary",null,"Instafilter: Introduction",-1),U=n("p",null,"In this project we’re going to build an app that lets the user import photos from their library, then modify them using various image effects. We’ll cover a number of new techniques, but at the center of it all are one useful app development skill – using Apple’s Core Image framework – and one important SwiftUI skill – integrating with UIKit. There are other things too, but those two are the big takeaways.",-1),D=n("p",null,"Core Image is Apple’s high-performance framework for manipulating images, and it’s extraordinarily powerful. Apple has designed dozens of example image filters for us, providing things like blurs, color shifts, pixellation, and more, and all are optimized to take full advantage of the graphics processing unit (GPU) on iOS devices.",-1),j=n("p",null,[n("strong",null,"Tip"),a(": Although you "),n("em",null,"can"),a(" run your Core Image app in the simulator, don’t be surprised if most things are really slow – you’ll only get great performance when you run on a physical device.")],-1),q=n("p",null,"As for integrating with UIKit, you might wonder why this is needed – after all, SwiftUI is designed to replace UIKit, right? Well, sort of. Before SwiftUI launched, almost every iOS app was built with UIKit, which means that there are probably several billion lines of UIKit code out there. So, if you want to integrate SwiftUI into an existing project you’ll need to learn how to make the two work well together.",-1),V=n("p",null,"But there’s another reason, and I’m hoping it won’t always be a reason: many parts of Apple’s frameworks don’t have SwiftUI wrappers yet, which means if you want to integrate MapKit, Safari, or other important APIs, you need to know how to wrap their code for use with SwiftUI. I’ll be honest, the code required to make this work isn’t pretty, but at this point in your SwiftUI career you’re more than ready for it.",-1),T=n("p",null,"As always we have some techniques to cover before we get into the project, so please create a new iOS app using the App template, naming it “Instafilter”.",-1),B=n("h3",{id:"how-property-wrappers-become-structs",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#how-property-wrappers-become-structs"},[n("span",null,"How property wrappers become structs")])],-1),P={class:"hint-container details"},N=n("summary",null,"How property wrappers become structs",-1),R=r(`<p>You’ve seen how SwiftUI lets us store changing data in our view structs by using the <code>@State</code> property wrapper, how we can bind that state to the value of a UI control using <code>$</code>, and how changes to that state automatically cause SwiftUI to reinvoke the <code>body</code> property of our view.</p><p>All that combined lets us write code such as this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> blurAmount <span class="token operator">=</span> <span class="token number">0.0</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, World!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> blurAmount<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Slider</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> $blurAmount<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">20</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Random Blur&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                blurAmount <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">20</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you run that, you’ll find that dragging the slider left and right adjusts the blur amount for the text label, exactly as you would expect, and tapping the button immediately jumps to a random blur amount.</p><p>Now, let’s say we want that binding to do <em>more</em> than just handle the radius of the blur effect. Perhaps we want to run a method, or just print out the value for debugging purposes. You might try updating the property like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> blurAmount <span class="token operator">=</span> <span class="token number">0.0</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">didSet</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;New value is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">blurAmount</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you run that code, you’ll be disappointed: as you drag the slider around you’ll see the blur amount change, but you won’t see our <code>print()</code> statement being triggered – in fact, nothing will be output at all. But if you try pressing the <em>button</em> you <em>will</em> see a message printed.</p><p>To understand what’s happening here, I want you to explore a little of how <code>@State</code> functions, and what property wrappers are actually doing for us.</p><p>Property wrappers have that name because they wrap our property inside another struct. What this means is that when we use <code>@State</code> to wrap a string, the actual type of property we end up with is a <code>State&lt;String&gt;</code>. Similarly, when we use <code>@Environment</code> and others we end up with a struct of type <code>Environment</code> that contains some other value inside it.</p><p>Previously I explained that we can’t modify properties in our views because they are structs, and are therefore fixed. However, <em>now</em> you know that <code>@State</code> <em>itself</em> produces a struct, so we have a conundrum: how come <em>that</em> struct can be modified?</p><p>Xcode has a really helpful command called “Open Quickly” (accessed using <kbd>Cmd</kbd>+<kbd>Shift</kbd>+<kbd>O</kbd>), which lets you find any file or type in your project or any of the frameworks you have imported. Activate it now, and type “State” – hopefully the first result says SwiftUI below it, but if not please find that and select it.</p><p>You’ll be taken to a generated interface for SwiftUI, which is essentially all the parts that SwiftUI exposes to us. There’s no implementation code in there, just lots of definitions for protocols, structs, modifiers, and such.</p><p>We asked to see <code>State</code>, so you should have been taken to this line:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@propertyWrapper</span> <span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">State</span><span class="token operator">&lt;</span><span class="token class-name">Value</span><span class="token operator">&gt;</span> <span class="token punctuation">:</span> <span class="token class-name">DynamicProperty</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That <code>@propertyWrapper</code> attribute is what makes this into <code>@State</code> for us to use.</p><p>Now look a few lines further down, and you should see this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">var</span> wrappedValue<span class="token punctuation">:</span> <span class="token class-name">Value</span> <span class="token punctuation">{</span> <span class="token keyword">get</span> <span class="token keyword">nonmutating</span> <span class="token keyword">set</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That wrapped value is the actual value we’re trying to store, such as a string. What this generated interface is telling us is that the property can be read (<code>get</code>), and written (<code>set</code>), but that when we set the value it won’t actually change the struct itself. Behind the scenes, it sends that value off to SwiftUI for storage in a place where it can be modified freely, so it’s true that the struct itself never changes.</p><p>Now you know all that, let’s circle back to our problematic code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> blurAmount <span class="token operator">=</span> <span class="token number">0.0</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">didSet</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;New value is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">blurAmount</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>On the surface, that states “when <code>blurAmount</code> changes, print out its new value.” However, because <code>@State</code> actually wraps its contents, what it’s <em>actually</em> saying is that when the <code>State</code> struct that wraps <code>blurAmount</code> changes, print out the new blur amount.</p><p>Still with me? Now let’s go a stage further: you’ve just seen how <code>State</code> wraps its value using a non-mutating setter, which means neither <code>blurAmount</code> or the <code>State</code> struct wrapping it are changing – our binding is directly changing the internally stored value, which means the property observer is never being triggered.</p><p>So, changing the property directly using a button works fine, because it goes through the nonmutating setter and triggers the <code>didSet</code> observer, but using a binding <em>doesn’t</em> because it bypasses the setter and adjusts the value directly.</p><p>How then can we solve this – how can we ensure some code is run whenever a binding is changed, no matter how that change happens? Well, there’s a modifier just for that purpose…</p>`,24),W=n("h3",{id:"responding-to-state-changes-using-onchange",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#responding-to-state-changes-using-onchange"},[n("span",null,[a("Responding to state changes using "),n("code",null,"onChange()")])])],-1),H={class:"hint-container details"},O=n("summary",null,"Responding to state changes using onChange()",-1),K=r(`<p>Because of the way SwiftUI sends binding updates to property wrappers, property observers used with property wrappers often won’t work the way you expect, which means this kind of code won’t print anything even as the blur radius changes:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> blurAmount<span class="token punctuation">:</span> <span class="token class-name">CGFloat</span> <span class="token operator">=</span> <span class="token number">0.0</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">didSet</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;New value is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">blurAmount</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, World!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> blurAmount<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Slider</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> $blurAmount<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">20</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To fix this we need to use the <code>onChange()</code> modifier, which tells SwiftUI to run a function of our choosing when a particular value changes. SwiftUI will automatically pass in both the old and new value to whatever function you attach, so we&#39;d use it like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> blurAmount <span class="token operator">=</span> <span class="token number">0.0</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, World!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> blurAmount<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Slider</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> $blurAmount<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">20</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> blurAmount<span class="token punctuation">)</span> <span class="token punctuation">{</span> oldValue<span class="token punctuation">,</span> newValue <span class="token keyword">in</span></span>
<span class="line">                    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;New value is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">newValue</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now that code will correctly print out values as the slider changes, because <code>onChange()</code> is watching it. Notice how most other things have stayed the same: we still use <code>@State private var</code> to declare the <code>blurAmount</code> property, and we still use <code>blur(radius: blurAmount)</code> as the modifier for our text view.</p><p><strong>Tip</strong>: You can attach <code>onChange()</code> wherever you want in your view hierarchy, but I prefer to put it near the thing that&#39;s actually changing.</p><p>What all this means is that you can do whatever you want inside the <code>onChange()</code> function: you can call methods, run an algorithm to figure out how to apply the change, or whatever else you might need.</p><p>The <code>onChange()</code> modifier has two other common variants:</p><ul><li>One that accepts no parameters at all, for times when you just want to run a function when a value changes but you don&#39;t actually care what the new value is.</li><li>One that accepts only the new value, without also passing in the old value. This is <em>deprecated</em> as of iOS 17, which is Apple&#39;s way of saying &quot;please don&#39;t use this unless you need to support iOS 16 and earlier.&quot;</li></ul>`,9),$=n("h3",{id:"showing-multiple-options-with-confirmationdialog",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#showing-multiple-options-with-confirmationdialog"},[n("span",null,[a("Showing multiple options with "),n("code",null,"confirmationDialog()")])])],-1),z={class:"hint-container details"},E=n("summary",null,"Showing multiple options with confirmationDialog()",-1),J=r(`<p>SwiftUI gives us <code>alert()</code> for presenting important choices, and <code>sheet()</code> for presenting whole views on top of the current view, but it also gives us <code>confirmationDialog()</code>: an alternative to <code>alert()</code> that lets us add many buttons.</p><p>Visually alerts and confirmation dialogs are very different: on iPhones, alerts appear in the center of the screen and must actively be dismissed by choosing a button, whereas confirmation dialogs slide up from the bottom, can contain lots of buttons, and can be dismissed by tapping on Cancel or by tapping outside of the options.</p><p>Although they <em>look</em> very different, confirmation dialogs and alerts are created almost identically:</p><ul><li>Both are created by attaching a modifier to our view hierarchy – <code>alert()</code> for alerts and <code>confirmationDialog()</code> for confirmation dialogs.</li><li>Both get shown automatically by SwiftUI when a condition is true.</li><li>Both can be filled with buttons to take various actions.</li><li>Both can have a second closure attached to provide an extra message. To demonstrate confirmation dialogs being used, we first need a basic button that toggles some sort of condition:</li></ul><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> showingConfirmation <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> backgroundColor <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>white</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, World!&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            showingConfirmation <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>backgroundColor<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now for the important part: we need to add another modifier to the button, creating and showing a confirmation dialog when we’re ready.</p><p>Just like <code>alert()</code>, we have a <code>confirmationDialog()</code> modifier that accepts three parameters: a title, a binding that decides whether the dialog is currently presented or not, and a closure that provides the buttons that should be shown – usually provided as a trailing closure.</p><p>We provide our confirmation dialog with a title and optionally also a message, then an array of buttons. These are stacked up vertically on the screen in the order you provide, and it’s generally a good idea to include a cancel button at the end – yes, you <em>can</em> cancel by tapping elsewhere on the screen, but it’s much better to give users the explicit option.</p><p>So, add this modifier to your text view:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">confirmationDialog</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Change background&quot;</span></span><span class="token punctuation">,</span> isPresented<span class="token punctuation">:</span> $showingConfirmation<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Red&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> backgroundColor <span class="token operator">=</span> <span class="token punctuation">.</span>red <span class="token punctuation">}</span></span>
<span class="line">    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Green&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> backgroundColor <span class="token operator">=</span> <span class="token punctuation">.</span>green <span class="token punctuation">}</span></span>
<span class="line">    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Blue&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> backgroundColor <span class="token operator">=</span> <span class="token punctuation">.</span>blue <span class="token punctuation">}</span></span>
<span class="line">    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Cancel&quot;</span></span><span class="token punctuation">,</span> role<span class="token punctuation">:</span> <span class="token punctuation">.</span>cancel<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span> message<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Select a new color&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When you run the app, you should find that tapping the text causes the confirmation dialog to slide over, and tapping its options should cause the text’s background color to change.</p>`,11),Y=n("hr",null,null,-1);function G(u,M){const t=c("router-link"),e=c("VPCard"),l=c("VidStack");return k(),h("div",null,[n("h1",g,[n("a",v,[n("span",null,m(u.$frontmatter.title)+" 관련",1)])]),n("nav",f,[n("ul",null,[n("li",null,[s(t,{to:"#project-13-part-1"},{default:o(()=>[a("Project 13, part 1")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#instafilter-introduction"},{default:o(()=>[a("Instafilter: Introduction")]),_:1})]),n("li",null,[s(t,{to:"#how-property-wrappers-become-structs"},{default:o(()=>[a("How property wrappers become structs")]),_:1})]),n("li",null,[s(t,{to:"#responding-to-state-changes-using-onchange"},{default:o(()=>[a("Responding to state changes using onChange()")]),_:1})]),n("li",null,[s(t,{to:"#showing-multiple-options-with-confirmationdialog"},{default:o(()=>[a("Showing multiple options with confirmationDialog()")]),_:1})])])])])]),b,y,s(e,i(p({title:"100 Days of SwiftUI - Day 62",desc:"Project 13, part 1",link:"https://www.hackingwithswift.com/100/swiftui/62",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),_,S,I,x,n("details",A,[C,s(e,i(p({title:"100 Days of SwiftUI - Day 62 - Instafilter: Introduction",desc:"Instafilter: Introduction",link:"https://hackingwithswift.com/books/ios-swiftui/instafilter-introduction",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),U,D,j,q,V,T]),B,n("details",P,[N,s(e,i(p({title:"100 Days of SwiftUI - Day 62 - How property wrappers become structs",desc:"How property wrappers become structs",link:"https://hackingwithswift.com/books/ios-swiftui/how-property-wrappers-become-structs",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(l,{src:"youtube/M-1jRwzUIuI"}),R]),W,n("details",H,[O,s(e,i(p({title:"100 Days of SwiftUI - Day 62 - Responding to state changes using onChange()",desc:"Responding to state changes using onChange()",link:"https://hackingwithswift.com/books/ios-swiftui/responding-to-state-changes-using-onchange",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(l,{src:"youtube/JAXoF-tcpcE"}),K]),$,n("details",z,[E,s(e,i(p({title:"100 Days of SwiftUI - Day 62 - Showing multiple options with confirmationDialog()",desc:"Showing multiple options with confirmationDialog()",link:"https://hackingwithswift.com/books/ios-swiftui/showing-multiple-options-with-confirmationdialog",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(l,{src:"youtube/D8lUhQ08s3s"}),J]),Y])}const Q=d(w,[["render",G],["__file","62.html.vue"]]),X=JSON.parse('{"path":"/swift/100-days-of-swiftui/62.html","title":"Day 62","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 62","description":"100 Days of SwiftUI > Day 62","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 62"},{"property":"og:description","content":"Day 62"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/62.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/62.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 62"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 62"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 62\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 13, part 1","slug":"project-13-part-1","link":"#project-13-part-1","children":[{"level":3,"title":"Instafilter: Introduction","slug":"instafilter-introduction","link":"#instafilter-introduction","children":[]},{"level":3,"title":"How property wrappers become structs","slug":"how-property-wrappers-become-structs","link":"#how-property-wrappers-become-structs","children":[]},{"level":3,"title":"Responding to state changes using onChange()","slug":"responding-to-state-changes-using-onchange","link":"#responding-to-state-changes-using-onchange","children":[]},{"level":3,"title":"Showing multiple options with confirmationDialog()","slug":"showing-multiple-options-with-confirmationdialog","link":"#showing-multiple-options-with-confirmationdialog","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":8}]},"readingTime":{"minutes":7.8,"words":2339},"filePathRelative":"swift/100-days-of-swiftui/62.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n<h2>Project 13, part 1</h2>\\n"}');export{Q as comp,X as data};
