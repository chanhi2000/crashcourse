import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,a as n,t as k,b as s,w as o,n as m,g as v,d as a,e as p,r as c,o as h}from"./app-U_bew1in.js";const g={},b={id:"frontmatter-title-관련",tabindex:"-1"},_={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},f=n("hr",null,null,-1),q=n("hr",null,null,-1),w={href:"https://github.com/pahkey/sbb3/tree/2-09",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"pahkey/sbb3",-1),S=n("code",null,"2-09",-1),Q=p('<p>이전 장에서 질문 목록을 만들었다. 이제 질문 목록의 제목 링크를 누르면 질문 상세 화면이 보이게 할 것이다. 하지만 기능을 추가하기 전에 잠시 생각할 것이 있다. 우리는 <code>QuestionController</code>에서 <code>QuestionRepository</code>를 직접 사용하여 질문 목록 데이터를 조회했다. 하지만 대부분의 규모있는 스프링부트 프로젝트는 컨트롤러에서 리포지터리를 직접 호출하지 않고 중간에 서비스(Service)를 두어 데이터를 처리한다. 서비스는 스프링에서 데이터 처리를 위해 작성하는 클래스이다.</p><hr><h2 id="서비스가-필요한-이유" tabindex="-1"><a class="header-anchor" href="#서비스가-필요한-이유"><span>서비스가 필요한 이유</span></a></h2><p>서비스가 필요한 이유는 무엇일까?</p><h3 id="모듈화" tabindex="-1"><a class="header-anchor" href="#모듈화"><span>모듈화</span></a></h3><p>예를들어 어떤 컨트롤러가 여러개의 리포지터리를 사용하여 데이터를 조회한후 가공하여 리턴한다고 가정해 보자. 이러한 기능을 서비스로 만들어 두면 컨트롤러에서는 해당 서비스를 호출하여 사용하면 된다. 하지만 서비스로 만들지 않고 컨트롤러에서 구현하려 한다면 해당 기능을 필요로 하는 모든 컨트롤러가 동일한 기능을 중복으로 구현해야 한다. 이러한 이유로 서비스는 모듈화를 위해서 필요하다.</p><h3 id="보안" tabindex="-1"><a class="header-anchor" href="#보안"><span>보안</span></a></h3><p>컨트롤러는 리포지터리 없이 서비스를 통해서만 데이터베이스에 접근하도록 구현하는 것이 보안상 안전하다. 이렇게 하면 어떤 해커가 해킹을 통해 컨트롤러를 제어할 수 있게 되더라도 리포지터리에 직접 접근할 수는 없게 된다.</p><h3 id="엔티티-객체와-dto-객체의-변환" tabindex="-1"><a class="header-anchor" href="#엔티티-객체와-dto-객체의-변환"><span>엔티티 객체와 DTO 객체의 변환</span></a></h3><p>우리가 작성한 <code>Question</code>, <code>Answer</code> 클래스는 엔티티(Entity) 클래스이다. 엔티티 클래스는 데이터베이스와 직접 맞닿아 있는 클래스이기 때문에 컨트롤러나 타임리프 같은 템플릿 엔진에 전달하여 사용하는 것은 좋지 않다. 컨트롤러나 타임리프에서 사용하는 데이터 객체는 속성을 변경하여 비즈니스적인 요구를 처리해야 하는 경우가 많은데 엔티티를 직접 사용하여 속성을 변경한다면 테이블 컬럼이 변경되어 엉망이 될수도 있기 때문이다.</p><p>이러한 이유로 <code>Question</code>, <code>Answer</code> 같은 엔티티 클래스는 컨트롤러에서 사용할수 없게끔 설계하는 것이 좋다. 그러기 위해서는 <code>Question</code>, <code>Answer</code> 대신 사용할 DTO(Data Transfer Object) 클래스가 필요하다. 그리고 <code>Question</code>, <code>Answer</code> 등의 엔티티 객체를 DTO 객체로 변환하는 작업도 필요하다. 그러면 엔티티 객체를 DTO 객체로 변환하는 일은 어디서 처리해야 할까? 그렇다. 바로 서비스이다. 서비스는 컨트롤러와 리포지터리의 중간자적인 입장에서 엔티티 객체와 DTO 객체를 서로 변환하여 양방향에 전달하는 역할을 한다.</p><hr><h2 id="questionservice" tabindex="-1"><a class="header-anchor" href="#questionservice"><span><code>QuestionService</code></span></a></h2><p>다음과 같이 <code>QuestionService</code>를 작성하자.</p>',14),I=n("code",null,"/sbb/src/main/java/com/mysite/sbb/question/",-1),C=n("code",null,"QuestionService.java",-1),x=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mysite<span class="token punctuation">.</span>sbb<span class="token punctuation">.</span>question</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">RequiredArgsConstructor</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@RequiredArgsConstructor</span></span>
<span class="line"><span class="token annotation punctuation">@Service</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuestionService</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">QuestionRepository</span> questionRepository<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Question</span><span class="token punctuation">&gt;</span></span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>questionRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>스프링의 서비스로 만들기 위해서는 위와 같이 클래스명 위에 <code>@Service</code> 애너테이션을 붙이면 된다. <code>@Controller</code>, <code>@Entity</code> 등과 마찬가지로 스프링부트는 <code>@Service</code> 애너테이션이 붙은 클래스는 서비스로 인식한다.</p><blockquote><p><code>questionRepository</code> 객체는 생성자 방식으로 DI 규칙에 의해 주입된다.</p></blockquote><p>그리고 질문 목록을 조회하여 리턴하는 getList 메서드를 추가했다. 이전 컨트롤러에서 리포지터리를 사용했던 부분을 그대로 옮긴 것이다.</p><h2 id="questioncontroller" tabindex="-1"><a class="header-anchor" href="#questioncontroller"><span><code>QuestionController</code></span></a></h2><p>그리고 <code>QuestionController</code>는 리포지터리 대신 서비스를 사용하도록 다음처럼 수정하자.</p>`,6),T=n("code",null,"/sbb/src/main/java/com/mysite/sbb/question/",-1),D=n("code",null,"QuestionController.java",-1),R=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// (... 생략 ...)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuestionController</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line highlighted">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">QuestionService</span> questionService<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/question/list&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Question</span><span class="token punctuation">&gt;</span></span> questionList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>questionService<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;questionList&quot;</span><span class="token punctuation">,</span> questionList<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;question_list&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>questionService</code> 객체는 생성자 방식으로 DI 규칙에 의해 주입된다.</p></blockquote><p>브라우저로 <code>http://localhost:8080/question/list</code> 페이지에 접속하면 이전과 동일한 화면을 볼수 있다. 앞으로 작성할 컨트롤러들도 리포지터리를 직접 사용하지 않고 <code>Controller -&gt; Service -&gt; Repository</code> 구조로 데이터를 처리할 것이다.</p><hr>`,4);function A(i,L){const e=c("router-link"),l=c("VPCard"),t=c("FontIcon"),r=c("VidStack");return h(),d("div",null,[n("h1",b,[n("a",_,[n("span",null,k(i.$frontmatter.title)+" 관련",1)])]),n("nav",y,[n("ul",null,[n("li",null,[s(e,{to:"#서비스가-필요한-이유"},{default:o(()=>[a("서비스가 필요한 이유")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#모듈화"},{default:o(()=>[a("모듈화")]),_:1})]),n("li",null,[s(e,{to:"#보안"},{default:o(()=>[a("보안")]),_:1})]),n("li",null,[s(e,{to:"#엔티티-객체와-dto-객체의-변환"},{default:o(()=>[a("엔티티 객체와 DTO 객체의 변환")]),_:1})])])]),n("li",null,[s(e,{to:"#questionservice"},{default:o(()=>[a("QuestionService")]),_:1})]),n("li",null,[s(e,{to:"#questioncontroller"},{default:o(()=>[a("QuestionController")]),_:1})])])]),f,s(l,m(v({title:"2-09. 서비스",desc:"점프 투 스프링부트 - WikiDocs",link:"https://wikidocs.net/161220",logo:"https://wikidocs.net/static/img/favicon.ico",background:"rgba(255,255,255,0.2)"})),null,16),q,n("blockquote",null,[n("p",null,[n("a",w,[s(t,{icon:"iconfont icon-github"}),a(),j,a(" - "),s(t,{icon:"fas fa-folder-open"}),a(),S])])]),s(r,{src:"youtube/jeag544IJQ8"}),Q,n("blockquote",null,[n("p",null,[a("파일명: "),s(t,{icon:"fas fa-folder-open"}),I,s(t,{icon:"fa-brands fa-java"}),C])]),x,n("blockquote",null,[n("p",null,[a("파일명: "),s(t,{icon:"fas fa-folder-open"}),T,s(t,{icon:"fa-brands fa-java"}),D])]),R])}const B=u(g,[["render",A],["__file","02I.html.vue"]]),J=JSON.parse('{"path":"/java/jump-to-spring-boot/02I.html","title":"02I. 서비스","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"02I. 서비스","description":"Jump to Spring Boot > 02I. 서비스","category":["Java","Spring","AWS"],"tag":["crashcourse","java","jdk","jdk8","stream","spring","springframework","springboot","aws","aws-ec2"],"head":[[{"meta":null},{"property":"og:title","content":"Jump to Spring Boot > 02I. 서비스"},{"property":"og:description","content":"02I. 서비스"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/java/jump-to-spring-boot/02I.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/java/jump-to-spring-boot/02I.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"02I. 서비스"}],["meta",{"property":"og:description","content":"Jump to Spring Boot > 02I. 서비스"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"jdk"}],["meta",{"property":"article:tag","content":"jdk8"}],["meta",{"property":"article:tag","content":"stream"}],["meta",{"property":"article:tag","content":"spring"}],["meta",{"property":"article:tag","content":"springframework"}],["meta",{"property":"article:tag","content":"springboot"}],["meta",{"property":"article:tag","content":"aws"}],["meta",{"property":"article:tag","content":"aws-ec2"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"02I. 서비스\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"서비스가 필요한 이유","slug":"서비스가-필요한-이유","link":"#서비스가-필요한-이유","children":[{"level":3,"title":"모듈화","slug":"모듈화","link":"#모듈화","children":[]},{"level":3,"title":"보안","slug":"보안","link":"#보안","children":[]},{"level":3,"title":"엔티티 객체와 DTO 객체의 변환","slug":"엔티티-객체와-dto-객체의-변환","link":"#엔티티-객체와-dto-객체의-변환","children":[]}]},{"level":2,"title":"QuestionService","slug":"questionservice","link":"#questionservice","children":[]},{"level":2,"title":"QuestionController","slug":"questioncontroller","link":"#questioncontroller","children":[]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":8}]},"readingTime":{"minutes":0.84,"words":251},"filePathRelative":"java/jump-to-spring-boot/02I.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{B as comp,J as data};
