import{_ as b}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,a as s,t as g,b as e,n as d,g as u,w as l,d as n,e as t,r as i,o as f}from"./app-U_bew1in.js";const _={},y={id:"frontmatter-title-관련",tabindex:"-1"},D={class:"header-anchor",href:"#frontmatter-title-관련"},j={class:"table-of-contents"},x=s("hr",null,null,-1),C=t(`<p>보통 Dockerfile로 이미지를 생성할 때 Docker Hub에서 제공하는 공식 이미지를 기반으로 생성합니다. 이번에는 나만의 베이스 이미지를 생성하는 방법을 알아보겠습니다.</p><hr><h2 id="우분투-베이스-이미지-생성하기" tabindex="-1"><a class="header-anchor" href="#우분투-베이스-이미지-생성하기"><span>우분투 베이스 이미지 생성하기</span></a></h2><p>우분투 리눅스 베이스 이미지를 생성해보겠습니다. 우분투 리눅스용 부트스트랩 바이너리 파일을 받아와야 하기 때문에 우분투 리눅스가 설치된 호스트에서 진행합니다.</p><p>먼저 부트스트랩 도구인 <code>debootstrap</code>을 설치합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">debootstrap</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>debootstrap</code>으로 우분투 <strong>jammy(22.04)</strong> 바이너리 파일을 받습니다. <code>jammy</code>는 우분투 리눅스의 코드네임입니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">debootstrap</span> jammy jammy</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>deboostrap &lt;코드네임&gt; &lt;디렉터리&gt;</code> 형식입니다.</p>`,9),S={class:"hint-container info"},I=s("p",{class:"hint-container-title"},"우분투 리눅스 코드네임",-1),R=s("p",null,"우분투 리눅스의 버전별 코드네임 목록은 다음 URL에서 확인할 수 있습니다.",-1),T=t(`<p>바이너리 파일을 다 받았으면 <code>docker import</code> 명령으로 베이스 이미지를 생성합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">tar</span> <span class="token parameter variable">-C</span> jammy <span class="token parameter variable">-c</span> <span class="token builtin class-name">.</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">docker</span> <span class="token function">import</span> - jammy</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>tar -C jammy -c .</code>는 <code>jammy</code> 디렉터리의 내용을 파일 하나로 합쳐서 <code>stdout</code>으로 출력하는 명령입니다. 이 출력 내용을 <code>|</code> (파이프)를 통해 <code>docker import</code> 명령에 전달합니다.</p><p><code>docker import &lt;URL 또는 -&gt; &lt;이미지 이름&gt;:&lt;태그&gt;</code> 형식입니다. 예를 들어 다음과 같이 인터넷에 있는 파일도 사용할 수 있습니다. <code>|</code>를 통해 데이터를 넘겨받는다면 <code>-</code>를 지정합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token function">import</span> http://example.com/jammy.tgz focal</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>이미지 목록을 출력합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> images</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># REPOSITORY                TAG       IMAGE ID       CREATED         SIZE</span></span>
<span class="line"><span class="token comment"># jammy                     latest    190b8535965c   6 seconds ago   374MB</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),F=s("code",null,"jammy",-1),O=s("code",null,"jammy",-1),w=s("code",null,"/etc/",-1),E=s("code",null,"lsb-release",-1),A=t(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-i</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">--name</span> hello jammy /bin/bash</span>
<span class="line"><span class="token function">cat</span> /etc/lsb-release</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># DISTRIB_ID=Ubuntu</span></span>
<span class="line"><span class="token comment"># DISTRIB_RELEASE=22.04</span></span>
<span class="line"><span class="token comment"># DISTRIB_CODENAME=jammy</span></span>
<span class="line"><span class="token comment"># DISTRIB_DESCRIPTION=&quot;Ubuntu 22.04 LTS&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>코드네임은 <code>jammy</code>, 릴리스 버전은 <strong>22.04</strong> 로 표시됩니다.</p><hr>`,3),B={id:"centos-베이스-이미지-생성하기",tabindex:"-1"},M={class:"header-anchor",href:"#centos-베이스-이미지-생성하기"},q=t(`<p>이번에는 CentOS 베이스 이미지를 생성해보겠습니다. CentOS용 부트스트랩 바이너리 파일을 받아와야 하기 때문에 CentOS Stream 9가 설치된 호스트에서 진행합니다.</p><p>먼저 부트스트랩 도구인 <code>supermin</code>을 설치합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> yum <span class="token function">install</span> supermin</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>supermin으로 부트스트랩을 준비합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">supermin <span class="token parameter variable">--prepare</span> yum <span class="token parameter variable">-o</span> supermin.d</span>
<span class="line">supermin <span class="token parameter variable">--build</span> <span class="token parameter variable">--format</span> <span class="token function">chroot</span> supermin.d <span class="token parameter variable">-o</span> appliance.d</span>
<span class="line"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> appliance.d/etc/yum/vars</span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token number">9</span> <span class="token operator">&gt;</span> appliance.d/etc/yum/vars/releasever</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>부트스트랩을 다 준비했다면 <code>docker import</code> 명령으로 베이스 이미지를 생성합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">tar</span> <span class="token parameter variable">-C</span> appliance.d <span class="token parameter variable">-c</span> <span class="token builtin class-name">.</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">docker</span> <span class="token function">import</span> - centos</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,7),P=s("code",null,"sudo tar -C appliance.d -c .",-1),U=s("code",null,"appliance.d",-1),Z=s("code",null,"docker import",-1),N=t(`<p><code>docker import &lt;tar 파일 URL 또는 -&gt; &lt;이미지 이름&gt;:&lt;태그&gt;</code> 형식입니다. 예를 들어 다음과 같이 인터넷에 있는 파일을 사용할 수도 있습니다. |(파이프)를 통해 데이터를 넘겨받는다면 -를 지정합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token function">import</span> http://example.com/centos.tgz centos</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>이미지 목록을 출력합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> images</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># REPOSITORY                   TAG       IMAGE ID       CREATED              SIZE</span></span>
<span class="line"><span class="token comment"># centos                       latest    6f4877487603   About a minute ago   187MB</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),L=s("code",null,"centos",-1),V=s("code",null,"centos",-1),H=s("code",null,"/etc/",-1),z=s("code",null,"centos-release",-1),G=t(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-i</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">--name</span> hello centos /bin/bash</span>
<span class="line"><span class="token function">cat</span> /etc/centos-release</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># CentOS Stream release 9</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>배포판 버전이 <strong>CentOS Stream release 9</strong>로 표시됩니다.</p><hr><h2 id="빈-베이스-이미지-생성하기" tabindex="-1"><a class="header-anchor" href="#빈-베이스-이미지-생성하기"><span>빈 베이스 이미지 생성하기</span></a></h2><p>아무것도 들어있지 않은 베이스 이미지를 생성하는 방법입니다. Docker에서는 빈 베이스 이미지를 <code>scratch</code> 이미지라고 부릅니다.</p><p><code>/dev/null</code> 장치를 이용하여 빈 tar 파일을 만들어서 <code>docker import</code> 명령에 전달합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">tar</span> cv --files-from /dev/null <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">docker</span> <span class="token function">import</span> - scratch</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>scratch</code> 이미지는 안에 아무것도 없기 때문에 컨테이너로 생성이 되지 않습니다. 여기서 Dockerfile을 작성하여 여러분이 만든 실행 파일을 넣으면 됩니다.</p>`,8),K=s("code",null,"scratch",-1),Y=s("code",null,"hello",-1),J=s("code",null,"hello",-1),W=t(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">mkdir</span> hello</span>
<span class="line"><span class="token builtin class-name">cd</span> hello</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,1),$=s("code",null,"hello.c",-1),Q=t(`<blockquote><p>hello.c</p></blockquote><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Hello Docker\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),X=s("code",null,"hello.c",-1),ss=s("code",null,"scratch",-1),ns=t(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">gcc hello.c <span class="token parameter variable">-static</span> <span class="token parameter variable">-o</span> hello</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,1),es={class:"hint-container info"},as=s("p",{class:"hint-container-title"},"컴파일",-1),ts=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"sudo"),n(),s("span",{class:"token function"},"apt"),n(),s("span",{class:"token function"},"install"),n(" gcc")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])],-1),ls=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"sudo"),n(" yum config-manager --set-enabled crb")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"sudo"),n(" yum "),s("span",{class:"token function"},"install"),n(" gcc")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"sudo"),n(" yum "),s("span",{class:"token function"},"install"),n(" glibc-static")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),is=s("code",null,"Dockerfile",-1),os=s("code",null,"Dockerfile",-1),cs=t(`<div class="language-docker line-numbers-mode" data-highlighter="prismjs" data-ext="docker" data-title="docker"><pre><code><span class="line"><span class="token instruction"><span class="token keyword">FROM</span> scratch</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">ADD</span> ./hello /hello</span></span>
<span class="line"><span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">&quot;/hello&quot;</span>]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>scratch</code> 이미지를 기반으로 새로운 이미지를 생성합니다.</p>`,2),ps=s("li",null,[s("code",null,"FROM"),n(": 어떤 이미지를 기반으로 할지 설정합니다. Docker 이미지는 기존에 만들어진 이미지를 기반으로 생성합니다. "),s("code",null,"<이미지 이름>:<태그>"),n(" 형식입니다. 여기서는 앞에서 만든 "),s("code",null,"scratch"),n(" 이미지를 설정합니다.")],-1),rs=s("code",null,"ADD",-1),ds=s("code",null,"<로컬 경로> <이미지 경로>",-1),us=s("code",null,"hello.c",-1),ms=s("code",null,"hello",-1),hs=s("code",null,"CMD",-1),vs=s("code",null,"hello",-1),bs=t(`<p><code>docker build</code> 명령으로 이미지를 생성합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> build <span class="token parameter variable">--tag</span> hello:0.1 <span class="token builtin class-name">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>이제 <code>scratch</code> 이미지를 이용해서 만든 <code>hello:0.1</code> 이미지를 컨테이너로 생성합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">--rm</span> hello:0.1</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Hello Docker</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Hello Docker</strong>가 출력되면 실행 파일이 정상적으로 실행된 것입니다.</p><hr>`,6);function ks(m,gs){const r=i("VPCard"),o=i("router-link"),a=i("FontIcon"),h=i("SiteInfo"),v=i("CodeTabs");return f(),k("div",null,[s("h1",y,[s("a",D,[s("span",null,g(m.$frontmatter.title)+" 관련",1)])]),e(r,d(u({title:"목차",desc:"언제나 최신 Docker",link:"/docker/always-up-to-date-docker/README.md",logo:"https://pyrasis.com/assets/images/pyrasis.png",background:"rgba(31,41,55,0.2)"})),null,16),s("nav",j,[s("ul",null,[s("li",null,[e(o,{to:"#우분투-베이스-이미지-생성하기"},{default:l(()=>[n("우분투 베이스 이미지 생성하기")]),_:1})]),s("li",null,[e(o,{to:"#centos-베이스-이미지-생성하기"},{default:l(()=>[e(a,{icon:"fa-brands fa-centos"}),n("CentOS 베이스 이미지 생성하기")]),_:1})]),s("li",null,[e(o,{to:"#빈-베이스-이미지-생성하기"},{default:l(()=>[n("빈 베이스 이미지 생성하기")]),_:1})])])]),x,e(h,{name:"6장 - 6. Docker 베이스 이미지 생성하기",desc:"언제나 최신 Docker",url:"https://pyrasis.com/jHLsAlwaysUpToDateDocker/Unit06/06",logo:"https://pyrasis.com/assets/images/pyrasis.png",preview:"https://pyrasis.com/assets/images/profile1.png"}),C,s("div",S,[I,R,e(r,d(u({title:"Releases - Ubuntu Wiki",desc:"...",link:"https://wiki.ubuntu.com/Releases",logo:"https://assets.ubuntu.com/v1/f38b9c7e-COF%2520apple-touch-icon.png",background:"rgba(0,0,0,0.2)"})),null,16)]),T,s("p",null,[F,n(" 이미지가 생성되었습니다. 이제 "),O,n(" 이미지로 컨테이너를 생성합니다. 컨테이너의 Bash 셸이 실행되면 "),e(a,{icon:"fas fa-folder-open"}),w,e(a,{icon:"fas fa-file-lines"}),E,n(" 파일의 내용을 확인해봅니다.")]),A,s("h2",B,[s("a",M,[s("span",null,[e(a,{icon:"fa-brands fa-centos"}),n("CentOS 베이스 이미지 생성하기")])])]),q,s("p",null,[P,n("는 "),e(a,{icon:"fas fa-folder-open"}),U,n(" 디렉터리의 내용을 파일 하나로 합쳐서 stdout으로 출력하는 명령입니다. 이 출력 내용을 | (파이프)를 통해 "),Z,n(" 명령에 전달합니다.")]),N,s("p",null,[L,n(" 이미지가 생성되었습니다. "),V,n(" 이미지로 컨테이너를 생성합니다. 컨테이너의 Bash 셸이 실행되면 "),e(a,{icon:"fas fa-folder-open"}),H,e(a,{icon:"fas fa-file-lines"}),z,n(" 파일의 내용을 확인해봅니다.")]),G,s("p",null,[n("간단하게 C 언어로 만든 프로그램을 "),K,n(" 이미지에 넣어보겠습니다. 먼저 "),e(a,{icon:"fas fa-folder-open"}),Y,n(" 디렉터리를 생성한 뒤 "),e(a,{icon:"fas fa-folder-open"}),J,n(" 디렉터리로 이동합니다.")]),W,s("p",null,[n("다음 내용을 "),e(a,{icon:"iconfont icon-c"}),$,n("로 저장합니다.")]),Q,s("p",null,[n("."),e(a,{icon:"iconfont icon-c"}),X,n(" 파일을 컴파일하여 실행 파일로 만듭니다. "),ss,n(" 이미지에는 아무 라이브러리도 없으므로 반드시 정적(static) 바이너리로 컴파일해야 합니다.")]),ns,s("div",es,[as,e(v,{id:"127",data:[{id:'<FontIcon icon="fa-brands fa-ubuntu"/>우분투'},{id:'<FontIcon icon="fa-brands fa-centos"/>CentOS'}],active:0,"tab-id":"sh"},{title0:l(({value:c,isActive:p})=>[e(a,{icon:"fa-brands fa-ubuntu"}),n("우분투")]),title1:l(({value:c,isActive:p})=>[e(a,{icon:"fa-brands fa-centos"}),n("CentOS")]),tab0:l(({value:c,isActive:p})=>[ts]),tab1:l(({value:c,isActive:p})=>[ls]),_:1})]),s("p",null,[n("다음 내용을 "),e(a,{icon:"fa-brands fa-docker"}),is,n("로 저장합니다.")]),s("blockquote",null,[e(a,{icon:"fa-brands fa-docker"}),os]),cs,s("ul",null,[ps,s("li",null,[rs,n(": 이미지에 포함할 파일을 설정합니다. "),ds,n(" 형식입니다. 앞에서 "),e(a,{icon:"iconfont icon-c"}),us,n(" 파일을 컴파일하여 생성한 "),e(a,{icon:"fas fa-file-lines"}),ms,n(" 파일을 설정합니다.")]),s("li",null,[hs,n(": 컨테이너가 시작되었을 때 실행할 실행 파일 또는 스크립트입니다. "),e(a,{icon:"fas fa-file-lines"}),vs,n(" 파일이 실행되도록 설정합니다.")])]),bs])}const ys=b(_,[["render",ks],["__file","06F.html.vue"]]),Ds=JSON.parse('{"path":"/docker/always-up-to-date-docker/06F.html","title":"06F. Docker 베이스 이미지 생성하기","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"06F. Docker 베이스 이미지 생성하기","description":"언제나 최신 Docker > 06F. Docker 베이스 이미지 생성하기","category":["DevOps","Docker"],"tag":["crashcourse","pyrasis.com","docker","devops"],"head":[[{"meta":null},{"property":"og:title","content":"언제나 최신 Docker > 06F. Docker 베이스 이미지 생성하기"},{"property":"og:description","content":"06F. Docker 베이스 이미지 생성하기"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/docker/always-up-to-date-docker/06F.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/docker/always-up-to-date-docker/06F.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"06F. Docker 베이스 이미지 생성하기"}],["meta",{"property":"og:description","content":"언제나 최신 Docker > 06F. Docker 베이스 이미지 생성하기"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pyrasis.com/assets/images/profile1.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://pyrasis.com/assets/images/profile1.png"}],["meta",{"name":"twitter:image:alt","content":"06F. Docker 베이스 이미지 생성하기"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"pyrasis.com"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:published_time","content":"2022-10-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"06F. Docker 베이스 이미지 생성하기\\",\\"image\\":[\\"https://pyrasis.com/assets/images/profile1.png\\"],\\"datePublished\\":\\"2022-10-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]],"date":"2022-10-03T00:00:00.000Z","isOriginal":false,"cover":"https://pyrasis.com/assets/images/profile1.png"},"headers":[{"level":2,"title":"우분투 베이스 이미지 생성하기","slug":"우분투-베이스-이미지-생성하기","link":"#우분투-베이스-이미지-생성하기","children":[]},{"level":2,"title":"CentOS 베이스 이미지 생성하기","slug":"centos-베이스-이미지-생성하기","link":"#centos-베이스-이미지-생성하기","children":[]},{"level":2,"title":"빈 베이스 이미지 생성하기","slug":"빈-베이스-이미지-생성하기","link":"#빈-베이스-이미지-생성하기","children":[]}],"git":{"createdTime":1716977950000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":3}]},"readingTime":{"minutes":2.08,"words":625},"filePathRelative":"docker/always-up-to-date-docker/06F.md","localizedDate":"2022년 10월 3일","excerpt":"\\n"}');export{ys as comp,Ds as data};
