import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,a as s,t as h,b as n,n as m,g as v,w as l,d as a,e as o,r as i,o as b}from"./app-U_bew1in.js";const k={},g={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},_={class:"table-of-contents"},y=s("hr",null,null,-1),x=o(`<p>Docker가 리눅스 기반이기 때문에 이미지를 생성할 때 Bash(Bourne-again shell)를 주로 사용합니다. 그래서 이미지를 생성하기 전에 자주 사용하는 Bash 문법을 간단히 알아보겠습니다.</p><hr><h2 id="" tabindex="-1"><a class="header-anchor" href="#"><span><code>&gt;</code></span></a></h2><p>출력 리다이렉션. 명령 실행의 표준 출력(<code>stdout</code>)을 파일로 저장합니다. 유닉스계열 운영체제는 장치도 파일로 처리하기 때문에 명령 실행 결과를 특정 장치로 보낼 수도 있습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;hello&quot;</span> <span class="token operator">&gt;</span> ./hello.txt</span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;hello&quot;</span> <span class="token operator">&gt;</span> /dev/null</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="-1" tabindex="-1"><a class="header-anchor" href="#-1"><span><code>&lt;</code></span></a></h2><p>입력 리다이렉션. 파일의 내용을 읽어 명령의 표준 입력(<code>stdin</code>)으로 사용합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> <span class="token operator">&lt;</span> ./hello.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="-2" tabindex="-1"><a class="header-anchor" href="#-2"><span><code>&gt;&gt;</code></span></a></h2><p>명령 실행의 표준 출력(<code>stdout</code>)을 파일에 추가합니다. <code>&gt;</code>는 이미 있는 파일에 내용을 덮어쓰지만 <code>&gt;&gt;</code>는 파일 뒷부분에 내용을 추가합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;world&quot;</span> <span class="token operator">&gt;&gt;</span> ./hello.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="_2" tabindex="-1"><a class="header-anchor" href="#_2"><span><code>2&gt;</code></span></a></h2><p>명령 실행의 표준 에러(<code>stderr</code>)를 파일로 저장합니다.</p><hr><h2 id="_2-1" tabindex="-1"><a class="header-anchor" href="#_2-1"><span><code>2&gt;&gt;</code></span></a></h2><p>명령 실행의 표준 에러(<code>stderr</code>)를 파일에 추가합니다.</p><hr><h2 id="-3" tabindex="-1"><a class="header-anchor" href="#-3"><span><code>&amp;&gt;</code></span></a></h2><p>표준 출력과 표준 에러를 모두 파일로 저장합니다.</p><hr><h2 id="_1-2" tabindex="-1"><a class="header-anchor" href="#_1-2"><span><code>1&gt;&amp;2</code></span></a></h2><p>표준 출력을 표준 에러로 보냅니다. <code>echo</code> 명령으로 문자열을 표준 출력으로 출력했지만 표준 에러로 보냈기 때문에 변수에는 문자열이 들어가지 않습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token assign-left variable">hello</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">&quot;Hello World&quot;</span> <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span><span class="token file-descriptor important">&amp;2</span><span class="token variable">)</span></span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token variable">$hello</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_2-1-1" tabindex="-1"><a class="header-anchor" href="#_2-1-1"><span><code>2&gt;&amp;1</code></span></a></h2><p>표준 에러를 표준 출력으로 보냅니다. abcd라는 명령은 없으므로 에러가 발생하지만 에러를 표준 출력으로 보낸 뒤 다시 <code>/dev/null</code>로 보냈기 때문에 아무것도 출력되지 않습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">abcd <span class="token operator">&gt;</span> /dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="-4" tabindex="-1"><a class="header-anchor" href="#-4"><span><code>|</code></span></a></h2><p>파이프. 명령 실행의 표준 출력을 다른 명령의 표준 입력으로 보냅니다. 즉 첫 번째 명령의 출력 값을 두 번째 명령에서 처리합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">ls</span> <span class="token parameter variable">-al</span> <span class="token operator">|</span> <span class="token function">grep</span> .txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="-5" tabindex="-1"><a class="header-anchor" href="#-5"><span><code>$</code></span></a></h2><p>Bash의 변수입니다. 값을 저장할 때는 $를 붙이지 않고, 변수를 가져다 쓸 때만 $를 붙입니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token assign-left variable">hello</span><span class="token operator">=</span><span class="token string">&quot;Hello World&quot;</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token variable">$hello</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># Hello World</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="-6" tabindex="-1"><a class="header-anchor" href="#-6"><span><code>$()</code></span></a></h2><p>명령 실행 결과를 변수화합니다. 명령 실행 결과를 변수에 저장하거나 다른 명령의 매개 변수로 넘겨줄 때 사용합니다. 또는 문자열안에 명령의 실행 결과를 넣을 때 사용합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-aq</span><span class="token variable">)</span></span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">date</span><span class="token variable">)</span></span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># Tue Sep 9 21:24:30 KST 2014</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="-7" tabindex="-1"><a class="header-anchor" href="#-7"><span><code></code></span></a></h2><p><code>$()</code>과 마찬가지로 명령 실행 결과를 변수화합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token function">rm</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-aq</span><span class="token variable">\`</span></span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">date</span><span class="token variable">\`</span></span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># Tue Sep 9 21:24:30 KST 2014</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="-8" tabindex="-1"><a class="header-anchor" href="#-8"><span><code>&amp;&amp;</code></span></a></h2><p>한 줄에서 명령을 여러 개 실행합니다. 단 앞에 있는 명령이 에러 없이 실행되어야 뒤에 오는 명령이 실행됩니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="-9" tabindex="-1"><a class="header-anchor" href="#-9"><span><code>;</code></span></a></h2><p>한 줄에서 명령을 여러 개 실행합니다. 앞에 있는 명령이 실패를 해도 뒤에 오는 명령이 실행됩니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token string">&quot;Hello&quot;</span></span>
<span class="line">Hello</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="-10" tabindex="-1"><a class="header-anchor" href="#-10"><span><code>&#39; &#39;</code></span></a></h2><p>문자열입니다. <code>&#39; &#39;</code>안에 들어있는 변수는 처리되지 않고 변수명 그대로 사용됩니다. 또한 <code></code>와<code> $()</code>도 처리되지 않고 그대로 사용됩니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;$USER&#39;</span></span>
<span class="line">SER</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>$USER</code>가 그대로 출력됩니다.</p><hr><h2 id="-11" tabindex="-1"><a class="header-anchor" href="#-11"><span><code>&quot; &quot;</code></span></a></h2><p>문자열입니다. 명령에 문자열 매개변수를 입력하거나 변수에 저장할 때 주로 사용합니다. <code>&#39; &#39;</code>와는 달리 <code>&quot; &quot;</code>안에 변수가 들어있으면 변수의 내용으로 바뀝니다. 또한 <code></code>와 <code>$()</code>도 실행 결과 값이 사용됩니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;Hello World&quot;</span></span>
<span class="line">Hello World</span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token environment constant">$USER</span>&quot;</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># pyrasis</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;Host name is <span class="token variable"><span class="token variable">$(</span><span class="token function">hostname</span><span class="token variable">)</span></span>&quot;</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Host name is ubuntu</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;Time: <span class="token variable"><span class="token variable">\`</span><span class="token function">date</span><span class="token variable">\`</span></span>&quot;</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Time: Tue Sep  9 21:28:10 KST 2014</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="-12" tabindex="-1"><a class="header-anchor" href="#-12"><span><code>&quot; &#39; &#39; &quot;</code></span></a></h2><p><code>&quot; &quot;</code>안에 <code>&#39; &#39;</code>가 들어갈 수 있습니다. 명령 안에서 다시 명령을 실행하고 매개 변수를 지정할 때 사용합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">bash</span> <span class="token parameter variable">-c</span> <span class="token string">&quot;/bin/echo Hello &#39;World&#39;&quot;</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Hello World</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="hello" tabindex="-1"><a class="header-anchor" href="#hello"><span><code>\\$hello</code></span></a></h2><p><code>&#39; &#39;</code>안에서 <code>&quot;</code>를 사용할 때는 <code>&quot;</code>처럼 앞에 <code>\\</code>를 붙여줍니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">bash</span> <span class="token parameter variable">-c</span> <span class="token string">&quot;/bin/echo &#39;{ <span class="token entity" title="\\&quot;">\\&quot;</span>user<span class="token entity" title="\\&quot;">\\&quot;</span>: <span class="token entity" title="\\&quot;">\\&quot;</span><span class="token environment constant">$USER</span><span class="token entity" title="\\&quot;">\\&quot;</span> }&#39;&quot;</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># { &quot;user&quot;: &quot;pyrasis&quot; }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&quot; &quot;</code>안에서 <code>&quot;</code>, <code>$</code>, <code>등의 특수문자를 그대로 사용하려면 앞에</code>\`를 붙여줍니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;\\<span class="token variable">$hello</span> <span class="token entity" title="\\&quot;">\\&quot;</span> \\\`&quot;</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># $hello &quot; \`</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="-13" tabindex="-1"><a class="header-anchor" href="#-13"><span><code>\${}</code></span></a></h2><p>변수 치환(substitution)입니다. <code>&quot; &quot;</code> 문자열 안에서 변수를 출력할 때 주로 사용합니다. <code>\${}</code> 대신 <code>$</code>만 사용해도 됩니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token string">&quot;World&quot;</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;Hello <span class="token variable">\${str}</span>&quot;</span></span>
<span class="line">Hello World</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>스크립트에서 변수의 기본 값을 설정할 때도 사용합니다. 다음은 <code>HELLO</code> 변수가 있으면 그대로 사용하고 변수가 없으면 기본 값으로 설정한 abcd를 대입합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token assign-left variable">HELLO</span><span class="token operator">=</span></span>
<span class="line"><span class="token assign-left variable">HELLO</span><span class="token operator">=</span><span class="token variable">\${HELLO-&quot;abcd&quot;}</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token variable">$HELLO</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>값이 <code>NULL</code>인 <code>HELLO</code> 변수가 이미 있기 때문에 기본 값을 대입하지 않습니다. 다음은 변수에 값이 있으면 그대로 사용하고, 값이 <code>NULL</code>이면 기본 값으로 설정한 abcd를 대입합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token assign-left variable">WORLD</span><span class="token operator">=</span></span>
<span class="line"><span class="token assign-left variable">WORLD</span><span class="token operator">=</span><span class="token variable">\${WORLD<span class="token operator">:-</span>&quot;abcd&quot;}</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token variable">$WORLD</span></span>
<span class="line">abcd</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>변수에 값이 <code>NULL</code>이므로 기본 값을 대입합니다.</p><hr><h2 id="-14" tabindex="-1"><a class="header-anchor" href="#-14"><span><code>\\</code></span></a></h2><p>한 줄로된 명령을 여러 줄로 표현할 때 사용합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> hello busybox:latest</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--name</span> hello <span class="token punctuation">\\</span></span>
<span class="line">  busybox:latest</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_1-10" tabindex="-1"><a class="header-anchor" href="#_1-10"><span><code>{1..10}</code></span></a></h2><p>연속된 숫자를 표현합니다. <code>{시작 숫자..끝 숫자}</code> 형식입니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">10</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># 1 2 3 4 5 6 7 8 9 10</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="문자열1-문자열2" tabindex="-1"><a class="header-anchor" href="#문자열1-문자열2"><span><code>{문자열1,문자열2}</code></span></a></h2>`,92),q=s("code",null,"{}",-1),$=s("code",null,"hello.txt",-1),w=s("code",null,"world.txt",-1),j=s("code",null,"hello-dir",-1),L=o(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cp</span> ./<span class="token punctuation">{</span>hello.txt,world.txt<span class="token punctuation">}</span> hello-dir/</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="if" tabindex="-1"><a class="header-anchor" href="#if"><span><code>if</code></span></a></h2><p>if 조건문입니다. 변수와 변수끼리 또는 문자열과 비교할 때 사용합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">&lt;</span>span <span class="token assign-left variable">class</span><span class="token operator">=</span><span class="token string">&quot;token parameter variable&quot;</span><span class="token operator">&gt;</span>-eq <span class="token variable">$b</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span></span>
<span class="line">  <span class="token builtin class-name">echo</span> <span class="token variable">$a</span></span>
<span class="line"><span class="token keyword">fi</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="숫자-비교" tabindex="-1"><a class="header-anchor" href="#숫자-비교"><span>숫자 비교</span></a></h3><ul><li><code>-eq</code>: 같다</li><li><code>-ne</code>: 같지 않다</li><li><code>-gt</code>: 초과</li><li><code>-ge</code>: 이상</li><li><code>-lt</code>: 미만</li><li><code>-le</code>: 이하</li></ul><h3 id="문자열-비교" tabindex="-1"><a class="header-anchor" href="#문자열-비교"><span>문자열 비교</span></a></h3><ul><li><code>=</code>, <code>==</code>: 같다</li><li><code>!=</code>: 같지 않다</li><li><code>-z</code>: 문자열이 NULL일 때</li><li><code>-n</code>: 문자열이 NULL이 아닐 때</li></ul><hr><h2 id="for" tabindex="-1"><a class="header-anchor" href="#for"><span><code>for</code></span></a></h2><p>for 반복문입니다. 변수안에 있는 값을 반복하거나 범위를 지정하여 반복할 수 있습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span><span class="token variable">)</span></span></span>
<span class="line"><span class="token keyword">do</span></span>
<span class="line">  <span class="token builtin class-name">echo</span> <span class="token variable">$i</span></span>
<span class="line"><span class="token keyword">done</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">))</span></span></span>
<span class="line"><span class="token keyword">do</span></span>
<span class="line">  <span class="token builtin class-name">echo</span> <span class="token variable">$i</span></span>
<span class="line"><span class="token keyword">done</span></span>
<span class="line"></span>
<span class="line"><span class="token assign-left variable">NUM</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable">\${NUM<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span></span>
<span class="line"><span class="token keyword">do</span></span>
<span class="line">  <span class="token builtin class-name">echo</span> <span class="token variable">$i</span></span>
<span class="line"><span class="token keyword">done</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="while" tabindex="-1"><a class="header-anchor" href="#while"><span><code>while</code></span></a></h2><p>while 반복문입니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token keyword">while</span> <span class="token builtin class-name">:</span></span>
<span class="line"><span class="token keyword">do</span></span>
<span class="line">  <span class="token builtin class-name">echo</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">done</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="-15" tabindex="-1"><a class="header-anchor" href="#-15"><span><code>&lt;&lt;&lt;</code></span></a></h2><p>문자열을 명령(프로세스)의 표준 입력으로 보냅니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> <span class="token operator">&lt;&lt;&lt;</span> <span class="token string">&quot;User name is <span class="token environment constant">$USER</span>&quot;</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># User name is pyrasis</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="eof-eof" tabindex="-1"><a class="header-anchor" href="#eof-eof"><span><code>&lt;&lt;EOF ... EOF</code></span></a></h2><p>여러 줄의 문자열을 명령(프로세스)의 표준 입력으로 보냅니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> <span class="token operator">&gt;</span> ./hello.txt <span class="token operator">&lt;&lt;</span>EOF</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Hello World</span></span>
<span class="line"><span class="token comment"># Host name is $(hostname)</span></span>
<span class="line"><span class="token comment"># User name is $(USER)</span></span>
<span class="line"><span class="token comment"># EOF</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cat</code>은 파일이나 표준 입력의 내용을 출력하는 명령입니다. <code>cat</code>의 표준 출력을 <code>./hello.txt</code>로 저장하고, <code>&lt;&lt;EOF로</code> 문자열을 cat의 표준 입력으로 보냅니다. 이렇게 하면 문자열 3줄이 <code>./hello.txt</code> 파일에 저장됩니다.</p><hr><h2 id="export" tabindex="-1"><a class="header-anchor" href="#export"><span><code>export</code></span></a></h2><p>설정한 값을 환경 변수로 만듭니다. <code>export &lt;변수&gt;=&lt;값&gt;</code> 형식입니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">export</span> <span class="token assign-left variable">HELLO</span><span class="token operator">=</span>world</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="printf" tabindex="-1"><a class="header-anchor" href="#printf"><span><code>printf</code></span></a></h2><p>지정한 형식대로 값을 출력합니다. 파이프와 연동하여 명령(프로세스)에 값을 입력하는 효과를 낼 수 있습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">printf</span> <span class="token number">80</span><span class="token punctuation">\\</span><span class="token punctuation">\\</span>nexampleuser<span class="token punctuation">\\</span><span class="token punctuation">\\</span>ny <span class="token operator">|</span> example-config</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Port: 80</span></span>
<span class="line"><span class="token comment"># User: exampleuser</span></span>
<span class="line"><span class="token comment"># Save Configuration (y/n): y</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>예를 들어 <code>example-config</code>는 Port, User, Save Configuration을 사용자에게 입력을 받습니다. <code>printf</code>로 미리 값을 설정하여 파이프로 <code>example-config</code>에 넘겨주면 사용자가 입력하지 않아도 자동으로 값이 입력됩니다. 줄바꿈(개행)은 <code>\\n</code>으로 표현합니다.</p><hr><h2 id="sed" tabindex="-1"><a class="header-anchor" href="#sed"><span><code>sed</code></span></a></h2>`,37),E=s("code",null,"hello.txt",-1),H=s("code",null,"hello",-1),O=s("code",null,"world",-1),S=o(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">&quot;s/hello/world/g&quot;</span> hello.txt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>sed -i &quot;s/&lt;찾을 문자열&gt;/&lt;바꿀 문자열&gt;/g&quot; &lt;파일명&gt;</code> 형식입니다. <code>/</code>와 같은 특수 문자는 앞에 <code>\\</code>를 붙여 <code>/</code>로 입력합니다.</p><hr><h2 id="-16" tabindex="-1"><a class="header-anchor" href="#-16"><span><code>#</code></span></a></h2><p>주석입니다. 스크립트에 설명을 추가하거나, 명령이 실행되지 않도록 합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># echo &quot;Hello World&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr>`,7);function U(c,T){const p=i("VPCard"),e=i("router-link"),d=i("SiteInfo"),t=i("FontIcon");return b(),u("div",null,[s("h1",g,[s("a",f,[s("span",null,h(c.$frontmatter.title)+" 관련",1)])]),n(p,m(v({title:"목차",desc:"언제나 최신 Docker",link:"/docker/always-up-to-date-docker/README.md",logo:"https://pyrasis.com/assets/images/pyrasis.png",background:"rgba(31,41,55,0.2)"})),null,16),s("nav",_,[s("ul",null,[s("li",null,[n(e,{to:"#"},{default:l(()=>[a(">")]),_:1})]),s("li",null,[n(e,{to:"#-1"},{default:l(()=>[a("<")]),_:1})]),s("li",null,[n(e,{to:"#-2"},{default:l(()=>[a(">>")]),_:1})]),s("li",null,[n(e,{to:"#_2"},{default:l(()=>[a("2>")]),_:1})]),s("li",null,[n(e,{to:"#_2-1"},{default:l(()=>[a("2>>")]),_:1})]),s("li",null,[n(e,{to:"#-3"},{default:l(()=>[a("&>")]),_:1})]),s("li",null,[n(e,{to:"#_1-2"},{default:l(()=>[a("1>&2")]),_:1})]),s("li",null,[n(e,{to:"#_2-1-1"},{default:l(()=>[a("2>&1")]),_:1})]),s("li",null,[n(e,{to:"#-4"},{default:l(()=>[a("|")]),_:1})]),s("li",null,[n(e,{to:"#-5"},{default:l(()=>[a("$")]),_:1})]),s("li",null,[n(e,{to:"#-6"},{default:l(()=>[a("$()")]),_:1})]),s("li",null,[n(e,{to:"#-7"})]),s("li",null,[n(e,{to:"#-8"},{default:l(()=>[a("&&")]),_:1})]),s("li",null,[n(e,{to:"#-9"},{default:l(()=>[a(";")]),_:1})]),s("li",null,[n(e,{to:"#-10"},{default:l(()=>[a("' '")]),_:1})]),s("li",null,[n(e,{to:"#-11"},{default:l(()=>[a('" "')]),_:1})]),s("li",null,[n(e,{to:"#-12"},{default:l(()=>[a(`" ' ' "`)]),_:1})]),s("li",null,[n(e,{to:"#hello"},{default:l(()=>[a("\\$hello")]),_:1})]),s("li",null,[n(e,{to:"#-13"},{default:l(()=>[a("${}")]),_:1})]),s("li",null,[n(e,{to:"#-14"},{default:l(()=>[a("\\")]),_:1})]),s("li",null,[n(e,{to:"#_1-10"},{default:l(()=>[a("{1..10}")]),_:1})]),s("li",null,[n(e,{to:"#문자열1-문자열2"},{default:l(()=>[a("{문자열1,문자열2}")]),_:1})]),s("li",null,[n(e,{to:"#if"},{default:l(()=>[a("if")]),_:1}),s("ul",null,[s("li",null,[n(e,{to:"#숫자-비교"},{default:l(()=>[a("숫자 비교")]),_:1})]),s("li",null,[n(e,{to:"#문자열-비교"},{default:l(()=>[a("문자열 비교")]),_:1})])])]),s("li",null,[n(e,{to:"#for"},{default:l(()=>[a("for")]),_:1})]),s("li",null,[n(e,{to:"#while"},{default:l(()=>[a("while")]),_:1})]),s("li",null,[n(e,{to:"#-15"},{default:l(()=>[a("<<<")]),_:1})]),s("li",null,[n(e,{to:"#eof-eof"},{default:l(()=>[a("<<EOF ... EOF")]),_:1})]),s("li",null,[n(e,{to:"#export"},{default:l(()=>[a("export")]),_:1})]),s("li",null,[n(e,{to:"#printf"},{default:l(()=>[a("printf")]),_:1})]),s("li",null,[n(e,{to:"#sed"},{default:l(()=>[a("sed")]),_:1})]),s("li",null,[n(e,{to:"#-16"},{default:l(()=>[a("#")]),_:1})])])]),y,n(d,{name:"04. Docker 이미지 생성하기",desc:"언제나 최신 Docker",url:"https://pyrasis.com/jHLsAlwaysUpToDateDocker/Unit04",logo:"https://pyrasis.com/assets/images/pyrasis.png",preview:"https://pyrasis.com/assets/images/profile1.png"}),x,s("p",null,[q,a("안에 문자열을 여러 개 지정하여 명령 실행 횟수를 줄입니다. 다음은 "),n(t,{icon:"fas fa-file-lines"}),$,a(", "),n(t,{icon:"fas fa-file-lines"}),w,a(" 두 파일을 한번에 "),n(t,{icon:"fas fa-folder-open"}),j,a(" 디렉터리 아래에 복사합니다.")]),L,s("p",null,[a("텍스트 파일에서 문자열을 변경합니다. "),n(t,{icon:"fas fa-file-lines"}),E,a(" 파일의 내용 중에서 "),H,a("라는 문자열을 찾아서 "),O,a(" 문자열로 바꾸려면 다음과 같이 실행합니다.")]),S])}const R=r(k,[["render",U],["__file","04A.html.vue"]]),B=JSON.parse(`{"path":"/docker/always-up-to-date-docker/04A.html","title":"04A. Bash 익히기","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"04A. Bash 익히기","description":"언제나 최신 Docker > 04A. Bash 익히기","category":["DevOps","Docker"],"tag":["crashcourse","pyrasis.com","docker","devops"],"head":[[{"meta":null},{"property":"og:title","content":"언제나 최신 Docker > 04A. Bash 익히기"},{"property":"og:description","content":"04A. Bash 익히기"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/docker/always-up-to-date-docker/04A.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/docker/always-up-to-date-docker/04A.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"04A. Bash 익히기"}],["meta",{"property":"og:description","content":"언제나 최신 Docker > 04A. Bash 익히기"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pyrasis.com/assets/images/profile1.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://pyrasis.com/assets/images/profile1.png"}],["meta",{"name":"twitter:image:alt","content":"04A. Bash 익히기"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"pyrasis.com"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:published_time","content":"2022-10-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"04A. Bash 익히기\\",\\"image\\":[\\"https://pyrasis.com/assets/images/profile1.png\\"],\\"datePublished\\":\\"2022-10-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]],"date":"2022-10-03T00:00:00.000Z","isOriginal":false,"cover":"https://pyrasis.com/assets/images/profile1.png"},"headers":[{"level":2,"title":">","slug":"","link":"#","children":[]},{"level":2,"title":"<","slug":"-1","link":"#-1","children":[]},{"level":2,"title":">>","slug":"-2","link":"#-2","children":[]},{"level":2,"title":"2>","slug":"_2","link":"#_2","children":[]},{"level":2,"title":"2>>","slug":"_2-1","link":"#_2-1","children":[]},{"level":2,"title":"&>","slug":"-3","link":"#-3","children":[]},{"level":2,"title":"1>&2","slug":"_1-2","link":"#_1-2","children":[]},{"level":2,"title":"2>&1","slug":"_2-1-1","link":"#_2-1-1","children":[]},{"level":2,"title":"|","slug":"-4","link":"#-4","children":[]},{"level":2,"title":"$","slug":"-5","link":"#-5","children":[]},{"level":2,"title":"$()","slug":"-6","link":"#-6","children":[]},{"level":2,"title":"","slug":"-7","link":"#-7","children":[]},{"level":2,"title":"&&","slug":"-8","link":"#-8","children":[]},{"level":2,"title":";","slug":"-9","link":"#-9","children":[]},{"level":2,"title":"' '","slug":"-10","link":"#-10","children":[]},{"level":2,"title":"\\" \\"","slug":"-11","link":"#-11","children":[]},{"level":2,"title":"\\" ' ' \\"","slug":"-12","link":"#-12","children":[]},{"level":2,"title":"\\\\$hello","slug":"hello","link":"#hello","children":[]},{"level":2,"title":"\${}","slug":"-13","link":"#-13","children":[]},{"level":2,"title":"\\\\","slug":"-14","link":"#-14","children":[]},{"level":2,"title":"{1..10}","slug":"_1-10","link":"#_1-10","children":[]},{"level":2,"title":"{문자열1,문자열2}","slug":"문자열1-문자열2","link":"#문자열1-문자열2","children":[]},{"level":2,"title":"if","slug":"if","link":"#if","children":[{"level":3,"title":"숫자 비교","slug":"숫자-비교","link":"#숫자-비교","children":[]},{"level":3,"title":"문자열 비교","slug":"문자열-비교","link":"#문자열-비교","children":[]}]},{"level":2,"title":"for","slug":"for","link":"#for","children":[]},{"level":2,"title":"while","slug":"while","link":"#while","children":[]},{"level":2,"title":"<<<","slug":"-15","link":"#-15","children":[]},{"level":2,"title":"<<EOF ... EOF","slug":"eof-eof","link":"#eof-eof","children":[]},{"level":2,"title":"export","slug":"export","link":"#export","children":[]},{"level":2,"title":"printf","slug":"printf","link":"#printf","children":[]},{"level":2,"title":"sed","slug":"sed","link":"#sed","children":[]},{"level":2,"title":"#","slug":"-16","link":"#-16","children":[]}],"git":{"createdTime":1716977950000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":3}]},"readingTime":{"minutes":1.97,"words":592},"filePathRelative":"docker/always-up-to-date-docker/04A.md","localizedDate":"2022년 10월 3일","excerpt":"\\n"}`);export{R as comp,B as data};
