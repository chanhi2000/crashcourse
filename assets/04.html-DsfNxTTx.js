import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as n,t as k,b as s,w as i,n as l,g as p,d as e,e as a,r,o as m}from"./app-U_bew1in.js";const w={},g={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},v={class:"table-of-contents"},b=n("hr",null,null,-1),y=n("h2",{id:"loops",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#loops"},[n("span",null,"Loops")])],-1),_=n("p",null,"Loops are one of the things that make computers so utterly brilliant: the ability to repeat some simple task billions of times every second.",-1),x=n("p",null,"Of course, what goes in those loops is down to you: you might be adding some numbers, you might be reading some sensor data, or you might be redrawing the screen 120 times a second. As Craig Bruce said, “it’s hardware that makes a machine fast, but it’s software that makes a fast machine slow.”",-1),q=n("p",null,[n("strong",null,"Today you have eight one-minute videos to watch, and you’ll meet things like for loops, infinite loops, and more."),e(" Once you’ve watched each video and gone through any optional extra reading that interested you, there’s a short test to help make sure you’ve understood what was taught.")],-1),D=n("h3",{id:"_1-for-loops",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-for-loops"},[n("span",null,"1. For loops")])],-1),S={class:"hint-container details"},T=n("summary",null,"1. For loops",-1),j=a(`<p>Swift has a few ways of writing loops, but their underlying mechanism is the same: run some code repeatedly until a condition evaluates as false.</p><p>The most common loop in Swift is a <code>for</code> loop: it will loop over arrays and ranges, and each time the loop goes around it will pull out one item and assign to a constant.</p><p>For example, here’s a range of numbers:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">10</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We can use a for loop to print each item like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">for</span> number <span class="token keyword">in</span> count <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Number is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">number</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can do the same with arrays:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> albums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Red&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;1989&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Reputation&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> album <span class="token keyword">in</span> albums <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">album</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is on Apple Music&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you don’t use the constant that <code>for</code> loops give you, you should use an underscore instead so that Swift doesn’t create needless values:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Players gonna &quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">5</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;play&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),W=a('<div class="hint-container info"><p class="hint-container-title">1. For loops - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-use-underscores-with-loops" target="_blank" rel="noopener noreferrer">Why does Swift use underscores with loops?</a></li><li>Test: <a href="https://hackingwithswift.com/review/for-loops" target="_blank" rel="noopener noreferrer">For loops</a></li></ul></div><h3 id="_2-while-loops" tabindex="-1"><a class="header-anchor" href="#_2-while-loops"><span>2. While loops</span></a></h3>',2),R={class:"hint-container details"},E=n("summary",null,"2. While loops",-1),I=a(`<p>A second way of writing loops is using <code>while</code>: give it a condition to check, and its loop code will go around and around until the condition fails.</p><p>For example, we could use a <code>while</code> loop to simulate a child counting in a game of hide and seek: we start at one, count up to and including 20 while printing each number out, then after the loop print “Ready or not”.</p><p>Here’s how that looks in Swift:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">while</span> number <span class="token operator">&lt;=</span> <span class="token number">20</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span></span>
<span class="line">    number <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Ready or not, here I come!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),L=a('<div class="hint-container info"><p class="hint-container-title">2. While loops - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-should-you-use-a-while-loop" target="_blank" rel="noopener noreferrer">When should you use a while loop?</a></li><li>Test: <a href="https://hackingwithswift.com/review/while-loops" target="_blank" rel="noopener noreferrer">While loops</a></li></ul></div><h3 id="_3-repeat-loops" tabindex="-1"><a class="header-anchor" href="#_3-repeat-loops"><span>3. Repeat loops</span></a></h3>',2),A={class:"hint-container details"},O=n("summary",null,"3. Repeat loops",-1),F=a(`<p>The third way of writing loops is not commonly used, but it’s so simple to learn we might as well cover it: it’s called the <code>repeat</code> loop, and it’s identical to a <code>while</code> loop except the condition to check comes at the end.</p><p>So, we could rewrite our hide and seek example like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">repeat</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span></span>
<span class="line">    number <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">while</span> number <span class="token operator">&lt;=</span> <span class="token number">20</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Ready or not, here I come!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Because the condition comes at the end of the <code>repeat</code> loop the code inside the loop will always be executed at least once, whereas <code>while</code> loops check their condition before their first run.</p><p>For example, this <code>print()</code> function will never be run, because false is always <code>false</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">while</span> <span class="token boolean">false</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;This is false&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Xcode will even warn us that the <code>print()</code> line will never be executed.</p><p>On the other hand, this <code>print()</code> function will be run once, because <code>repeat</code> only fails the condition after the loop runs:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">repeat</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;This is false&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),V=a('<div class="hint-container info"><p class="hint-container-title">3. Repeat loops - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-should-you-use-a-repeat-loop" target="_blank" rel="noopener noreferrer">When should you use a repeat loop?</a></li><li>Test: <a href="https://hackingwithswift.com/review/repeat-loops" target="_blank" rel="noopener noreferrer">Repeat loops</a></li></ul></div><h3 id="_4-exiting-loops" tabindex="-1"><a class="header-anchor" href="#_4-exiting-loops"><span>4. Exiting loops</span></a></h3>',2),C={class:"hint-container details"},P=n("summary",null,"4. Exiting loops",-1),B=a(`<p>You can exit a loop at any time using the <code>break</code> keyword. To try this out, let’s start with a regular <code>while</code> loop that counts down for a rocket launch:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> countDown <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">while</span> countDown <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>countDown<span class="token punctuation">)</span></span>
<span class="line">    countDown <span class="token operator">-=</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Blast off!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this case, the astronaut in command gets bored part-way through the countdown and decides to skip the remainder and launch straight away:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">while</span> countDown <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>countDown<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> countDown <span class="token operator">==</span> <span class="token number">4</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I&#39;m bored. Let&#39;s go now!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">break</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    countDown <span class="token operator">-=</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With that change, as soon as <code>countDown</code> reaches 4 the astronaut’s message will be printed, and the rest of the loop gets skipped.</p>`,5),J=a('<div class="hint-container info"><p class="hint-container-title">4. Exiting loops - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-would-you-want-to-exit-a-loop" target="_blank" rel="noopener noreferrer">Why would you want to exit a loop?</a></li><li>Test: <a href="https://hackingwithswift.com/review/exiting-loops" target="_blank" rel="noopener noreferrer">Exiting loops</a></li></ul></div><h3 id="_5-exiting-multiple-loops" tabindex="-1"><a class="header-anchor" href="#_5-exiting-multiple-loops"><span>5. Exiting multiple loops</span></a></h3>',2),Y={class:"hint-container details"},N=n("summary",null,"5. Exiting multiple loops",-1),K=a(`<p>If you put a loop inside a loop it’s called a nested loop, and it’s not uncommon to want to break out of both the inner loop and the outer loop at the same time.</p><p>As an example, we could write some code to calculate the times tables from 1 through 10 like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">10</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">10</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> product <span class="token operator">=</span> i <span class="token operator">*</span> j</span>
<span class="line">        <span class="token function">print</span> <span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> * </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">j</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">product</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If we wanted to exit part-way through we need to do two things. First, we give the outside loop a label, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token label important">outerLoop</span><span class="token punctuation">:</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">10</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">10</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> product <span class="token operator">=</span> i <span class="token operator">*</span> j</span>
<span class="line">        <span class="token function">print</span> <span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> * </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">j</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">product</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Second, add our condition inside the inner loop, then use <code>break outerLoop</code> to exit both loops at the same time:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token label important">outerLoop</span><span class="token punctuation">:</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">10</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">10</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> product <span class="token operator">=</span> i <span class="token operator">*</span> j</span>
<span class="line">        <span class="token function">print</span> <span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> * </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">j</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">product</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> product <span class="token operator">==</span> <span class="token number">50</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;It&#39;s a bullseye!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">break</span><span class="token label important"> outerLoop</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With a regular <code>break</code>, only the inner loop would be exited – the outer loop would continue where it left off.</p>`,8),X=a('<div class="hint-container info"><p class="hint-container-title">5. Exiting multiple loops - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-have-labeled-statements" target="_blank" rel="noopener noreferrer">Why does Swift have labeled statements?</a></li><li>Test: <a href="https://hackingwithswift.com/review/exiting-multiple-loops" target="_blank" rel="noopener noreferrer">Exiting multiple loops</a></li></ul></div><h3 id="_6-skipping-items" tabindex="-1"><a class="header-anchor" href="#_6-skipping-items"><span>6. Skipping items</span></a></h3>',2),Q={class:"hint-container details"},Z=n("summary",null,"6. Skipping items",-1),z=a(`<p>As you’ve seen, the <code>break</code> keyword exits a loop. But if you just want to skip the current item and continue on to the next one, you should use <code>continue</code> instead.</p><p>To try this out, we can write a loop from 1 through 10, then use Swift’s remainder operator to skip any numbers that are odd:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">10</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">continue</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Remember, the remainder operator figures out how many times 2 fits into each number in our loop, then returns whatever is left over. So, if 1 is left over, it means the number is odd, so we can use <code>continue</code> to skip it.</p>`,4),M=a('<div class="hint-container info"><p class="hint-container-title">6. Skipping items - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-to-use-break-and-when-to-use-continue" target="_blank" rel="noopener noreferrer">When to use break and when to use continue</a></li><li>Test: <a href="https://hackingwithswift.com/review/skipping-items" target="_blank" rel="noopener noreferrer">Skipping items</a></li></ul></div><h3 id="_7-infinite-loops" tabindex="-1"><a class="header-anchor" href="#_7-infinite-loops"><span>7. Infinite loops</span></a></h3>',2),H={class:"hint-container details"},U=n("summary",null,"7. Infinite loops",-1),$=a(`<p>It’s common to use <code>while</code> loops to make infinite loops: loops that either have no end or only end when you’re ready. All apps on your iPhone use infinite loops, because they start running, then continually watch for events until you choose to quit them.</p><p>To make an infinite loop, just use <code>true</code> as your condition. <code>true</code> is always true, so the loop will repeat forever. <strong>Warning</strong>: Please make sure you have a check that exits your loop, otherwise it will never end.</p><p>As an example, we’re going to use <code>while true</code> to print the music of John Cage’s piece 4’33” – if you didn’t know, it’s famous because it’s 4 minutes and 33 seconds of complete silence.</p><p>We can write the “music” for this piece using <code>while true</code>, with a condition that exits the loop when we’ve gone around enough times:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">while</span> <span class="token boolean">true</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot; &quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    counter <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> counter <span class="token operator">==</span> <span class="token number">273</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">break</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),G=a('<div class="hint-container info"><p class="hint-container-title">7. Infinite loops - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-would-you-want-to-make-an-infinite-loop" target="_blank" rel="noopener noreferrer">Why would you want to make an infinite loop?</a></li><li>Test: <a href="https://hackingwithswift.com/review/infinite-loops" target="_blank" rel="noopener noreferrer">Infinite loops</a></li></ul></div><h3 id="_8-looping-summary" tabindex="-1"><a class="header-anchor" href="#_8-looping-summary"><span>8. Looping summary</span></a></h3>',2),nn={class:"hint-container details"},sn=n("summary",null,"8. Looping summary",-1),an=a("<p>You’ve made it to the end of the fourth part of this series, so let’s summarize:</p><ol><li>Loops let us repeat code until a condition is false.</li><li>The most common loop is <code>for</code>, which assigns each item inside the loop to a temporary constant.</li><li>If you don’t need the temporary constant that <code>for</code> loops give you, use an underscore instead so Swift can skip that work.</li><li>There are <code>while</code> loops, which you provide with an explicit condition to check.</li><li>Although they are similar to <code>while</code> loops, <code>repeat</code> loops always run the body of their loop at least once.</li><li>You can exit a single loop using <code>break</code>, but if you have nested loops you need to use <code>break</code> followed by whatever label you placed before your outer loop.</li><li>You can skip items in a loop using <code>continue</code>.</li><li>Infinite loops don’t end until you ask them to, and are made using <code>while true</code>. Make sure you have a condition somewhere to end your infinite loops!</li></ol>",2),en=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"8. Looping summary - Additional"),n("ul",null,[n("li",null,[e("Test: "),n("a",{href:"https://hackingwithswift.com/review/looping-summary",target:"_blank",rel:"noopener noreferrer"},"Looping")])])],-1),tn=n("hr",null,null,-1);function on(u,ln){const t=r("router-link"),o=r("VPCard"),c=r("VidStack");return m(),h("div",null,[n("h1",g,[n("a",f,[n("span",null,k(u.$frontmatter.title)+" 관련",1)])]),n("nav",v,[n("ul",null,[n("li",null,[s(t,{to:"#loops"},{default:i(()=>[e("Loops")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#_1-for-loops"},{default:i(()=>[e("1. For loops")]),_:1})]),n("li",null,[s(t,{to:"#_2-while-loops"},{default:i(()=>[e("2. While loops")]),_:1})]),n("li",null,[s(t,{to:"#_3-repeat-loops"},{default:i(()=>[e("3. Repeat loops")]),_:1})]),n("li",null,[s(t,{to:"#_4-exiting-loops"},{default:i(()=>[e("4. Exiting loops")]),_:1})]),n("li",null,[s(t,{to:"#_5-exiting-multiple-loops"},{default:i(()=>[e("5. Exiting multiple loops")]),_:1})]),n("li",null,[s(t,{to:"#_6-skipping-items"},{default:i(()=>[e("6. Skipping items")]),_:1})]),n("li",null,[s(t,{to:"#_7-infinite-loops"},{default:i(()=>[e("7. Infinite loops")]),_:1})]),n("li",null,[s(t,{to:"#_8-looping-summary"},{default:i(()=>[e("8. Looping summary")]),_:1})])])])])]),b,s(o,l(p({title:"100 Days of Swift - Day 4",desc:"Loops",link:"https://www.hackingwithswift.com/100/4",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),y,_,x,q,D,n("details",S,[T,s(o,l(p({title:"100 Days of Swift - Day 4 - 1. For loops",desc:"1. For loops",link:"https://hackingwithswift.com/sixty/4/1/for-loops",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(c,{src:"youtube/3bJYE8WRTZ8"}),j]),W,n("details",R,[E,s(o,l(p({title:"100 Days of Swift - Day 4 - 2. While loops",desc:"2. While loops",link:"https://hackingwithswift.com/sixty/4/2/while-loops",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(c,{src:"youtube/JJba9ssT4Xk"}),I]),L,n("details",A,[O,s(o,l(p({title:"100 Days of Swift - Day 4 - 3. Repeat loops",desc:"3. Repeat loops ",link:"https://hackingwithswift.com/sixty/4/3/repeat-loops",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(c,{src:"youtube/ROnXl0H45KE"}),F]),V,n("details",C,[P,s(o,l(p({title:"100 Days of Swift - Day 4 - 4. Exiting loops",desc:"4. Exiting loops",link:"https://hackingwithswift.com/sixty/4/4/exiting-loops",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(c,{src:"youtube/ln58SnVpTOg"}),B]),J,n("details",Y,[N,s(o,l(p({title:"100 Days of Swift - Day 4 - 5. Exiting multiple loops",desc:"5. Exiting multiple loops",link:"https://hackingwithswift.com/sixty/4/5/exiting-multiple-loops",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(c,{src:"youtube/cdesW0tdKQU"}),K]),X,n("details",Q,[Z,s(o,l(p({title:"100 Days of Swift - Day 4 - 6. Skipping items",desc:"6. Skipping items",link:"https://hackingwithswift.com/sixty/4/6/skipping-items",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(c,{src:"youtube/EQQ2Ql7-CvI"}),z]),M,n("details",H,[U,s(o,l(p({title:"100 Days of Swift - Day 4 - 7. Infinite loops",desc:"7. Infinite loops",link:"https://hackingwithswift.com/sixty/4/7/infinite-loops",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(c,{src:"youtube/5-lJsWsYXSs"}),$]),G,n("details",nn,[sn,s(o,l(p({title:"100 Days of Swift - Day 4 - 8. Looping summary",desc:"8. Looping summary",link:"https://hackingwithswift.com/sixty/4/8/looping-summary",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(c,{src:"youtube/5-lJsWsYXSs"}),an]),en,tn])}const rn=d(w,[["render",on],["__file","04.html.vue"]]),un=JSON.parse('{"path":"/swift/100-days-of-swift/04.html","title":"Day 04","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 04","description":"100 Days of Swift > Day 04","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of Swift > Day 04"},{"property":"og:description","content":"Day 04"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swift/04.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swift/04.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 04"}],["meta",{"property":"og:description","content":"100 Days of Swift > Day 04"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 04\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Loops","slug":"loops","link":"#loops","children":[{"level":3,"title":"1. For loops","slug":"_1-for-loops","link":"#_1-for-loops","children":[]},{"level":3,"title":"2. While loops","slug":"_2-while-loops","link":"#_2-while-loops","children":[]},{"level":3,"title":"3. Repeat loops","slug":"_3-repeat-loops","link":"#_3-repeat-loops","children":[]},{"level":3,"title":"4. Exiting loops","slug":"_4-exiting-loops","link":"#_4-exiting-loops","children":[]},{"level":3,"title":"5. Exiting multiple loops","slug":"_5-exiting-multiple-loops","link":"#_5-exiting-multiple-loops","children":[]},{"level":3,"title":"6. Skipping items","slug":"_6-skipping-items","link":"#_6-skipping-items","children":[]},{"level":3,"title":"7. Infinite loops","slug":"_7-infinite-loops","link":"#_7-infinite-loops","children":[]},{"level":3,"title":"8. Looping summary","slug":"_8-looping-summary","link":"#_8-looping-summary","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":9}]},"readingTime":{"minutes":6.96,"words":2089},"filePathRelative":"swift/100-days-of-swift/04.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{rn as comp,un as data};
