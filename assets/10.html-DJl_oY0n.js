import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,a as n,t as k,b as s,w as o,n as i,g as p,e as a,r,o as h,d as l}from"./app-U_bew1in.js";const w={},v={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},f=n("hr",null,null,-1),b=a('<h2 id="structs-part-one" tabindex="-1"><a class="header-anchor" href="#structs-part-one"><span>Structs, part one</span></a></h2><p>I know some of you might be keen to charge on with today’s new Swift learning, but hold up: you just finished learning about closures, which are a difficult topic. <strong>And you came back for more.</strong> Seriously, that deserves a lot of respect.</p><p>And I have some good news for you. First, not only can you avoid thinking about closures for the next few days, but once you’ve had a break we’ll start putting them into practice in real iOS projects. So, even if you aren’t 100% sure of how they work or why they are needed, it will all become clear – stick with it!</p><p>Anyway, today’s topic is <em>structs</em>. Structs are one of the ways Swift lets us create our own data types out of several small types. For example, you might put three strings and a Boolean together and say that represents a user in your app. In fact, most of Swift’s own types are implemented as structs, including <code>String</code>, <code>Int</code>, <code>Bool</code>, <code>Array</code>, and more.</p><p>These custom types – users, games, documents, and more – form the real core of the software we build. If you get <em>those</em> right then often your code will follow.</p><p>As Fred Brooks, the author of the hugely influential book <em>The Mythical Man-Month</em>, once said, “the programmer at wit’s end... can often do best by disentangling themself from their code, rearing back, and contemplating their data. Representation is the essence of programming.”</p><p>What’s more, structs are extremely common in SwiftUI, because every piece of UI we design is built on a struct, with lots of structs inside. They aren’t difficult to learn, but to be fair after closures almost <em>everything</em> seems easier!</p><p><strong>Today you have four tutorials to follow, where you’ll meet custom structs, computed properties, property observers, and more.</strong> Once you’ve watched each video and optionally gone through the extra reading, there are short tests to help make sure you’ve understood what was taught.</p><h3 id="_1-how-to-create-your-own-structs" tabindex="-1"><a class="header-anchor" href="#_1-how-to-create-your-own-structs"><span>1. How to create your own structs</span></a></h3>',9),S={class:"hint-container details"},_=n("summary",null,"1. How to create your own structs",-1),q=a(`<p>Swift’s structs let us create our own custom, complex data types, complete with their own variables and their own functions.</p><p>A simple struct looks like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Album</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> title<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">let</span> artist<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">let</span> year<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">printSummary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">title</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> (</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">year</span><span class="token interpolation-punctuation punctuation">)</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> by </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">artist</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That creates a new type called <code>Album</code>, with two string constants called <code>title</code> and <code>artist</code>, plus an integer constant called <code>year</code>. I also added a simple function that summarizes the values of our three constants.</p><p>Notice how <code>Album</code> starts with a capital A? That’s the standard in Swift, and we’ve been using it all along – think of <code>String</code>, <code>Int</code>, <code>Bool</code>, <code>Set</code>, and so on. When you’re referring to a data type, we use camel case where the first letter is uppercased, but when you’re referring to something inside the type, such as a variable or function, we use camel case where the first letter is lowercased. Remember, for the most part this is only a convention rather than a rule, but it’s a helpful one to stick with.</p><p>At this point, <code>Album</code> is just like <code>String</code> or <code>Int</code> – we can make them, assign values, copy them, and so on. For example, we could make a couple of albums, then print some of their values and call their functions:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> red <span class="token operator">=</span> <span class="token class-name">Album</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Red&quot;</span></span><span class="token punctuation">,</span> artist<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Taylor Swift&quot;</span></span><span class="token punctuation">,</span> year<span class="token punctuation">:</span> <span class="token number">2012</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> wings <span class="token operator">=</span> <span class="token class-name">Album</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Wings&quot;</span></span><span class="token punctuation">,</span> artist<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;BTS&quot;</span></span><span class="token punctuation">,</span> year<span class="token punctuation">:</span> <span class="token number">2016</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>red<span class="token punctuation">.</span>title<span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>wings<span class="token punctuation">.</span>artist<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">red<span class="token punctuation">.</span><span class="token function">printSummary</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">wings<span class="token punctuation">.</span><span class="token function">printSummary</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice how we can create a new <code>Album</code> as if we were calling a function – we just need to provide values for each of the constants in the order they were defined.</p><p>As you can see, both <code>red</code> and <code>wings</code> come from the same <code>Album</code> struct, but once we create them they are separate just like creating two strings.</p><p>You can see this in action when we call <code>printSummary()</code> on each struct, because that function refers to <code>title</code>, <code>artist</code>, and <code>year</code>. In both instances the correct values are printed out for each struct: <code>red</code> prints “Red (2012) by Taylor Swift” and <code>wings</code> prints out “Wings (2016) by BTS” – Swift understands that when <code>printSummary()</code> is called on <code>red</code>, it should use the <code>title</code>, <code>artist</code>, and <code>year</code> constants that also belong to <code>red</code>.</p><p>Where things get more interesting is when you want to have values that can change. For example, we could create an <code>Employee</code> struct that can take vacation as needed:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> vacationRemaining<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">takeVacation</span><span class="token punctuation">(</span>days<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> vacationRemaining <span class="token operator">&gt;</span> days <span class="token punctuation">{</span></span>
<span class="line">            vacationRemaining <span class="token operator">-=</span> days</span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I&#39;m going on vacation!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Days remaining: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">vacationRemaining</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Oops! There aren&#39;t enough days remaining.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, that won’t actually work – Swift will refuse to build the code.</p><p>You see, if we create an employee as a constant using <code>let</code>, Swift makes the employee <em>and all its data</em> constant – we can call functions just fine, but those functions shouldn’t be allowed to change the struct’s data because we made it constant.</p><p>As a result, Swift makes us take an extra step: any functions that only read data are fine as they are, but any that <em>change</em> data belonging to the struct must be marked with a special <code>mutating</code> keyword, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">takeVacation</span><span class="token punctuation">(</span>days<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now our code will build just fine, but Swift will stop us from calling <code>takeVacation()</code> from constant structs.</p><p>In code, this is allowed:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> archer <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Sterling Archer&quot;</span></span><span class="token punctuation">,</span> vacationRemaining<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">)</span></span>
<span class="line">archer<span class="token punctuation">.</span><span class="token function">takeVacation</span><span class="token punctuation">(</span>days<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>archer<span class="token punctuation">.</span>vacationRemaining<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But if you change <code>var archer</code> to <code>let archer</code> you’ll find Swift refuses to build your code again – we’re trying to call a mutating function on a constant struct, which isn’t allowed.</p><p>We’re going to explore structs in detail over the next few chapters, but first I want to give some names to things.</p><ul><li>Variables and constants that belong to structs are called <em>properties</em>.</li><li>Functions that belong to structs are called <em>methods</em>.</li><li>When we create a constant or variable out of a struct, we call that an <em>instance</em> – you might create a dozen unique instances of the <code>Album</code> struct, for example.</li><li>When we create instances of structs we do so using an <em>initializer</em> like this: <code>Album(title: &quot;Wings&quot;, artist: &quot;BTS&quot;, year: 2016)</code>.</li></ul><p>That last one might seem a bit odd at first, because we’re treating our struct like a function and passing in parameters. This is a little bit of what’s called <em>syntactic sugar</em> – Swift silently creates a special function inside the struct called <code>init()</code>, using all the properties of the struct as its parameters. It then automatically treats these two pieces of code as being the same:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> archer1 <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Sterling Archer&quot;</span></span><span class="token punctuation">,</span> vacationRemaining<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">var</span> archer2 <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Sterling Archer&quot;</span></span><span class="token punctuation">,</span> vacationRemaining<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>We actually relied on this behavior previously. Way back when I introduced Double for the first time, I explained that you can’t add an Int and a Double and instead need to write code like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2.0</span></span>
<span class="line"><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> b</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now you can see what’s really happening here: Swift’s own <code>Double</code> type is implemented as a struct, and has an initializer function that accepts an integer.</p><p>Swift is intelligent in the way it generates its initializer, even inserting default values if we assign them to our properties.</p><p>For example, if our struct had these two properties</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"><span class="token keyword">var</span> vacationRemaining <span class="token operator">=</span> <span class="token number">14</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Then Swift will silently generate an initializer with a default value of 14 for <code>vacationRemaining</code>, making both of these valid:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> kane <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Lana Kane&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> poovey <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Pam Poovey&quot;</span></span><span class="token punctuation">,</span> vacationRemaining<span class="token punctuation">:</span> <span class="token number">35</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Tip</strong>: If you assign a default value to a constant property, that will be removed from the initializer entirely. To assign a <em>default</em> but leave open the possibility of overriding it when needed, use a variable property.</p>`,33),x=a('<div class="hint-container info"><p class="hint-container-title">1. How to create your own structs - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/whats-the-difference-between-a-struct-and-a-tuple" target="_blank" rel="noopener noreferrer">What’s the difference between a struct and a tuple?</a></li><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/whats-the-difference-between-a-function-and-a-method" target="_blank" rel="noopener noreferrer">What’s the difference between a function and a method?</a></li><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-do-we-need-to-mark-some-methods-as-mutating" target="_blank" rel="noopener noreferrer">Why do we need to mark some methods as mutating?</a></li><li>Test: <a href="https://hackingwithswift.com/review/sixty/creating-your-own-structs" target="_blank" rel="noopener noreferrer">Structs</a></li><li>Test: <a href="https://hackingwithswift.com/review/sixty/mutating-methods" target="_blank" rel="noopener noreferrer">Mutating methods</a></li></ul></div><h3 id="_2-how-to-compute-property-values-dynamically" tabindex="-1"><a class="header-anchor" href="#_2-how-to-compute-property-values-dynamically"><span>2. How to compute property values dynamically</span></a></h3>',2),I={class:"hint-container details"},T=n("summary",null,"2. How to compute property values dynamically",-1),A=a(`<p>Structs can have two kinds of property: a <em>stored</em> property is a variable or constant that holds a piece of data inside an instance of the struct, and a <em>computed</em> property calculates the value of the property dynamically every time it’s accessed. This means computed properties are a blend of both stored properties and functions: they are accessed like stored properties, but work like functions.</p><p>As an example, previously we had an <code>Employee</code> struct that could track how many days of vacation remained for that employee. Here’s a simplified version:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> vacationRemaining<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> archer <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Sterling Archer&quot;</span></span><span class="token punctuation">,</span> vacationRemaining<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">)</span></span>
<span class="line">archer<span class="token punctuation">.</span>vacationRemaining <span class="token operator">-=</span> <span class="token number">5</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>archer<span class="token punctuation">.</span>vacationRemaining<span class="token punctuation">)</span></span>
<span class="line">archer<span class="token punctuation">.</span>vacationRemaining <span class="token operator">-=</span> <span class="token number">3</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>archer<span class="token punctuation">.</span>vacationRemaining<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That works as a trivial struct, but we’re losing valuable information – we’re assigning this employee 14 days of vacation then subtracting them as days are taken, but in doing so we’ve lost how many days they were originally granted.</p><p>We could adjust this to use computed property, like so:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> vacationAllocated <span class="token operator">=</span> <span class="token number">14</span></span>
<span class="line">    <span class="token keyword">var</span> vacationTaken <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> vacationRemaining<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">        vacationAllocated <span class="token operator">-</span> vacationTaken</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now rather than making <code>vacationRemaining</code> something we can assign to directly, it is instead calculated by subtracting how much vacation they have taken from how much vacation they were allotted.</p><p>When we’re reading from <code>vacationRemaining</code>, it looks like a regular stored property:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> archer <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Sterling Archer&quot;</span></span><span class="token punctuation">,</span> vacationAllocated<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">)</span></span>
<span class="line">archer<span class="token punctuation">.</span>vacationTaken <span class="token operator">+=</span> <span class="token number">4</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>archer<span class="token punctuation">.</span>vacationRemaining<span class="token punctuation">)</span></span>
<span class="line">archer<span class="token punctuation">.</span>vacationTaken <span class="token operator">+=</span> <span class="token number">4</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>archer<span class="token punctuation">.</span>vacationRemaining<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is really powerful stuff: we’re reading what looks like a property, but behind the scenes Swift is running some code to calculate its value every time.</p><p>We can’t <em>write</em> to it, though, because we haven’t told Swift how that should be handled. To fix that, we need to provide both a <em>getter</em> and a <em>setter</em> – fancy names for “code that reads” and “code that writes” respectively.</p><p>In this case the getter is simple enough, because it’s just our existing code. But the <em>setter</em> is more interesting – if you set <code>vacationRemaining</code> for an employee, do you mean that you want their <code>vacationAllocated</code> value to be increased or decreased, or should <code>vacationAllocated</code> stay the same and instead we change <code>vacationTaken</code>?</p><p>I’m going to assume the first of those two is correct, in which case here’s how the property would look:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> vacationRemaining<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">get</span> <span class="token punctuation">{</span></span>
<span class="line">        vacationAllocated <span class="token operator">-</span> vacationTaken</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">set</span> <span class="token punctuation">{</span></span>
<span class="line">        vacationAllocated <span class="token operator">=</span> vacationTaken <span class="token operator">+</span> newValue</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice how <code>get</code> and <code>set</code> mark individual pieces of code to run when reading or writing a value. More importantly, notice <code>newValue</code> – that’s automatically provided to us by Swift, and stores whatever value the user was trying to assign to the property.</p><p>With both a getter and setter in place, we can now modify <code>vacationRemaining</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> archer <span class="token operator">=</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Sterling Archer&quot;</span></span><span class="token punctuation">,</span> vacationAllocated<span class="token punctuation">:</span> <span class="token number">14</span><span class="token punctuation">)</span></span>
<span class="line">archer<span class="token punctuation">.</span>vacationTaken <span class="token operator">+=</span> <span class="token number">4</span></span>
<span class="line">archer<span class="token punctuation">.</span>vacationRemaining <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>archer<span class="token punctuation">.</span>vacationAllocated<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SwiftUI uses computed properties extensively – you’ll see them in the very first project you create!</p>`,18),z=a('<div class="hint-container info"><p class="hint-container-title">2. How to compute property values dynamically - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-should-you-use-a-computed-property-or-a-stored-property" target="_blank" rel="noopener noreferrer">When should you use a computed property or a stored property?</a></li><li>Test: <a href="https://hackingwithswift.com/review/sixty/computed-properties" target="_blank" rel="noopener noreferrer">Computed properties</a></li></ul></div><h3 id="_3-how-to-take-action-when-a-property-changes" tabindex="-1"><a class="header-anchor" href="#_3-how-to-take-action-when-a-property-changes"><span>3. How to take action when a property changes</span></a></h3>',2),R={class:"hint-container details"},H=n("summary",null,"3. How to take action when a property changes",-1),j=a(`<p>Swift lets us create <em>property observers</em>, which are special pieces of code that run when properties change. These take two forms: a <code>didSet</code> observer to run when the property just changed, and a <code>willSet</code> observer to run <em>before</em> the property changed.</p><p>To see why property observers might be needed, think about code like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> game <span class="token operator">=</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">game<span class="token punctuation">.</span>score <span class="token operator">+=</span> <span class="token number">10</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Score is now </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">game<span class="token punctuation">.</span>score</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">game<span class="token punctuation">.</span>score <span class="token operator">-=</span> <span class="token number">3</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Score is now </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">game<span class="token punctuation">.</span>score</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">game<span class="token punctuation">.</span>score <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That creates a <code>Game</code> struct, and modifies its score a few times. Each time the score changes, a <code>print()</code> line follows it so we can keep track of the changes. Except there’s a bug: at the end the score changed <em>without</em> being printed, which is a mistake.</p><p>With property observers we can solve this problem by attaching the <code>print()</code> call directly to the property using <code>didSet</code>, so that whenever it changes – wherever it changes – we will always run some code.</p><p>Here’s that same example, now with a property observer in place:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">didSet</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Score is now </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">score</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> game <span class="token operator">=</span> <span class="token class-name">Game</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">game<span class="token punctuation">.</span>score <span class="token operator">+=</span> <span class="token number">10</span></span>
<span class="line">game<span class="token punctuation">.</span>score <span class="token operator">-=</span> <span class="token number">3</span></span>
<span class="line">game<span class="token punctuation">.</span>score <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you want it, Swift automatically provides the constant <code>oldValue</code> inside <code>didSet</code>, in case you need to have custom functionality based on what you were changing from. There’s also a <code>willSet</code> variant that runs some code <em>before</em> the property changes, which in turn provides the new value that will be assigned in case you want to take different action based on that.</p><p>We can demonstrate all this functionality in action using one code sample, which will print messages as the values change so you can see the flow when the code is run:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">App</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> contacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">willSet</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Current value is: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">contacts</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;New value will be: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">newValue</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">didSet</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;There are now </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">contacts<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> contacts.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Old value was </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">oldValue</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token class-name">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">app<span class="token punctuation">.</span>contacts<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Adrian E&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">app<span class="token punctuation">.</span>contacts<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Allen W&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">app<span class="token punctuation">.</span>contacts<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Ish S&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Yes, appending to an array will trigger both <code>willSet</code> and <code>didSet</code>, so that code will print lots of text when run.</p><p>In practice, <code>willSet</code> is used much less than <code>didSet</code>, but you might still see it from time to time so it’s important you know it exists. Regardless of which you choose, please try to avoid putting too much work into property observers – if something that looks trivial such as <code>game.score += 1</code> triggers intensive work, it will catch you out on a regular basis and cause all sorts of performance problems.</p>`,12),D=a('<div class="hint-container info"><p class="hint-container-title">3. How to take action when a property changes - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-should-you-use-property-observers" target="_blank" rel="noopener noreferrer">When should you use property observers?</a></li><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-should-you-use-willset-rather-than-didset" target="_blank" rel="noopener noreferrer">When should you use <code>willSet</code> rather than <code>didSet</code>?</a></li><li>Test: <a href="https://hackingwithswift.com/review/sixty/property-observers" target="_blank" rel="noopener noreferrer">Property observers</a></li></ul></div><h3 id="_4-how-to-create-custom-initializers" tabindex="-1"><a class="header-anchor" href="#_4-how-to-create-custom-initializers"><span>4. How to create custom initializers</span></a></h3>',2),W={class:"hint-container details"},E=n("summary",null,"4. How to create custom initializers",-1),V=a(`<p>Initializers are specialized methods that are designed to prepare a new struct instance to be used. You’ve already seen how Swift silently generates one for us based on the properties we place inside a struct, but you can also create your own as long as you follow one golden rule: all properties must have a value by the time the initializer ends.</p><p>Let’s start by looking again at Swift’s default initializer for structs:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">let</span> number<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> player <span class="token operator">=</span> <span class="token class-name">Player</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Megan R&quot;</span></span><span class="token punctuation">,</span> number<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That creates a new <code>Player</code> instance by providing values for its two properties. Swift calls this the <em>memberwise initializer</em>, which is a fancy way of saying an initializer that accepts each property in the order it was defined.</p><p>Like I said, this kind of code is possible because Swift silently generates an initializer accepting those two values, but we could write our own to do the same thing. The only catch here is that you must be careful to distinguish between the names of parameters coming in and the names of properties being assigned.</p><p>Here’s how that would look:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">let</span> number<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> number<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>number <span class="token operator">=</span> number</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That works the same as our previous code, except now the initializer is owned by us so we can add extra functionality there if needed.</p><p>However, there are a couple of things I want you to notice:</p><ol><li>There is no <code>func</code> keyword. Yes, this looks like a function in terms of its syntax, but Swift treats initializers specially.</li><li>Even though this creates a new <code>Player</code> instance, initializers never explicitly have a return type – they always return the type of data they belong to.</li><li>I’ve used <code>self</code> to assign parameters to properties to clarify we mean “assign the <code>name</code> parameter to my <code>name</code> property”.</li></ol><p>That last point is particularly important, because without <code>self</code> we’d have <code>name = name</code> and that doesn’t make sense – are we assigning the property to the parameter, assigning the parameter to itself, or something else? By writing <code>self.name</code> we’re clarifying we mean “the <code>name</code> property that belongs to my current instance,” as opposed to anything else.</p><p>Of course, our custom initializers don’t need to work like the default memberwise initializer Swift provides us with. For example, we could say that you must provide a player name, but the shirt number is randomized:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">let</span> number<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        number <span class="token operator">=</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">99</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> player <span class="token operator">=</span> <span class="token class-name">Player</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Megan R&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>player<span class="token punctuation">.</span>number<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Just remember the golden rule: all properties must have a value by the time the initializer ends. If we had <em>not</em> provided a value for <code>number</code> inside the initializer, Swift would refuse to build our code.</p><p><strong>Important</strong>: Although you can call other methods of your struct inside your initializer, you <em>can’t</em> do so before assigning values to all your properties – Swift needs to be sure everything is safe before doing anything else.</p><p>You can add multiple initializers to your structs if you want, as well as leveraging features such as external parameter names and default values. However, as soon as you implement your own custom initializers you’ll lose access to Swift’s generated memberwise initializer unless you take extra steps to retain it. This isn’t an accident: if you have a custom initializer, Swift effectively assumes that’s because you have some special way to initialize your properties, which means the default one should no longer be available.</p>`,16),P=a('<div class="hint-container info"><p class="hint-container-title">4. How to create custom initializers - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/how-do-swifts-memberwise-initializers-work" target="_blank" rel="noopener noreferrer">How do Swift’s memberwise initializers work?</a></li><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-would-you-use-self-in-a-method" target="_blank" rel="noopener noreferrer">When would you use self in a method?</a></li><li>Test: <a href="https://hackingwithswift.com/review/sixty/initializers" target="_blank" rel="noopener noreferrer">Initializers</a></li><li>Test: <a href="https://hackingwithswift.com/review/sixty/referring-to-the-current-instance" target="_blank" rel="noopener noreferrer">Referring to the current instance</a></li></ul></div><hr>',2);function O(u,U){const e=r("router-link"),t=r("VPCard"),c=r("VidStack");return h(),m("div",null,[n("h1",v,[n("a",g,[n("span",null,k(u.$frontmatter.title)+" 관련",1)])]),n("nav",y,[n("ul",null,[n("li",null,[s(e,{to:"#structs-part-one"},{default:o(()=>[l("Structs, part one")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#_1-how-to-create-your-own-structs"},{default:o(()=>[l("1. How to create your own structs")]),_:1})]),n("li",null,[s(e,{to:"#_2-how-to-compute-property-values-dynamically"},{default:o(()=>[l("2. How to compute property values dynamically")]),_:1})]),n("li",null,[s(e,{to:"#_3-how-to-take-action-when-a-property-changes"},{default:o(()=>[l("3. How to take action when a property changes")]),_:1})]),n("li",null,[s(e,{to:"#_4-how-to-create-custom-initializers"},{default:o(()=>[l("4. How to create custom initializers")]),_:1})])])])])]),f,s(t,i(p({title:"100 Days of SwiftUI - Day 10",desc:"Structs, part one",link:"https://www.hackingwithswift.com/100/swiftui/10",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,n("details",S,[_,s(t,i(p({title:"100 Days of SwiftUI - Day 10 - 1. How to create your own structs",desc:"1. How to create your own structs",link:"https://hackingwithswift.com/quick-start/beginners/how-to-create-your-own-structs",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/v62IOA-eLsE"}),q]),x,n("details",I,[T,s(t,i(p({title:"100 Days of SwiftUI - Day 10 - 2. How to compute property values dynamically",desc:"2. How to compute property values dynamically",link:"https://hackingwithswift.com/quick-start/beginners/how-to-compute-property-values-dynamically",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/UEvKhKviPRw"}),A]),z,n("details",R,[H,s(t,i(p({title:"100 Days of SwiftUI - Day 10 - 3. How to take action when a property changes",desc:"3. How to take action when a property changes",link:"https://hackingwithswift.com/quick-start/beginners/how-to-take-action-when-a-property-changes",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/pfJL8AW8UVQ"}),j]),D,n("details",W,[E,s(t,i(p({title:"100 Days of SwiftUI - Day 10 - 4. How to create custom initializers",desc:"4. How to create custom initializers",link:"https://hackingwithswift.com/quick-start/beginners/how-to-create-custom-initializers",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/KEWAc0vr1LU"}),V]),P])}const F=d(w,[["render",O],["__file","10.html.vue"]]),M=JSON.parse('{"path":"/swift/100-days-of-swiftui/10.html","title":"Day 10","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 10","description":"100 Days of SwiftUI > Day 10","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 10"},{"property":"og:description","content":"Day 10"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/10.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/10.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 10"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 10"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 10\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Structs, part one","slug":"structs-part-one","link":"#structs-part-one","children":[{"level":3,"title":"1. How to create your own structs","slug":"_1-how-to-create-your-own-structs","link":"#_1-how-to-create-your-own-structs","children":[]},{"level":3,"title":"2. How to compute property values dynamically","slug":"_2-how-to-compute-property-values-dynamically","link":"#_2-how-to-compute-property-values-dynamically","children":[]},{"level":3,"title":"3. How to take action when a property changes","slug":"_3-how-to-take-action-when-a-property-changes","link":"#_3-how-to-take-action-when-a-property-changes","children":[]},{"level":3,"title":"4. How to create custom initializers","slug":"_4-how-to-create-custom-initializers","link":"#_4-how-to-create-custom-initializers","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":10}]},"readingTime":{"minutes":11.95,"words":3586},"filePathRelative":"swift/100-days-of-swiftui/10.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{F as comp,M as data};
