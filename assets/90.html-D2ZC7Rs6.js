import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,a as e,t as h,b as n,w as a,n as o,g as i,e as c,r as p,o as m,d as l}from"./app-U_bew1in.js";const g={},k={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"},y=e("hr",null,null,-1),v=e("h2",{id:"milestone-projects-25-27",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#milestone-projects-25-27"},[e("span",null,"Milestone: Projects 25-27")])],-1),b=e("p",null,"Now that the end of the 100 days challenge is finally in sight, I hope you’re finding second wind to press ahead through these last few days. As John Quincy Adams once said, “patience and perseverance have a magical effect before which difficulties disappear and obstacles vanish.”",-1),C=e("p",null,"You’ve definitely shown lots of patience and perseverance because you’ve made it this far, and with just a little more effort you’ll make it to the end. To give you a little boost, this is the first of two consolidation days, both of which will give you lots of fun practice with Core Graphics – you’ll get lots of practice, and perhaps even learn a couple of new things along the way!",-1),x=e("p",null,[e("strong",null,"Today you have three topics to work through, one of which of is your challenge.")],-1),_=e("h3",{id:"what-you-learned",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#what-you-learned"},[e("span",null,"What you learned")])],-1),I={class:"hint-container details"},S=e("summary",null,"What you learned",-1),G=c("<p>All three of the projects in this milestone drew on frameworks outside UIKit: you tried the Multipeer Connectivity framework, Core Motion, and Core Graphics. These all form part of the wider iOS ecosystem, and I hope you’re starting to realize just how far-reaching Apple’s frameworks are – they really have done most of the work for you!</p><p>Let’s recap what you’ve learned in this milestone:</p><ul><li>We covered <code>UIImagePickerController</code> again, and I hope at this point you’re feeling you could almost use it blindfold! That’s OK, though: we learn through repetition, so I’m not afraid to repeat things when it matters.</li><li>We also repeated <code>UICollectionView</code>, and again you should be feeling pretty good about it by now.</li><li>You met the MultipeerConnectivity framework, which is designed for ad-hoc networking. We sent images in project 25, but any kind of data works great – yes, even data that represents custom classes you encoded using <code>Codable</code>.</li><li>We finally used <code>categoryBitMask</code>, <code>contactTestBitMask</code>, and <code>collisionBitMask</code> in all their glory, setting up different kinds of collisions for our ball. Remember, “category” defines what something is, “collision” defines what it should be bounce off, and “contact” defines what collisions you want to be informed on.</li><li>We used <code>CMMotionManager</code> from Core Motion to read the accelerometer. Make sure you call <code>startAccelerometerUpdates()</code> before you try to read the <code>accelerometerData</code> property.</li><li>The <code>#targetEnvironment(simulator)</code> code allowed us to add testing code for using the simulator, while also keeping code to read the accelerometer on devices. Xcode automatically compiles the correct code depending on your build target.</li></ul><p>And then there’s Core Graphics. Project 27 was one of the longest technique projects in all of Hacking with Swift, and with good reason: Core Graphics packed with features, and there are lots of methods and properties you need to learn to make use of it fully.</p><p>Here are some of the Core Graphics things we covered:</p><ul><li>The <code>UIGraphicsImageRenderer</code> is the primary iOS graphics renderer, and can export <code>UIImages</code> just by calling its <code>image()</code> method and providing some drawing code.</li><li>You can get access to the underlying Core Graphics context by reading its <code>cgContext</code> property. This is where most of the interesting functionality is.</li><li>You call <code>setFillColor(),</code> <code>setStrokeColor(),</code> <code>setLineWidth()</code> and such before you do your drawing. Think of Core Graphics like a state machine: set it up as you want, do some drawing, set it up differently, do some more drawing, and so on.</li><li>Because Core Graphics works at a lower level than UIKit, you need to use <code>CGColor</code> rather than <code>UIColor</code>. Yes, the CG is short for “Core Graphics”.</li><li>You learned that you can call <code>translateBy()</code> and <code>rotate(by:)</code> on a Core Graphics context to affect the way it does drawing.</li><li>We tried using <code>move(to:)</code> and <code>addLine(to:)</code> to do custom line drawing. In combination with rotation, this created an interesting effect with very little code.</li><li>We drew attributed strings and a <code>UIImage</code> straight into a Core Graphics context by calling their <code>draw()</code> method.</li></ul><p>Once you get used to Core Graphics, you start to realize that its incredible speed allows you to do procedurally generated graphics for games without too much work. More on that in project 29…</p>",7),U=e("h3",{id:"key-points",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#key-points"},[e("span",null,"Key points")])],-1),T={class:"hint-container details"},j=e("summary",null,"Key points",-1),D=c(`<p>There are two things I’d like to discuss briefly, both extending what you already learned to help push your skills even further.</p><p>First, the <code>#targetEnvironment(simulator)</code> compiler directive. Swift has several of these, and I want to demonstrate two just briefly: <code>#line</code> and <code>#if swift</code>. <code>#line</code> is easy enough: when your code gets built it automatically gets replaced with the current line number. You can also use <code>#filename</code> and <code>#function</code>, and the combination of these are very useful in debugging strings.</p><p>The <code>#if swift</code> directive allows you to conditionally compile code depending on the Swift compiler version being used. So, you could write Swift 4.2 code and Swift 5.0 code in the same file, and have Xcode choose the right version automatically.</p><p>Now why, do you think, might you want such functionality? Well, there are two situations that you’re likely to encounter:</p><ol><li>You create a library that you distribute as Swift source code. Supporting more than one version of Swift helps reduce complexity for your users without breaking their code.</li><li>You want to experiment with a future version of Swift without breaking your existing code. Having both in the same file means you can toggle between them easily enough.</li></ol><p>Here’s some example code to get you started:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token directive property"><span class="token directive-name">#if</span> swift<span class="token punctuation">(</span><span class="token operator">&gt;=</span><span class="token number">5.0</span><span class="token punctuation">)</span></span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Running Swift 5.0 or later&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token directive property"><span class="token directive-name">#else</span></span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Running Swift 4.2&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token directive property"><span class="token directive-name">#endif</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The second thing I’d like to touch on briefly is image rendering. Hacking with Swift is written specifically for the latest and greatest APIs from Apple, because if you’re learning from scratch it’s usually not worth bothering learning older technologies.</p><p>However, the case of image rendering is unique because the old technology – i.e., everything before iOS 10.0 – takes only a minute to learn. So, I want to show you just quickly how to render images before iOS 10, because it’s likely you’ll come across it in the wider world.</p><p>Here’s the iOS 10 and later code we would use to render a circle:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> renderer <span class="token operator">=</span> <span class="token class-name">UIGraphicsImageRenderer</span><span class="token punctuation">(</span>size<span class="token punctuation">:</span> <span class="token class-name">CGSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">512</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> img <span class="token operator">=</span> renderer<span class="token punctuation">.</span>image <span class="token punctuation">{</span> ctx <span class="token keyword">in</span></span>
<span class="line">    ctx<span class="token punctuation">.</span>cgContext<span class="token punctuation">.</span><span class="token function">setFillColor</span><span class="token punctuation">(</span><span class="token class-name">UIColor</span><span class="token punctuation">.</span>red<span class="token punctuation">.</span>cgColor<span class="token punctuation">)</span></span>
<span class="line">    ctx<span class="token punctuation">.</span>cgContext<span class="token punctuation">.</span><span class="token function">setStrokeColor</span><span class="token punctuation">(</span><span class="token class-name">UIColor</span><span class="token punctuation">.</span>green<span class="token punctuation">.</span>cgColor<span class="token punctuation">)</span></span>
<span class="line">    ctx<span class="token punctuation">.</span>cgContext<span class="token punctuation">.</span><span class="token function">setLineWidth</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> rectangle <span class="token operator">=</span> <span class="token class-name">CGRect</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">512</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">512</span><span class="token punctuation">)</span></span>
<span class="line">    ctx<span class="token punctuation">.</span>cgContext<span class="token punctuation">.</span><span class="token function">addEllipse</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> rectangle<span class="token punctuation">)</span></span>
<span class="line">    ctx<span class="token punctuation">.</span>cgContext<span class="token punctuation">.</span><span class="token function">drawPath</span><span class="token punctuation">(</span>using<span class="token punctuation">:</span> <span class="token punctuation">.</span>fillStroke<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To convert that to pre-iOS 10 rendering, you need to learn four new functions:</p><ol><li><code>UIGraphicsBeginImageContextWithOptions()</code>. This starts a new Core Graphics rendering pass. Pass it your size, then a rendering scale, and whether the image should be opaque. If you want to use the current device’s scale, use 0 for the scale parameter.</li><li>Just starting a rendering pass doesn’t give you a context. To do that, you need to use <code>UIGraphicsGetCurrentContext()</code>, which returns a <code>CGContext?</code>. It’s optional because of course Swift doesn’t know we just started a rendering pass.</li><li>Call <code>UIGraphicsGetImageFromCurrentImageContext()</code> when you want to extract a <code>UIImage</code> from your rendering. Again, this returns an optional (in this case <code>UIImage?</code>) because Swift doesn’t know a rendering pass is active.</li><li>Call <code>UIGraphicsEndImageContext()</code> when you’ve finished, to free up the memory from your rendering.</li></ol><p>As you can see, the older calls are a little more flaky: having extra optionality is never welcome, and you need to remember to both start and end your rendering blocks. Still, if you want to give it a try, here’s the same circle rendering code rewritten for iOS 9.3 and earlier:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">UIGraphicsBeginImageContextWithOptions</span><span class="token punctuation">(</span><span class="token class-name">CGSize</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">512</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> ctx <span class="token operator">=</span> <span class="token class-name">UIGraphicsGetCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    ctx<span class="token punctuation">.</span><span class="token function">setFillColor</span><span class="token punctuation">(</span><span class="token class-name">UIColor</span><span class="token punctuation">.</span>red<span class="token punctuation">.</span>cgColor<span class="token punctuation">)</span></span>
<span class="line">    ctx<span class="token punctuation">.</span><span class="token function">setStrokeColor</span><span class="token punctuation">(</span><span class="token class-name">UIColor</span><span class="token punctuation">.</span>green<span class="token punctuation">.</span>cgColor<span class="token punctuation">)</span></span>
<span class="line">    ctx<span class="token punctuation">.</span><span class="token function">setLineWidth</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> rectangle <span class="token operator">=</span> <span class="token class-name">CGRect</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> width<span class="token punctuation">:</span> <span class="token number">502</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">502</span><span class="token punctuation">)</span></span>
<span class="line">    ctx<span class="token punctuation">.</span><span class="token function">addEllipse</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> rectangle<span class="token punctuation">)</span></span>
<span class="line">    ctx<span class="token punctuation">.</span><span class="token function">drawPath</span><span class="token punctuation">(</span>using<span class="token punctuation">:</span> <span class="token punctuation">.</span>fillStroke<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> img <span class="token operator">=</span> <span class="token class-name">UIGraphicsGetImageFromCurrentImageContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// &quot;img&quot; is now a valid UIImage – use it here!</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">UIGraphicsEndImageContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),W=e("h3",{id:"challenge",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#challenge"},[e("span",null,"Challenge")])],-1),P={class:"hint-container details"},M=e("summary",null,"Challenge",-1),A=c("<p>Your challenge for this milestone is to create a meme generation app using <code>UIImagePickerController</code>, <code>UIAlertController</code>, and Core Graphics. If you aren’t familiar with them, memes are a simple format that shows a picture with one line of text overlaid at the top and another overlaid at the bottom.</p><p>Your app should:</p><ul><li>Prompt the user to import a photo from their photo library.</li><li>Show an alert with a text field asking them to insert a line of text for the top of the meme.</li><li>Show a second alert for the bottom of the meme.</li><li>Render their image plus both pieces of text into one finished <code>UIImage</code> using Core Graphics.</li><li>Let them share that result using <code>UIActivityViewController</code>.</li></ul><p>Both the top and bottom pieces of text should be optional; the user doesn’t need to provide them if they don’t want to.</p><p>Try to solve the challenge now. As per usual, there are some hints below in case you hit problems.</p><ol><li>Your UI can be pretty simple: a large image view, with three buttons below: Import Picture, Set Top Text, and Set Bottom Text.</li><li>Both pieces of text can be read in using a <code>UIAlertController</code> with a text field inside.</li><li>When rendering your finished image, make sure you draw your <code>UIImage</code> first, then add the text on top.</li><li><code>NSAttributedString</code> has keys to specify the stroke width and color of text, which would make it more readable – can you experiment to figure it out?</li></ol><p>OK, that’s enough hints – get coding!</p>",7),B=e("div",{class:"hint-container tip"},[e("p",{class:"hint-container-title"},"Note"),e("p",null,"Don’t worry if you don’t complete challenges in the day they were assigned – in future days you’ll find you have some time to spare here and there, so challenges are something you can return back to in the future.")],-1),K=e("hr",null,null,-1);function O(r,R){const s=p("router-link"),t=p("VPCard");return m(),d("div",null,[e("h1",k,[e("a",f,[e("span",null,h(r.$frontmatter.title)+" 관련",1)])]),e("nav",w,[e("ul",null,[e("li",null,[n(s,{to:"#milestone-projects-25-27"},{default:a(()=>[l("Milestone: Projects 25-27")]),_:1}),e("ul",null,[e("li",null,[n(s,{to:"#what-you-learned"},{default:a(()=>[l("What you learned")]),_:1})]),e("li",null,[n(s,{to:"#key-points"},{default:a(()=>[l("Key points")]),_:1})]),e("li",null,[n(s,{to:"#challenge"},{default:a(()=>[l("Challenge")]),_:1})])])])])]),y,n(t,o(i({title:"100 Days of Swift - Day 90",desc:"Milestone - Projects 25-27",link:"https://www.hackingwithswift.com/100/90",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),v,b,C,x,_,e("details",I,[S,n(t,o(i({title:"100 Days of Swift - Day 90 - What you learned",desc:"What you learned",link:"https://www.hackingwithswift.com/guide/10/1/what-you-learned",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),G]),U,e("details",T,[j,n(t,o(i({title:"100 Days of Swift - Day 90 - Key points",desc:"Key points",link:"https://www.hackingwithswift.com/guide/10/2/key-points",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),D]),W,e("details",P,[M,n(t,o(i({title:"100 Days of Swift - Day 90 - Challenge",desc:"Challenge",link:"https://www.hackingwithswift.com/guide/10/3/challenge",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),A]),B,K])}const N=u(g,[["render",O],["__file","90.html.vue"]]),z=JSON.parse('{"path":"/swift/100-days-of-swift/90.html","title":"Day 90","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 90","description":"100 Days of Swift > Day 90","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of Swift > Day 90"},{"property":"og:description","content":"Day 90"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swift/90.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swift/90.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 90"}],["meta",{"property":"og:description","content":"100 Days of Swift > Day 90"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 90\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Milestone: Projects 25-27","slug":"milestone-projects-25-27","link":"#milestone-projects-25-27","children":[{"level":3,"title":"What you learned","slug":"what-you-learned","link":"#what-you-learned","children":[]},{"level":3,"title":"Key points","slug":"key-points","link":"#key-points","children":[]},{"level":3,"title":"Challenge","slug":"challenge","link":"#challenge","children":[]}]}],"git":{"createdTime":1706172246000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":11}]},"readingTime":{"minutes":5.92,"words":1777},"filePathRelative":"swift/100-days-of-swift/90.md","localizedDate":"2024년 1월 25일","excerpt":"\\n\\n<hr>\\n"}');export{N as comp,z as data};
