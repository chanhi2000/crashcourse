import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as e,t as u,b as t,w as s,n,g as i,e as l,r as c,o as m,d as r}from"./app-U_bew1in.js";const y={},g={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},k=e("hr",null,null,-1),b=l('<h2 id="milestone-projects-16-18" tabindex="-1"><a class="header-anchor" href="#milestone-projects-16-18"><span>Milestone: Projects 16-18</span></a></h2><p>Of all the 100 days, this period you’re in right now is probably the hardest. At this point you’ve passed the half-way mark, but the end is still far enough away that you know there’s still a lot of work to do. Worse, the difficulty of the projects starts to ramp up a little – we’ll be tackling a couple of longer projects next, which will really test your staying power.</p><p>Maybe you’re feeling tired; maybe you’re not sure you can make it to the end; or maybe you’re just running out of steam. And if you’re feeling that way, don’t be too hard on yourself – this <em>is</em> a hard course, and doing an hour every day for all this time is tiring.</p><p>Well, I hope you can take some strength from knowing that today marks the 2/3rd point for the course – you’ve made it through 66% of the days, and you’ve come a really long way. As Dan Millman said, “willpower is the key to success – successful people strive no matter what they feel by applying their will to overcome apathy, doubt or fear.”</p><p>So, now is the time you need to dig deep and find the willpower to continue, because by the time the next consolidation day rolls around you’ll be three-quarters of the way through and the end will <em>really</em> be in sight!</p><p><strong>Today you have three topics to work through, one of which of is your challenge.</strong></p><h3 id="what-you-learned" tabindex="-1"><a class="header-anchor" href="#what-you-learned"><span>What you learned</span></a></h3>',7),v={class:"hint-container details"},_=e("summary",null,"What you learned",-1),T=l("<p>Although these projects shouldn’t have been too difficult for someone at your level, they definitely covered some important skills that you’ll come back to time and time again.</p><p>You also completed the technique project all about debugging. Although I covered the main techniques in that chapter, debugging isn’t really something that can be <em>taught</em> – it’s a skill you acquire over time with experience. As you progress, you’ll learn to recognize certain kinds of errors as ones you’ve solved before, so over time you get faster and spotting - and fixing – mistakes.</p><p>Some other things you learned in this milestone are:</p><ul><li>MapKit, Apple’s incredible, free map framework that lets you add maps, satellite maps, route directions, and more.</li><li>How to use <code>Timer</code> to trigger a repeating method every few seconds. Remember to call <code>invalidate()</code> on your time when you want it to stop!</li><li>In SpriteKit, you learned to use the <code>advanceSimulationTime()</code> method to force a particle system to move forward a set number of seconds so that it looks like it has existed for a while.</li><li>We used the <code>SKPhysicsBody(texture:)</code> initializer to get pixel-perfect physics. This is computationally expensive, so you should use it only when strictly needed.</li><li>We used the <code>linearDamping</code> and <code>angularDamping</code> properties of <code>SKPhysicsBody</code> to force sprites to retain their speed and spin, rather than slowing down over time – project 23 was set in outer space, after all!</li><li>You learned how the <code>assert()</code> function lets you ensure your app’s state is exactly what you thought it was.</li><li>You set your first breakpoints, and even attached a condition to it. Trust me on this: you will use breakpoints thousands – if not hundreds of thousands! - of times in your Swift career, so this is a great skill to have under your belt.</li></ul>",4),S=e("h3",{id:"key-points",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#key-points"},[e("span",null,"Key points")])],-1),x={class:"hint-container details"},j=e("summary",null,"Key points",-1),D=l(`<p>There are two pieces of code I’d like to review before you continue, because both are hugely unappreciated.</p><p>First, the <code>assert()</code> function. If you remember, you place calls to <code>assert()</code> in your code whenever you want to say, “I believe X must be the case.” What X is depends on you: “this array will contain 10 items,” or “the user must be logged in,” or “the in-app purchase content was unlocked” are all good examples.</p><p>When the <code>assert()</code> line hits, iOS validates that your statement is true. If the array <em>doesn’t</em> contain 10 items, or the in-app purchase <em>wasn’t</em> unlocked, the assertion will fail and your app will crash immediately. Xcode will print the location of the crash – e.g. ViewController.swift line 492 – along with any custom message you attached, such as “The in-app purchase failed to unlock content.”</p><p>Obviously crashing your app sounds bad on the surface, but remember: assertions are automatically removed when you build your app in release mode – i.e., for the App Store. This means not only will your app not crash because an assertion failed, but also that those assertions aren’t even checked in the first place – Xcode won’t even run them. This means you can – and should! – add assertions liberally throughout your code, because they have zero performance impact on your finished, shipping app.</p><p>Think of assertions as “hard-core mode” for your app: if your app runs perfectly even with assertions in every method, it will <em>definitely</em> work when users get hold of it. And if your assertions <em>do</em> make your app crash while in development, that’s perfect: it means your app’s state wasn’t what you thought, so either your logic is wrong or your assertion was.</p><p>The second piece of code to review is the <code>Timer</code> class, which we used like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">gameTimer <span class="token operator">=</span> <span class="token class-name">Timer</span><span class="token punctuation">.</span><span class="token function">scheduledTimer</span><span class="token punctuation">(</span>timeInterval<span class="token punctuation">:</span> <span class="token number">0.35</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span> selector<span class="token punctuation">:</span> <span class="token other-directive property">#selector</span><span class="token punctuation">(</span>createEnemy<span class="token punctuation">)</span><span class="token punctuation">,</span> userInfo<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">,</span> repeats<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Timers are rudimentary things, but perfectly fit many games – that code will cause the <code>createEnemy()</code> method to be called approximately every 0.35 seconds until it’s cancelled.</p><p>In this case, the <code>gameTimer</code> value was actually a property that belong to the game scene. Cunningly, <code>Timer</code> maintains a strong reference to its target – i.e., it stores it and won’t let it be destroyed while the timer is still active – which means this forms a strong reference cycle. That is, the game scene owns the timer, and the timer owns the game scene, which means neither of them will be ever destroyed unless you manually call <code>invalidate()</code>.</p><p>In project 17 this isn’t a problem, but we’ll be returning to this theme in project 30 when it is a problem – watch out for it!</p><p>By the way: the <code>Timer</code> class really does offer only <em>approximate</em> accuracy, meaning that the <code>createEnemy()</code> method will be called roughly every 0.35 seconds, but it might take 0.4 seconds one time or 0.5 seconds another. In the context of Space Race this isn’t a problem, but remember: iOS wants you to draw at 60 or 120 frames per second, which gives you between 8 and 16 milliseconds to do all your calculation and rendering – a small delay from <code>Timer</code> might cause problems in more advanced games.</p><p>The iOS solution to this is called <code>CADisplayLink</code>, and it causes a method of yours to be called every time drawing has just finished, ensuring you always get the maximum allotment of time for your calculations. This isn’t covered in Hacking with Swift, but you’ll find an explanation and code example in this article in my Swift Knowledge Base: <a href="https://www.hackingwithswift.com/example-code/system/how-to-synchronize-code-to-drawing-using-cadisplaylink" target="_blank" rel="noopener noreferrer">How to synchronize code to drawing using <code>CADisplayLink</code></a>.</p>`,12),K=e("h3",{id:"challenge",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#challenge"},[e("span",null,"Challenge")])],-1),C={class:"hint-container details"},I=e("summary",null,"Challenge",-1),A=l('<p>It’s time to put your skills to the test and make your own app, starting from a blank canvas. This time your challenge is to make a shooting gallery game using SpriteKit: create three rows on the screen, then have targets slide across from one side to the other. If the user taps a target, make it fade out and award them points.</p><p>How you implement this game really depends on what kind of shooting gallery games you’ve played in the past, but here are some suggestions to get you started:</p><ul><li>Make some targets big and slow, and others small and fast. The small targets should be worth more points.</li><li>Add “bad” targets – things that <em>cost</em> the user points if they get shot accidentally.</li><li>Make the top and bottom rows move left to right, but the middle row move right to left.</li><li>Add a timer that ticks down from 60 seconds. When it hits zero, show a Game Over message.</li><li>Try going to <a href="https://openclipart.org/" target="_blank" rel="noopener noreferrer">https://openclipart.org/</a> to see what free artwork you can find.</li><li>Give the user six bullets per clip. Make them tap a different part of the screen to reload. Those are just suggestions – it’s your game, so do what you like!</li></ul><p><strong>Tip</strong>: I made a SpriteKit shooting gallery game in my book <a href="https://www.hackingwithswift.com/store/hacking-with-macos" target="_blank" rel="noopener noreferrer">Hacking with macOS</a> – the SpriteKit <a href="https://github.com/twostraws/macOS/tree/master/project14" target="_blank" rel="noopener noreferrer">code for that project</a> is compatible with iOS, but rather than just reading my code you might prefer to just take <a href="https://github.com/twostraws/macOS/tree/master/project14-files" target="_blank" rel="noopener noreferrer">my assets</a> and use them to build your own project.</p><p>As always, please try to code the challenge yourself before reading any of the hints below.</p><ul><li>Moving the targets in your shooting gallery is a perfect job for the <code>moveBy()</code> action. Use a sequence so that targets move across the screen smoothly, then remove themselves when they are off screen.</li><li>You can create a timer using an <code>SKLabelNode</code>, a <code>secondsRemaining</code> integer, and a <code>Timer</code> that takes 1 away from <code>secondsRemaining</code> every 1 second.</li><li>Make sure you call <code>invalidate()</code> when the time runs out.</li><li>Use <code>nodes(at:)</code> to see what was tapped. If you don’t find a node named “Target” in the returned array, you could subtract points for the player missing a shot.</li><li>You should be able to use a property observer for both player score and number of bullets remaining in clip. Changing the score or bullets would update the appropriate <code>SKLabelNode</code> on the screen.</li></ul>',6),M=e("div",{class:"hint-container tip"},[e("p",{class:"hint-container-title"},"Note"),e("p",null,"Don’t worry if you don’t complete challenges in the day they were assigned – in future days you’ll find you have some time to spare here and there, so challenges are something you can return back to in the future.")],-1),W=e("hr",null,null,-1);function O(h,P){const o=c("router-link"),a=c("VPCard");return m(),p("div",null,[e("h1",g,[e("a",w,[e("span",null,u(h.$frontmatter.title)+" 관련",1)])]),e("nav",f,[e("ul",null,[e("li",null,[t(o,{to:"#milestone-projects-16-18"},{default:s(()=>[r("Milestone: Projects 16-18")]),_:1}),e("ul",null,[e("li",null,[t(o,{to:"#what-you-learned"},{default:s(()=>[r("What you learned")]),_:1})]),e("li",null,[t(o,{to:"#key-points"},{default:s(()=>[r("Key points")]),_:1})]),e("li",null,[t(o,{to:"#challenge"},{default:s(()=>[r("Challenge")]),_:1})])])])])]),k,t(a,n(i({title:"100 Days of Swift - Day 66",desc:"Milestone: Projects 16-18",link:"https://www.hackingwithswift.com/100/66",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),b,e("details",v,[_,t(a,n(i({title:"100 Days of Swift - Day 66 - What you learned",desc:"What you learned",link:"https://www.hackingwithswift.com/guide/7/1/what-you-learned",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),T]),S,e("details",x,[j,t(a,n(i({title:"100 Days of Swift - Day 66 - Key points",desc:"Key points",link:"https://www.hackingwithswift.com/guide/7/2/key-points",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),D]),K,e("details",C,[I,t(a,n(i({title:"100 Days of Swift - Day 66 - Challenge",desc:"Challenge",link:"https://www.hackingwithswift.com/guide/7/3/challenge",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),A]),M,W])}const B=d(y,[["render",O],["__file","66.html.vue"]]),N=JSON.parse('{"path":"/swift/100-days-of-swift/66.html","title":"Day 66","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 66","description":"100 Days of Swift > Day 66","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of Swift > Day 66"},{"property":"og:description","content":"Day 66"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swift/66.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swift/66.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 66"}],["meta",{"property":"og:description","content":"100 Days of Swift > Day 66"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 66\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Milestone: Projects 16-18","slug":"milestone-projects-16-18","link":"#milestone-projects-16-18","children":[{"level":3,"title":"What you learned","slug":"what-you-learned","link":"#what-you-learned","children":[]},{"level":3,"title":"Key points","slug":"key-points","link":"#key-points","children":[]},{"level":3,"title":"Challenge","slug":"challenge","link":"#challenge","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":10}]},"readingTime":{"minutes":6.06,"words":1817},"filePathRelative":"swift/100-days-of-swift/66.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{B as comp,N as data};
