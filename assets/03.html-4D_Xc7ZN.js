import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,a as e,t as m,b as s,n as h,g as b,w as t,d as n,e as c,r as l,o as k}from"./app-U_bew1in.js";const v={},g={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},D={class:"table-of-contents"},y=e("hr",null,null,-1),x=c('<p>Docker의 명령은 <code>docker run</code>, <code>docker push</code>와 같이 <code>docker &lt;명령&gt;</code> 형식이며, 항상 <code>root</code> 권한으로 실행해야 합니다.</p><p>먼저 Docker의 기본적인 사용 방법을 알아보기 위해 Docker Hub에서 제공하는 이미지를 받아서 실행해보겠습니다.</p><hr><h2 id="search-명령으로-이미지-검색하기" tabindex="-1"><a class="header-anchor" href="#search-명령으로-이미지-검색하기"><span><code>search</code> 명령으로 이미지 검색하기</span></a></h2>',4),_={href:"https://hub.docker.com",target:"_blank",rel:"noopener noreferrer"},T=c(`<p><code>docker search</code> 명령으로 Docker Hub에서 이미지를 검색할 수 있습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> search ubuntu</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># NAME                             DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span></span>
<span class="line"><span class="token comment"># ubuntu                           Ubuntu is a Debian-based Linux operating sys…   14904     [OK]</span></span>
<span class="line"><span class="token comment"># websphere-liberty                WebSphere Liberty multi-architecture images …   288       [OK]</span></span>
<span class="line"><span class="token comment"># ubuntu-upstart                   DEPRECATED, as is Upstart (find other proces…   112       [OK]</span></span>
<span class="line"><span class="token comment"># neurodebian                      NeuroDebian provides neuroscience research s…   92        [OK]</span></span>
<span class="line"><span class="token comment"># ubuntu/nginx                     Nginx, a high-performance reverse proxy &amp;amp; we…   58</span></span>
<span class="line"><span class="token comment"># open-liberty                     Open Liberty multi-architecture images based…   54        [OK]</span></span>
<span class="line"><span class="token comment"># ubuntu-debootstrap               DEPRECATED; use &quot;ubuntu&quot; instead                46        [OK]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>다양한 이미지가 검색될 것입니다. 보통 <code>ubuntu</code>, <code>centos</code>, <code>redis</code> 등 OS나 프로그램 이름을 가진 이미지가 공식 이미지입니다. 나머지는 사용자들이 만들어 공개한 이미지입니다.</p><p>Docker Hub에서 이미지를 검색한 뒤 해당 이미지의 <code>Tags</code> 탭을 보면 현재 사용할 수 있는 이미지의 버전을 볼 수 있습니다.</p>`,4),A=c(`<figure><img src="https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit03/1.png" alt="우분투 리눅스 이미지의 태그 목록" tabindex="0" loading="lazy"><figcaption>우분투 리눅스 이미지의 태그 목록</figcaption></figure><div class="hint-container info"><p class="hint-container-title">sudo 입력하지 않기</p><p>docker 명령은 root 권한으로 실행해야 하기 때문에 일반 계정에서는 항상 sudo를 사용합니다. <code>sudo</code>를 매번 입력하기 귀찮기도 하고 빠뜨릴 때도 많습니다. <code>sudo</code>를 입력하지 않는 방법은 두 가지가 있습니다.</p><ul><li>처음부터 root 계정으로 로그인하거나 <code>sudo su</code> 명령을 사용하여 root 계정으로 전환</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">su</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>현재 계정을 <code>docker</code> 그룹에 포함(<code>docker</code> 그룹은 root 권한과 동일하므로 꼭 필요한 계정만 포함시킵니다).</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">usermod</span> <span class="token parameter variable">-aG</span> <span class="token function">docker</span> <span class="token variable">\${<span class="token environment constant">USER</span>}</span></span>
<span class="line"><span class="token function">sudo</span> systemctl restart <span class="token function">docker</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>현재 계정에서 로그아웃한 뒤 다시 로그인합니다.</p></div><hr><h2 id="pull-명령으로-이미지-받기" tabindex="-1"><a class="header-anchor" href="#pull-명령으로-이미지-받기"><span><code>pull</code> 명령으로 이미지 받기</span></a></h2><p>Docker Hub에서 우분투 리눅스 이미지를 받아보겠습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> pull ubuntu:latest</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>docker pull &lt;이미지 이름&gt;:&lt;태그&gt;</code> 형식입니다. latest를 설정하면 최신 버전을 받습니다. <code>ubuntu:22.04</code>, <code>ubuntu:20.10</code>처럼 태그를 지정해 줄 수도 있습니다.</p><p>이미지 이름에서 <code>pyrasis/ubuntu</code>처럼 <code>/</code> 앞에 사용자명을 지정하면 Docker Hub에서 해당 사용자가 올린 이미지를 받습니다. 공식 이미지는 사용자명이 붙지 않습니다.</p><div class="hint-container info"><p class="hint-container-title">참고</p><p>호스트에 설치된 리눅스 배포판과 Docker 이미지의 배포판의 종류가 달라도 됩니다. CentOS에서 우분투 컨테이너를 실행할 수 있습니다.</p></div><hr><h2 id="images-명령으로-이미지-목록-출력하기" tabindex="-1"><a class="header-anchor" href="#images-명령으로-이미지-목록-출력하기"><span><code>images</code> 명령으로 이미지 목록 출력하기</span></a></h2><p>이제 받은 이미지의 목록을 출력해보겠습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> images</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># REPOSITORY   TAG       IMAGE ID       CREATED      SIZE</span></span>
<span class="line"><span class="token comment"># ubuntu       latest    2dc39ba059dc   7 days ago   77.8MB</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>docker images</code> 명령은 모든 이미지 목록을 출력합니다. <code>docker images ubuntu</code>처럼 이미지 이름을 설정하면 이름은 같지만 <code>태그</code>가 다른 이미지가 출력됩니다.</p><hr><h2 id="run-명령으로-컨테이너-생성하기" tabindex="-1"><a class="header-anchor" href="#run-명령으로-컨테이너-생성하기"><span><code>run</code> 명령으로 컨테이너 생성하기</span></a></h2><p>이미지를 컨테이너로 생성한 뒤 Bash 셸을 실행해보겠습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-i</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">--name</span> hello ubuntu /bin/bash</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>docker run &lt;옵션&gt; &lt;이미지 이름&gt; &lt;실행할 파일&gt;</code> 형식입니다. 여기서는 <code>ubunbu</code> 이미지를 컨테이너로 생성한 뒤 <code>ubuntu</code> 이미지 안의 <code>/bin/bash</code>를 실행합니다. 이미지 이름 대신 이미지 ID를 사용해도 됩니다.</p><ul><li><code>-i</code>(interactive), <code>-t</code>(Pseudo-tty) 옵션을 사용하면 실행된 Bash 셸에 입력 및 출력을 할 수 있습니다.</li><li><code>--name</code> 옵션으로 컨테이너의 이름을 지정할 수 있습니다. 이름을 지정하지 않으면 Docker가 자동으로 이름을 생성하여 지정합니다.</li></ul><p>이제 호스트 OS와 완전히 격리된 공간이 생성되었습니다. <code>cd</code>, <code>ls</code> 명령으로 컨테이너 내부를 한번 둘러봅니다. 호스트 OS와는 다르다는 것을 알 수 있습니다. <code>exit</code>를 입력하여 Bash 셸에서 빠져나옵니다. 우분투 이미지에서 /bin/bash 실행 파일을 직접 실행했기 때문에 여기서 빠져나오면 컨테이너가 정지(stop)됩니다.</p><hr><h2 id="ps-명령으로-컨테이너-목록-확인하기" tabindex="-1"><a class="header-anchor" href="#ps-명령으로-컨테이너-목록-확인하기"><span><code>ps</code> 명령으로 컨테이너 목록 확인하기</span></a></h2><p>다음 명령을 입력하여 모든 컨테이너 목록을 출력합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS                     PORTS     NAMES</span></span>
<span class="line"><span class="token comment"># f8b0bf04c340   ubuntu    &quot;/bin/bash&quot;   5 seconds ago   Exited (0) 3 seconds ago             hello</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>docker ps</code> 형식입니다. <code>-a</code> 옵션을 사용하면 정지된 컨테이너까지 모두 출력하고, 옵션을 사용하지 않으면 실행되고 있는 컨테이너만 출력합니다.</p><p>우리는 앞에서 컨테이너를 생성할 때 이름을 <code>hello</code>로 지정했으므로 컨테이너 목록에서도 <code>hello</code>로 표시됩니다.</p><hr><h2 id="start-명령으로-컨테이너-시작하기" tabindex="-1"><a class="header-anchor" href="#start-명령으로-컨테이너-시작하기"><span><code>start</code> 명령으로 컨테이너 시작하기</span></a></h2><p>방금 정지한 컨테이너를 다시금 시작해보겠습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> start hello</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>docker start &lt;컨테이너 이름&gt;</code> 형식입니다. 컨테이너 이름 대신 컨테이너 ID를 사용해도 됩니다.</p><p>다음 명령을 입력하여 실행된 컨테이너 목록을 출력합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token function">ps</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS         PORTS     NAMES</span></span>
<span class="line"><span class="token comment"># f8b0bf04c340   ubuntu    &quot;/bin/bash&quot;   40 seconds ago   Up 4 seconds             hello</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>hello</code> 컨테이너가 시작되었습니다.</p><hr><h2 id="restart-명령으로-컨테이너-재시작하기" tabindex="-1"><a class="header-anchor" href="#restart-명령으로-컨테이너-재시작하기"><span><code>restart</code> 명령으로 컨테이너 재시작하기</span></a></h2><p>OS 재부팅처럼 컨테이너를 재시작해보겠습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> restart hello</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>docker restart &lt;컨테이너 이름&gt;</code> 형식입니다. 컨테이너 이름 대신 컨테이너 ID를 사용해도 됩니다.</p><hr><h2 id="attach-명령으로-컨테이너에-접속하기" tabindex="-1"><a class="header-anchor" href="#attach-명령으로-컨테이너에-접속하기"><span><code>attach</code> 명령으로 컨테이너에 접속하기</span></a></h2><p>이제 시작한 컨테이너에 접속해보겠습니다. 다음 명령을 실행한 뒤 엔터를 한번 더 입력하면 Bash 셸이 표시됩니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> attach hello</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># root@f8b0bf04c340:/#</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>docker attach &lt;컨테이너 이름&gt;</code> 형식입니다. 컨테이너 이름 대신 컨테이너 ID를 사용해도 됩니다.</p><p>우리는 /bin/bash를 실행했기 때문에 명령을 자유롭게 입력할 수 있지만, DB나 서버 애플리케이션을 실행하면 입력은 할 수 없고 출력만 보게 됩니다.</p><p>Bash 셸에서 <code>exit</code> 또는 <kbd>Ctrl</kbd>+<kbd>D</kbd>를 입력하면 컨테이너가 정지됩니다. 여기서는 <kbd>Ctrl</kbd>+<kbd>P</kbd>, <kbd>Ctrl</kbd>+<kbd>Q</kbd>를 차례대로 입력하여 컨테이너를 정지하지 않고, 컨테이너에서 빠져나옵니다.</p><hr><h2 id="exec-명령으로-외부에서-컨테이너-안의-명령-실행하기" tabindex="-1"><a class="header-anchor" href="#exec-명령으로-외부에서-컨테이너-안의-명령-실행하기"><span><code>exec</code> 명령으로 외부에서 컨테이너 안의 명령 실행하기</span></a></h2><p>현재 컨테이너가 <code>/bin/bash</code>로 실행된 상태입니다. 이번에는 <code>/bin/bash</code>를 통하지 않고 외부에서 컨테이너 안의 명령을 실행해보겠습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> hello <span class="token builtin class-name">echo</span> <span class="token string">&quot;Hello World&quot;</span></span>
<span class="line">Hello World</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>docker exec &lt;컨테이너 이름&gt; &lt;명령&gt; &lt;매개 변수&gt;</code> 형식입니다. 컨테이너 이름 대신 컨테이너 ID를 사용해도 됩니다. 컨테이너가 실행되고 있는 상태에서만 사용할 수 있으며 정지된 상태에서는 사용할 수 없습니다.</p><p>컨테이너 안의 <code>echo</code> 명령을 실행하고 매개 변수로 **&quot;Hello World&quot;**를 지정했기 때문에 Hello World가 출력됩니다. <code>docker exec</code> 명령은 이미 실행된 컨테이너에 <code>apt-get</code>, <code>yum</code> 명령으로 패키지를 설치하거나, 각종 데몬을 실행할 때 활용할 수 있습니다.</p><hr><h2 id="stop-명령으로-컨테이너-정지하기" tabindex="-1"><a class="header-anchor" href="#stop-명령으로-컨테이너-정지하기"><span><code>stop</code> 명령으로 컨테이너 정지하기</span></a></h2><p>이번에는 컨테이너를 정지해보겠습니다. 먼저 실행된 컨테이너 목록을 출력합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token function">ps</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># CONTAINER ID   IMAGE     COMMAND       CREATED         STATUS              PORTS     NAMES</span></span>
<span class="line"><span class="token comment"># f8b0bf04c340   ubuntu    &quot;/bin/bash&quot;   2 minutes ago   Up About a minute             hello</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>다음 명령으로 컨테이너를 정지합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> stop hello</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>docker stop &lt;컨테이너 이름&gt;</code> 형식입니다. 컨테이너 이름 대신 컨테이너 ID를 사용해도 됩니다.</p><p>실행된 컨테이너 목록을 출력합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token function">ps</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>hello</code> 컨테이너를 정지했기 때문에 아무것도 안 나옵니다.</p><hr><h2 id="rm-명령으로-컨테이너-삭제하기" tabindex="-1"><a class="header-anchor" href="#rm-명령으로-컨테이너-삭제하기"><span><code>rm</code> 명령으로 컨테이너 삭제하기</span></a></h2><p>생성된 컨테이너를 삭제해보겠습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token function">rm</span> hello</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>docker rm &lt;컨테이너 이름&gt;</code> 형식입니다. 컨테이너 이름 대신 컨테이너 ID를 사용해도 됩니다.</p><p>모든 컨테이너 목록을 출력합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>hello</code> 컨테이너를 삭제했기 때문에 아무것도 안 나옵니다.</p><hr><h2 id="rmi-명령으로-이미지-삭제하기" tabindex="-1"><a class="header-anchor" href="#rmi-명령으로-이미지-삭제하기"><span><code>rmi</code> 명령으로 이미지 삭제하기</span></a></h2><p>이번에는 이미지를 삭제해보겠습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> rmi ubuntu:latest</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>docker rmi &lt;이미지 이름&gt;:&lt;태그&gt;</code> 형식입니다. 이미지 이름 대신 이미지 ID를 사용해도 됩니다. <code>docker rmi ubuntu</code>처럼 이미지 이름만 지정하면 <code>태그</code>는 다르지만 <code>ubuntu</code> 이름을 가진 모든 이미지가 삭제됩니다.</p><p>이미지 목록을 출력합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> images</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># REPOSITORY   TAG       IMAGE ID   CREATED   SIZE</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ubuntu</code> 이미지를 삭제했기 때문에 아무것도 안 나옵니다.</p><hr>`,80);function E(o,I){const d=l("VPCard"),a=l("router-link"),i=l("SiteInfo"),r=l("FontIcon");return k(),u("div",null,[e("h1",g,[e("a",f,[e("span",null,m(o.$frontmatter.title)+" 관련",1)])]),s(d,h(b({title:"목차",desc:"언제나 최신 Docker",link:"/docker/always-up-to-date-docker/README.md",logo:"https://pyrasis.com/assets/images/pyrasis.png",background:"rgba(31,41,55,0.2)"})),null,16),e("nav",D,[e("ul",null,[e("li",null,[s(a,{to:"#search-명령으로-이미지-검색하기"},{default:t(()=>[n("search 명령으로 이미지 검색하기")]),_:1})]),e("li",null,[s(a,{to:"#pull-명령으로-이미지-받기"},{default:t(()=>[n("pull 명령으로 이미지 받기")]),_:1})]),e("li",null,[s(a,{to:"#images-명령으로-이미지-목록-출력하기"},{default:t(()=>[n("images 명령으로 이미지 목록 출력하기")]),_:1})]),e("li",null,[s(a,{to:"#run-명령으로-컨테이너-생성하기"},{default:t(()=>[n("run 명령으로 컨테이너 생성하기")]),_:1})]),e("li",null,[s(a,{to:"#ps-명령으로-컨테이너-목록-확인하기"},{default:t(()=>[n("ps 명령으로 컨테이너 목록 확인하기")]),_:1})]),e("li",null,[s(a,{to:"#start-명령으로-컨테이너-시작하기"},{default:t(()=>[n("start 명령으로 컨테이너 시작하기")]),_:1})]),e("li",null,[s(a,{to:"#restart-명령으로-컨테이너-재시작하기"},{default:t(()=>[n("restart 명령으로 컨테이너 재시작하기")]),_:1})]),e("li",null,[s(a,{to:"#attach-명령으로-컨테이너에-접속하기"},{default:t(()=>[n("attach 명령으로 컨테이너에 접속하기")]),_:1})]),e("li",null,[s(a,{to:"#exec-명령으로-외부에서-컨테이너-안의-명령-실행하기"},{default:t(()=>[n("exec 명령으로 외부에서 컨테이너 안의 명령 실행하기")]),_:1})]),e("li",null,[s(a,{to:"#stop-명령으로-컨테이너-정지하기"},{default:t(()=>[n("stop 명령으로 컨테이너 정지하기")]),_:1})]),e("li",null,[s(a,{to:"#rm-명령으로-컨테이너-삭제하기"},{default:t(()=>[n("rm 명령으로 컨테이너 삭제하기")]),_:1})]),e("li",null,[s(a,{to:"#rmi-명령으로-이미지-삭제하기"},{default:t(()=>[n("rmi 명령으로 이미지 삭제하기")]),_:1})])])]),y,s(i,{name:"03. Docker 사용해보기",desc:"언제나 최신 Docker",url:"https://pyrasis.com/jHLsAlwaysUpToDateDocker/Unit03",logo:"https://pyrasis.com/assets/images/pyrasis.png",preview:"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit03/1.png"}),x,e("p",null,[n("Docker는 "),e("a",_,[s(r,{icon:"fa-brands fa-docker"}),n("Docker Hub")]),n("를 통해 이미지를 공유하는 생태계가 구축되어 있습니다. 유명 리눅스 배포판과 오픈 소스 프로젝트(Redis, Nginx 등)의 Docker 이미지는 모두 Docker Hub에서 구할 수 있습니다. 특히 이미지와 관련된 모든 명령은 기본적으로 Docker Hub를 이용하도록 설정되어 있습니다.")]),T,s(i,{name:"ubuntu Tags | Docker Hub",desc:"Ubuntu is a Debian-based Linux operating system based on free software.",url:"https://hub.docker.com/_/ubuntu/tags",logo:"https://hub.docker.com/favicon.ico",preview:"https://djeqr6to3dedg.cloudfront.net/repo-logos/library/ubuntu/live/logo.png"}),A])}const R=p(v,[["render",E],["__file","03.html.vue"]]),C=JSON.parse('{"path":"/docker/always-up-to-date-docker/03.html","title":"03. Docker 사용해보기","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"03. Docker 사용해보기","description":"언제나 최신 Docker > 03. Docker 사용해보기","category":["DevOps","Docker"],"tag":["crashcourse","pyrasis.com","docker","devops"],"head":[[{"meta":null},{"property":"og:title","content":"언제나 최신 Docker > 03. Docker 사용해보기"},{"property":"og:description","content":"03. Docker 사용해보기"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/docker/always-up-to-date-docker/03.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/docker/always-up-to-date-docker/03.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"03. Docker 사용해보기"}],["meta",{"property":"og:description","content":"언제나 최신 Docker > 03. Docker 사용해보기"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit03/1.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit03/1.png"}],["meta",{"name":"twitter:image:alt","content":"03. Docker 사용해보기"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"pyrasis.com"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:published_time","content":"2022-10-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"03. Docker 사용해보기\\",\\"image\\":[\\"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit03/1.png\\"],\\"datePublished\\":\\"2022-10-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]],"prev":"/docker/always-up-to-date-docker/02C.md","next":"/docker/always-up-to-date-docker/04.md","date":"2022-10-03T00:00:00.000Z","isOriginal":false,"cover":"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit03/1.png"},"headers":[{"level":2,"title":"search 명령으로 이미지 검색하기","slug":"search-명령으로-이미지-검색하기","link":"#search-명령으로-이미지-검색하기","children":[]},{"level":2,"title":"pull 명령으로 이미지 받기","slug":"pull-명령으로-이미지-받기","link":"#pull-명령으로-이미지-받기","children":[]},{"level":2,"title":"images 명령으로 이미지 목록 출력하기","slug":"images-명령으로-이미지-목록-출력하기","link":"#images-명령으로-이미지-목록-출력하기","children":[]},{"level":2,"title":"run 명령으로 컨테이너 생성하기","slug":"run-명령으로-컨테이너-생성하기","link":"#run-명령으로-컨테이너-생성하기","children":[]},{"level":2,"title":"ps 명령으로 컨테이너 목록 확인하기","slug":"ps-명령으로-컨테이너-목록-확인하기","link":"#ps-명령으로-컨테이너-목록-확인하기","children":[]},{"level":2,"title":"start 명령으로 컨테이너 시작하기","slug":"start-명령으로-컨테이너-시작하기","link":"#start-명령으로-컨테이너-시작하기","children":[]},{"level":2,"title":"restart 명령으로 컨테이너 재시작하기","slug":"restart-명령으로-컨테이너-재시작하기","link":"#restart-명령으로-컨테이너-재시작하기","children":[]},{"level":2,"title":"attach 명령으로 컨테이너에 접속하기","slug":"attach-명령으로-컨테이너에-접속하기","link":"#attach-명령으로-컨테이너에-접속하기","children":[]},{"level":2,"title":"exec 명령으로 외부에서 컨테이너 안의 명령 실행하기","slug":"exec-명령으로-외부에서-컨테이너-안의-명령-실행하기","link":"#exec-명령으로-외부에서-컨테이너-안의-명령-실행하기","children":[]},{"level":2,"title":"stop 명령으로 컨테이너 정지하기","slug":"stop-명령으로-컨테이너-정지하기","link":"#stop-명령으로-컨테이너-정지하기","children":[]},{"level":2,"title":"rm 명령으로 컨테이너 삭제하기","slug":"rm-명령으로-컨테이너-삭제하기","link":"#rm-명령으로-컨테이너-삭제하기","children":[]},{"level":2,"title":"rmi 명령으로 이미지 삭제하기","slug":"rmi-명령으로-이미지-삭제하기","link":"#rmi-명령으로-이미지-삭제하기","children":[]}],"git":{"createdTime":1716977950000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":4}]},"readingTime":{"minutes":2.22,"words":667},"filePathRelative":"docker/always-up-to-date-docker/03.md","localizedDate":"2022년 10월 3일","excerpt":"\\n"}');export{R as comp,C as data};
