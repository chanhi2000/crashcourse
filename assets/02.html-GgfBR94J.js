import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,a as n,t as k,b as a,w as t,n as c,g as r,d as s,e as o,r as i,o as v}from"./app-U_bew1in.js";const g={},h={id:"frontmatter-title-관련",tabindex:"-1"},b={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},_=n("hr",null,null,-1),f=n("h2",{id:"_1-의존성-관리-이해",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-의존성-관리-이해"},[n("span",null,"1. 의존성 관리 이해")])],-1),S=n("code",null,"spring-boot-stater-*",-1),w=n("code",null,"spring-boot-stater-parent",-1),C=n("code",null,"spring-boot-dependencies",-1),x=n("code",null,"pom.xml",-1),j=n("code",null,"dependencyManegement",-1),T=n("ul",null,[n("li",null,"그렇기 때문에 우리는 각 스타터의 버전을 명시하지 않아도 되고, parent가 관리하는 버전을 사용하게 된다.")],-1),P=n("li",null,[s("gradle을 사용한다면 intellij의 "),n("code",null,"gradle"),s(" 탭에서 참조하고 있는 각 의존성들의 버전들과 하위 의존성들의 상세 버전까지 확인 할 수 있다.")],-1),A=o(`<figure><img src="https://github.com/namjunemy/TIL/blob/master/SpringBoot/img/01_gradle_dependency.PNG?raw=true" alt="*스프링 부트의 dependencies에서 관리하는 의존성의 경우 버전 명시를 하지 않고 stater 위주로 추가해서 사용하면 된다. 별도의 버전 호환을 체크 하지 않고 사용할 수 있다. 하지만, 특별히 버전을 명시해서 사용해야 하는 경우는 명시해서 사용하면 설정 값이 해당 버전으로 오버라이딩 되기 때문에 그 버전을 사용 할 수 있다." tabindex="0" loading="lazy"><figcaption>*스프링 부트의 dependencies에서 관리하는 의존성의 경우 버전 명시를 하지 않고 stater 위주로 추가해서 사용하면 된다. 별도의 버전 호환을 체크 하지 않고 사용할 수 있다. 하지만, 특별히 버전을 명시해서 사용해야 하는 경우는 명시해서 사용하면 설정 값이 해당 버전으로 오버라이딩 되기 때문에 그 버전을 사용 할 수 있다.</figcaption></figure><hr><h2 id="_2-의존성-관리-응용" tabindex="-1"><a class="header-anchor" href="#_2-의존성-관리-응용"><span>2. 의존성 관리 응용</span></a></h2><h3 id="버전-관리-해주는-의존성-추가" tabindex="-1"><a class="header-anchor" href="#버전-관리-해주는-의존성-추가"><span>버전 관리 해주는 의존성 추가</span></a></h3><p>사용하고 싶은 dependency stater 등록</p><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy" data-title="groovy"><pre><code><span class="line">dependencies <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line">  <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;org.springframework.boot:spring-boot-starter-data-jpa&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token comment">// ...    </span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://github.com/namjunemy/TIL/blob/master/SpringBoot/img/02_add_dependency_stater.PNG?raw=true" alt="스타터만 추가했을뿐인데, 해당 스프링 부트 릴리즈 버전에서 관리되고 있는 의존성의 하위 의존성들까지 추가가 된다." tabindex="0" loading="lazy"><figcaption>스타터만 추가했을뿐인데, 해당 스프링 부트 릴리즈 버전에서 관리되고 있는 의존성의 하위 의존성들까지 추가가 된다.</figcaption></figure><h3 id="버전-관리-안해주는-의존성-추가" tabindex="-1"><a class="header-anchor" href="#버전-관리-안해주는-의존성-추가"><span>버전 관리 안해주는 의존성 추가</span></a></h3>`,8),B={href:"https://mvnrepository.com",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"https://mvnrepository.com",-1),z=o(`<h3 id="기존-의존성-버전-변경하기" tabindex="-1"><a class="header-anchor" href="#기존-의존성-버전-변경하기"><span>기존 의존성 버전 변경하기</span></a></h3><p>추가적으로 부트에서 관리하고 있는 의존성의 버전을 개발자가 직접 수정해서 사용할 수 있다.</p><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy" data-title="groovy"><pre><code><span class="line"><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">&quot;org.springframework.boot:spring-boot-starter-data-jpa:2.0.3.RELEASE&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h2 id="_3-자동-설정-이해" tabindex="-1"><a class="header-anchor" href="#_3-자동-설정-이해"><span>3. 자동 설정 이해</span></a></h2><ul><li><code>@SpringBootApplication</code> 이 선언되어 있는 메인 클래스에서 저 애노테이션을 따라 들어가보면,</li><li><code>@SpringBootConfiguration</code>, <code>@EnableAutoConfiguration</code>, <code>@ComponentScan</code> 등이 선언되어 있다.</li><li>애플리케이션에서 빈은 사실 두 단계로 나눠서 읽힌다. <ul><li>1단계: <code>@ComponentScan</code></li><li>2단계: <code>@EnableAutoConfiguration</code></li></ul></li><li><code>@ComponentScan</code> 에서는 <ul><li><code>@Component</code></li><li><code>@Configuration</code>, <code>@Repository</code>, <code>@Service</code>, <code>@Controller</code>, <code>@RestController</code></li><li>위의 애노테이션</li></ul></li><li><code>@EnableAutoConfiguration</code> 에서는 <ul><li>spring.factories <ul><li><code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code></li></ul></li><li><code>@Configuration</code></li><li><code>@ConditionalOnXxxYyyZzz</code></li></ul></li></ul><hr><h2 id="_4-자동-설정-만들기-1부-starter와-autoconfigure" tabindex="-1"><a class="header-anchor" href="#_4-자동-설정-만들기-1부-starter와-autoconfigure"><span>4. 자동 설정 만들기 1부: Starter와 AutoConfigure</span></a></h2><ul><li><code>Xxx-Spring-Boot-Autoconfigure</code> 모듈: 자동 설정</li><li><code>Xxx-Spring-Boot-Starter</code> 모듈 : 필요한 의존성 정의</li><li>그냥 하나로 만들고 싶을 때는? <ul><li><code>Xxx-Spring-Boot-Starter</code></li></ul></li><li>본인이 만든 의존성에 의해 만들어지는 빈이 <code>@ComponentScan에</code> 의해서 먼저 만들어지고,</li><li>2번째 단계의 <code>@EnableAutoConfiguration</code>에 의해 <code>@Configuration</code>으로 설정되어있는 빈이 이것을 덮어 쓰는 경우도 생긴다.</li></ul><hr><h2 id="_5-자동-설정-만들기-2부-configurationproperties" tabindex="-1"><a class="header-anchor" href="#_5-자동-설정-만들기-2부-configurationproperties"><span>5. 자동 설정 만들기 2부: <code>@ConfigurationProperties</code></span></a></h2>`,11),E=o("<li>정리해서 설명하자면, 본인이 애플리케이션에서 직접 <code>@Bean</code> 으로 정의한 holoman 이라는 빈이 AutoConfigure로 인해 만들어진 <code>@Configuration</code>으로 선언된 빈으로 덮어쓰여지는 문제가 생긴다. <code>@SpringBootApplication</code>이 1단계, 2단계로 나눠서 빈을 스캔하기 때문이다. <ul><li>이 경우에는 <code>@AutoConfigure</code>로 선언한 <code>@Bean</code>에 <code>@ConditionalOnMissingBean</code> 애노테이션을 추가해주면, 해당 타입 의 빈이 비어있을 경우에만 생성한다.</li><li>결과적으로 1단계로 <code>@ComponentScan</code>이 이루어질때 빈이 만들어졌으면, 2단계 <code>@EnableAutoConfiguration</code> 에서는 만들어지지 않는다.</li><li>따라서, 본인이 애플리케이션에 직접 생성한 <code>@Bean</code>의 우선순위가 높아지게 된다.</li></ul></li>",1),L=n("code",null,"application.yaml",-1),N=n("code",null,"@ConfigurationProperties",-1),W=n("ul",null,[n("li",null,"해당 커밋 내용 참조"),n("li",null,"https://github.com/namjunemy/spring-boot-concept-and-utilization/commit/53b92ad92935a0568bb28c2a7d95298c995ebfdb")],-1),R=o(`<hr><h2 id="_6-내장-웹-서버-이해" tabindex="-1"><a class="header-anchor" href="#_6-내장-웹-서버-이해"><span>6. 내장 웹 서버 이해</span></a></h2><ul><li>부트는 서버가 아니다. <ul><li>톰캣 객체 생성</li><li>포트 설정</li><li>톰캣에 컨텍스트 추가</li><li>서블릿 만들기</li><li>톰캣에 서블릿 추가</li><li>컨텍스트에 서블릿 맵핑</li><li>톰캣 실행 및 대기</li></ul></li><li>이 모든 과정을 보다 상세히 또 유연하게 설정하고 실행해주는게 바로 스프링 부트의 자동 설정 <ul><li><code>ServletWebServerFactoryAutoConfiguration</code>(서블릿 웹 서버 생성) <ul><li><code>TomcatServletWebServerFactoryCustomizer</code>(서버 커스터마이징)</li></ul></li><li><code>DispatcherServletAutoConfiguration</code><ul><li>서블릿 만들고 등록</li></ul></li></ul></li></ul><h3 id="내장-웹-서버-응용-1부-컨테이너와-포트" tabindex="-1"><a class="header-anchor" href="#내장-웹-서버-응용-1부-컨테이너와-포트"><span>내장 웹 서버 응용 1부: 컨테이너와 포트</span></a></h3><figure><img src="https://github.com/namjunemy/TIL/blob/master/SpringBoot/img/01_gradle_dependency.PNG?raw=true" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><code>spring-boot-starter-web</code>이 <code>spring-boot-starter-tomcat</code>을 가져온다.</li><li>만약 tomcat이 아닌, 다른 tomcat이 아닌 jetty를 내장 웹서버로 사용하고 싶다면 아래와 같이 <code>gradle</code> 설정 파일을 작성해주면 된다.</li></ul><div class="language-groovy line-numbers-mode" data-highlighter="prismjs" data-ext="groovy" data-title="groovy"><pre><code><span class="line"><span class="token comment">// ...</span></span>
<span class="line">configurations <span class="token punctuation">{</span></span>
<span class="line">    compile<span class="token punctuation">.</span>exclude module<span class="token punctuation">:</span> <span class="token string">&#39;spring-boot-starter-tomcat&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">dependencies <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">    <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">&#39;org.springframework.boot:spring-boot-starter-web&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">&#39;org.springframework.boot:spring-boot-starter-jetty&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>부트를 웹 애플리케이션으로 띄우지 않으려면, 프로퍼티 설정을 통해서 일반 애플리케이션으로 사용할 수 있다. 서버의 포트도 간단하게 설정할 수 있다.</p>`,8),F=n("code",null,"application.yaml",-1),q=o(`<div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line">  <span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">main</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">web-application-type</span><span class="token punctuation">:</span> none</span>
<span class="line">      </span>
<span class="line">  <span class="token key atrule">server</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9090</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>서버 포트 정보를 <code>0</code>으로 할당하면, 사용 가능한 포트를 랜덤으로 선택한다.</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">server</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>위와 같이 할당된 포트를 애플리케이션 코드에서 사용하는 best way를 spring boot 도큐먼트에서 설명하고 있다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">io<span class="token punctuation">.</span>namjune<span class="token punctuation">.</span>springbootconceptandutilization</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ServletWebServerApplicationContext</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ServletWebServerInitializedEvent</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ApplicationListener</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PortListener</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServletWebServerInitializedEvent</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token class-name">ServletWebServerInitializedEvent</span> servletWebServerInitializedEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ServletWebServerApplicationContext</span> applicationContext <span class="token operator">=</span></span>
<span class="line">            servletWebServerInitializedEvent<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">.</span><span class="token function">getWebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="내장-웹-서버-응용-2부-https와-http2" tabindex="-1"><a class="header-anchor" href="#내장-웹-서버-응용-2부-https와-http2"><span>내장 웹 서버 응용 2부: HTTPS와 HTTP2</span></a></h3><ul><li>Spring Boot SSL key generate <ul><li>명령어 수행한 위치에 키스토어가 생성된다.</li></ul></li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">keytool <span class="token parameter variable">-genkey</span> <span class="token parameter variable">-alias</span> tomcat <span class="token parameter variable">-storetype</span> PKCS12 <span class="token parameter variable">-keyalg</span> RSA <span class="token parameter variable">-keysize</span> <span class="token number">2048</span> <span class="token parameter variable">-keystore</span> keystore.p12 <span class="token parameter variable">-validity</span> <span class="token number">4000</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,8),H=n("code",null,"application.yaml",-1),G=o(`<div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">server</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">ssl</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">key-store</span><span class="token punctuation">:</span> keystore.p12</span>
<span class="line">    <span class="token key atrule">key-store-type</span><span class="token punctuation">:</span> PKCS12</span>
<span class="line">    <span class="token key atrule">key-store-password</span><span class="token punctuation">:</span> <span class="token number">123456</span></span>
<span class="line">    <span class="token key atrule">key-alias</span><span class="token punctuation">:</span> tomcat</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),D=n("code",null,"localhost:8080",-1),K=n("code",null,"application.yaml",-1),V=o(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token comment">// ...</span></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ServletWebServerFactory</span> <span class="token function">serverFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">TomcatServletWebServerFactory</span> tomcat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TomcatServletWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        tomcat<span class="token punctuation">.</span><span class="token function">addAdditionalTomcatConnectors</span><span class="token punctuation">(</span><span class="token function">createStandardConnector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> tomcat<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Connector</span> <span class="token function">createStandardConnector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Connector</span> connector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Connector</span><span class="token punctuation">(</span><span class="token string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        connector<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> connector<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>로그 확인</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># ...</span></span>
<span class="line"><span class="token comment"># 2018-11-13 11:23:41.187  INFO 12432 --- [main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8443 (https) 8080 (http) with context path &#39;&#39;</span></span>
<span class="line"><span class="token comment"># ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>HTTP2 설정은 SSL이 <strong>기본적으로 적용되어있는 상태</strong>에서 <code>http2.enabled</code>를 <code>true</code>로 할당해주면 된다. <ul><li>추가적으로 해줘야하는 작업은 각 웹서버마다 다르다(undertow는 https 설정이 되어있으면 추가적인 설정 없이 http2 enable만 <code>true</code>로 할당하면되고, tomcat은 9.X버전과 JDK9 이상을 쓰면 추가적인 설정없이 http2를 적용할 수 있다.)</li></ul></li></ul><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">server</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">http2</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,6);function O(u,X){const e=i("router-link"),p=i("VPCard"),l=i("FontIcon");return v(),m("div",null,[n("h1",h,[n("a",b,[n("span",null,k(u.$frontmatter.title)+" 관련",1)])]),n("nav",y,[n("ul",null,[n("li",null,[a(e,{to:"#_1-의존성-관리-이해"},{default:t(()=>[s("1. 의존성 관리 이해")]),_:1})]),n("li",null,[a(e,{to:"#_2-의존성-관리-응용"},{default:t(()=>[s("2. 의존성 관리 응용")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#버전-관리-해주는-의존성-추가"},{default:t(()=>[s("버전 관리 해주는 의존성 추가")]),_:1})]),n("li",null,[a(e,{to:"#버전-관리-안해주는-의존성-추가"},{default:t(()=>[s("버전 관리 안해주는 의존성 추가")]),_:1})]),n("li",null,[a(e,{to:"#기존-의존성-버전-변경하기"},{default:t(()=>[s("기존 의존성 버전 변경하기")]),_:1})])])]),n("li",null,[a(e,{to:"#_3-자동-설정-이해"},{default:t(()=>[s("3. 자동 설정 이해")]),_:1})]),n("li",null,[a(e,{to:"#_4-자동-설정-만들기-1부-starter와-autoconfigure"},{default:t(()=>[s("4. 자동 설정 만들기 1부: Starter와 AutoConfigure")]),_:1})]),n("li",null,[a(e,{to:"#_5-자동-설정-만들기-2부-configurationproperties"},{default:t(()=>[s("5. 자동 설정 만들기 2부: @ConfigurationProperties")]),_:1})]),n("li",null,[a(e,{to:"#_6-내장-웹-서버-이해"},{default:t(()=>[s("6. 내장 웹 서버 이해")]),_:1}),n("ul",null,[n("li",null,[a(e,{to:"#내장-웹-서버-응용-1부-컨테이너와-포트"},{default:t(()=>[s("내장 웹 서버 응용 1부: 컨테이너와 포트")]),_:1})]),n("li",null,[a(e,{to:"#내장-웹-서버-응용-2부-https와-http2"},{default:t(()=>[s("내장 웹 서버 응용 2부: HTTPS와 HTTP2")]),_:1})])])])])]),_,a(p,c(r({title:"namjunemy/TIL - [스프링 부트 개념과 활용] 2. 스프링 부트 원리",desc:"[스프링 부트 개념과 활용] 2. 스프링 부트 원리",link:"https://github.com/namjunemy/TIL/blob/master/SpringBoot/02_springboot_principle.md",logo:"https://github.githubassets.com/favicons/favicon-dark.png",background:"rgba(13,16,20,0.2)"})),null,16),f,a(p,c(r({title:"Spring Boot Reference Documentation",desc:"6.1.1. Dependency Management",link:"https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-dependency-management",logo:"https://docs.spring.io/favicon.ico",background:"rgba(125,77,69,0.2)"})),null,16),n("ul",null,[n("li",null,[S,s(" 의 부모인 "),w,s(", 그리고 다시 그 parent의 부모인 "),C,s(" 에 정의되어 있는 "),a(l,{icon:"iconfont icon-code"}),x,s("의 "),j,s(" 영역 안에 해당 릴리즈 버전에서 관리하는 의존성들이 정의 되어 있다. "),T]),P]),A,n("ul",null,[n("li",null,[s("별도로 추가해야 하는 의존성들은 "),n("a",B,[a(l,{icon:"fas fa-globe"}),I]),s(" 를 통해서 검색해서 직접 추가하면 된다. 스타터의 parent에서 버전관리가 되지 않으므로 직접 버전까지 명시해줘야 한다.")])]),z,n("ul",null,[E,n("li",null,[n("strong",null,[s("추가적으로 "),a(l,{icon:"iconfont icon-yaml"}),L,s("에 설정한 값을 "),N,s("를 통해서 빈에 주입할 수 있다.")]),W])]),R,n("blockquote",null,[n("p",null,[s("."),a(l,{icon:"iconfont icon-yaml"}),F])]),q,n("blockquote",null,[a(l,{icon:"iconfont icon-yaml"}),H]),G,n("ul",null,[n("li",null,[n("p",null,[s("이렇게 SSL 키를 등록하고 스프링부트 애플리케이션을 실행하면, "),a(l,{icon:"fas fa-globe"}),D,s("으로 접근이 불가하다. 앞으로 애플리케이션으로의 모든 접근은 https로 해야한다.")])]),n("li",null,[n("p",null,[s("추가적으로 http 접근도 가능하게 설정하려면 아래와 같이 애플리케이션 코드에 http 요청을 받기 위한 커넥터를 추가해주면 된다. 대신 "),a(l,{icon:"iconfont icon-yaml"}),K,s("에서 https의 포트를 변경해준다.")])])]),V])}const J=d(g,[["render",O],["__file","02.html.vue"]]),Y=JSON.parse('{"path":"/java/spring-boot-whiteship/02.html","title":"2. 스프링 부트 원리","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"2. 스프링 부트 원리","description":"스프링 부트 개념과 활용 > 2. 스프링 부트 원리","category":["Java","Spring","Spring Boot"],"tag":["crashcourse","java","jdk","jdk8","stream","spring","springframework","springboot"],"head":[[{"meta":null},{"property":"og:title","content":"스프링 부트 개념과 활용 > 2. 스프링 부트 원리"},{"property":"og:description","content":"2. 스프링 부트 원리"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/java/spring-boot-whiteship/02.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/java/spring-boot-whiteship/02.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"2. 스프링 부트 원리"}],["meta",{"property":"og:description","content":"스프링 부트 개념과 활용 > 2. 스프링 부트 원리"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://github.com/namjunemy/TIL/blob/master/SpringBoot/img/01_gradle_dependency.PNG?raw=true"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"jdk"}],["meta",{"property":"article:tag","content":"jdk8"}],["meta",{"property":"article:tag","content":"stream"}],["meta",{"property":"article:tag","content":"spring"}],["meta",{"property":"article:tag","content":"springframework"}],["meta",{"property":"article:tag","content":"springboot"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2. 스프링 부트 원리\\",\\"image\\":[\\"https://github.com/namjunemy/TIL/blob/master/SpringBoot/img/01_gradle_dependency.PNG?raw=true\\",\\"https://github.com/namjunemy/TIL/blob/master/SpringBoot/img/02_add_dependency_stater.PNG?raw=true\\",\\"https://github.com/namjunemy/TIL/blob/master/SpringBoot/img/01_gradle_dependency.PNG?raw=true\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1. 의존성 관리 이해","slug":"_1-의존성-관리-이해","link":"#_1-의존성-관리-이해","children":[]},{"level":2,"title":"2. 의존성 관리 응용","slug":"_2-의존성-관리-응용","link":"#_2-의존성-관리-응용","children":[{"level":3,"title":"버전 관리 해주는 의존성 추가","slug":"버전-관리-해주는-의존성-추가","link":"#버전-관리-해주는-의존성-추가","children":[]},{"level":3,"title":"버전 관리 안해주는 의존성 추가","slug":"버전-관리-안해주는-의존성-추가","link":"#버전-관리-안해주는-의존성-추가","children":[]},{"level":3,"title":"기존 의존성 버전 변경하기","slug":"기존-의존성-버전-변경하기","link":"#기존-의존성-버전-변경하기","children":[]}]},{"level":2,"title":"3. 자동 설정 이해","slug":"_3-자동-설정-이해","link":"#_3-자동-설정-이해","children":[]},{"level":2,"title":"4. 자동 설정 만들기 1부: Starter와 AutoConfigure","slug":"_4-자동-설정-만들기-1부-starter와-autoconfigure","link":"#_4-자동-설정-만들기-1부-starter와-autoconfigure","children":[]},{"level":2,"title":"5. 자동 설정 만들기 2부: @ConfigurationProperties","slug":"_5-자동-설정-만들기-2부-configurationproperties","link":"#_5-자동-설정-만들기-2부-configurationproperties","children":[]},{"level":2,"title":"6. 내장 웹 서버 이해","slug":"_6-내장-웹-서버-이해","link":"#_6-내장-웹-서버-이해","children":[{"level":3,"title":"내장 웹 서버 응용 1부: 컨테이너와 포트","slug":"내장-웹-서버-응용-1부-컨테이너와-포트","link":"#내장-웹-서버-응용-1부-컨테이너와-포트","children":[]},{"level":3,"title":"내장 웹 서버 응용 2부: HTTPS와 HTTP2","slug":"내장-웹-서버-응용-2부-https와-http2","link":"#내장-웹-서버-응용-2부-https와-http2","children":[]}]}],"git":{"createdTime":1711378270000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":3}]},"readingTime":{"minutes":1.7,"words":511},"filePathRelative":"java/spring-boot-whiteship/02.md","localizedDate":"2024년 3월 25일","excerpt":"\\n\\n<hr>\\n"}');export{J as comp,Y as data};
