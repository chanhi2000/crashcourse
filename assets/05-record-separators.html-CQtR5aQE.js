import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,a as s,t as b,b as t,w as n,n as k,g,d as e,e as r,r as p,o as f}from"./app-U_bew1in.js";const _={},x={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},A=s("hr",null,null,-1),R=r("<hr><p>So far, you&#39;ve seen examples where <code>awk</code> automatically splits input line by line based on the newline character. Just like you can control how those lines are further split into fields using <code>FS</code> and other features, <code>awk</code> provides a way to control what constitutes a line in the first place. In <code>awk</code> parlance, the term <strong>record</strong> is used to describe the contents that gets placed in the <code>$0</code> variable. And similar to <code>OFS</code>, you can control the string that gets added at the end for the <code>print</code> function. This chapter will also discuss how you can use special variables that have information related to record (line) numbers.</p>",2),S={class:"hint-container info"},N=s("p",{class:"hint-container-title"},"Info",-1),C={href:"https://github.com/learnbyexample/learn_gnuawk/tree/master/example_files",target:"_blank",rel:"noopener noreferrer"},j=s("hr",null,null,-1),E=s("h2",{id:"input-record-separator",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#input-record-separator"},[s("span",null,"Input record separator")])],-1),T=s("p",null,[e("The "),s("code",null,"RS"),e(" special variable is used to control how the input content is split into records. The default is the newline character, as evident from the examples used in the previous chapters. The special variable "),s("code",null,"NR"),e(" keeps track of the current record number.")],-1),F=s("p",null,"change the input record separator to a comma character note the content of the 2nd record where newline is just another character",-1),$=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'this,is\\na,sample,text'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"RS"),s("span",{class:"token operator"},"="),e(", "),s("span",{class:"token string"},`'{print NR ")", $0}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1) this")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 2) is")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# a")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3) sample")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 4) text")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),O=r(`<p>Recall that default <code>FS</code> will split input record based on spaces, tabs and newlines. Now that you&#39;ve seen how <code>RS</code> can be something other than <code>\\n</code>, here&#39;s an example to show the full effect of the default record splitting.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token string">&#39;   a\\t\\tb:1000\\n\\n\\t \\n\\n123 7777:x  y \\n \\n z  :apple banana cherry&#39;</span></span>
<span class="line"><span class="token builtin class-name">printf</span> <span class="token string">&#39;%b&#39;</span> <span class="token string">&quot;<span class="token variable">$s</span>&quot;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token parameter variable">-v</span> <span class="token assign-left variable">RS</span><span class="token operator">=</span>: <span class="token parameter variable">-v</span> <span class="token assign-left variable">OFS</span><span class="token operator">=</span>, <span class="token string">&#39;{$1=$1} 1&#39;</span></span>
<span class="line"><span class="token comment"># a,b</span></span>
<span class="line"><span class="token comment"># 1000,123,7777</span></span>
<span class="line"><span class="token comment"># x,y,z</span></span>
<span class="line"><span class="token comment"># apple,banana,cherry</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Similar to <code>FS</code>, the <code>RS</code> value is treated as a string literal and then converted to a regexp. For now, consider an example with multiple characters for <code>RS</code> but without needing regexp metacharacters.</p>`,3),I=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"cat"),e(" report.log")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# blah blah Error: second record starts")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# something went wrong")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# some more details Error: third record")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# details about what went wrong")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),H=s("p",null,"use 'Error:' as the input record separator print all the records that contains 'something'",-1),Q=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"RS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'Error:'"),e(),s("span",{class:"token string"},"'/something/'"),e(" report.log")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# second record starts")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# something went wrong")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# some more details ")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),q=s("p",null,[e("If "),s("code",null,"IGNORECASE"),e(" is set, it will affect record separation as well. Except when the record separator is a single character, which can be worked around by using a character class.")],-1),P=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"IGNORECASE"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"1"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"RS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'error:'"),e(),s("span",{class:"token string"},"'NR==1'"),e(" report.log")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# blah blah ")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),G=s("p",null,[e("when "),s("code",null,"RS"),e(" is a single character")],-1),B=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"IGNORECASE"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"1"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"RS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'e'"),e(),s("span",{class:"token string"},"'NR==1'"),e(" report.log")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# blah blah Error: s")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"IGNORECASE"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"1"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"RS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'[e]'"),e(),s("span",{class:"token string"},"'NR==1'"),e(" report.log")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# blah blah ")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),W=r('<div class="hint-container warning"><p class="hint-container-title">Warning</p><p>The default line ending for text files varies between different platforms. For example, a text file downloaded from the internet or a file originating from Windows OS would typically have lines ending with carriage return and line feed characters. So, you&#39;ll have to use <code>RS=&#39;\\r\\n&#39;</code> for such files. See also <a href="https://stackoverflow.com/q/45772525/4082052" target="_blank" rel="noopener noreferrer">stackoverflow: Why does my tool output overwrite itself and how do I fix it?</a> for a detailed discussion and mitigation methods.</p></div><hr><h2 id="output-record-separator" tabindex="-1"><a class="header-anchor" href="#output-record-separator"><span>Output record separator</span></a></h2><p>The <code>ORS</code> special variable is used to customize the output record separator. <code>ORS</code> is the string that gets added to the end of every call to the <code>print</code> function. The default value for <code>ORS</code> is a single newline character, just like <code>RS</code>.</p>',4),M=s("p",null,"change NUL record separator to dot and newline",-1),D=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'apple\\0banana\\0cherry\\0'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"RS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'\\0'"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"ORS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'.\\n'"),e(),s("span",{class:"token string"},"'1'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# apple.")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# banana.")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# cherry.")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),L=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"cat"),e(" msg.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Hello there.")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# It will rain to-")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# day. Have a safe")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# and pleasant jou-")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# rney.")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),J=s("p",null,[e("here "),s("code",null,"ORS"),e(" is an empty string")],-1),Y=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"RS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'-\\n'"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"ORS"),s("span",{class:"token operator"},"="),e(),s("span",{class:"token string"},"'1'"),e(" msg.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Hello there.")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# It will rain today. Have a safe")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# and pleasant journey.")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),z=r('<div class="hint-container info"><p class="hint-container-title">Info</p><p>Note that the <code>$0</code> variable is assigned after removing trailing characters matched by <code>RS</code>. Thus, you cannot directly manipulate those characters. With tools that don&#39;t automatically strip record separator, such as <code>perl</code>, the previous example can be solved as <code>perl -pe &#39;s/-\\n//&#39; msg.txt</code>.</p></div><p>Many a times, you need to change <code>ORS</code> depending upon contents of input record or some other condition. The <code>cond ? expr1 : expr2</code> ternary operator is often used in such scenarios. The below example assumes that input is evenly divisible, you&#39;ll have to add more logic if that is not the case.</p>',2),U=s("p",null,[e("can also use "),s("code",null,"RS"),e(' instead of "'),s("code",null,"\\n"),e('" here')],-1),V=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"seq"),e(),s("span",{class:"token number"},"6"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{ORS = NR%3 ? "-" : "\\n"} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1-2-3")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 4-5-6")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),K=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Info"),s("p",null,[e("If the last line of input didn't end with the input record separator, it might get added in the output if "),s("code",null,"print"),e(" is used, as "),s("code",null,"ORS"),e(" gets appended.")])],-1),Z=s("p",null,[e("here last line of the input doesn't end with a newline character but gets added via "),s("code",null,"ORS"),e(" when 'print' is used")],-1),X=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'1\\n2'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'1; END{print 3}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 2")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ss=s("hr",null,null,-1),es=s("h2",{id:"regexp-rs-and-rt",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#regexp-rs-and-rt"},[s("span",null,"Regexp RS and RT")])],-1),ns=s("p",null,[e("As mentioned before, the value passed to "),s("code",null,"RS"),e(" is treated as a string literal and then converted to a regexp. Here are some examples.")],-1),as=s("p",null,[e("set input record separator as one or more digit characters print records containing both '"),s("code",null,"i"),e("' and '"),s("code",null,"t"),e("'")],-1),ls=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'Sample123string42with777numbers'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"RS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'[0-9]+'"),e(),s("span",{class:"token string"},"'/i/ && /t/'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# string")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# with")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ts=s("p",null,[e("similar to "),s("code",null,"FS"),e(", the value passed to RS is treated as a string which is then converted to a regexp, so need "),s("code",null,"\\\\"),e(" instead of "),s("code",null,"\\"),e(" here")],-1),is=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'load;err_msg--ant,r2..not'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"RS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'\\\\W+'"),e(),s("span",{class:"token string"},"'/an/'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ant")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),cs=s("p",null,[e("First record will be empty if "),s("code",null,"RS"),e(" matches from the start of input file. However, if "),s("code",null,"RS"),e(" matches until the very last character of the input file, there won't be an empty record as the last record. This is different from how "),s("code",null,"FS"),e(" behaves if it matches until the last character.")],-1),os=s("p",null,[e("first record is empty and the last record is a newline character change '"),s("code",null,"echo"),e("' command to '"),s("code",null,"printf"),e("' and see what changes")],-1),rs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[e("$ "),s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'123string42with777'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"RS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'[0-9]+'"),e(),s("span",{class:"token string"},`'{print NR ") [" $0 "]"}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1) []")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 2) [string]")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3) [with]")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 4) [")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ]")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ps=s("p",null,[e("difference between "),s("code",null,"FS"),e(" and "),s("code",null,"RS"),e(" when they match till the end of the input")],-1),ds=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'123string42with777'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"FS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'[0-9]+'"),e(),s("span",{class:"token string"},"'{print NF}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 4")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'123string42with777'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"RS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'[0-9]+'"),e(),s("span",{class:"token string"},"'END{print NR}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),us=s("p",null,[e("The "),s("code",null,"RT"),e(" special variable contains the text that was matched by "),s("code",null,"RS"),e(". This variable gets updated for every input record.")],-1),ms=s("p",null,[e("print record number and the value of "),s("code",null,"RT"),e(" for that record last record has empty "),s("code",null,"RT"),e(" because it didn't end with digits")],-1),hs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'Sample123string42with777numbers'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"RS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'[0-9]+'"),e(),s("span",{class:"token string"},"'{print NR, RT}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1 123")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 2 42")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3 777")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 4 ")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),vs=r(`<hr><h2 id="paragraph-mode" tabindex="-1"><a class="header-anchor" href="#paragraph-mode"><span>Paragraph mode</span></a></h2><p>As a special case, when <code>RS</code> is set to an empty string, one or more consecutive empty lines is used as the input record separator. Consider the below sample file:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> para.txt</span>
<span class="line"><span class="token comment"># Hello World</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Hi there</span></span>
<span class="line"><span class="token comment"># How are you</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Just do-it</span></span>
<span class="line"><span class="token comment"># Believe it</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># banana</span></span>
<span class="line"><span class="token comment"># papaya</span></span>
<span class="line"><span class="token comment"># mango</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Much ado about nothing</span></span>
<span class="line"><span class="token comment"># He he he</span></span>
<span class="line"><span class="token comment"># Adios amigo</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here&#39;s an example of processing input paragraph wise:</p>`,5),bs=s("p",null,[e("print all paragraphs containing '"),s("code",null,"do"),e("' note that there'll be an empty line after the last record")],-1),ks=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"RS"),s("span",{class:"token operator"},"="),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"ORS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'\\n\\n'"),e(),s("span",{class:"token string"},"'/do/'"),e(" para.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Just do-it")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Believe it")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Much ado about nothing")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# He he he")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Adios amigo")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),gs=s("p",null,[e("The empty line at the end is a common problem when dealing with custom record separators. You could either process the output further to remove it or add logic to handle the issue in "),s("code",null,"awk"),e(" itself. Here's one possible workaround for the previous example:")],-1),fs=s("p",null,"here ORS is left as the default newline character uninitialized variable 's' will be empty for the first match afterwards, 's' will provide the empty line separation",-1),_s=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"RS"),s("span",{class:"token operator"},"="),e(),s("span",{class:"token string"},`'/do/{print s $0; s="\\n"}'`),e(" para.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Just do-it")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Believe it")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Much ado about nothing")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# He he he")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Adios amigo")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),xs=r(`<p>Paragraph mode is not the same as using <code>RS=&#39;\\n\\n+&#39;</code> because awk does a few more operations when <code>RS</code> is empty. See <a href="https://www.gnu.org/software/gawk/manual/html_node/Multiple-Line.html#Multiple-Line" target="_blank" rel="noopener noreferrer">gawk manual: multiline records</a> for details. Important points are quoted below and illustrated with examples.</p><div class="hint-container info"><p class="hint-container-title">Info</p><p>However, there is an important difference between <code>RS = &quot;&quot;</code> and <code>RS = &quot;\\n\\n+&quot;</code>. In the first case, leading newlines in the input data file are ignored</p></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token string">&#39;\\n\\n\\na\\nb\\n\\n12\\n34\\n\\nhi\\nhello\\n&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,3),ws=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'%b'"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"RS"),s("span",{class:"token operator"},"="),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"ORS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'\\n---\\n'"),e(),s("span",{class:"token string"},"'NR<=2'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# a")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# b")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ---")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 12")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 34")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ---")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ys=s("p",null,[s("code",null,"RS"),e(" is "),s("code",null,"'\\n\\n+'"),e(" instead of paragraph mode")],-1),As=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'%b'"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"RS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'\\n\\n+'"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"ORS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'\\n---\\n'"),e(),s("span",{class:"token string"},"'NR<=2'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ---")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# a")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# b")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ---")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Rs=r(`<div class="hint-container info"><p class="hint-container-title">Info</p><p>and if a file ends without extra blank lines after the last record, the final newline is removed from the record. In the second case, this special processing is not done.</p></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token string">&#39;\\n\\n\\na\\nb\\n\\n12\\n34\\n\\nhi\\nhello\\n&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,2),Ss=s("p",null,"paragraph mode",-1),Ns=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'%b'"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"RS"),s("span",{class:"token operator"},"="),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"ORS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'\\n---\\n'"),e(),s("span",{class:"token string"},"'END{print}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# hi")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# hello")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ---")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Cs=s("p",null,[s("code",null,"RS"),e(" is "),s("code",null,"'\\n\\n+'"),e(" instead of paragraph mode")],-1),js=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'%b'"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"RS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'\\n\\n+'"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"ORS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'\\n---\\n'"),e(),s("span",{class:"token string"},"'END{print}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# hi")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# hello")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ---")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Es=r(`<div class="hint-container info"><p class="hint-container-title">Info</p><p>When <code>RS</code> is set to the empty string and <code>FS</code> is set to a single character, the newline character always acts as a field separator. This is in addition to whatever field separations result from <code>FS</code>. When <code>FS</code> is the null string (<code>&quot;&quot;</code>) or a regexp, this special feature of <code>RS</code> does not apply. It does apply to the default field separator of a single space: <code>FS = &quot; &quot;</code></p></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token string">&#39;a:b\\nc:d\\n\\n1\\n2\\n3&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,2),Ts=s("p",null,[s("code",null,"FS"),e(" is a single character in paragraph mode")],-1),Fs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'%b'"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F: "),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"RS"),s("span",{class:"token operator"},"="),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"ORS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'\\n---\\n'"),e(),s("span",{class:"token string"},"'{$1=$1} 1'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# a b c d")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ---")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1 2 3")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ---")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),$s=s("p",null,[s("code",null,"FS"),e(" is a regexp in paragraph mode")],-1),Os=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'%b'"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F"),s("span",{class:"token string"},"'[:]'"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"RS"),s("span",{class:"token operator"},"="),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"ORS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'\\n---\\n'"),e(),s("span",{class:"token string"},"'{$1=$1} 1'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# a b")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# c d")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ---")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 2")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ---")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Is=s("p",null,[s("code",null,"FS"),e(" is a single character and "),s("code",null,"RS"),e(" is "),s("code",null,"'\\n\\n+'"),e(" instead of paragraph mode")],-1),Hs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'%b'"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F: "),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"RS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'\\n\\n+'"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"ORS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'\\n---\\n'"),e(),s("span",{class:"token string"},"'{$1=$1} 1'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# a b")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# c d")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ---")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 2")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ---")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Qs=s("hr",null,null,-1),qs=s("h2",{id:"nr-vs-fnr",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#nr-vs-fnr"},[s("span",null,"NR vs FNR")])],-1),Ps=s("p",null,"There are two special variables related to record numbering. You've seen NR earlier in the chapter, but here are some more examples.",-1),Gs=s("blockquote",null,[s("p",null,[e("same as: "),s("code",null,"head -n2")])],-1),Bs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"seq"),e(),s("span",{class:"token number"},"5"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'NR<=2'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 2")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ws=s("blockquote",null,[s("p",null,[e("same as: "),s("code",null,"tail -n1")])],-1),Ms=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'END{print}'"),e(" table.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# yellow banana window shoes 3.14")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ds=s("p",null,"change the first field content only for the second line",-1),Ls=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'NR==2{$1="green"} 1'`),e(" table.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# brown bread mat hair 42")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# green cake mug shirt -7")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# yellow banana window shoes 3.14")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Js=s("p",null,[e("All the examples with "),s("code",null,"NR"),e(" so far has been with a single file input. If there are multiple file inputs, then you can choose between "),s("code",null,"NR"),e(" and the second special variable "),s("code",null,"FNR"),e(". The difference is that "),s("code",null,"NR"),e(" contains total records read so far whereas "),s("code",null,"FNR"),e(" contains record number of only the current file being processed. Here are some examples to show them in action. You'll see more examples in later chapters as well.")],-1),Ys=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"OFS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'\\t'"),e(),s("span",{class:"token string"},`'BEGIN{print "NR", "FNR", "Content"}`),e(`
`),s("span",{class:"line"},"                   {print NR, FNR, $0}'"),e(" report.log table.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# NR      FNR     Content")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1       1       blah blah Error: second record starts")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 2       2       something went wrong")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3       3       some more details Error: third record")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 4       4       details about what went wrong")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 5       1       brown bread mat hair 42")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 6       2       blue cake mug shirt -7")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 7       3       yellow banana window shoes 3.14")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),zs=s("blockquote",null,[s("p",null,[e("same as: "),s("code",null,"head -q -n1")])],-1),Us=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'FNR==1'"),e(" report.log table.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# blah blah Error: second record starts")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# brown bread mat hair 42")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Vs=s("p",null,[e("For large input files, use "),s("code",null,"exit"),e(" to avoid unnecessary record processing.")],-1),Ks=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"seq"),e(),s("span",{class:"token number"},"3542"),e(),s("span",{class:"token number"},"4623452"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'NR==2452{print; exit}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 5993")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"seq"),e(),s("span",{class:"token number"},"3542"),e(),s("span",{class:"token number"},"4623452"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'NR==250; NR==2452{print; exit}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3791")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 5993")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Zs=s("p",null,"here is a sample time comparison",-1),Xs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"time"),e(),s("span",{class:"token function"},"seq"),e(),s("span",{class:"token number"},"3542"),e(),s("span",{class:"token number"},"4623452"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'NR==2452{print; exit}'"),e(),s("span",{class:"token operator"},">"),e(" f1")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# real    0m0.004s")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"time"),e(),s("span",{class:"token function"},"seq"),e(),s("span",{class:"token number"},"3542"),e(),s("span",{class:"token number"},"4623452"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'NR==2452'"),e(),s("span",{class:"token operator"},">"),e(" f2")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# real    0m0.395s")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),se=r('<hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>This chapter showed you how to change the way input content is split into records and how to set the string to be appended when <code>print</code> is used. The paragraph mode is useful for processing multiline records separated by empty lines. You also learned two special variables related to record numbers and when to use them.</p><p>So far, you&#39;ve used <code>awk</code> to manipulate file content without modifying the source file. The next chapter will discuss how to write back the changes to the original input files.</p><hr><h2 id="exercises" tabindex="-1"><a class="header-anchor" href="#exercises"><span>Exercises</span></a></h2>',6),ee={class:"hint-container info"},ne=s("p",{class:"hint-container-title"},"Info",-1),ae={href:"https://github.com/learnbyexample/learn_gnuawk/tree/master/exercises",target:"_blank",rel:"noopener noreferrer"},le=s("h3",{id:"exercise-1",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-1"},[s("span",null,"Exercise 1")])],-1),te=s("code",null,"jumbled.txt",-1),ie=s("code",null,"an",-1),ce=s("code",null,"at",-1),oe=s("code",null,"in",-1),re=s("code",null,"it",-1),pe=r(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> jumbled.txt</span>
<span class="line"><span class="token comment"># overcoats;furrowing-typeface%pewter##hobby</span></span>
<span class="line"><span class="token comment"># wavering:concession/woof\\retailer</span></span>
<span class="line"><span class="token comment"># joint[]seer{intuition}titanic</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),de=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# overcoats")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# furrowing")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# wavering")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# joint")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# intuition")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# titanic")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ue=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"RS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'\\\\W+'"),e(),s("span",{class:"token string"},"'/[ai][nt]/'"),e(" jumbled.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# overcoats")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# furrowing")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# wavering")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# joint")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# intuition")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# titanic")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),me=r(`<h3 id="exercise-2" tabindex="-1"><a class="header-anchor" href="#exercise-2"><span>Exercise 2</span></a></h3><p>Emulate <code>paste -sd</code>, with <code>awk</code>.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">paste</span> -sd, addr.txt</span>
<span class="line"><span class="token comment"># Hello World,How are you,This game is good,Today is sunny,12345,You are funny</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,3),he=s("p",null,[e("this command joins all input lines with the '"),s("code",null,","),e("' character")],-1),ve=s("p",null,[e("make sure there's no '"),s("code",null,","),e("' at end of the line and that there's a newline character at the end of the line")],-1),be=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Hello World,How are you,This game is good,Today is sunny,12345,You are funny")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ke=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"ORS"),s("span",{class:"token operator"},"="),e(),s("span",{class:"token string"},`'NR>1{print ","} 1; END{print "\\n"}'`),e(" addr.txt ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Hello World,How are you,This game is good,Today is sunny,12345,You are funny")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ge=s("p",null,[e("if there's only one line in input, again make sure there's no trailing '"),s("code",null,","),e("'")],-1),fe=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'fig'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"paste"),e(" -sd,")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# fig")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'fig'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# fig")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),_e=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'fig'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"paste"),e(" -sd,")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# fig")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'fig'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"ORS"),s("span",{class:"token operator"},"="),e(),s("span",{class:"token string"},`'NR>1{print ","} 1; END{print "\\n"}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# fig")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),xe=s("h3",{id:"exercise-3",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-3"},[s("span",null,"Exercise 3")])],-1),we=s("code",null,"scores.csv",-1),ye=s("strong",null,"GP",-1),Ae=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Name,Maths,Physics,Chemistry,GP")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Blue,67,46,99,69.75")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Lin,78,83,80,79.75")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Er,56,79,92,70.75")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Cy,97,98,95,96.75")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Ort,68,72,66,68.5")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Ith,100,100,100,100")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Re=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(" -F, "),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"OFS"),s("span",{class:"token operator"},"="),e(", "),s("span",{class:"token string"},`'{$(NF+1) = NR==1 ? "GP" : ($2/2 + ($3+$4)/4)} 1'`),e(" scores.csv")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Name,Maths,Physics,Chemistry,GP")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Blue,67,46,99,69.75")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Lin,78,83,80,79.75")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Er,56,79,92,70.75")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Cy,97,98,95,96.75")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Ort,68,72,66,68.5")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Ith,100,100,100,100")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Se=s("h3",{id:"exercise-4",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-4"},[s("span",null,"Exercise 4")])],-1),Ne=s("code",null,"sample.txt",-1),Ce=s("code",null,"do",-1),je=r(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> sample.txt</span>
<span class="line"><span class="token comment"># Hello World</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Good day</span></span>
<span class="line"><span class="token comment"># How are you</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Just do-it</span></span>
<span class="line"><span class="token comment"># Believe it</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Today is sunny</span></span>
<span class="line"><span class="token comment"># Not a bit funny</span></span>
<span class="line"><span class="token comment"># No doubt you like it too</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># Much ado about nothing</span></span>
<span class="line"><span class="token comment"># He he he</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ee=s("p",null,"note that there's no extra empty line at the end of the output",-1),Te=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Just do-it")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Believe it")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Much ado about nothing")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# He he he")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Fe=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(" -F"),s("span",{class:"token string"},"'\\n'"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"RS"),s("span",{class:"token operator"},"="),e(),s("span",{class:"token string"},`'NF==2 && /do/{print s $0; s="\\n"}'`),e(" sample.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Just do-it")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Believe it")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Much ado about nothing")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# He he he")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),$e=s("h3",{id:"exercise-5",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-5"},[s("span",null,"Exercise 5")])],-1),Oe=s("code",null,"sample.txt",-1),Ie=s("code",null,".",-1),He=s("code",null,".",-1),Qe=s("p",null,"note that there's no extra empty line at the end of the output",-1),qe=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Hello World.")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Good day. How are you.")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Just do-it. Believe it.")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Today is sunny. Not a bit funny. No doubt you like it too.")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Much ado about nothing. He he he.")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Pe=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{FS="\\n"; OFS=". "; RS=""} {$NF=$NF "."; print s $0; s="\\n"}'`),e(" sample.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Hello World.")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Good day. How are you.")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Just do-it. Believe it.")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Today is sunny. Not a bit funny. No doubt you like it too.")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Much ado about nothing. He he he.")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ge=s("h3",{id:"exercise-6",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-6"},[s("span",null,"Exercise 6")])],-1),Be=s("code",null,"mixed_fs.txt",-1),We=s("code",null,",",-1),Me=r(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> mixed_fs.txt</span>
<span class="line"><span class="token comment"># rose lily jasmine tulip</span></span>
<span class="line"><span class="token comment"># pink blue white yellow</span></span>
<span class="line"><span class="token comment"># car,mat,ball,basket</span></span>
<span class="line"><span class="token comment"># green,brown,black,purple</span></span>
<span class="line"><span class="token comment"># apple,banana,cherry</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),De=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# rose lily")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# pink blue")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# car,mat")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# green,brown")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# apple,banana")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Le=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'NF=2; NR==2{FS=OFS=","}'`),e(" mixed_fs.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# rose lily")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# pink blue")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# car,mat")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# green,brown")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# apple,banana")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Je=s("h3",{id:"exercise-7",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-7"},[s("span",null,"Exercise 7")])],-1),Ye=s("code",null,"table.txt",-1),ze=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# brown bread mat hair 42")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# yellow banana window shoes 3.14")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ue=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'NR!=2'"),e(" table.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# brown bread mat hair 42")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# yellow banana window shoes 3.14")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ve=s("h3",{id:"exercise-8",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-8"},[s("span",null,"Exercise 8")])],-1),Ke=s("code",null,"table.txt",-1),Ze=s("code",null,"air",-1),Xe=s("code",null,"win",-1),sn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),en=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/air|win/{print NR}'"),e(" table.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),nn=s("h3",{id:"exercise-9",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-9"},[s("span",null,"Exercise 9")])],-1),an=s("code",null,"table.txt",-1),ln=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 45.14")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),tn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'NR!=2{sum += $NF} END{print sum}'"),e(" table.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 45.14")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),cn=s("h3",{id:"exercise-10",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-10"},[s("span",null,"Exercise 10")])],-1),on=s("p",null,"Print the second and fourth line for every block of five lines.",-1),rn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"seq"),e(),s("span",{class:"token number"},"15"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 2")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 4")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 7")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 9")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 12")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 14")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),pn=s("blockquote",null,[s("p",null,[e("can also use: "),s("code",null,"seq 15 | awk 'BEGIN{a[2]; a[4]} (NR%5) in a'")])],-1),dn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"seq"),e(),s("span",{class:"token number"},"15"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'NR%5 == 2 || NR%5 == 4'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 2")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 4")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 7")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 9")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 12")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 14")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),un=s("h3",{id:"exercise-11",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-11"},[s("span",null,"Exercise 11")])],-1),mn=s("code",null,"odd.txt",-1),hn=s("code",null,"{}",-1),vn=s("code",null,"RT",-1),bn=s("code",null,"sed -E 's/\\b(\\w)(\\w*\\1)?\\b/{&}/g' odd.txt",-1),kn=r(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> odd.txt</span>
<span class="line"><span class="token comment"># -oreo-not:a _a2_ roar&lt;=&gt;took%22</span></span>
<span class="line"><span class="token comment"># RoaR to wow-</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),gn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# -{oreo}-not:{a} {_a2_} {roar}<=>took%{22}")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# {RoaR} to {wow}-")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),fn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-F"),e(),s("span",{class:"token string"},"''"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"RS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'\\\\W+'"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"ORS"),s("span",{class:"token operator"},"="),e(),s("span",{class:"token string"},`'$0 && $1==$NF{$0 = "{" $0 "}"} {print $0 RT}'`),e(" odd.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# -{oreo}-not:{a} {_a2_} {roar}<=>took%{22}")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# {RoaR} to {wow}-")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),_n=s("h3",{id:"exercise-12",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-12"},[s("span",null,"Exercise 12")])],-1),xn=s("code",null,"addr.txt",-1),wn=s("code",null,"sample.txt",-1),yn=s("code",null,"copyright.txt",-1),An=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# game")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# day")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# bla")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Rn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'FNR==3{print $2}'"),e(" addr.txt sample.txt copyright.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# game")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# day")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# bla")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Sn=s("h3",{id:"exercise-13",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-13"},[s("span",null,"Exercise 13")])],-1),Nn=s("code",null,"ip.txt",-1),Cn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# hello")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# world")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# apple")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# banana")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# cherry")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# tea coffee")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# chocolate")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),jn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"RS"),s("span",{class:"token operator"},"="),e(),s("span",{class:"token string"},`'{print s $0; s="\\n\\n"}'`),e(" ip.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# hello")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# world")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# apple")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# banana")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# cherry")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# tea coffee")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# chocolate")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),En=s("h3",{id:"exercise-14",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-14"},[s("span",null,"Exercise 14")])],-1),Tn=s("p",null,[e("The sample string shown below uses "),s("code",null,"cat"),e(" as the record separator (irrespective of case). Display only the even numbered records separated by a single empty line.")],-1),Fn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'applecatfigCaT12345cAtbananaCATguava:caT:mangocat3'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# fig")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# banana")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# :mango")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),$n=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'applecatfigCaT12345cAtbananaCATguava:caT:mangocat3'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"RS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'cat'"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"IGNORECASE"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"1"),e(),s("span",{class:"token string"},`'NR%2==0{print s $0; s="\\n"}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# fig")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# banana")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# :mango")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),On=s("h3",{id:"exercise-15",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-15"},[s("span",null,"Exercise 15")])],-1),In=s("p",null,"Input has the ASCII NUL character as the record separator. Change it to dot and newline characters as shown below.",-1),Hn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'apple\\npie\\0banana\\ncherry\\0'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# apple")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# pie.")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# banana")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# cherry.")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Qn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'apple\\npie\\0banana\\ncherry\\0'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"RS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'\\0'"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"ORS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'.\\n'"),e(),s("span",{class:"token string"},"'1'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# apple")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# pie.")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# banana")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# cherry.")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),qn=s("hr",null,null,-1);function Pn(d,Gn){const c=p("router-link"),u=p("VPCard"),o=p("FontIcon"),i=p("Tabs"),m=p("TagLinks");return f(),v("div",null,[s("h1",x,[s("a",w,[s("span",null,b(d.$frontmatter.title)+" 관련",1)])]),s("nav",y,[s("ul",null,[s("li",null,[t(c,{to:"#input-record-separator"},{default:n(()=>[e("Input record separator")]),_:1})]),s("li",null,[t(c,{to:"#output-record-separator"},{default:n(()=>[e("Output record separator")]),_:1})]),s("li",null,[t(c,{to:"#regexp-rs-and-rt"},{default:n(()=>[e("Regexp RS and RT")]),_:1})]),s("li",null,[t(c,{to:"#paragraph-mode"},{default:n(()=>[e("Paragraph mode")]),_:1})]),s("li",null,[t(c,{to:"#nr-vs-fnr"},{default:n(()=>[e("NR vs FNR")]),_:1})]),s("li",null,[t(c,{to:"#summary"},{default:n(()=>[e("Summary")]),_:1})]),s("li",null,[t(c,{to:"#exercises"},{default:n(()=>[e("Exercises")]),_:1}),s("ul",null,[s("li",null,[t(c,{to:"#exercise-1"},{default:n(()=>[e("Exercise 1")]),_:1})]),s("li",null,[t(c,{to:"#exercise-2"},{default:n(()=>[e("Exercise 2")]),_:1})]),s("li",null,[t(c,{to:"#exercise-3"},{default:n(()=>[e("Exercise 3")]),_:1})]),s("li",null,[t(c,{to:"#exercise-4"},{default:n(()=>[e("Exercise 4")]),_:1})]),s("li",null,[t(c,{to:"#exercise-5"},{default:n(()=>[e("Exercise 5")]),_:1})]),s("li",null,[t(c,{to:"#exercise-6"},{default:n(()=>[e("Exercise 6")]),_:1})]),s("li",null,[t(c,{to:"#exercise-7"},{default:n(()=>[e("Exercise 7")]),_:1})]),s("li",null,[t(c,{to:"#exercise-8"},{default:n(()=>[e("Exercise 8")]),_:1})]),s("li",null,[t(c,{to:"#exercise-9"},{default:n(()=>[e("Exercise 9")]),_:1})]),s("li",null,[t(c,{to:"#exercise-10"},{default:n(()=>[e("Exercise 10")]),_:1})]),s("li",null,[t(c,{to:"#exercise-11"},{default:n(()=>[e("Exercise 11")]),_:1})]),s("li",null,[t(c,{to:"#exercise-12"},{default:n(()=>[e("Exercise 12")]),_:1})]),s("li",null,[t(c,{to:"#exercise-13"},{default:n(()=>[e("Exercise 13")]),_:1})]),s("li",null,[t(c,{to:"#exercise-14"},{default:n(()=>[e("Exercise 14")]),_:1})]),s("li",null,[t(c,{to:"#exercise-15"},{default:n(()=>[e("Exercise 15")]),_:1})])])])])]),A,t(u,k(g({title:"5. Record separators",desc:"CLI Text Processing with GNU awk",link:"https://learnbyexample.github.io/learn_gnuawk/record-separators.html",logo:"https://learnbyexample.github.io/favicon.svg",background:"rgba(22,25,35,0.2)"})),null,16),R,s("div",S,[N,s("p",null,[e("The "),s("a",C,[t(o,{icon:"iconfont icon-github"}),e(" example_files")]),e(" directory has all the files used in the examples.")])]),j,E,T,t(i,{id:"24",data:[{id:"Case 1"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),tab0:n(({value:a,isActive:l})=>[F,$]),_:1}),O,t(i,{id:"39",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),tab0:n(({value:a,isActive:l})=>[I]),tab1:n(({value:a,isActive:l})=>[H,Q]),_:1}),q,t(i,{id:"53",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),tab0:n(({value:a,isActive:l})=>[P]),tab1:n(({value:a,isActive:l})=>[G,B]),_:1}),W,t(i,{id:"76",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),title2:n(({value:a,isActive:l})=>[e("Case 3")]),tab0:n(({value:a,isActive:l})=>[M,D]),tab1:n(({value:a,isActive:l})=>[L]),tab2:n(({value:a,isActive:l})=>[J,Y]),_:1}),z,t(i,{id:"101",data:[{id:"Case 1"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),tab0:n(({value:a,isActive:l})=>[U,V]),_:1}),K,t(i,{id:"114",data:[{id:"Case 1"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),tab0:n(({value:a,isActive:l})=>[Z,X]),_:1}),ss,es,ns,t(i,{id:"129",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),tab0:n(({value:a,isActive:l})=>[as,ls]),tab1:n(({value:a,isActive:l})=>[ts,is]),_:1}),cs,t(i,{id:"146",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),tab0:n(({value:a,isActive:l})=>[os,rs]),tab1:n(({value:a,isActive:l})=>[ps,ds]),_:1}),us,t(i,{id:"163",data:[{id:"Case 1"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),tab0:n(({value:a,isActive:l})=>[ms,hs]),_:1}),vs,t(i,{id:"182",data:[{id:"Case 1"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),tab0:n(({value:a,isActive:l})=>[bs,ks]),_:1}),gs,t(i,{id:"193",data:[{id:"Case 1"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),tab0:n(({value:a,isActive:l})=>[fs,_s]),_:1}),xs,t(i,{id:"210",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),tab0:n(({value:a,isActive:l})=>[ws]),tab1:n(({value:a,isActive:l})=>[ys,As]),_:1}),Rs,t(i,{id:"230",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),tab0:n(({value:a,isActive:l})=>[Ss,Ns]),tab1:n(({value:a,isActive:l})=>[Cs,js]),_:1}),Es,t(i,{id:"250",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),title2:n(({value:a,isActive:l})=>[e("Case 3")]),tab0:n(({value:a,isActive:l})=>[Ts,Fs]),tab1:n(({value:a,isActive:l})=>[$s,Os]),tab2:n(({value:a,isActive:l})=>[Is,Hs]),_:1}),Qs,qs,Ps,t(i,{id:"277",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),title2:n(({value:a,isActive:l})=>[e("Case 3")]),tab0:n(({value:a,isActive:l})=>[Gs,Bs]),tab1:n(({value:a,isActive:l})=>[Ws,Ms]),tab2:n(({value:a,isActive:l})=>[Ds,Ls]),_:1}),Js,t(i,{id:"304",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),tab0:n(({value:a,isActive:l})=>[Ys]),tab1:n(({value:a,isActive:l})=>[zs,Us]),_:1}),Vs,t(i,{id:"320",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),tab0:n(({value:a,isActive:l})=>[Ks]),tab1:n(({value:a,isActive:l})=>[Zs,Xs]),_:1}),se,s("div",ee,[ne,s("p",null,[e("The "),s("a",ae,[t(o,{icon:"iconfont icon-github"}),e(" exercises")]),e(" directory has all the files used in this section.")])]),le,s("p",null,[e("The input file "),t(o,{icon:"fas fa-file-lines"}),te,e(" consists of words separated by various delimiters. Display all words that contain "),ie,e(" or "),ce,e(" or "),oe,e(" or "),re,e(", one per line.")]),pe,t(i,{id:"357",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[de]),tab1:n(({value:a,isActive:l})=>[ue]),_:1}),me,t(i,{id:"372",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[he,ve,be]),tab1:n(({value:a,isActive:l})=>[ke]),_:1}),t(i,{id:"386",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[ge,fe]),tab1:n(({value:a,isActive:l})=>[_e]),_:1}),xe,s("p",null,[e("For the input file "),t(o,{icon:"fas fa-file-csv"}),e(),we,e(", add another column named "),ye,e(" which is calculated out of 100 by giving 50% weightage to Maths and 25% each for Physics and Chemistry.")]),t(i,{id:"403",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[Ae]),tab1:n(({value:a,isActive:l})=>[Re]),_:1}),Se,s("p",null,[e("For the input file "),t(o,{icon:"fas fa-file-lines"}),e(),Ne,e(", extract paragraphs containing "),Ce,e(" and exactly two lines.")]),je,t(i,{id:"418",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[Ee,Te]),tab1:n(({value:a,isActive:l})=>[Fe]),_:1}),$e,s("p",null,[e("For the input file "),t(o,{icon:"fas fa-file-lines"}),e(),Oe,e(", change each paragraph to a single line by joining lines using "),Ie,e(" and a space character as the separator. Also, add a final "),He,e(" to each paragraph.")]),t(i,{id:"435",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[Qe,qe]),tab1:n(({value:a,isActive:l})=>[Pe]),_:1}),Ge,s("p",null,[e("The various input/output separators can be changed dynamically and comes into effect during the next input/output operation. For the input file "),t(o,{icon:"fas fa-file-lines"}),e(),Be,e(", retain only the first two fields from each input line. The field separators should be space for the first two lines and "),We,e(" for the rest of the lines.")]),Me,t(i,{id:"453",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[De]),tab1:n(({value:a,isActive:l})=>[Le]),_:1}),Je,s("p",null,[e("For the input file "),t(o,{icon:"fas fa-file-lines"}),e(),Ye,e(", print other than the second line.")]),t(i,{id:"467",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[ze]),tab1:n(({value:a,isActive:l})=>[Ue]),_:1}),Ve,s("p",null,[e("For the "),t(o,{icon:"fas fa-file-lines"}),e(),Ke,e(" file, print only the line number for lines containing "),Ze,e(" or "),Xe,e(".")]),t(i,{id:"481",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[sn]),tab1:n(({value:a,isActive:l})=>[en]),_:1}),nn,s("p",null,[e("For the input file "),t(o,{icon:"fas fa-file-lines"}),e(),an,e(", calculate the sum of numbers in the last column, excluding the second line.")]),t(i,{id:"495",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[ln]),tab1:n(({value:a,isActive:l})=>[tn]),_:1}),cn,on,t(i,{id:"509",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[rn]),tab1:n(({value:a,isActive:l})=>[pn,dn]),_:1}),un,s("p",null,[e("For the input file "),t(o,{icon:"fas fa-file-lines"}),e(),mn,e(", surround all whole words with "),hn,e(" that start and end with the same word character. This is a contrived exercise to make you use the "),vn,e(" variable ("),bn,e(" would be a simpler solution).")]),kn,t(i,{id:"529",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[gn]),tab1:n(({value:a,isActive:l})=>[fn]),_:1}),_n,s("p",null,[e("Print only the second field of the third line, if any, from these input files: "),t(o,{icon:"fas fa-file-lines"}),e(),xn,e(", "),t(o,{icon:"fas fa-file-lines"}),e(),wn,e(" and "),t(o,{icon:"fas fa-file-lines"}),e(),yn,e(". Consider space as the field separator.")]),t(i,{id:"543",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[An]),tab1:n(({value:a,isActive:l})=>[Rn]),_:1}),Sn,s("p",null,[e("The input file "),t(o,{icon:"fas fa-file-lines"}),e(),Nn,e(" has varying amount of empty lines between the records, change them to be always two empty lines. Also, remove the empty lines at the start and end of the file.")]),t(i,{id:"557",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[Cn]),tab1:n(({value:a,isActive:l})=>[jn]),_:1}),En,Tn,t(i,{id:"571",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[Fn]),tab1:n(({value:a,isActive:l})=>[$n]),_:1}),On,In,t(i,{id:"585",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Answer")]),tab0:n(({value:a,isActive:l})=>[Hn]),tab1:n(({value:a,isActive:l})=>[Qn]),_:1}),qn,t(m)])}const Mn=h(_,[["render",Pn],["__file","05-record-separators.html.vue"]]),Dn=JSON.parse('{"path":"/cli/text-processing-w-gnu-awk/05-record-separators.html","title":"5. Record separators","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"5. Record separators","description":"Text Processing with GNU awk > 5. Record separators","category":["CLI","Linux"],"tags":["crashcourse","cli","sh","shell","gnu","linux","awk"],"head":[[{"meta":null},{"property":"og:title","content":"Text Processing with GNU awk > 5. Record separators"},{"property":"og:description","content":"5. Record separators"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/cli/text-processing-w-gnu-awk/05-record-separators.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/cli/text-processing-w-gnu-awk/05-record-separators.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"5. Record separators"}],["meta",{"property":"og:description","content":"Text Processing with GNU awk > 5. Record separators"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-04-24T07:16:44.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"cli"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:tag","content":"shell"}],["meta",{"property":"article:tag","content":"gnu"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:tag","content":"awk"}],["meta",{"property":"article:modified_time","content":"2024-04-24T07:16:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5. Record separators\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-24T07:16:44.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Input record separator","slug":"input-record-separator","link":"#input-record-separator","children":[]},{"level":2,"title":"Output record separator","slug":"output-record-separator","link":"#output-record-separator","children":[]},{"level":2,"title":"Regexp RS and RT","slug":"regexp-rs-and-rt","link":"#regexp-rs-and-rt","children":[]},{"level":2,"title":"Paragraph mode","slug":"paragraph-mode","link":"#paragraph-mode","children":[]},{"level":2,"title":"NR vs FNR","slug":"nr-vs-fnr","link":"#nr-vs-fnr","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]},{"level":2,"title":"Exercises","slug":"exercises","link":"#exercises","children":[{"level":3,"title":"Exercise 1","slug":"exercise-1","link":"#exercise-1","children":[]},{"level":3,"title":"Exercise 2","slug":"exercise-2","link":"#exercise-2","children":[]},{"level":3,"title":"Exercise 3","slug":"exercise-3","link":"#exercise-3","children":[]},{"level":3,"title":"Exercise 4","slug":"exercise-4","link":"#exercise-4","children":[]},{"level":3,"title":"Exercise 5","slug":"exercise-5","link":"#exercise-5","children":[]},{"level":3,"title":"Exercise 6","slug":"exercise-6","link":"#exercise-6","children":[]},{"level":3,"title":"Exercise 7","slug":"exercise-7","link":"#exercise-7","children":[]},{"level":3,"title":"Exercise 8","slug":"exercise-8","link":"#exercise-8","children":[]},{"level":3,"title":"Exercise 9","slug":"exercise-9","link":"#exercise-9","children":[]},{"level":3,"title":"Exercise 10","slug":"exercise-10","link":"#exercise-10","children":[]},{"level":3,"title":"Exercise 11","slug":"exercise-11","link":"#exercise-11","children":[]},{"level":3,"title":"Exercise 12","slug":"exercise-12","link":"#exercise-12","children":[]},{"level":3,"title":"Exercise 13","slug":"exercise-13","link":"#exercise-13","children":[]},{"level":3,"title":"Exercise 14","slug":"exercise-14","link":"#exercise-14","children":[]},{"level":3,"title":"Exercise 15","slug":"exercise-15","link":"#exercise-15","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1713943004000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":8}]},"readingTime":{"minutes":12.58,"words":3775},"filePathRelative":"cli/text-processing-w-gnu-awk/05-record-separators.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{Mn as comp,Dn as data};
