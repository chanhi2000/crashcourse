import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as w,a as n,t as k,b as a,w as p,n as c,g as r,d as s,e,r as t,o as m}from"./app-U_bew1in.js";const g={},v={id:"frontmatter-title-관련",tabindex:"-1"},b={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},y=n("hr",null,null,-1),_=e('<h2 id="project-7-part-two" tabindex="-1"><a class="header-anchor" href="#project-7-part-two"><span>Project 7, part two</span></a></h2><p>Although I love writing Swift, you’ll never hear me say stuff like “it’s the One True Language.” Programming is a massive landscape of ideas, and there’s lots to learn and enjoy outside of Swift.</p><p>One practice that makes me particularly sad is sneering at web development languages like HTML and JavaScript. You’ll see folks saying that HTML isn’t really a language, or brag about removing all traces of JavaScript from their site as if it’s somehow a pollutant.</p><p>The simple truth is that having a working knowledge of these web languages can benefit most developers, and today you’ll see that in action because we’re going to be using a little bit of HTML inside Swift.</p><p>Now, as you’ll see I’m not really in a position to teach HTML as part of this course, so we’re going to do the least required to make our formatting work. Trust me, this is a good thing – Mike Davidson, the ex-VP of design at Twitter once said that “writing old-school HTML code was never very much fun but now it&#39;s getting downright tedious for most people.”</p><p>This goes double for putting HTML code directly inside Swift strings, which is why server-side Swift frameworks usually have separate systems for generating HTML. Here, though, we’ll keep it nice and short so we can focus on learning new iOS techniques!</p><p><strong>Today you have two topics to work through, and you’ll learn about injecting HTML into a web view, <code>UIStoryboard</code>, adding tabs to a tab bar controller in code, and more.</strong></p><h3 id="rendering-a-petition-loadhtmlstring" tabindex="-1"><a class="header-anchor" href="#rendering-a-petition-loadhtmlstring"><span>Rendering a petition: <code>loadHTMLString</code></span></a></h3>',8),T={class:"hint-container details"},S=n("summary",null,"Rendering a petition: loadHTMLString",-1),I=e(`<p>After all the JSON parsing, it&#39;s time for something easy: we need to create a detail view controller class so that it can draw the petition content in an attractive way.</p><p>The easiest way for rendering complex content from the web is nearly always to use a <code>WKWebView</code>, and we&#39;re going to use the same technique from project 4 to create a <code>DetailViewController</code> that contains a web view.</p><p>Go to the File menu and choose New &gt; File, then choose <code>[iOS] &gt; [Source] &gt; [Cocoa Touch Class]</code>. Click Next, name it <code>“DetailViewController</code>”, make it a subclass of “<code>UIViewController</code>”, then click Next and Create.</p><p>Replace <em>all</em> the <code>DetailViewController</code> code with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token class-name">UIKit</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token class-name">WebKit</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">DetailViewController</span><span class="token punctuation">:</span> <span class="token class-name">UIViewController</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> webView<span class="token punctuation">:</span> <span class="token class-name">WKWebView</span><span class="token operator">!</span></span>
<span class="line">    <span class="token keyword">var</span> detailItem<span class="token punctuation">:</span> <span class="token class-name">Petition</span><span class="token operator">?</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">loadView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        webView <span class="token operator">=</span> <span class="token class-name">WKWebView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        view <span class="token operator">=</span> webView</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is almost identical to the code from project 4, but you&#39;ll notice I&#39;ve added a <code>detailItem</code> property that will contain our <code>Petition</code> instance.</p><p>That was the easy bit. The hard bit is that we can&#39;t just drop the petition text into the web view, because it will probably look tiny. Instead, we need to wrap it in some HTML, which is a whole other language with its own rules and its own complexities.</p><p>Now, this series isn&#39;t called &quot;Hacking with HTML,&quot; so I don&#39;t intend to go into much detail here. However, I will say that the HTML we&#39;re going to use tells iOS that the page fits mobile devices, and that we want the font size to be 150% of the standard font size. All that HTML will be combined with the <code>body</code> value from our petition, then sent to the web view.</p><p>Place this in <code>viewDidLoad()</code>, directly beneath the call to <code>super.viewDidLoad()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">guard</span> <span class="token keyword">let</span> detailItem <span class="token operator">=</span> detailItem <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;&quot;</span>
<span class="line">&lt;html&gt;</span>
<span class="line">&lt;head&gt;</span>
<span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span>
<span class="line">&lt;style&gt; body { font-size: 150%; } &lt;/style&gt;</span>
<span class="line">&lt;/head&gt;</span>
<span class="line">&lt;body&gt;</span>
<span class="line"></span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">detailItem<span class="token punctuation">.</span>body</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"></span>
<span class="line">&lt;/body&gt;</span>
<span class="line">&lt;/html&gt;</span>
<span class="line">&quot;&quot;&quot;</span></span></span>
<span class="line"></span>
<span class="line">webView<span class="token punctuation">.</span><span class="token function">loadHTMLString</span><span class="token punctuation">(</span>html<span class="token punctuation">,</span> baseURL<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That <code>guard</code> at the beginning unwraps <code>detailItem</code> into itself if it has a value, which makes sure we exit the method if for some reason we didn’t get any data passed into the detail view controller.</p><p>Note: It’s very common to unwrap variables using the same name, rather than create slight variations. In this case we could have used <code>guard let unwrappedItem = detailItem</code>, but that isn’t any better.</p><p>I&#39;ve tried to make the HTML as clear as possible, but if you don&#39;t care for HTML don&#39;t worry about it. What matters is that there&#39;s a Swift string called <code>html</code> that contains everything needed to show the page, and that&#39;s passed in to the web view&#39;s <code>loadHTMLString()</code> method so that it gets loaded. This is different to the way we were loading HTML before, because we aren&#39;t using a website here, just some custom HTML.</p><p>That&#39;s it for the detail view controller, it really is that simple. However, we still need to connect it to the table view controller by implementing the <code>didSelectRowAt</code> method.</p>`,14),C=n("code",null,"instantiateViewController()",-1),V=n("code",null,"Main.storyboard",-1),j=n("code",null,"DetailViewController",-1),L=n("code",null,"didSelectRowAt",-1),D=e(`<p>So, add this new method to your <code>ViewController</code> class now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">tableView</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> tableView<span class="token punctuation">:</span> <span class="token class-name">UITableView</span><span class="token punctuation">,</span> didSelectRowAt indexPath<span class="token punctuation">:</span> <span class="token class-name">IndexPath</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> vc <span class="token operator">=</span> <span class="token class-name">DetailViewController</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    vc<span class="token punctuation">.</span>detailItem <span class="token operator">=</span> petitions<span class="token punctuation">[</span>indexPath<span class="token punctuation">.</span>row<span class="token punctuation">]</span></span>
<span class="line">    navigationController<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">pushViewController</span><span class="token punctuation">(</span>vc<span class="token punctuation">,</span> animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Go ahead and run the project now by pressing <kbd>Cmd</kbd>+<kbd>R</kbd> or clicking play, then tap on a row to see more detail about each petition. Some petitions don’t have detail text, but most do – try a few and see what you can find.</p>`,3),x=n("h3",{id:"finishing-touches-didfinishlaunchingwithoptions",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#finishing-touches-didfinishlaunchingwithoptions"},[n("span",null,[s("Finishing touches: "),n("code",null,"didFinishLaunchingWithOptions")])])],-1),q={class:"hint-container details"},M=n("summary",null,"Finishing touches: didFinishLaunchingWithOptions",-1),H=e(`<p>Before this project is finished, we&#39;re going to make two changes. First, we&#39;re going to add another tab to the <code>UITabBarController</code> that will show popular petitions, and second we&#39;re going to make our loading code a little more resilient by adding error messages.</p><p>As I said previously, we can&#39;t really put the second tab into our storyboard because both tabs will host a <code>ViewController</code> and doing so would require us to duplicate the view controllers in the storyboard. You can do that if you really want, but please don&#39;t – it&#39;s a maintenance nightmare!</p><p>Instead, we&#39;re going to leave our current storyboard configuration alone, then create the second view controller using code. This isn&#39;t something you&#39;ve done before, but it&#39;s not hard and we already took the first step, as you&#39;ll see.</p><p>Open the file AppDelegate.swift. This has been in all our projects so far, but it&#39;s not one we&#39;ve had to work with until now. Look for the <code>didFinishLaunchingWithOptions</code> method, which should be at the top of the file. This gets called by iOS when the app has finished loading and is ready to be used, and we&#39;re going to hijack it to insert a second <code>ViewController</code> into our tab bar.</p><p>It should already have some default Apple code in there, but we&#39;re going to add some more just before the <code>return true</code> line:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> tabBarController <span class="token operator">=</span> window<span class="token operator">?</span><span class="token punctuation">.</span>rootViewController <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">UITabBarController</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> storyboard <span class="token operator">=</span> <span class="token class-name">UIStoryboard</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Main&quot;</span></span><span class="token punctuation">,</span> bundle<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> vc <span class="token operator">=</span> storyboard<span class="token punctuation">.</span><span class="token function">instantiateViewController</span><span class="token punctuation">(</span>withIdentifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;NavController&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    vc<span class="token punctuation">.</span>tabBarItem <span class="token operator">=</span> <span class="token class-name">UITabBarItem</span><span class="token punctuation">(</span>tabBarSystemItem<span class="token punctuation">:</span> <span class="token punctuation">.</span>topRated<span class="token punctuation">,</span> tag<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    tabBarController<span class="token punctuation">.</span>viewControllers<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>vc<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Every line of that is new, so let&#39;s dig in deeper:</p>`,7),O=n("li",null,[s("Our storyboard automatically creates a window in which all our view controllers are shown. This window needs to know what its initial view controller is, and that gets set to its "),n("code",null,"rootViewController"),s(" property. This is all handled by our storyboard.")],-1),R=n("li",null,[s("In the Single View App template, the root view controller is the "),n("code",null,"ViewController"),s(", but we embedded ours inside a navigation controller, then embedded "),n("em",null,"that"),s(" inside a tab bar controller. So, for us the root view controller is a "),n("code",null,"UITabBarController"),s(".")],-1),U=n("code",null,"ViewController",-1),W=n("code",null,"Main.storyboard",-1),F=n("code",null,"UIStoryboard",-1),P=n("code",null,"nil",-1),A=n("li",null,[s("We create our view controller using the "),n("code",null,"instantiateViewController()"),s(' method, passing in the storyboard ID of the view controller we want. Earlier we set our navigation controller to have the storyboard ID of "NavController", so we pass that in.')],-1),B=n("li",null,[s("We create a "),n("code",null,"UITabBarItem"),s(' object for the new view controller, giving it the "Top Rated" icon and the tag 1. That tag will be important in a moment.')],-1),N=n("li",null,[s("We add the new view controller to our tab bar controller's "),n("code",null,"viewControllers"),s(" array, which will cause it to appear in the tab bar.")],-1),K=n("p",null,[s("So, the code creates a duplicate "),n("code",null,"ViewController"),s(" wrapped inside a navigation controller, gives it a new tab bar item to distinguish it from the existing tab, then adds it to the list of visible tabs. This lets us use the same class for both tabs without having to duplicate things in the storyboard.")],-1),E=n("code",null,"UITabBarItem",-1),z=n("code",null,"ViewController",-1),J=n("code",null,"urlString",-1),Y=n("code",null,"ViewController.swift",-1),Q=n("code",null,"viewDidLoad()",-1),Z=e(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> urlString<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> navigationController<span class="token operator">?</span><span class="token punctuation">.</span>tabBarItem<span class="token punctuation">.</span>tag <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// urlString = &quot;https://api.whitehouse.gov/v1/petitions.json?limit=100&quot;</span></span>
<span class="line">    urlString <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;https://www.hackingwithswift.com/samples/petitions-1.json&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// urlString = &quot;https://api.whitehouse.gov/v1/petitions.json?signatureCountFloor=10000&amp;limit=100&quot;</span></span>
<span class="line">    urlString <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;https://www.hackingwithswift.com/samples/petitions-2.json&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That adjusts the code so that the first instance of <code>ViewController</code> loads the original JSON, and the second loads only petitions that have at least 10,000 signatures. Once again I’ve provided cached copies of the Whitehouse API data in case it changes or goes away in the future – use whichever one you prefer.</p><p>The project is almost done, but we&#39;re going to make one last change. Our current loading code isn&#39;t very resilient: we have a couple of <code>if</code> statements checking that things are working correctly, but no <code>else</code> statements showing an error message if there&#39;s a problem.</p><p>This is easily fixed by adding a new <code>showError()</code> method that creates a <code>UIAlertController</code> showing a general failure message:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">showError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> ac <span class="token operator">=</span> <span class="token class-name">UIAlertController</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Loading error&quot;</span></span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;There was a problem loading the feed; please check your connection and try again.&quot;</span></span><span class="token punctuation">,</span> preferredStyle<span class="token punctuation">:</span> <span class="token punctuation">.</span>alert<span class="token punctuation">)</span></span>
<span class="line">    ac<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">UIAlertAction</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;OK&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">present</span><span class="token punctuation">(</span>ac<span class="token punctuation">,</span> animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can now adjust the JSON downloading and parsing code to call this error method everywhere a condition fails, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> urlString<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token class-name">Data</span><span class="token punctuation">(</span>contentsOf<span class="token punctuation">:</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">:</span> data<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">showError</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">showError</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Alternatively we could rewrite this to be a little cleaner by inserting <code>return</code> after the call to <code>parse()</code>. This means that the method would exit if parsing was reached, so we get to the end of the method it means parsing <em>wasn’t</em> reached and we can show the error. Try this instead:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> urlString<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token class-name">Data</span><span class="token punctuation">(</span>contentsOf<span class="token punctuation">:</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">parse</span><span class="token punctuation">(</span>json<span class="token punctuation">:</span> data<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">showError</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Both approaches are perfectly valid – do whichever you prefer.</p><p>Regardless of which you opt for, now that error messages are shown when the app hits problems we’re done – good job!</p>`,11),G=n("p",null,[s("If you’re keen to learn more about the way web views scale pages down to fit small screens, check out this article: "),n("a",{href:"https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag",target:"_blank",rel:"noopener noreferrer"},"Using the viewport meta tag to control layout on mobile browsers.")],-1),$=n("hr",null,null,-1);function X(u,nn){const o=t("router-link"),i=t("VPCard"),d=t("VidStack"),l=t("FontIcon");return m(),w("div",null,[n("h1",v,[n("a",b,[n("span",null,k(u.$frontmatter.title)+" 관련",1)])]),n("nav",f,[n("ul",null,[n("li",null,[a(o,{to:"#project-7-part-two"},{default:p(()=>[s("Project 7, part two")]),_:1}),n("ul",null,[n("li",null,[a(o,{to:"#rendering-a-petition-loadhtmlstring"},{default:p(()=>[s("Rendering a petition: loadHTMLString")]),_:1})]),n("li",null,[a(o,{to:"#finishing-touches-didfinishlaunchingwithoptions"},{default:p(()=>[s("Finishing touches: didFinishLaunchingWithOptions")]),_:1})])])])])]),y,a(i,c(r({title:"100 Days of Swift - Day 34",desc:"Project 7, part two",link:"https://www.hackingwithswift.com/100/34",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),_,n("details",T,[S,a(i,c(r({title:"100 Days of Swift - Day 34 - Rendering a petition: loadHTMLString",desc:"Rendering a petition: loadHTMLString",link:"https://hackingwithswift.com/read/7/4/rendering-a-petition-loadhtmlstring",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(d,{src:"youtube/T6wvsQ78w0c"}),I,n("p",null,[s("Previously we used the "),C,s(" method to load a view controller from "),a(l,{icon:"fas fa-file-lines"}),V,s(", but in this project "),j,s(" isn’t in the storyboard – it’s just a free-floating class. This makes "),L,s(" easier, because it can load the class directly rather than loading the user interface from a storyboard.")]),D]),x,n("details",q,[M,a(i,c(r({title:"100 Days of Swift - Day 34 - Finishing touches: didFinishLaunchingWithOptions",desc:"Finishing touches: didFinishLaunchingWithOptions",link:"https://hackingwithswift.com/read/7/5/finishing-touches-didfinishlaunchingwithoptions",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(d,{src:"youtube/9VorfMsbKQQ"}),H,n("ul",null,[O,R,n("li",null,[s("We need to create a new "),U,s(" by hand, which first means getting a reference to our "),a(l,{icon:"fas fa-file-lines"}),W,s(" file. This is done using the "),F,s(" class, as shown. You don't need to provide a bundle, because "),P,s(' means "use my current app bundle."')]),A,B,N]),K,n("p",null,[s("The reason we gave a tag of 1 to the new "),E,s(" is because it's an easy way to identify it. Remember, both tabs contain a "),z,s(", which means the same code is executed. Right now that means both will download the same JSON feed, which makes having two tabs pointless. But if you modify "),J,s(" in "),a(l,{icon:"fa-brands fa-swift"}),Y,s("’s "),Q,s(" method to this, it will work much better:")]),Z]),G,$])}const en=h(g,[["render",X],["__file","34.html.vue"]]),tn=JSON.parse('{"path":"/swift/100-days-of-swift/34.html","title":"Day 34","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 34","description":"100 Days of Swift > Day 34","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of Swift > Day 34"},{"property":"og:description","content":"Day 34"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swift/34.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swift/34.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 34"}],["meta",{"property":"og:description","content":"100 Days of Swift > Day 34"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 34\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 7, part two","slug":"project-7-part-two","link":"#project-7-part-two","children":[{"level":3,"title":"Rendering a petition: loadHTMLString","slug":"rendering-a-petition-loadhtmlstring","link":"#rendering-a-petition-loadhtmlstring","children":[]},{"level":3,"title":"Finishing touches: didFinishLaunchingWithOptions","slug":"finishing-touches-didfinishlaunchingwithoptions","link":"#finishing-touches-didfinishlaunchingwithoptions","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":10}]},"readingTime":{"minutes":6.99,"words":2096},"filePathRelative":"swift/100-days-of-swift/34.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{en as comp,tn as data};
