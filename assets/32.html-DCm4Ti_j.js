import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,a as n,t as h,b as a,w as i,n as o,g as p,e as c,d as s,r as u,o as k}from"./app-U_bew1in.js";const v={},w={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},b={class:"table-of-contents"},f=n("hr",null,null,-1),y=c('<h2 id="project-6-part-1" tabindex="-1"><a class="header-anchor" href="#project-6-part-1"><span>Project 6, part 1</span></a></h2><p>When Steve Jobs introduced Aqua, the visual theme that has powered macOS ever since Mac OS X launched in 2001, he said “we made the buttons on the screen look so good you&#39;ll want to lick them.” I don’t know if you were using Macs way back then, but over the years Aqua has given us glass-like buttons, pin stripes, brushed metal and so much more, and even today the “genie” window minimize looks amazing.</p><p>When we make apps with great visual appeal, users <em>notice</em>. Sure, it won’t affect the core functionality of the app, and it’s easy to go overboard with design and cause that core to get a little lost, but when you do it <em>right</em> a beautiful user interface brings a little extra delight and can help set your app apart from others.</p><p>Animations are one of the fundamental ways we can bring our apps to life, and you’ll be pleased to know SwiftUI gives us a range of tools for using them. Today we’ll be looking at easier animations, but tomorrow we’ll progress onto more difficult stuff – it’s a good idea to be aware of both, so you can tackle whatever problems come up in the future.</p><p><strong>Today you have five topics to work through, in which you’ll learn about implicit animations, explicit animations, binding animations, and more.</strong></p><h3 id="animation-introduction" tabindex="-1"><a class="header-anchor" href="#animation-introduction"><span>Animation: Introduction</span></a></h3>',6),A={class:"hint-container details"},x=n("summary",null,"Animation: Introduction",-1),_=n("p",null,"We’re back to another technique project, and this time we’re going to be looking at something fast, beautiful, and really under-valued: animations.",-1),S=n("p",null,"Animations are there for a few reasons, of which one definitely is to make our user interfaces look better. However, they are also there to help users understand what’s going on with our program: when one window disappears and another slides in, it’s clear to the user where the other window has gone to, which means it’s also clear where they can look to get it back.",-1),I=n("p",null,[s("In this technique project we’re going to look at a range of animations and transitions with SwiftUI. Some are easy – in fact, you’ll be able to get great results almost immediately! – but some require more thinking. "),n("em",null,"All"),s(" will be useful, though, particularly as you work to make sure your apps are attractive and help guide the user’s eyes as best as you can.")],-1),j=n("p",null,"As with the other days it’s a good idea to work in an Xcode project so you can see your code in action, so please create a new App project called Animations.",-1),C=n("h3",{id:"creating-implicit-animations",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#creating-implicit-animations"},[n("span",null,"Creating implicit animations")])],-1),T={class:"hint-container details"},D=n("summary",null,"Creating implicit animations",-1),U=c(`<p>In SwiftUI, the simplest type of animation is an <em>implicit</em> one: we tell our views ahead of time “if someone wants to animate you, here’s how you should respond”, and nothing more. SwiftUI will then take care of making sure any changes that <em>do</em> occur follow the animation you requested. In practice this makes animation trivial – it literally could not be any easier.</p><p>Let’s start with an example. This code shows a simple red button with no action, using 50 points of padding and a circular clip shape:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Tap Me&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// do nothing</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>What we want is for that button to get bigger every time it’s tapped, and we can do that with a new modifier called <code>scaleEffect()</code>. You provide this with a value from 0 up, and it will be drawn at that size – a value of 1.0 is equivalent to 100%, i.e. the button’s normal size.</p><p>Because we want to change the scale effect value every time the button is tapped, we need to use an <code>@State</code> property that will store a <code>Double</code>. So, please add this property to your view now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> animationAmount <span class="token operator">=</span> <span class="token number">1.0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now we can make the button use that for its scale effect, by adding this modifier:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span>animationAmount<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Finally, when the button is tapped we want to increase the animation amount by 1, so use this for the button’s action:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">animationAmount <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you run that code you’ll see that you can tap the button repeatedly to have it scale up and up. It won’t get redrawn at increasingly high resolutions, so as the button gets bigger you’ll see it gets a bit blurry, but that’s OK.</p><p>Now, the human eye is highly sensitive to movement – we’re extremely good at detecting when things move or change their appearance, which is what makes animation both so important and so pleasing. So, we can ask SwiftUI to create an implicit animation for our changes so that all the scaling happens smoothly by adding an <code>animation()</code> modifier to the button:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> animationAmount<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That asks SwiftUI to apply a default animation whenever the value of <code>animationAmount</code> changes, and immediately you’ll see that tapping the button now causes it to scale up with an animation.</p><p>That implicit animation takes effect on all properties of the view that change, meaning that if we attach more animating modifiers to the view then they will all change together. For example, we could add a second new modifier to the button, <code>.blur()</code>, which lets us add a Gaussian blur with a special radius – add this <em>before</em> the <code>animation()</code> modifier:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">blur</span><span class="token punctuation">(</span>radius<span class="token punctuation">:</span> <span class="token punctuation">(</span>animationAmount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>A radius of <code>(animationAmount - 1) * 3</code> means the blur radius will start at 0 (no blur), but then move to 3 points, 6 points, 9 points, and beyond as you tap the button.</p><p>If you run the app again you’ll see that it now scales and blurs smoothly.</p><p>The point is that nowhere have we said what each frame of the animation should look like, and we haven’t even said when SwiftUI should start and finish the animation. Instead, our animation becomes a function of our state just like the views themselves.</p>`,19),q=n("h3",{id:"customizing-animations-in-swiftui",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#customizing-animations-in-swiftui"},[n("span",null,"Customizing animations in SwiftUI")])],-1),z={class:"hint-container details"},V=n("summary",null,"Customizing animations in SwiftUI",-1),B=c(`<p>When we attach the <code>animation()</code> modifier to a view, SwiftUI will automatically animate any changes that happen to that view using whatever is the default system animation, whenever the value we’re watching changes. In practice, that is an “ease in, ease out” animation, which means iOS will start the animation slow, make it pick up speed, then slow down as it approaches its end.</p><p>We can control the type of animation used by passing in different values to the modifier. For example, we could use <code>.easeOut</code> to make the animation start fast then slow down to a smooth stop:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">.</span>easeOut<span class="token punctuation">,</span> value<span class="token punctuation">:</span> animationAmount<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Tip: If you were curious, implicit animations always need to watch a particular value otherwise animations would be triggered for every small change – even rotating the device from portrait to landscape would trigger the animation, which would look strange.</p><p>There are even spring animations, that cause the movement to overshoot then return to settle at its target. You can control the initial stiffness of the spring (which sets its initial velocity when the animation starts), and also how fast the animation should be “damped” – lower values cause the spring to bounce back and forth for longer.</p><p>For example, this makes our button scale up quickly then bounce:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">interpolatingSpring</span><span class="token punctuation">(</span>stiffness<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> damping<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> animationAmount<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>For more precise control, we can customize the animation with a duration specified as a number of seconds. So, we could get an ease-in-out animation that lasts for two seconds like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> animationAmount <span class="token operator">=</span> <span class="token number">1.0</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Tap Me&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            animationAmount <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span>animationAmount<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">easeInOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> animationAmount<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When we say <code>.easeInOut(duration: 2)</code> we’re actually creating an instance of an <code>Animation</code> struct that has its own set of modifiers. So, we can attach modifiers directly to the animation to add a delay like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">easeInOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    value<span class="token punctuation">:</span> animationAmount</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With that in place, tapping the button will now wait for a second before executing a two-second animation.</p><p>We can also ask the animation to repeat a certain number of times, and even make it bounce back and forward by setting <code>autoreverses</code> to true. This creates a one-second animation that will bounce up and down before reaching its final size:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">easeInOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">repeatCount</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> autoreverses<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    value<span class="token punctuation">:</span> animationAmount</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If we had set repeat count to 2 then the button would scale up then down again, then jump immediately back up to its larger scale. This is because ultimately the button must match the state of our program, regardless of what animations we apply – when the animation finishes the button must have whatever value is set in <code>animationAmount</code>.</p><p>For continuous animations, there is a <code>repeatForever()</code> modifier that can be used like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">easeInOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span>autoreverses<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    value<span class="token punctuation">:</span> animationAmount</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can use these <code>repeatForever()</code> animations in combination with <code>onAppear()</code> to make animations that start immediately and continue animating for the life of the view.</p><p>To demonstrate this, we’re going to remove the animation from the button itself and instead apply it an overlay to make a sort of pulsating circle around the button. Overlays are created using an <code>overlay()</code> modifier, which lets us create new views at the same size and position as the view we’re overlaying.</p><p>So, first add this <code>overlay()</code> modifier to the button before the <code>animation()</code> modifier:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span>animationAmount<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">-</span> animationAmount<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That makes a stroked red circle over our button, using an opacity value of <code>2 - animationAmount</code> so that when <code>animationAmount</code> is 1 the opacity is 1 (it’s opaque) and when <code>animationAmount</code> is 2 the opacity is 0 (it’s transparent).</p><p>Next, remove the <code>scaleEffect()</code> and <code>blur()</code> modifiers from the button and comment out the <code>animationAmount += 1</code> action part too, because we don’t want that to change any more, and move its animation modifier up to the circle inside the overlay:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span>animationAmount<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">-</span> animationAmount<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">easeOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span>autoreverses<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            value<span class="token punctuation">:</span> animationAmount</span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I’ve switched <code>autoreverses</code> to false, but otherwise it’s the same animation.</p><p>Finally, add an <code>onAppear()</code> modifier to the button, which will set <code>animationAmount</code> to 2:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span>onAppear <span class="token punctuation">{</span></span>
<span class="line">    animationAmount <span class="token operator">=</span> <span class="token number">2</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Because the overlay circle uses that for a “repeat forever” animation without autoreversing, you’ll see the overlay circle scale up and fade out continuously.</p><p>Your finished code should look like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Tap Me&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// animationAmount += 1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span>animationAmount<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">-</span> animationAmount<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">easeInOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span>autoreverses<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            value<span class="token punctuation">:</span> animationAmount</span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span>onAppear <span class="token punctuation">{</span></span>
<span class="line">    animationAmount <span class="token operator">=</span> <span class="token number">2</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Given how little work that involves, it creates a remarkably attractive effect!</p>`,31),O=n("h3",{id:"animating-bindings",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#animating-bindings"},[n("span",null,"Animating bindings")])],-1),W={class:"hint-container details"},F=n("summary",null,"Animating bindings",-1),E=c(`<p>The <code>animation()</code> modifier can be applied to any SwiftUI binding, which causes the value to animate between its current and new value. This even works if the data in question isn’t really something that sounds like it can be animated, such as a Boolean – you can mentally imagine animating from 1.0 to 2.0 because we could do 1.05, 1.1, 1.15, and so on, but going from “false” to “true” sounds like there’s no room for in between values.</p><p>This is best explained with some working code to look at, so here’s a view with a <code>VStack</code>, a <code>Stepper</code>, and a <code>Button</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> animationAmount <span class="token operator">=</span> <span class="token number">1.0</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Stepper</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Scale amount&quot;</span></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> $animationAmount<span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Tap Me&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                animationAmount <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">scaleEffect</span><span class="token punctuation">(</span>animationAmount<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, the stepper can move <code>animationAmount</code> up and down, and tapping the button will add 1 to it – they are both tied to the same data, which in turn causes the size of the button to change. However, tapping the button changes <code>animationCount</code> immediately, so the button will just jump up to its larger size. In contrast, the stepper is bound to <code>$animationAmount.animation()</code>, which means SwiftUI will automatically animate its changes.</p><p>Now, as an experiment I’d like you to change the start of the <code>body</code> to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>animationAmount<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Because we have some non-view code in there, we need to add <code>return</code> before the <code>VStack</code> so Swift understands which part is the view that is being sent back. But adding <code>print(animationAmount)</code> is important, and to see why I’d like you to run the program again and try manipulating the stepper.</p><p>What you should see is that it prints out 2.0, 3.0, 4.0, and so on. At the same time, the button is scaling up or down smoothly – it doesn’t just jump straight to scale 2, 3, and 4. What’s <em>actually</em> happening here is that SwiftUI is examining the state of our view before the binding changes, examining the target state of our views <em>after</em> the binding changes, then applying an animation to get from point A to point B.</p><p>This is why we can animate a Boolean changing: Swift isn’t somehow inventing new values between false and true, but just animating the view changes that occur as a result of the change.</p><p>These binding animations use a similar <code>animation()</code> modifier that we use on views, so you can go to town with animation modifiers if you want to:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Stepper</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Scale amount&quot;</span></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> $animationAmount<span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">easeInOut</span><span class="token punctuation">(</span>duration<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">repeatCount</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> autoreverses<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tip: With this variant of the <code>animation()</code> modifier, we don’t need to specify which value we’re watching for changes – it’s literally attached to the value it should watch!</p><p>These binding animations effectively turn the tables on implicit animations: rather than setting the animation on a view and implicitly animating it with a state change, we now set nothing on the view and explicitly animate it with a state change. In the former, the state change has no idea it will trigger an animation, and in the latter the view has no idea it will be animated – both work and both are important.</p>`,13),N=n("h3",{id:"creating-explicit-animations",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#creating-explicit-animations"},[n("span",null,"Creating explicit animations")])],-1),M={class:"hint-container details"},P=n("summary",null,"Creating explicit animations",-1),R=c(`<p>You’ve seen how SwiftUI lets us create implicit animations by attaching the <code>animation()</code> modifier to a view, and how it also lets us create animated binding changes by adding the <code>animation()</code> modifier to a binding, but there’s a third useful way we can create animations: explicitly asking SwiftUI to animate changes occurring as the result of a state change.</p><p>This still doesn’t mean we create each frame of the animation by hand – that remains SwiftUI’s job, and it continues to figure out the animation by looking at the state of our views before and after the state change was applied.</p><p>Now, though, we’re being explicit that we want an animation to occur when some arbitrary state change occurs: it’s not attached to a binding, and it’s not attached to a view, it’s just us explicitly asking for a particular animation to occur because of a state change.</p><p>To demonstrate this, let’s return to a simple button example again:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span>   </span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Tap Me&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// do nothing</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When that button is tapped, we’re going to make it spin around with a 3D effect. This requires another new modifier, <code>rotation3DEffect()</code>, which can be given a rotation amount in degrees as well as an axis that determines how the view rotates. Think of this axis like a skewer through your view:</p><ul><li>If we skewer the view through the X axis (horizontally) then it will be able to spin forwards and backwards.</li><li>If we skewer the view through the Y axis (vertically) then it will be able to spin left and right.</li><li>If we skewer the view through the Z axis (depth) then it will be able to rotate left and right.</li></ul><p>Making this work requires some state we can modify, and rotation degrees are specified as a <code>Double</code>. So, please add this property now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> animationAmount <span class="token operator">=</span> <span class="token number">0.0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Next, we’re going to ask the button to rotate by <code>animationAmount</code> degrees along its Y axis, which means it will spin left and right. Add this modifier to the button now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">rotation3DEffect</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">degrees</span><span class="token punctuation">(</span>animationAmount<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> z<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now for the important part: we’re going to add some code to the button’s action so that it adds 360 to <code>animationAmount</code> every time it’s tapped.</p><p>If we just write <code>animationAmount += 360</code> then the change will happen immediately, because there is no animation modifier attached to the button. This is where explicit animations come in: if we use a <code>withAnimation()</code> closure then SwiftUI will ensure any changes resulting from the new state will automatically be animated.</p><p>So, put this in the button’s action now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">withAnimation <span class="token punctuation">{</span></span>
<span class="line">    animationAmount <span class="token operator">+=</span> <span class="token number">360</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Run that code now and I think you’ll be impressed by how good it looks – every time you tap the button it spins around in 3D space, and it was so easy to write. If you have time, experiment a little with the axes so you can really understand how they work. In case you were curious, you can use more than one axis at once.</p><p><code>withAnimation()</code> can be given an animation parameter, using all the same animations you can use elsewhere in SwiftUI. For example, we could make our rotation effect use a spring animation using a <code>withAnimation()</code> call like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">withAnimation</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">interpolatingSpring</span><span class="token punctuation">(</span>stiffness<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> damping<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    animationAmount <span class="token operator">+=</span> <span class="token number">360</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),Y=n("hr",null,null,-1);function K(r,X){const t=u("router-link"),e=u("VPCard"),l=u("VidStack");return k(),m("div",null,[n("h1",w,[n("a",g,[n("span",null,h(r.$frontmatter.title)+" 관련",1)])]),n("nav",b,[n("ul",null,[n("li",null,[a(t,{to:"#project-6-part-1"},{default:i(()=>[s("Project 6, part 1")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#animation-introduction"},{default:i(()=>[s("Animation: Introduction")]),_:1})]),n("li",null,[a(t,{to:"#creating-implicit-animations"},{default:i(()=>[s("Creating implicit animations")]),_:1})]),n("li",null,[a(t,{to:"#customizing-animations-in-swiftui"},{default:i(()=>[s("Customizing animations in SwiftUI")]),_:1})]),n("li",null,[a(t,{to:"#animating-bindings"},{default:i(()=>[s("Animating bindings")]),_:1})]),n("li",null,[a(t,{to:"#creating-explicit-animations"},{default:i(()=>[s("Creating explicit animations")]),_:1})])])])])]),f,a(e,o(p({title:"100 Days of SwiftUI - Day 32",desc:"Project 6, part 1",link:"https://www.hackingwithswift.com/100/swiftui/32",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),y,n("details",A,[x,a(e,o(p({title:"100 Days of SwiftUI - Day 32 - Animation: Introduction",desc:"Animation: Introduction",link:"https://hackingwithswift.com/books/ios-swiftui/animation-introduction",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),_,S,I,j]),C,n("details",T,[D,a(e,o(p({title:"100 Days of SwiftUI - Day 32 - Creating implicit animations",desc:"Creating implicit animations",link:"https://hackingwithswift.com/books/ios-swiftui/creating-implicit-animations",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(l,{src:"youtube/j0eQQXspSQY"}),U]),q,n("details",z,[V,a(e,o(p({title:"100 Days of SwiftUI - Day 32 - Customizing animations in SwiftUI",desc:"Customizing animations in SwiftUI",link:"https://hackingwithswift.com/books/ios-swiftui/customizing-animations-in-swiftui",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(l,{src:"youtube/Rbcabi9vRcc"}),B]),O,n("details",W,[F,a(e,o(p({title:"100 Days of SwiftUI - Day 32 - Animating bindings",desc:"Animating bindings",link:"https://hackingwithswift.com/books/ios-swiftui/animating-bindings",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(l,{src:"youtube/CHInKa9xbKE"}),E]),N,n("details",M,[P,a(e,o(p({title:"100 Days of SwiftUI - Day 32 - Creating explicit animations",desc:"Creating explicit animations",link:"https://hackingwithswift.com/books/ios-swiftui/creating-explicit-animations",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(l,{src:"youtube/5A4yJhb1ogg"}),R]),Y])}const H=d(v,[["render",K],["__file","32.html.vue"]]),J=JSON.parse('{"path":"/swift/100-days-of-swiftui/32.html","title":"Day 32","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 32","description":"100 Days of SwiftUI > Day 32","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 32"},{"property":"og:description","content":"Day 32"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/32.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/32.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 32"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 32"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 32\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 6, part 1","slug":"project-6-part-1","link":"#project-6-part-1","children":[{"level":3,"title":"Animation: Introduction","slug":"animation-introduction","link":"#animation-introduction","children":[]},{"level":3,"title":"Creating implicit animations","slug":"creating-implicit-animations","link":"#creating-implicit-animations","children":[]},{"level":3,"title":"Customizing animations in SwiftUI","slug":"customizing-animations-in-swiftui","link":"#customizing-animations-in-swiftui","children":[]},{"level":3,"title":"Animating bindings","slug":"animating-bindings","link":"#animating-bindings","children":[]},{"level":3,"title":"Creating explicit animations","slug":"creating-explicit-animations","link":"#creating-explicit-animations","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":8}]},"readingTime":{"minutes":10.71,"words":3214},"filePathRelative":"swift/100-days-of-swiftui/32.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{H as comp,J as data};
