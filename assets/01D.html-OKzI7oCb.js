import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as t,t as g,b as e,w as i,n as l,g as a,r as c,o as d,d as n}from"./app-U_bew1in.js";const p={},u={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},_={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},f={class:"table-of-contents"},v=t("hr",null,null,-1),b=t("h2",{id:"modular-inverse",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#modular-inverse"},[t("span",null,"Modular Inverse")])],-1),k=t("hr",null,null,-1),y=t("h2",{id:"linear-congruence-equation",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#linear-congruence-equation"},[t("span",null,"Linear Congruence Equation")])],-1),C=t("hr",null,null,-1),D=t("h2",{id:"chinese-remainder-theorem",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#chinese-remainder-theorem"},[t("span",null,"Chinese Remainder Theorem")])],-1),M=t("hr",null,null,-1),P=t("h2",{id:"garner-s-algorithm",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#garner-s-algorithm"},[t("span",null,"Garner's Algorithm")])],-1),R=t("hr",null,null,-1),A=t("h2",{id:"factorial-modulo-p",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#factorial-modulo-p"},[t("span",null,"Factorial modulo p")])],-1),x=t("hr",null,null,-1),T=t("h2",{id:"discrete-log",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#discrete-log"},[t("span",null,"Discrete Log")])],-1),q=t("hr",null,null,-1),L=t("h2",{id:"primitive-root",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#primitive-root"},[t("span",null,"Primitive Root")])],-1),E=t("hr",null,null,-1),I=t("h2",{id:"discrete-root",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#discrete-root"},[t("span",null,"Discrete Root")])],-1),F=t("hr",null,null,-1),G=t("h2",{id:"montgomery-multiplication",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#montgomery-multiplication"},[t("span",null,"Montgomery Multiplication")])],-1),V=t("hr",null,null,-1);function N(s,w){const o=c("router-link"),r=c("VPCard");return d(),h("div",null,[t("h1",u,[t("a",_,[t("span",null,g(s.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),t("nav",f,[t("ul",null,[t("li",null,[e(o,{to:"#modular-inverse"},{default:i(()=>[n("Modular Inverse")]),_:1})]),t("li",null,[e(o,{to:"#linear-congruence-equation"},{default:i(()=>[n("Linear Congruence Equation")]),_:1})]),t("li",null,[e(o,{to:"#chinese-remainder-theorem"},{default:i(()=>[n("Chinese Remainder Theorem")]),_:1})]),t("li",null,[e(o,{to:"#garner-s-algorithm"},{default:i(()=>[n("Garner's Algorithm")]),_:1})]),t("li",null,[e(o,{to:"#factorial-modulo-p"},{default:i(()=>[n("Factorial modulo p")]),_:1})]),t("li",null,[e(o,{to:"#discrete-log"},{default:i(()=>[n("Discrete Log")]),_:1})]),t("li",null,[e(o,{to:"#primitive-root"},{default:i(()=>[n("Primitive Root")]),_:1})]),t("li",null,[e(o,{to:"#discrete-root"},{default:i(()=>[n("Discrete Root")]),_:1})]),t("li",null,[e(o,{to:"#montgomery-multiplication"},{default:i(()=>[n("Montgomery Multiplication")]),_:1})])])]),v,b,e(r,l(a({title:"Algorithms for Competitive Programming > Modular Inverse",desc:"Modular Inverse",link:"https://cp-algorithms.com/algebra/module-inverse.html",logo:"https://cp-algorithms.com/favicon.ico",background:"rgba(119,119,170,0.2)"})),null,16),k,y,e(r,l(a({title:"Algorithms for Competitive Programming > Linear Congruence Equation",desc:"Linear Congruence Equation",link:"https://cp-algorithms.com/algebra/linear_congruence_equation.html",logo:"https://cp-algorithms.com/favicon.ico",background:"rgba(119,119,170,0.2)"})),null,16),C,D,e(r,l(a({title:"Algorithms for Competitive Programming > Chinese Remainder Theorem",desc:"Chinese Remainder Theorem",link:"https://cp-algorithms.com/algebra/chinese-remainder-theorem.html",logo:"https://cp-algorithms.com/favicon.ico",background:"rgba(119,119,170,0.2)"})),null,16),M,P,e(r,l(a({title:"Algorithms for Competitive Programming > Garner's Algorithm",desc:"Garner's Algorithm",link:"https://cp-algorithms.com/algebra/garners-algorithm.html",logo:"https://cp-algorithms.com/favicon.ico",background:"rgba(119,119,170,0.2)"})),null,16),R,A,e(r,l(a({title:"Algorithms for Competitive Programming > Factorial modulo p",desc:"Factorial modulo p",link:"https://cp-algorithms.com/algebra/factorial-modulo.html",logo:"https://cp-algorithms.com/favicon.ico",background:"rgba(119,119,170,0.2)"})),null,16),x,T,e(r,l(a({title:"Algorithms for Competitive Programming > Discrete Log",desc:"Discrete Log",link:"https://cp-algorithms.com/algebra/discrete-log.html",logo:"https://cp-algorithms.com/favicon.ico",background:"rgba(119,119,170,0.2)"})),null,16),q,L,e(r,l(a({title:"Algorithms for Competitive Programming > Primitive Root",desc:"Primitive Root",link:"https://cp-algorithms.com/algebra/primitive-root.html",logo:"https://cp-algorithms.com/favicon.ico",background:"rgba(119,119,170,0.2)"})),null,16),E,I,e(r,l(a({title:"Algorithms for Competitive Programming > Discrete Root",desc:"Discrete Root",link:"https://cp-algorithms.com/algebra/discrete-root.html",logo:"https://cp-algorithms.com/favicon.ico",background:"rgba(119,119,170,0.2)"})),null,16),F,G,e(r,l(a({title:"Algorithms for Competitive Programming > Montgomery Multiplication",desc:"Montgomery Multiplication",link:"https://cp-algorithms.com/algebra/montgomery_multiplication.html",logo:"https://cp-algorithms.com/favicon.ico",background:"rgba(119,119,170,0.2)"})),null,16),V])}const Z=m(p,[["render",N],["__file","01D.html.vue"]]),z=JSON.parse(`{"path":"/cpp/algorithms-for-competitive-programming/01-algebra/01D.html","title":"01D. Modular arithmetic","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"01D. Modular arithmetic","description":"Algorithms for Competitive Programming > 01D. Modular arithmetic","category":["Cpp"],"tag":["crashcourse","cpp","c-plus-plus","algorithm"],"head":[[{"meta":null},{"property":"og:title","content":"Algorithms for Competitive Programming > 01D. Modular arithmetic"},{"property":"og:description","content":"01D. Modular arithmetic"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/cpp/algorithms-for-competitive-programming/01-algebra/01D.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/cpp/algorithms-for-competitive-programming/01-algebra/01D.html"}],["meta",{"property":"og:site_name","content":"ü•ÅCrashcourse"}],["meta",{"property":"og:title","content":"01D. Modular arithmetic"}],["meta",{"property":"og:description","content":"Algorithms for Competitive Programming > 01D. Modular arithmetic"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"cpp"}],["meta",{"property":"article:tag","content":"c-plus-plus"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"01D. Modular arithmetic\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Modular Inverse","slug":"modular-inverse","link":"#modular-inverse","children":[]},{"level":2,"title":"Linear Congruence Equation","slug":"linear-congruence-equation","link":"#linear-congruence-equation","children":[]},{"level":2,"title":"Chinese Remainder Theorem","slug":"chinese-remainder-theorem","link":"#chinese-remainder-theorem","children":[]},{"level":2,"title":"Garner's Algorithm","slug":"garner-s-algorithm","link":"#garner-s-algorithm","children":[]},{"level":2,"title":"Factorial modulo p","slug":"factorial-modulo-p","link":"#factorial-modulo-p","children":[]},{"level":2,"title":"Discrete Log","slug":"discrete-log","link":"#discrete-log","children":[]},{"level":2,"title":"Primitive Root","slug":"primitive-root","link":"#primitive-root","children":[]},{"level":2,"title":"Discrete Root","slug":"discrete-root","link":"#discrete-root","children":[]},{"level":2,"title":"Montgomery Multiplication","slug":"montgomery-multiplication","link":"#montgomery-multiplication","children":[]}],"git":{"createdTime":1709715232000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":5}]},"readingTime":{"minutes":1.09,"words":328},"filePathRelative":"cpp/algorithms-for-competitive-programming/01-algebra/01D.md","localizedDate":"2024ÎÖÑ 3Ïõî 6Ïùº","excerpt":"\\n\\n<hr>\\n<h2>Modular Inverse</h2>\\n"}`);export{Z as comp,z as data};
