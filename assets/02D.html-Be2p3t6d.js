import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,a as n,t as m,b as s,w as t,n as v,g as b,d as a,e as o,r as c,o as h}from"./app-U_bew1in.js";const g={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},_={class:"table-of-contents"},f=n("hr",null,null,-1),j=n("hr",null,null,-1),T={href:"https://github.com/pahkey/sbb3/tree/2-04",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"pahkey/sbb3",-1),D=n("code",null,"2-04",-1),q=o('<p>이제 SBB가 사용할 엔티티(Entity)을 만들어 보자. 엔티티는 데이터베이스 테이블과 매핑되는 자바 클래스를 말한다. SBB는 질문과 답변을 할 수 있는 게시판 서비스이다. 따라서 SBB에는 질문과 답변에 해당하는 엔티티가 있어야 한다.</p><blockquote><p>엔티티는 모델 또는 도메인 모델이라고 부르기도 한다. 이 책에서는 이것들을 구분하지 않고 테이블과 매핑되는 클래스를 엔티티라 지칭하겠다.</p></blockquote><hr><h2 id="엔티티의-속성-구상하기" tabindex="-1"><a class="header-anchor" href="#엔티티의-속성-구상하기"><span>엔티티의 속성 구상하기</span></a></h2><p>그렇다면 질문과 답변 엔티티에는 어떤 속성들이 필요한지 먼저 생각해 보자.</p><p>질문(<code>Question</code>) 엔티티에는 최소한 다음과 같은 속성이 필요하다.</p><table><thead><tr><th style="text-align:left;">속성명</th><th style="text-align:left;">설명</th></tr></thead><tbody><tr><td style="text-align:left;"><code>id</code></td><td style="text-align:left;">질문의 고유 번호</td></tr><tr><td style="text-align:left;"><code>subject</code></td><td style="text-align:left;">질문의 제목</td></tr><tr><td style="text-align:left;"><code>content</code></td><td style="text-align:left;">질문의 내용</td></tr><tr><td style="text-align:left;"><code>create_date</code></td><td style="text-align:left;">질문을 작성한 일시</td></tr></tbody></table><p>마찬가지로 답변(Answer) 엔티티에는 최소한 다음과 같은 속성이 필요하다.</p><table><thead><tr><th style="text-align:left;">속성명</th><th style="text-align:left;">설명</th></tr></thead><tbody><tr><td style="text-align:left;"><code>id</code></td><td style="text-align:left;">답변의 고유 번호</td></tr><tr><td style="text-align:left;"><code>question</code></td><td style="text-align:left;">질문 (어떤 질문의 답변인지 알아야하므로 질문 속성이 필요하다)</td></tr><tr><td style="text-align:left;"><code>content</code></td><td style="text-align:left;">답변의 내용</td></tr><tr><td style="text-align:left;"><code>create_date</code></td><td style="text-align:left;">답변을 작성한 일시</td></tr></tbody></table><p>이렇게 생각한 속성을 바탕으로 질문(<code>Question</code>)과 답변(<code>Answer</code>)에 해당되는 엔티티를 작성해 보자.</p><hr><h2 id="질문-엔티티-작성하기" tabindex="-1"><a class="header-anchor" href="#질문-엔티티-작성하기"><span>질문 엔티티 작성하기</span></a></h2><p>다음과 같이 Question 클래스를 작성하자.</p>',13),S=n("code",null,"/sbb/src/main/java/com/mysite/sbb/",-1),C=n("code",null,"Question.java",-1),G=o(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mysite<span class="token punctuation">.</span>sbb</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">Column</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">Entity</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">GeneratedValue</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">GenerationType</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">Id</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Setter</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Getter</span></span>
<span class="line"><span class="token annotation punctuation">@Setter</span></span>
<span class="line"><span class="token annotation punctuation">@Entity</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Question</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Id</span></span>
<span class="line">    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>length <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> subject<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>columnDefinition <span class="token operator">=</span> <span class="token string">&quot;TEXT&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> createDate<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),I={class:"hint-container info"},E=n("p",{class:"hint-container-title"},"스프링부트 2.x 버전을 사용하는 경우",-1),V=n("p",null,[a("이 책은 스프링부트 3.x 버전을 기준으로 설명한다. 만약 예전 버전인 스프링부트 2.x 버전을 사용한다면 "),n("code",null,"import javax.*"),a(" 처럼 jakarta 패키지로 시작하는 부분을 "),n("code",null,"import javax.*"),a(" 처럼 jakarta를 javax로 바꾸어야 한다.")],-1),Q=o("<p>엔티티로 만들기 위해 Question 클래스에 <code>@Entity</code> 애너테이션을 적용했다. <code>@Entity</code> 애너테이션을 적용해야 JPA가 엔티티로 인식한다. 그리고 Getter, Setter 메서드를 자동으로 생성하기 위해 롬복의 <code>@Getter</code>, <code>@Setter</code> 애너테이션을 적용했다.</p><p>컨트롤러에 <code>@Controller</code> 애너테이션을 적용하는 것과 마찬가지로 엔티티는 <code>@Entity</code> 애너테이션을 적용해야 한다.</p><p>그리고 엔티티의 속성으로 고유번호(<code>id</code>), 제목(<code>subject</code>), 내용(<code>content</code>), 작성일시(<code>createDate</code>)를 추가했다. 각 속성에는 Id, GeneratedValue, Column과 같은 애너테이션이 적용되어 있는데 그것들에 대해서 하나씩 알아보자.</p>",3),A=o('<hr><h2 id="id" tabindex="-1"><a class="header-anchor" href="#id"><span><code>@Id</code></span></a></h2><p>고유 번호 id 속성에 적용한 @Id 애너테이션은 id 속성을 기본 키로 지정한다. 기본 키로 지정하면 이제 id 속성의 값은 데이터베이스에 저장할 때 동일한 값으로 저장할 수 없다. 고유 번호를 기본 키로 한 이유는 고유 번호는 엔티티에서 각 데이터를 구분하는 유효한 값으로 중복되면 안 되기 때문이다.</p><blockquote><p>데이터베이스에서는 id와 같은 특징을 가진 속성을 기본 키(primary key)라고 한다.</p></blockquote><hr><h2 id="generatedvalue" tabindex="-1"><a class="header-anchor" href="#generatedvalue"><span><code>@GeneratedValue</code></span></a></h2><p><code>@GeneratedValue</code> 애너테이션을 적용하면 데이터를 저장할 때 해당 속성에 값을 따로 세팅하지 않아도 1씩 자동으로 증가하여 저장된다. <code>strategy</code>는 고유번호를 생성하는 옵션으로 <code>GenerationType.IDENTITY</code>는 해당 컬럼만의 독립적인 시퀀스를 생성하여 번호를 증가시킬 때 사용한다.</p><blockquote><p><code>strategy</code> 옵션을 생략할 경우에 <code>@GeneratedValue</code> 애너테이션이 지정된 컬럼들이 모두 동일한 시퀀스로 번호를 생성하기 때문에 일정한 순서의 고유번호를 가질수 없게 된다. 이러한 이유로 보통 <code>GenerationType.IDENTITY</code>를 많이 사용한다.</p></blockquote><hr><h2 id="column" tabindex="-1"><a class="header-anchor" href="#column"><span><code>@Column</code></span></a></h2><p>엔티티의 속성은 테이블의 컬럼명과 일치하는데 컬럼의 세부 설정을 위해 <code>@Column</code> 애너테이션을 사용한다. length는 컬럼의 길이를 설정할때 사용하고 <code>columnDefinition</code>은 컬럼의 속성을 정의할 때 사용한다. <code>columnDefinition = &quot;TEXT&quot;</code>은 &quot;내용&quot;처럼 글자 수를 제한할 수 없는 경우에 사용한다.</p><blockquote><p>엔티티의 속성은 <code>@Column</code> 애너테이션을 사용하지 않더라도 테이블 컬럼으로 인식한다. 테이블 컬럼으로 인식하고 싶지 않은 경우에만 <code>@Transient</code> 애너테이션을 사용한다.</p></blockquote><div class="hint-container info"><p class="hint-container-title">테이블의 컬럼명</p><p>위의 Question 엔티티에서 작성일시에 해당하는 <code>createDate</code> 속성의 실제 테이블의 컬럼명은 <code>create_date</code>가 된다. 즉 <code>createDate</code>처럼 대소문자 형태의 카멜케이스(Camel Case) 이름은 <code>create_date</code> 처럼 모두 소문자로 변경되고 언더바(<code>_</code>)로 단어가 구분되어 실제 테이블 컬럼명이 된다.</p></div><div class="hint-container info"><p class="hint-container-title">엔티티와 Setter</p><p>일반적으로 엔티티에는 Setter 메서드를 구현하지 않고 사용하기를 권한다. 왜냐하면 엔티티는 데이터베이스와 바로 연결되어 있으므로 데이터를 자유롭게 변경할 수 있는 Setter 메서드를 허용하는 것이 안전하지 않다고 판단하기 때문이다.</p><p>그렇다면 Setter 메서드 없이 어떻게 엔티티에 값을 저장할 수 있을까?</p><p>엔티티를 생성할 경우에는 롬복의 <code>@Builder</code> 어노테이션을 통한 빌드패턴을 사용하고, 데이터를 변경해야 할 경우에는 그에 해당되는 메서드를 엔티티에 추가하여 데이터를 변경하면 된다.</p><p><strong>다만, 이 책은 복잡도를 낮추고 원활한 설명을 위해 엔티티에 Setter 메서드를 추가하여 진행하려 한다.</strong></p></div><hr><h2 id="답변-엔티티-생성하기" tabindex="-1"><a class="header-anchor" href="#답변-엔티티-생성하기"><span>답변 엔티티 생성하기</span></a></h2><p>이어서 다음과 같이 답변 엔티티도 작성하자.</p>',17),M=n("code",null,"/sbb/src/main/java/com/mysite/sbb/",-1),O=n("code",null,"Answer.java",-1),B=o(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mysite<span class="token punctuation">.</span>sbb</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">Column</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">Entity</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">GeneratedValue</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">GenerationType</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">Id</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Setter</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Getter</span></span>
<span class="line"><span class="token annotation punctuation">@Setter</span></span>
<span class="line"><span class="token annotation punctuation">@Entity</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Answer</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Id</span></span>
<span class="line">    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>columnDefinition <span class="token operator">=</span> <span class="token string">&quot;TEXT&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> createDate<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Question</span> question<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Id</code>, <code>content</code>, <code>createDate</code> 속성은 질문 엔티티와 동일하므로 설명은 생략한다.</p><p><code>question</code> 속성은 답변 엔티티에서 질문 엔티티를 참조하기 위해 추가했다. 예를 들어 답변 객체(예:answer)를 통해 질문 객체의 제목을 알고 싶다면 <code>answer.getQuestion().getSubject()</code>처럼 접근할 수 있다. 하지만 이렇게 속성만 추가하면 안되고 질문 엔티티와 연결된 속성이라는 것을 명시적으로 표시해야 한다.</p><p>즉, 다음과 같이 <code>question</code> 속성에 <code>@ManyToOne</code> 애너테이션을 추가해야 한다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// (... 생략 ...)</span></span>
<span class="line highlighted"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">ManyToOne</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// (... 생략 ...)</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Getter</span></span>
<span class="line"><span class="token annotation punctuation">@Setter</span></span>
<span class="line"><span class="token annotation punctuation">@Entity</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Answer</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Id</span></span>
<span class="line">    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>columnDefinition <span class="token operator">=</span> <span class="token string">&quot;TEXT&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@CreatedDate</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> createDate<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted">    <span class="token annotation punctuation">@ManyToOne</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Question</span> question<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>답변은 하나의 질문에 여러개가 달릴 수 있는 구조이다. 따라서 답변은 Many(많은 것)가 되고 질문은 One(하나)이 된다. 따라서 <code>@ManyToOne</code>은 N:1 관계라고 할 수 있다. 이렇게 <code>@ManyToOne</code> 애너테이션을 설정하면 <code>Answer</code> 엔티티의 question 속성과 <code>Question</code> 엔티티가 서로 연결된다. (실제 데이터베이스에서는 ForeignKey 관계가 생성된다.)</p><blockquote><p><code>@ManyToOne</code>은 부모 자식 관계를 갖는 구조에서 사용한다. 여기서 부모는 <code>Question</code>, 자식은 <code>Answer</code>라고 할 수 있다.</p></blockquote><p>그렇다면 반대방향, 즉 <code>Question</code> 엔티티에서 <code>Answer</code> 엔티티를 참조할수는 없을까?</p><p>가능하다. 답변과 질문이 N:1의 관계라면 질문과 답변은 1:N의 관계라고 할 수 있다. 이런경우에는 <code>@ManyToOne</code>이 아닌 <code>@OneToMany</code>애너테이션을 사용한다. <code>Question</code> 하나에 <code>Answer</code>는 여러개이므로 <code>Question</code> 엔티티에 추가할 답변의 속성은 List 형태로 구성해야 한다.</p><p>이를 구현하기 위해 <code>Question</code> 엔티티를 다음과 같이 수정하자.</p>`,10),L=n("code",null,"/sbb/src/main/java/com/mysite/sbb/",-1),N=n("code",null,"Question.java",-1),R=o(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mysite<span class="token punctuation">.</span>sbb</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span></span>
<span class="line highlighted"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">CascadeType</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">Column</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">Entity</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">GeneratedValue</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">GenerationType</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">Id</span></span><span class="token punctuation">;</span></span>
<span class="line highlighted"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token class-name">OneToMany</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Setter</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Getter</span></span>
<span class="line"><span class="token annotation punctuation">@Setter</span></span>
<span class="line"><span class="token annotation punctuation">@Entity</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Question</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Id</span></span>
<span class="line">    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>length <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> subject<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>columnDefinition <span class="token operator">=</span> <span class="token string">&quot;TEXT&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">LocalDateTime</span> createDate<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted">    <span class="token annotation punctuation">@OneToMany</span><span class="token punctuation">(</span>mappedBy <span class="token operator">=</span> <span class="token string">&quot;question&quot;</span><span class="token punctuation">,</span> cascade <span class="token operator">=</span> <span class="token class-name">CascadeType</span><span class="token punctuation">.</span><span class="token constant">REMOVE</span><span class="token punctuation">)</span></span>
<span class="line highlighted">    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Answer</span><span class="token punctuation">&gt;</span></span> answerList<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Answer</code> 엔티티 객체로 구성된 answerList를 속성으로 추가하고 <code>@OneToMany</code> 애너테이션을 설정했다. 이제 질문 객체(예:question)에서 답변을 참조하려면 <code>question.getAnswerList()</code>를 호출하면 된다. <code>@OneToMany</code> 애너테이션에 사용된 mappedBy는 참조 엔티티의 속성명을 의미한다. 즉, <code>Answer</code> 엔티티에서 <code>Question</code> 엔티티를 참조한 속성명 question을 mappedBy에 전달해야 한다.</p><div class="hint-container info"><p class="hint-container-title">CascadeType.REMOVE</p><p>질문 하나에는 여러개의 답변이 작성될 수 있다. 이때 질문을 삭제하면 그에 달린 답변들도 모두 함께 삭제하기 위해서 <code>@OneToMany</code>의 속성으로 <code>cascade = CascadeType.REMOVE</code>를 사용했다.</p><ul><li>참고: <a href="https://www.baeldung.com/jpa-cascade-types" target="_blank" rel="noopener noreferrer">https://www.baeldung.com/jpa-cascade-types</a></li></ul></div><hr><h2 id="테이블-확인하기" tabindex="-1"><a class="header-anchor" href="#테이블-확인하기"><span>테이블 확인하기</span></a></h2><p><code>Question</code>과 <code>Answer</code> 엔티티를 작성한후 H2 콘솔에 접속해 보자.</p><figure><img src="https://wikidocs.net/images/page/161165/C_2-04_1.png" alt="과  테이블이 자동으로 생성된 것을 확인할 수 있다." tabindex="0" loading="lazy"><figcaption><code>Question</code>과 <code>Answer</code> 테이블이 자동으로 생성된 것을 확인할 수 있다.</figcaption></figure><blockquote><p>만약 테이블이 생성되지 않았다면 로컬 서버를 재시작해 보자.</p></blockquote><hr>`,9);function J(l,P){const p=c("router-link"),i=c("VPCard"),e=c("FontIcon"),d=c("VidStack"),r=c("RouteLink");return h(),k("div",null,[n("h1",y,[n("a",w,[n("span",null,m(l.$frontmatter.title)+" 관련",1)])]),n("nav",_,[n("ul",null,[n("li",null,[s(p,{to:"#엔티티의-속성-구상하기"},{default:t(()=>[a("엔티티의 속성 구상하기")]),_:1})]),n("li",null,[s(p,{to:"#질문-엔티티-작성하기"},{default:t(()=>[a("질문 엔티티 작성하기")]),_:1})]),n("li",null,[s(p,{to:"#id"},{default:t(()=>[a("@Id")]),_:1})]),n("li",null,[s(p,{to:"#generatedvalue"},{default:t(()=>[a("@GeneratedValue")]),_:1})]),n("li",null,[s(p,{to:"#column"},{default:t(()=>[a("@Column")]),_:1})]),n("li",null,[s(p,{to:"#답변-엔티티-생성하기"},{default:t(()=>[a("답변 엔티티 생성하기")]),_:1})]),n("li",null,[s(p,{to:"#테이블-확인하기"},{default:t(()=>[a("테이블 확인하기")]),_:1})])])]),f,s(i,v(b({title:"2-04. 엔티티",desc:"점프 투 스프링부트 - WikiDocs",link:"https://wikidocs.net/161165",logo:"https://wikidocs.net/static/img/favicon.ico",background:"rgba(255,255,255,0.2)"})),null,16),j,n("blockquote",null,[n("p",null,[n("a",T,[s(e,{icon:"iconfont icon-github"}),a(),x,a(" - "),s(e,{icon:"fas fa-folder-open"}),a(),D])])]),s(d,{src:"youtube/xx0XKlb19oQ"}),q,n("blockquote",null,[n("p",null,[a("파일명: "),s(e,{icon:"fas fa-folder-open"}),S,s(e,{icon:"fa-brands fa-java"}),C])]),G,n("div",I,[E,V,n("ul",null,[n("li",null,[s(r,{to:"/java/jump-to-spring-boot/a.html"},{default:t(()=>[a("참고: A-03 스프링부트 2.x 버전 안내")]),_:1})])]),Q]),A,n("blockquote",null,[n("p",null,[a("파일명: "),s(e,{icon:"fas fa-folder-open"}),M,s(e,{icon:"fa-brands fa-java"}),O])]),B,n("blockquote",null,[n("p",null,[a("파일명: "),s(e,{icon:"fas fa-folder-open"}),L,s(e,{icon:"fa-brands fa-java"}),N])]),R])}const K=u(g,[["render",J],["__file","02D.html.vue"]]),z=JSON.parse('{"path":"/java/jump-to-spring-boot/02D.html","title":"02D. 엔티티","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"02D. 엔티티","description":"Jump to Spring Boot > 02D. 엔티티","category":["Java","Spring","AWS"],"tag":["crashcourse","java","jdk","jdk8","stream","spring","springframework","springboot","aws","aws-ec2"],"head":[[{"meta":null},{"property":"og:title","content":"Jump to Spring Boot > 02D. 엔티티"},{"property":"og:description","content":"02D. 엔티티"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/java/jump-to-spring-boot/02D.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/java/jump-to-spring-boot/02D.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"02D. 엔티티"}],["meta",{"property":"og:description","content":"Jump to Spring Boot > 02D. 엔티티"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://wikidocs.net/images/page/161165/C_2-04_1.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"jdk"}],["meta",{"property":"article:tag","content":"jdk8"}],["meta",{"property":"article:tag","content":"stream"}],["meta",{"property":"article:tag","content":"spring"}],["meta",{"property":"article:tag","content":"springframework"}],["meta",{"property":"article:tag","content":"springboot"}],["meta",{"property":"article:tag","content":"aws"}],["meta",{"property":"article:tag","content":"aws-ec2"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"02D. 엔티티\\",\\"image\\":[\\"https://wikidocs.net/images/page/161165/C_2-04_1.png\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"엔티티의 속성 구상하기","slug":"엔티티의-속성-구상하기","link":"#엔티티의-속성-구상하기","children":[]},{"level":2,"title":"질문 엔티티 작성하기","slug":"질문-엔티티-작성하기","link":"#질문-엔티티-작성하기","children":[]},{"level":2,"title":"@Id","slug":"id","link":"#id","children":[]},{"level":2,"title":"@GeneratedValue","slug":"generatedvalue","link":"#generatedvalue","children":[]},{"level":2,"title":"@Column","slug":"column","link":"#column","children":[]},{"level":2,"title":"답변 엔티티 생성하기","slug":"답변-엔티티-생성하기","link":"#답변-엔티티-생성하기","children":[]},{"level":2,"title":"테이블 확인하기","slug":"테이블-확인하기","link":"#테이블-확인하기","children":[]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":8}]},"readingTime":{"minutes":1.87,"words":562},"filePathRelative":"java/jump-to-spring-boot/02D.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{K as comp,z as data};
