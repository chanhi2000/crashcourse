import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as n,t as m,b as s,w as o,n as p,g as l,d as a,e,r as c,o as v}from"./app-U_bew1in.js";const w={},g={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},b=n("hr",null,null,-1),_=n("h2",{id:"project-19-part-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#project-19-part-3"},[n("span",null,"Project 19, part 3")])],-1),S=n("p",null,"It’s time to write the final part of our final project, which means implementing three important features: adjusting the UI to make the most of our available space, showing more information about each facility when it’s tapped, and letting the user mark favorites.",-1),x=n("p",null,"The first two of those probably sound easy, but as you’ll see they come with interesting complexities that take some thinking to solve. That’s okay, though – you’re near the very end of the 100 days now, so thinking about complex SwiftUI should be well within the scope of your abilities. These things might have been hard for you four or five weeks ago, but at this point I hope they are almost second nature. As David A. Smith once said, “it’s only hard until it becomes easy.”",-1),q=n("p",null,[n("strong",null,"Today you have three topics to work through, in which you’ll add support for size classes, show more information about facilities, and let users mark favorite resorts.")],-1),T=n("h3",{id:"changing-a-view-s-layout-in-response-to-size-classes",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#changing-a-view-s-layout-in-response-to-size-classes"},[n("span",null,"Changing a view’s layout in response to size classes")])],-1),j={class:"hint-container details"},z=n("summary",null,"Changing a view’s layout in response to size classes",-1),F=e(`<p>SwiftUI gives us two environment values to monitor the current size class of our app, which in practice means we can show one layout when space is restricted and another when space is plentiful.</p><p>For example, in our current layout we’re displaying the resort details and snow details in a <code>HStack</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">HStack</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ResortDetailsView</span><span class="token punctuation">(</span>resort<span class="token punctuation">:</span> resort<span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">SkiDetailsView</span><span class="token punctuation">(</span>resort<span class="token punctuation">:</span> resort<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Each of those subviews are internally using a <code>Group</code> that doesn’t add any of its own layout, so we end up with all four pieces of text laid out horizontally. This looks great when we have enough space, but when space is limited it would be helpful to switch to a 2x2 grid layout.</p><p>To make this happen we <em>could</em> create copies of <code>ResortDetailsView</code> and <code>SkiDetailsView</code> that handle the alternative layout, but a much smarter solution is to have both those views remain <em>layout neutral</em> – to have them automatically adapt to being placed in a <code>HStack</code> or <code>VStack</code> depending on the parent that places them.</p><p>First, add this new <code>@Environment</code> property to <code>ResortView</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>horizontalSizeClass<span class="token punctuation">)</span> <span class="token keyword">var</span> sizeClass</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That will tell us whether we have a regular or compact size class. Very roughly:</p><ul><li>All iPhones in portrait have compact width and regular height.</li><li>Most iPhones in landscape have compact width and compact height.</li><li>Large iPhones (Plus-sized and Max devices) in landscape have regular width and compact height.</li><li>All iPads in both orientations have regular width and regular height when your app is running with the full screen.</li></ul><p>Things get a little more complex for iPad when it comes to split view mode, which is when you have two apps running side by side – iOS will automatically downgrade our app to a compact size class at various points depending on the exact iPad model.</p><p>Fortunately, to begin with all we care about are these two horizontal options: do we have lots of horizontal space (regular) or is space restricted (compact). If we have a regular amount of space, we’re going to keep the current <code>HStack</code> approach so that everything its neatly on one line, but if space is restricted we’ll ditch that and place each of the views into a <code>VStack</code>.</p><p>So, find the <code>HStack</code> that contains <code>ResortDetailsView</code> and <code>SkiDetailsView</code> and replace it with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">HStack</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> sizeClass <span class="token operator">==</span> <span class="token punctuation">.</span>compact <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">ResortDetailsView</span><span class="token punctuation">(</span>resort<span class="token punctuation">:</span> resort<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">VStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">SkiDetailsView</span><span class="token punctuation">(</span>resort<span class="token punctuation">:</span> resort<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ResortDetailsView</span><span class="token punctuation">(</span>resort<span class="token punctuation">:</span> resort<span class="token punctuation">)</span></span>
<span class="line">        <span class="token class-name">SkiDetailsView</span><span class="token punctuation">(</span>resort<span class="token punctuation">:</span> resort<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>vertical<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>primary<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, that uses two vertical stacks placed side by side, rather than just having all four views horizontal.</p><p>Is it perfect? Well, no. Sure, there’s a lot more space in compact layouts, which means the user can use larger Dynamic Type sizes without running out of space, but many users won’t have that problem because they’ll be using the default size or even smaller sizes.</p><p>To make this even better we can combine a check for the app’s current horizontal size class with a check for the user’s Dynamic Type setting so that we use the flat horizontal layout unless space really is tight – if the user has a compact size class and a larger Dynamic Type setting.</p><p>First add another property to read the current Dynamic Type setting:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>dynamicTypeSize<span class="token punctuation">)</span> <span class="token keyword">var</span> typeSize</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now modify the size class check to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> sizeClass <span class="token operator">==</span> <span class="token punctuation">.</span>compact <span class="token operator">&amp;&amp;</span> typeSize <span class="token operator">&gt;</span> <span class="token punctuation">.</span>large <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now finally our layout should look great in both orientations: one single line of text in a regular size class, and two rows of vertical stacks in a compact size class when an increased font size is used. It took a little work, but we got there in the end!</p><p>Our solution didn’t result in code duplication, which is a huge win, but it also left our two child views in a better place – they are now there just to serve up their content without specifying a layout. So, parent views can dynamically switch between <code>HStack</code> and <code>VStack</code> whenever they want, and SwiftUI will take care of the layout for us.</p><p>Before we’re done, I want to show you one useful extra technique: you can limit the range of Dynamic Type sizes supported by a particular view. For example, you might have worked hard to support as wide a range of sizes as possible, but found that anything larger than the “extra extra extra large” setting just looks bad. In that situation you can use the <code>dynamicTypeSize()</code> modifier on a view, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">dynamicTypeSize</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token class-name">DynamicTypeSize</span><span class="token punctuation">.</span>xxxLarge<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That’s a one-sided range, meaning that any size up to and including <code>.xxxLarge</code> is fine, but nothing larger. Obviously it’s best to avoid setting these limits where possible, but it’s not a problem if you use it judiciously – both <code>TabView</code> and <code>NavigationView</code>, for example, limit the size of their text labels so the UI doesn’t break.</p>`,25),I=n("h3",{id:"binding-an-alert-to-an-optional-string",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#binding-an-alert-to-an-optional-string"},[n("span",null,"Binding an alert to an optional string")])],-1),D={class:"hint-container details"},V=n("summary",null,"Binding an alert to an optional string",-1),C=e(`<p>SwiftUI lets us present an alert with an optional source of truth inside, but it takes a little thinking to get right as you’ll see.</p><p>To demonstrate these optional alerts in action, we’re going to rewrite the way our resort facilities are shown. Right now we have a plain text view generated like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span>resort<span class="token punctuation">.</span>facilities<span class="token punctuation">,</span> format<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> <span class="token punctuation">.</span>and<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>vertical<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>We’re going to replace that with icons that represent each facility, and when the user taps on one we’ll show an alert with a description of that facility.</p><p>As usual we’re going to start small then work our way up. First, we need a way to convert facility names like “Accommodation” into an icon that can be displayed. Although this will only happen in <code>ResortView</code> right now, this functionality is exactly the kind of thing that should be available elsewhere in our project. So, we’re going to create a new struct to hold all this information for us.</p>`,5),U=n("code",null,"Facility.swift",-1),R=e(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Facility</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token function">UUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">let</span> icons <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string-literal"><span class="token string">&quot;Accommodation&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;house&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string-literal"><span class="token string">&quot;Beginners&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;1.circle&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string-literal"><span class="token string">&quot;Cross-country&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;map&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string-literal"><span class="token string">&quot;Eco-friendly&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;leaf.arrow.circlepath&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string-literal"><span class="token string">&quot;Family&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;person.3&quot;</span></span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> icon<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span>    </span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">let</span> iconName <span class="token operator">=</span> icons<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> iconName<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">accessibilityLabel</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>secondary<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Unknown facility type: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, that conforms to <code>Identifiable</code> so we can loop over an array of facilities with SwiftUI, and internally it looks up a given facility name in a dictionary to return the correct icon. I’ve picked out various SF Symbols icons that work well for the facilities we have, and I also used an <code>accessibilityLabel()</code> modifier for the image to make sure it works well in VoiceOver.</p><p>The next step is to create <code>Facility</code> instances for every of the facilities in a <code>Resort</code>, which we can do in a computed property inside the <code>Resort</code> struct itself:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> facilityTypes<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Facility</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">    facilities<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Facility</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can now drop that facilities view into <code>ResortView</code> by replacing this code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span>resort<span class="token punctuation">.</span>facilities<span class="token punctuation">,</span> format<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> <span class="token punctuation">.</span>and<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>vertical<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>With this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">HStack</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ForEach</span><span class="token punctuation">(</span>resort<span class="token punctuation">.</span>facilityTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span> facility <span class="token keyword">in</span></span>
<span class="line">        facility<span class="token punctuation">.</span>icon</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>vertical<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That loops over each item in the <code>facilities</code> array, converting it to an icon and placing it into a <code>HStack</code>. I used the <code>.font(.title)</code> modifier to make the images larger – using the modifier here rather than inside <code>Facility</code> allows us more flexibility if we wanted to use these icons in other places.</p><p>That was the easy part. The harder part comes next: we want to make the facility images into buttons, so that we can show an alert when they are tapped.</p><p>Using the optional form of <code>alert()</code> this starts easily enough – add two new properties to <code>ResortView</code>, one to store the currently selected facility, and one to store whether an alert should currently be shown or not:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> selectedFacility<span class="token punctuation">:</span> <span class="token class-name">Facility</span><span class="token operator">?</span></span>
<span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> showingFacility <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Now replace the previous ForEach loop with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">ForEach</span><span class="token punctuation">(</span>resort<span class="token punctuation">.</span>facilityTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span> facility <span class="token keyword">in</span></span>
<span class="line">    <span class="token class-name">Button</span> <span class="token punctuation">{</span></span>
<span class="line">        selectedFacility <span class="token operator">=</span> facility</span>
<span class="line">        showingFacility <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">    <span class="token punctuation">}</span> label<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">        facility<span class="token punctuation">.</span>icon</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can create the alert in a very similar manner as we created the icons – by adding a dictionary to the <code>Facility</code> struct containing all the keys and values we need:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">private</span> <span class="token keyword">let</span> descriptions <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Accommodation&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;This resort has popular on-site accommodation.&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Beginners&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;This resort has lots of ski schools.&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Cross-country&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;This resort has many cross-country ski routes.&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Eco-friendly&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;This resort has won an award for environmental friendliness.&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Family&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;This resort is popular with families.&quot;</span></span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then reading that inside another computed property:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> description<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> message <span class="token operator">=</span> descriptions<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> message</span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Unknown facility type: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So far this hasn’t been tricky, but now comes the complex part. You see, the <code>selectedFacility</code> property is optional, so we need to handle it carefully:</p><ul><li>We can’t use it as the only title for our alert, because we must provide a non-optional string. We can fix that with nil coalescing.</li><li>We always want to make sure the alert reads from our optional <code>selectedFacility</code>, so it passes in the unwrapped value from there.</li><li>We don’t need any buttons in this alert, so we can let the system provide a default OK button.</li><li>We need to provide an alert message based on the unwrapped facility data, calling the new <code>message(for:)</code> method we just wrote.</li></ul><p>Putting all that together, add this modifier below <code>navigationBarTitleDisplayMode()</code> in <code>ResortView</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span>selectedFacility<span class="token operator">?</span><span class="token punctuation">.</span>name <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;More information&quot;</span></span><span class="token punctuation">,</span> isPresented<span class="token punctuation">:</span> $showingFacility<span class="token punctuation">,</span> presenting<span class="token punctuation">:</span> selectedFacility<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span></span>
<span class="line"><span class="token punctuation">}</span> message<span class="token punctuation">:</span> <span class="token punctuation">{</span> facility <span class="token keyword">in</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span>facility<span class="token punctuation">.</span>description<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice how we’re using <code>_ in</code> for the alert’s action closure because we don’t actually care about getting the unwrapped <code>Facility</code> instance there, but it <em>is</em> important in the <code>message</code> closure so we can display the correct description.</p>`,23),N=n("h3",{id:"letting-the-user-mark-favorites",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#letting-the-user-mark-favorites"},[n("span",null,"Letting the user mark favorites")])],-1),B={class:"hint-container details"},L=n("summary",null,"Letting the user mark favorites",-1),P=e("<p>The final task for this project is to let the user assign favorites to resorts they like. This is mostly straightforward, using techniques we’ve already covered:</p><ul><li>Creating a new <code>Favorites</code> class that has a <code>Set</code> of resort IDs the user likes.</li><li>Giving it <code>add()</code>, <code>remove()</code>, and <code>contains()</code> methods that manipulate the data, sending update notifications to SwiftUI while also saving any changes to <code>UserDefaults</code>.</li><li>Injecting an instance of the <code>Favorites</code> class into the environment.</li><li>Adding some new UI to call the appropriate methods.</li></ul><p>Swift’s sets already contain methods for adding, removing, and checking for an element, but we’re going to add our own around them so we can use <code>objectWillChange</code> to notify SwiftUI that changes occurred, and also call a <code>save()</code> method so the user’s changes are persisted. This in turn means we can mark the favorites set using <code>private</code> access control, so we can’t accidentally bypass our methods and miss out saving.</p>",3),A=n("code",null,"Favorites.swift",-1),E=e(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Favorites</span><span class="token punctuation">:</span> <span class="token class-name">ObservableObject</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// the actual resorts the user has favorited</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">var</span> resorts<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// the key we&#39;re using to read/write in UserDefaults</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">let</span> saveKey <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Favorites&quot;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// load our saved data</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// still here? Use an empty array</span></span>
<span class="line">        resorts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// returns true if our set contains this resort</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">contains</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> resort<span class="token punctuation">:</span> <span class="token class-name">Resort</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Bool</span> <span class="token punctuation">{</span></span>
<span class="line">        resorts<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>resort<span class="token punctuation">.</span>id<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// adds the resort to our set, updates all views, and saves the change</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">add</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> resort<span class="token punctuation">:</span> <span class="token class-name">Resort</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        objectWillChange<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        resorts<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>resort<span class="token punctuation">.</span>id<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// removes the resort from our set, updates all views, and saves the change</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">remove</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> resort<span class="token punctuation">:</span> <span class="token class-name">Resort</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        objectWillChange<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        resorts<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>resort<span class="token punctuation">.</span>id<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// write out our data</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You’ll notice I’ve missed out the actual functionality for loading and saving favorites – that will be your job to fill in shortly.</p><p>We need to create a <code>Favorites</code> instance in <code>ContentView</code> and inject it into the environment so all views can share it. So, add this new property to <code>ContentView</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@StateObject</span> <span class="token keyword">var</span> favorites <span class="token operator">=</span> <span class="token class-name">Favorites</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now inject it into the environment by adding this modifier to the <code>NavigationView</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">environmentObject</span><span class="token punctuation">(</span>favorites<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Because that’s attached to the navigation view, every view the navigation view presents will also gain that <code>Favorites</code> instance to work with. So, we can load it from inside <code>ResortView</code> by adding this new property:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@EnvironmentObject</span> <span class="token keyword">var</span> favorites<span class="token punctuation">:</span> <span class="token class-name">Favorites</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Tip: Make sure you modify your <code>ResortView</code> preview to inject an example <code>Favorites</code> object into the environment, so your SwiftUI preview carries on working. This will work fine: <code>.environmentObject(Favorites())</code>.</p><p>All this work hasn’t really accomplished much yet – sure, the <code>Favorites</code> class gets loaded when the app starts, but it isn’t actually used anywhere despite having properties to store it.</p><p>This is easy enough to fix: we’re going to add a button at the end of the scrollview in <code>ResortView</code> so that users can either add or remove the resort from their favorites, then display a heart icon in <code>ContentView</code> for favorite resorts.</p><p>First, add this to the end of the scrollview in <code>ResortView</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Button</span><span class="token punctuation">(</span>favorites<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>resort<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string-literal"><span class="token string">&quot;Remove from Favorites&quot;</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Add to Favorites&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> favorites<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>resort<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        favorites<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>resort<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        favorites<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>resort<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">buttonStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>borderedProminent<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we can show a colored heart icon next to favorite resorts in <code>ContentView</code> by adding this to the end of the label for our <code>NavigationLink</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> favorites<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>resort<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">Image</span><span class="token punctuation">(</span>systemName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;heart.fill&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">accessibilityLabel</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;This is a favorite resort&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Tip</strong>: As you can see, the <code>foregroundColor()</code> modifier works great here because our image uses SF Symbols.</p><p>That <em>mostly</em> works, but you might notice a glitch: if you favorite resorts with longer names you might find their name wraps onto two lines even though there’s space for it to be all on one.</p><p>This happens because we’ve made an assumption in our code, and it’s coming back to bite us: we were passing an <code>Image</code> and a <code>VStack</code> into the label for our <code>NavigationLink</code>, which SwiftUI was smart enough to arrange neatly for us, but as soon as we added a <em>third</em> view it wasn’t sure how to respond.</p><p>To fix this, we need to tell SwiftUI explicitly that the content of our <code>NavigationLink</code> is a plain old <code>HStack</code>, so it will size everything appropriately. So, wrap the entire contents of the <code>NavigationLink</code> label – everything from the <code>Image</code> down to the new condition wrapping the heart icon – inside a <code>HStack</code> to fix the problem.</p><p>That should make the text layout correctly even with the spacer and heart icon – much better. And that also finishes our project, so give it one last try and see what you think. Good job!</p>`,20),W=n("p",null,"That’s another project finished – don’t forget to share your progress with others, because there’s value in staying accountable even now!",-1),O=n("hr",null,null,-1);function H(d,M){const t=c("router-link"),i=c("VPCard"),r=c("VidStack"),u=c("FontIcon");return v(),h("div",null,[n("h1",g,[n("a",f,[n("span",null,m(d.$frontmatter.title)+" 관련",1)])]),n("nav",y,[n("ul",null,[n("li",null,[s(t,{to:"#project-19-part-3"},{default:o(()=>[a("Project 19, part 3")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#changing-a-view-s-layout-in-response-to-size-classes"},{default:o(()=>[a("Changing a view’s layout in response to size classes")]),_:1})]),n("li",null,[s(t,{to:"#binding-an-alert-to-an-optional-string"},{default:o(()=>[a("Binding an alert to an optional string")]),_:1})]),n("li",null,[s(t,{to:"#letting-the-user-mark-favorites"},{default:o(()=>[a("Letting the user mark favorites")]),_:1})])])])])]),b,s(i,p(l({title:"100 Days of SwiftUI - Day 98",desc:"Project 19, part 3",link:"https://www.hackingwithswift.com/100/swiftui/98",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),_,S,x,q,T,n("details",j,[z,s(i,p(l({title:"100 Days of SwiftUI - Day 98 - Changing a view’s layout in response to size classes",desc:"Changing a view’s layout in response to size classes",link:"https://www.hackingwithswift.com/books/ios-swiftui/changing-a-views-layout-in-response-to-size-classes",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(r,{src:"youtube/kBGtBaNxzIM"}),F]),I,n("details",D,[V,s(i,p(l({title:"100 Days of SwiftUI - Day 98 - Binding an alert to an optional string",desc:"Binding an alert to an optional string",link:"https://www.hackingwithswift.com/books/ios-swiftui/binding-an-alert-to-an-optional-string",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(r,{src:"youtube/4RK67wN46XE"}),C,n("p",null,[a("Create a new Swift file called "),s(u,{icon:"fa-brands fa-swift"}),U,a(", replace its Foundation import with SwiftUI, and give it this code:")]),R]),N,n("details",B,[L,s(i,p(l({title:"100 Days of SwiftUI - Day 98 - Letting the user mark favorites",desc:"Letting the user mark favorites",link:"https://www.hackingwithswift.com/books/ios-swiftui/letting-the-user-mark-favorites",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(r,{src:"youtube/oTqLiLkLnsw"}),P,n("p",null,[a("Create a new Swift file called "),s(u,{icon:"fa-brands fa-swift"}),A,a(", replace its Foundation import with SwiftUI, then give it this code:")]),E]),W,O])}const Z=k(w,[["render",H],["__file","98.html.vue"]]),Y=JSON.parse('{"path":"/swift/100-days-of-swiftui/98.html","title":"Day 98","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 98","description":"100 Days of SwiftUI > Day 98","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 98"},{"property":"og:description","content":"Day 98"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/98.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/98.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 98"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 98"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 98\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 19, part 3","slug":"project-19-part-3","link":"#project-19-part-3","children":[{"level":3,"title":"Changing a view’s layout in response to size classes","slug":"changing-a-view-s-layout-in-response-to-size-classes","link":"#changing-a-view-s-layout-in-response-to-size-classes","children":[]},{"level":3,"title":"Binding an alert to an optional string","slug":"binding-an-alert-to-an-optional-string","link":"#binding-an-alert-to-an-optional-string","children":[]},{"level":3,"title":"Letting the user mark favorites","slug":"letting-the-user-mark-favorites","link":"#letting-the-user-mark-favorites","children":[]}]}],"git":{"createdTime":1710213771000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":6}]},"readingTime":{"minutes":9.66,"words":2898},"filePathRelative":"swift/100-days-of-swiftui/98.md","localizedDate":"2024년 3월 12일","excerpt":"\\n\\n<hr>\\n"}');export{Z as comp,Y as data};
