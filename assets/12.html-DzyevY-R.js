import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as n,t as w,b as a,w as o,n as l,g as p,d as e,e as s,r,o as g}from"./app-U_bew1in.js";const k={},m={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},v=n("hr",null,null,-1),b=n("h2",{id:"optionals",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#optionals"},[n("span",null,"Optionals")])],-1),_=n("p",null,"Null references – literally when a variable has no value – were invented by Tony Hoare way back in 1965. When asked about it in retrospect, he said “I call it my billion-dollar mistake” because they lead to so many problems.",-1),x=n("p",null,"This is the last day that you’ll be learning the fundamentals of Swift, and it’s devoted exclusively to Swift’s solution to null references, known as optionals. These are a really important language feature, but they can hurt your brain a little – don’t feel bad if you need to repeat some videos a few times.",-1),q=n("p",null,[n("strong",null,"Today you have 11 one-minute videos to watch, and you’ll meet unwrapping, optional chaining, typecasting, and more."),e(" Once you’ve watched each video and completed any optional extra reading you wanted, there’s a short test to help make sure you’ve understood what was taught.")],-1),S=n("h3",{id:"_1-handling-missing-data",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-handling-missing-data"},[n("span",null,"1. Handling missing data")])],-1),T={class:"hint-container details"},D=n("summary",null,"1. Handling missing data",-1),O=s(`<p>We’ve used types such as <code>Int</code> to hold values like 5. But if you wanted to store an <code>age</code> property for users, what would you do if you didn’t know someone’s age?</p><p>You might say “well, I’ll store 0”, but then you would get confused between new-born babies and people whose age you don’t know. You could use a special number such as 1000 or -1 to represent “unknown”, both of which are impossible ages, but then would you really remember that number in all the places it’s used?</p><p>Swift’s solution is called optionals, and you can make optionals out of any type. An optional integer might have a number like 0 or 40, but it might have no value at all – it might literally be missing, which is <code>nil</code> in Swift.</p><p>To make a type optional, add a question mark after it. For example, we can make an optional integer like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> age<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That doesn’t hold any number – it holds nothing. But if we later learn that age, we can use it:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">age <span class="token operator">=</span> <span class="token number">38</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,7),I=s('<div class="hint-container info"><p class="hint-container-title">1. Handling missing data - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-have-optionals" target="_blank" rel="noopener noreferrer">Why does Swift have optionals?</a></li><li>Test: <a href="https://hackingwithswift.com/review/handling-missing-data" target="_blank" rel="noopener noreferrer">Handling missing data</a></li></ul></div><h3 id="_2-unwrapping-optionals" tabindex="-1"><a class="header-anchor" href="#_2-unwrapping-optionals"><span>2. Unwrapping optionals</span></a></h3>',2),A={class:"hint-container details"},F=n("summary",null,"2. Unwrapping optionals",-1),j=s(`<p>Optional strings might contain a string like “Hello” or they might be nil – nothing at all.</p><p>Consider this optional string:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>What happens if we use <code>name.count</code>? A real string has a <code>count</code> property that stores how many letters it has, but this is <code>nil</code> – it’s empty memory, not a string, so it doesn’t have a <code>count</code>.</p><p>Because of this, trying to read <code>name.count</code> is unsafe and Swift won’t allow it. Instead, we must look inside the optional and see what’s there – a process known as unwrapping.</p><p>A common way of unwrapping optionals is with <code>if let</code> syntax, which unwraps with a condition. If there was a value inside the optional then you can use it, but if there wasn’t the condition fails.</p><p>For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> unwrapped <span class="token operator">=</span> name <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">unwrapped<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> letters&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Missing name.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If <code>name</code> holds a string, it will be put inside <code>unwrapped</code> as a regular <code>String</code> and we can read its <code>count</code> property inside the condition. Alternatively, if <code>name</code> is empty, the <code>else</code> code will be run.</p>`,9),z=s('<div class="hint-container info"><p class="hint-container-title">2. Unwrapping optionals - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-make-us-unwrap-optionals" target="_blank" rel="noopener noreferrer">Why does Swift make us unwrap optionals?</a></li><li>Test: <a href="https://hackingwithswift.com/review/unwrapping-optionals" target="_blank" rel="noopener noreferrer">Unwrapping optionals</a></li></ul></div><h3 id="_3-unwrapping-with-guard" tabindex="-1"><a class="header-anchor" href="#_3-unwrapping-with-guard"><span>3. Unwrapping with guard</span></a></h3>',2),U={class:"hint-container details"},H=n("summary",null,"3. Unwrapping with guard",-1),W=s(`<p>An alternative to <code>if let</code> is <code>guard let</code>, which also unwraps optionals. <code>guard let</code> will unwrap an optional for you, but if it finds <code>nil</code> inside it expects you to exit the function, loop, or condition you used it in.</p><p>However, the major difference between <code>if let</code> and <code>guard let</code> is that your unwrapped optional remains usable after the <code>guard</code> code.</p><p>Let’s try it out with a <code>greet()</code> function. This will accept an optional string as its only parameter and try to unwrap it, but if there’s nothing inside it will print a message and exit. Because optionals unwrapped using <code>guard let</code> stay around after the <code>guard</code> finishes, we can print the unwrapped string at the end of the function:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">greet</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">guard</span> <span class="token keyword">let</span> unwrapped <span class="token operator">=</span> name <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;You didn&#39;t provide a name!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">unwrapped</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Using <code>guard let</code> lets you deal with problems at the start of your functions, then exit immediately. This means the rest of your function is the happy path – the path your code takes if everything is correct.</p>`,5),N=s('<div class="hint-container info"><p class="hint-container-title">3. Unwrapping with guard - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-to-use-guard-let-rather-than-if-let" target="_blank" rel="noopener noreferrer">When to use <code>guard let</code> rather than <code>if let</code></a></li><li>Test: <a href="https://hackingwithswift.com/review/unwrapping-with-guard" target="_blank" rel="noopener noreferrer">Unwrapping with <code>guard</code></a></li></ul></div><h3 id="_4-force-unwrapping" tabindex="-1"><a class="header-anchor" href="#_4-force-unwrapping"><span>4. Force unwrapping</span></a></h3>',2),P={class:"hint-container details"},B=n("summary",null,"4. Force unwrapping",-1),V=s(`<p>Optionals represent data that may or may not be there, but sometimes you know for sure that a value isn’t nil. In these cases, Swift lets you force unwrap the optional: convert it from an optional type to a non-optional type.</p><p>For example, if you have a string that contains a number, you can convert it to an <code>Int</code> like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;5&quot;</span></span></span>
<span class="line"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token class-name">Int</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>That makes <code>num</code> an optional <code>Int</code> because you might have tried to convert a string like “Fish” rather than “5”.</p><p>Even though Swift isn’t sure the conversion will work, you can see the code is safe so you can force unwrap the result by writing <code>!</code> after <code>Int(str)</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token class-name">Int</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Swift will immediately unwrap the optional and make <code>num</code> a regular <code>Int</code> rather than an <code>Int?</code>. But if you’re wrong – if <code>str</code> was something that couldn’t be converted to an integer – your code will crash.</p><p>As a result, you should force unwrap only when you’re sure it’s safe – there’s a reason it’s often called the crash operator.</p>`,8),Y=s('<div class="hint-container info"><p class="hint-container-title">4. Force unwrapping - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-should-you-force-unwrap-optionals-in-swift" target="_blank" rel="noopener noreferrer">When should you force unwrap optionals in Swift?</a></li><li>Test: <a href="https://hackingwithswift.com/review/force-unwrapping" target="_blank" rel="noopener noreferrer">Force unwrapping</a></li></ul></div><h3 id="_5-implicitly-unwrapped-optionals" tabindex="-1"><a class="header-anchor" href="#_5-implicitly-unwrapped-optionals"><span>5. Implicitly unwrapped optionals</span></a></h3>',2),R={class:"hint-container details"},E=n("summary",null,"5. Implicitly unwrapped optionals",-1),C=s(`<p>Like regular optionals, implicitly unwrapped optionals might contain a value or they might be <code>nil</code>. However, unlike regular optionals you don’t need to unwrap them in order to use them: you can use them as if they weren’t optional at all.</p><p>Implicitly unwrapped optionals are created by adding an exclamation mark after your type name, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> age<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token operator">!</span> <span class="token operator">=</span> <span class="token nil constant">nil</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Because they behave as if they were already unwrapped, you don’t need <code>if let</code> or <code>guard let</code> to use implicitly unwrapped optionals. However, if you try to use them and they have no value – if they are <code>nil</code> – your code crashes.</p><p>Implicitly unwrapped optionals exist because sometimes a variable will start life as nil, but will always have a value before you need to use it. Because you know they will have a value by the time you need them, it’s helpful not having to write <code>if let</code> all the time.</p><p>That being said, if you’re able to use regular optionals instead it’s generally a good idea.</p>`,6),J=s('<div class="hint-container info"><p class="hint-container-title">5. Implicitly unwrapped optionals - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-need-both-implicitly-unwrapped-optionals-and-regular-optionals" target="_blank" rel="noopener noreferrer">Why does Swift need both implicitly unwrapped optionals and regular optionals?</a></li><li>Test: <a href="https://hackingwithswift.com/review/implicitly-unwrapped-optionals" target="_blank" rel="noopener noreferrer">Implicitly unwrapped optionals</a></li></ul></div><h3 id="_6-nil-coalescing" tabindex="-1"><a class="header-anchor" href="#_6-nil-coalescing"><span>6. Nil coalescing</span></a></h3>',2),M={class:"hint-container details"},K=n("summary",null,"6. Nil coalescing",-1),Z=s(`<p>The nil coalescing operator unwraps an optional and returns the value inside if there is one. If there isn’t a value – if the optional was <code>nil</code> – then a default value is used instead. Either way, the result won’t be optional: it will either be the value from inside the optional or the default value used as a backup.</p><p>Here’s a function that accepts an integer as its only parameter and returns an optional string:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">username</span><span class="token punctuation">(</span><span class="token keyword">for</span> id<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token operator">?</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> id <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;Taylor Swift&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token nil constant">nil</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If we call that with ID 15 we’ll get back <code>nil</code> because the user isn’t recognized, but with nil coalescing we can provide a default value of “Anonymous” like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token function">username</span><span class="token punctuation">(</span><span class="token keyword">for</span><span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;Anonymous&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That will check the result that comes back from the <code>username()</code> function: if it’s a string then it will be unwrapped and placed into <code>user</code>, but if it has <code>nil</code> inside then “Anonymous” will be used instead.</p>`,6),G=s('<div class="hint-container info"><p class="hint-container-title">6. Nil coalescing - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-should-you-use-nil-coalescing-in-swift" target="_blank" rel="noopener noreferrer">When should you use nil coalescing in Swift?</a></li><li>Test: <a href="https://hackingwithswift.com/review/nil-coalescing" target="_blank" rel="noopener noreferrer">Nil coalescing</a></li></ul></div><h3 id="_7-optional-chaining" tabindex="-1"><a class="header-anchor" href="#_7-optional-chaining"><span>7. Optional chaining</span></a></h3>',2),L={class:"hint-container details"},X=n("summary",null,"7. Optional chaining",-1),Q=s(`<p>Swift provides us with a shortcut when using optionals: if you want to access something like <code>a.b.c</code> and <code>b</code> is optional, you can write a question mark after it to enable optional chaining: <code>a.b?.c</code>.</p><p>When that code is run, Swift will check whether <code>b</code> has a value, and if it’s <code>nil</code> the rest of the line will be ignored – Swift will return <code>nil</code> immediately. But if it has a value, it will be unwrapped and execution will continue.</p><p>To try this out, here’s an array of names:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;John&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Paul&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;George&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Ringo&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We’re going to use the <code>first</code> property of that array, which will return the first name if there is one or <code>nil</code> if the array is empty. We can then call <code>uppercased()</code> on the result to make it an uppercase string:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> beatle <span class="token operator">=</span> names<span class="token punctuation">.</span>first<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">uppercased</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That question mark is optional chaining – if <code>first</code> returns <code>nil</code> then Swift won’t try to uppercase it, and will set <code>beatle</code> to <code>nil</code> immediately.</p>`,7),$=s('<div class="hint-container info"><p class="hint-container-title">7. Optional chaining - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-is-optional-chaining-so-important" target="_blank" rel="noopener noreferrer">Why is optional chaining so important?</a></li><li>Test: <a href="https://hackingwithswift.com/review/optional-chaining" target="_blank" rel="noopener noreferrer">Optional chaining</a></li></ul></div><h3 id="_8-optional-try" tabindex="-1"><a class="header-anchor" href="#_8-optional-try"><span>8. Optional try</span></a></h3>',2),nn={class:"hint-container details"},an=n("summary",null,"8. Optional try",-1),sn=s(`<p>Back when we were talking about throwing functions, we looked at this code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">PasswordError</span><span class="token punctuation">:</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> obvious</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">checkPassword</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> password<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token class-name">Bool</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> password <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;password&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token class-name">PasswordError</span><span class="token punctuation">.</span>obvious</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token function">checkPassword</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;password&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;That password is good!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;You can&#39;t use that password.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That runs a throwing function, using <code>do</code>, <code>try</code>, and <code>catch</code> to handle errors gracefully.</p><p>There are two alternatives to <code>try</code>, both of which will make more sense now that you understand optionals and force unwrapping.</p><p>The first is <code>try?</code>, and changes throwing functions into functions that return an optional. If the function throws an error you’ll be sent <code>nil</code> as the result, otherwise you’ll get the return value wrapped as an optional.</p><p>Using <code>try?</code> we can run <code>checkPassword()</code> like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token function">checkPassword</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;password&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Result was </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">result</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;D&#39;oh.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The other alternative is <code>try!</code>, which you can use when you know for sure that the function will not fail. If the function does throw an error, your code will crash.</p><p>Using <code>try!</code> we can rewrite the code to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">try</span><span class="token operator">!</span> <span class="token function">checkPassword</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;sekrit&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;OK!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,10),en=s('<div class="hint-container info"><p class="hint-container-title">8. Optional try - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-should-you-use-optional-try" target="_blank" rel="noopener noreferrer">When should you use optional try?</a></li><li>Test: <a href="https://hackingwithswift.com/review/optional-try" target="_blank" rel="noopener noreferrer">Optional try</a></li></ul></div><h3 id="_9-failable-initializers" tabindex="-1"><a class="header-anchor" href="#_9-failable-initializers"><span>9. Failable initializers</span></a></h3>',2),tn={class:"hint-container details"},on=n("summary",null,"9. Failable initializers",-1),ln=s(`<p>When talking about force unwrapping, I used this code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;5&quot;</span></span></span>
<span class="line"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token class-name">Int</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>That converts a string to an integer, but because you might try to pass any string there what you actually get back is an optional integer.</p><p>This is a failable initializer: an initializer that might work or might not. You can write these in your own structs and classes by using <code>init?()</code> rather than <code>init()</code>, and return <code>nil</code> if something goes wrong. The return value will then be an optional of your type, for you to unwrap however you want.</p><p>As an example, we could code a <code>Person</code> struct that must be created using a nine-letter ID string. If anything other than a nine-letter string is used we’ll return <code>nil</code>, otherwise we’ll continue as normal.</p><p>Here’s that in Swift:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> id<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token operator">?</span><span class="token punctuation">(</span>id<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> id<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">9</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">self</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id</span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token nil constant">nil</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),pn=s('<div class="hint-container info"><p class="hint-container-title">9. Failable initializers - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-would-you-want-a-failable-initializer" target="_blank" rel="noopener noreferrer">Why would you want a failable initializer?</a></li><li>Test: <a href="https://hackingwithswift.com/review/failable-initializers" target="_blank" rel="noopener noreferrer">Failable initializers</a></li></ul></div><h3 id="_19-typecasting" tabindex="-1"><a class="header-anchor" href="#_19-typecasting"><span>19. Typecasting</span></a></h3>',2),cn={class:"hint-container details"},rn=n("summary",null,"19. Typecasting",-1),dn=s(`<p>Swift must always know the type of each of your variables, but sometimes you know more information than Swift does. For example, here are three classes:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Fish</span><span class="token punctuation">:</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">:</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">makeNoise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Woof!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can create a couple of fish and a couple of dogs, and put them into an array, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> pets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Fish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Fish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Swift can see both <code>Fish</code> and <code>Dog</code> inherit from the <code>Animal</code> class, so it uses type inference to make <code>pets</code> an array of <code>Animal</code>.</p><p>If we want to loop over the <code>pets</code> array and ask all the dogs to bark, we need to perform a typecast: Swift will check to see whether each pet is a <code>Dog</code> object, and if it is we can then call <code>makeNoise()</code>.</p><p>This uses a new keyword called <code>as?</code>, which returns an optional: it will be <code>nil</code> if the typecast failed, or a converted type otherwise.</p><p>Here’s how we write the loop in Swift:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">for</span> pet <span class="token keyword">in</span> pets <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> dog <span class="token operator">=</span> pet <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span></span>
<span class="line">        dog<span class="token punctuation">.</span><span class="token function">makeNoise</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),un=s('<div class="hint-container info"><p class="hint-container-title">19. Typecasting - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-is-type-casting-useful-in-swift" target="_blank" rel="noopener noreferrer">When is type casting useful in Swift?</a></li><li>Test: <a href="https://hackingwithswift.com/review/typecasting" target="_blank" rel="noopener noreferrer">Typecasting</a></li></ul></div><h3 id="_11-optionals-summary" tabindex="-1"><a class="header-anchor" href="#_11-optionals-summary"><span>11. Optionals summary</span></a></h3>',2),hn={class:"hint-container details"},wn=n("summary",null,"11. Optionals summary",-1),gn=s("<p>You’ve made it to the end of the tenth part of this series, so let’s summarize:</p><ol><li>Optionals let us represent the absence of a value in a clear and unambiguous way.</li><li>Swift won’t let us use optionals without unwrapping them, either using <code>if let</code> or using <code>guard let</code>.</li><li>You can force unwrap optionals with an exclamation mark, but if you try to force unwrap <code>nil</code> your code will crash.</li><li>Implicitly unwrapped optionals don’t have the safety checks of regular optionals.</li><li>You can use nil coalescing to unwrap an optional and provide a default value if there was nothing inside.</li><li>Optional chaining lets us write code to manipulate an optional, but if the optional turns out to be empty the code is ignored.</li><li>You can use <code>try?</code> to convert a throwing function into an optional return value, or <code>try!</code> to crash if an error is thrown.</li><li>If you need your initializer to fail when it’s given bad input, use <code>init?()</code> to make a failable initializer.</li><li>You can use typecasting to convert one type of object to another.</li></ol>",2),kn=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"11. Optionals summary - Additional"),n("ul",null,[n("li",null,[e("Test: "),n("a",{href:"https://hackingwithswift.com/review/optionals-summary",target:"_blank",rel:"noopener noreferrer"},"Optionals")])])],-1),mn=n("hr",null,null,-1);function fn(d,yn){const t=r("router-link"),i=r("VPCard"),c=r("VidStack");return g(),h("div",null,[n("h1",m,[n("a",f,[n("span",null,w(d.$frontmatter.title)+" 관련",1)])]),n("nav",y,[n("ul",null,[n("li",null,[a(t,{to:"#optionals"},{default:o(()=>[e("Optionals")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#_1-handling-missing-data"},{default:o(()=>[e("1. Handling missing data")]),_:1})]),n("li",null,[a(t,{to:"#_2-unwrapping-optionals"},{default:o(()=>[e("2. Unwrapping optionals")]),_:1})]),n("li",null,[a(t,{to:"#_3-unwrapping-with-guard"},{default:o(()=>[e("3. Unwrapping with guard")]),_:1})]),n("li",null,[a(t,{to:"#_4-force-unwrapping"},{default:o(()=>[e("4. Force unwrapping")]),_:1})]),n("li",null,[a(t,{to:"#_5-implicitly-unwrapped-optionals"},{default:o(()=>[e("5. Implicitly unwrapped optionals")]),_:1})]),n("li",null,[a(t,{to:"#_6-nil-coalescing"},{default:o(()=>[e("6. Nil coalescing")]),_:1})]),n("li",null,[a(t,{to:"#_7-optional-chaining"},{default:o(()=>[e("7. Optional chaining")]),_:1})]),n("li",null,[a(t,{to:"#_8-optional-try"},{default:o(()=>[e("8. Optional try")]),_:1})]),n("li",null,[a(t,{to:"#_9-failable-initializers"},{default:o(()=>[e("9. Failable initializers")]),_:1})]),n("li",null,[a(t,{to:"#_19-typecasting"},{default:o(()=>[e("19. Typecasting")]),_:1})]),n("li",null,[a(t,{to:"#_11-optionals-summary"},{default:o(()=>[e("11. Optionals summary")]),_:1})])])])])]),v,a(i,l(p({title:"100 Days of Swift - Day 12",desc:"Optionals",link:"https://www.hackingwithswift.com/100/12",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),b,_,x,q,S,n("details",T,[D,a(i,l(p({title:"100 Days of Swift - Day 12 - 1. Handling missing data",desc:"1. Handling missing data",link:"https://hackingwithswift.com/sixty/10/1/handling-missing-data",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/LVojlmMn4AQ"}),O]),I,n("details",A,[F,a(i,l(p({title:"100 Days of Swift - Day 12 - 2. Unwrapping optionals",desc:"2. Unwrapping optionals",link:"https://hackingwithswift.com/sixty/10/2/unwrapping-optionals",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/ZVXB-uGDRU4"}),j]),z,n("details",U,[H,a(i,l(p({title:"100 Days of Swift - Day 12 - 3. Unwrapping with guard",desc:"3. Unwrapping with guard",link:"https://hackingwithswift.com/sixty/10/3/unwrapping-with-guard",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/dRHYETohV8o"}),W]),N,n("details",P,[B,a(i,l(p({title:"100 Days of Swift - Day 12 - 4. Force unwrapping",desc:"4. Force unwrapping",link:"https://hackingwithswift.com/sixty/10/4/force-unwrapping",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/j6kcxcih4S8"}),V]),Y,n("details",R,[E,a(i,l(p({title:"100 Days of Swift - Day 12 - 5. Implicitly unwrapped optionals",desc:"5. Implicitly unwrapped optionals",link:"https://hackingwithswift.com/sixty/10/5/implicitly-unwrapped-optionals",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/Jb7rHM44yxU"}),C]),J,n("details",M,[K,a(i,l(p({title:"100 Days of Swift - Day 12 - 6. Nil coalescing",desc:"6. Nil coalescing",link:"https://hackingwithswift.com/sixty/10/6/nil-coalescing",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/zXtCdd4JSlU"}),Z]),G,n("details",L,[X,a(i,l(p({title:"100 Days of Swift - Day 12 - 7. Optional chaining",desc:"7. Optional chaining",link:"https://hackingwithswift.com/sixty/10/7/optional-chaining",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/WORJw3VsFEc"}),Q]),$,n("details",nn,[an,a(i,l(p({title:"100 Days of Swift - Day 12 - 8. Optional try",desc:"8. Optional try",link:"https://hackingwithswift.com/sixty/10/8/optional-try",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/r4U48jaTyVw"}),sn]),en,n("details",tn,[on,a(i,l(p({title:"100 Days of Swift - Day 12 - 9. Failable initializers",desc:"9. Failable initializers",link:"https://hackingwithswift.com/sixty/10/9/failable-initializers",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/HzG0u91xr1M"}),ln]),pn,n("details",cn,[rn,a(i,l(p({title:"100 Days of Swift - Day 12 - 19. Typecasting",desc:"19. Typecasting",link:"https://hackingwithswift.com/sixty/10/10/typecasting",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/x1Nt7Act_Tg"}),dn]),un,n("details",hn,[wn,a(i,l(p({title:"100 Days of Swift - Day 12 - 11. Optionals summary",desc:"11. Optionals summary",link:"https://hackingwithswift.com/sixty/10/11/optionals-summary",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/8yP1Y9Fh8FY"}),gn]),kn,mn])}const _n=u(k,[["render",fn],["__file","12.html.vue"]]),xn=JSON.parse('{"path":"/swift/100-days-of-swift/12.html","title":"Day 12","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 12","description":"100 Days of Swift > Day 12","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of Swift > Day 12"},{"property":"og:description","content":"Day 12"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swift/12.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swift/12.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 12"}],["meta",{"property":"og:description","content":"100 Days of Swift > Day 12"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 12\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Optionals","slug":"optionals","link":"#optionals","children":[{"level":3,"title":"1. Handling missing data","slug":"_1-handling-missing-data","link":"#_1-handling-missing-data","children":[]},{"level":3,"title":"2. Unwrapping optionals","slug":"_2-unwrapping-optionals","link":"#_2-unwrapping-optionals","children":[]},{"level":3,"title":"3. Unwrapping with guard","slug":"_3-unwrapping-with-guard","link":"#_3-unwrapping-with-guard","children":[]},{"level":3,"title":"4. Force unwrapping","slug":"_4-force-unwrapping","link":"#_4-force-unwrapping","children":[]},{"level":3,"title":"5. Implicitly unwrapped optionals","slug":"_5-implicitly-unwrapped-optionals","link":"#_5-implicitly-unwrapped-optionals","children":[]},{"level":3,"title":"6. Nil coalescing","slug":"_6-nil-coalescing","link":"#_6-nil-coalescing","children":[]},{"level":3,"title":"7. Optional chaining","slug":"_7-optional-chaining","link":"#_7-optional-chaining","children":[]},{"level":3,"title":"8. Optional try","slug":"_8-optional-try","link":"#_8-optional-try","children":[]},{"level":3,"title":"9. Failable initializers","slug":"_9-failable-initializers","link":"#_9-failable-initializers","children":[]},{"level":3,"title":"19. Typecasting","slug":"_19-typecasting","link":"#_19-typecasting","children":[]},{"level":3,"title":"11. Optionals summary","slug":"_11-optionals-summary","link":"#_11-optionals-summary","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":9}]},"readingTime":{"minutes":10.63,"words":3190},"filePathRelative":"swift/100-days-of-swift/12.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{_n as comp,xn as data};
