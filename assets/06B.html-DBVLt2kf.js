import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as e,t as d,b as n,n as m,g as u,d as s,e as t,r as a,o as h}from"./app-U_bew1in.js";const k={},b={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"},g=e("nav",{class:"table-of-contents"},[e("ul")],-1),f=e("hr",null,null,-1),y=t(`<p>Docker로 이미지를 생성할 때 웹 서버, DB 등 필요한 프로그램을 모두 설치할 수도 있지만 보통 프로그램별로 이미지를 생성합니다. 이렇게 프로그램별로 이미지를 생성하고, 컨테이너를 생성했을 때 옆에 있는 컨테이너에 접속할 일이 많습니다. 예를 들면 웹 서버는 DB에 연결하여 데이터를 주고 받아야 합니다.</p><figure><img src="https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/3.png" alt="Docker 컨테이너 연결" tabindex="0" loading="lazy"><figcaption>Docker 컨테이너 연결</figcaption></figure><p>Docker 컨테이너끼리 연결할 때는 <code>docker run</code> 명령에서 <code>--link</code> 옵션을 사용합니다. 먼저 DB 이미지를 컨테이너로 실행합니다. 이번에는 MongoDB를 사용해보겠습니다(<code>docker run</code> 명령은 로컬에 이미지가 없으면 자동으로 이미지를 받아옵니다).</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">--name</span> db <span class="token parameter variable">-d</span> mongo</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>DB 컨테이너 이름은 <code>db</code>로 설정하였습니다.</p><p>이제 web 컨테이너를 생성하면서 <code>db</code> 컨테이너와 연결합니다. 웹 서버로 사용할 컨테이너는 <code>nginx</code> 이미지로 생성하겠습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">--name</span> web <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">--link</span> db:db nginx</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>docker run</code> 명령에서 연결 옵션은 <code>--link &lt;컨테이너 이름&gt;:&lt;별칭&gt;</code> 형식입니다.</p><p>컨테이너 목록을 출력합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token function">ps</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># CONTAINER ID   IMAGE     COMMAND                   CREATED         STATUS         PORTS                               NAMES</span></span>
<span class="line"><span class="token comment"># 2ef5f41efbed   nginx     &quot;/docker-entrypoint.…&quot;   2 minutes ago   Up 2 minutes   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp   web</span></span>
<span class="line"><span class="token comment"># dba0e6bfcac0   mongo     &quot;docker-entrypoint.s…&quot;   2 minutes ago   Up 2 minutes   27017/tcp                           db</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>db</code> 컨테이너와 <code>web</code> 컨테이너가 연결되었습니다. <code>web/db</code>라고 표시되는데 <code>web</code> 컨테이너에서 <code>db</code> 컨테이너에 접속할 수 있다는 것입니다.</p><p>이제 <code>web</code> 컨테이너 안에서 <code>db:27017</code> 주소로 <code>db</code> 컨테이너의 MongoDB에 접속할 수 있습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">mongodb://db:27017/exampledb</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>컨테이너 안에서 다른 컨테이너에 접속할 때는 <code>&lt;별칭&gt;:&lt;포트 번호&gt;</code> 형식으로 사용합니다.</p>`,14),_={class:"hint-container info"},D=e("p",{class:"hint-container-title"},"별칭과 IP 주소",-1),w=e("code",null,"docker inspect",-1),B=e("code",null,"hosts",-1),x=e("code",null,"cat",-1),T=e("kbd",null,"`",-1),j=t(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">cat</span> <span class="token variable"><span class="token variable">\`</span><span class="token function">sudo</span> <span class="token function">docker</span> inspect <span class="token parameter variable">-f</span> <span class="token string">&quot;{{ .HostsPath }}&quot;</span> web<span class="token variable">\`</span></span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># 127.0.0.1       localhost</span></span>
<span class="line"><span class="token comment"># ::1     localhost ip6-localhost ip6-loopback</span></span>
<span class="line"><span class="token comment"># fe00::0 ip6-localnet</span></span>
<span class="line"><span class="token comment"># ff00::0 ip6-mcastprefix</span></span>
<span class="line"><span class="token comment"># ff02::1 ip6-allnodes</span></span>
<span class="line"><span class="token comment"># ff02::2 ip6-allrouters</span></span>
<span class="line"><span class="token comment"># 172.17.0.3      db dba0e6bfcac0</span></span>
<span class="line"><span class="token comment"># 172.17.0.4      2ef5f41efbed</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>db</code>는 <code>--link db:db</code>에서 설정한 별칭이고, <code>172.17.0.3</code>는 <code>db</code> 컨테이너의 IP 주소입니다.</p>`,2),U=e("code",null,"hosts",-1),A={class:"hint-container note"},P=e("p",{class:"hint-container-title"},"추가 해설",-1),I=e("p",null,"도커 1.9.0 버전부터 네트워크를 생성할 수 있는 기능이 정식으로 추가되었습니다. 이때 네트워크를 생성하고 컨테이너를 연결시키면 해당 네트워크 안에 속한 컨테이너끼리는 서로 접속할 수 있습니다.",-1),N=e("p",null,[s("추후 "),e("code",null,"--link"),s(" 옵션은 사라질 수도 있습니다.")],-1),q=t(`<p>먼저 <code>docker network create</code> 명령으로 <code>hello-network</code>를 생성합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> network create hello-network</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>DB 컨테이너를 생성하면서 <code>hello-network</code>에 연결합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">--name</span> db <span class="token parameter variable">-d</span> <span class="token parameter variable">--network</span> hello-network mongo</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>web</code> 컨테이너를 생성하면서 <code>hello-network</code>에 연결합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">--name</span> web <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">--network</span> hello-network nginx</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>web</code> 컨테이너에서 Bash 셸을 실행한 뒤에 <code>ping</code>을 설치하여 실행해봅니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> web <span class="token function">bash</span></span>
<span class="line"><span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt</span> <span class="token function">install</span> iputils-ping <span class="token parameter variable">-y</span></span>
<span class="line"><span class="token function">ping</span> db</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># PING db (172.18.0.2) 56(84) bytes of data.</span></span>
<span class="line"><span class="token comment"># 64 bytes from db.hello-network (172.18.0.2): icmp_seq=1 ttl=64 time=0.118 ms</span></span>
<span class="line"><span class="token comment"># 64 bytes from db.hello-network (172.18.0.2): icmp_seq=2 ttl=64 time=0.089 ms</span></span>
<span class="line"><span class="token comment"># 64 bytes from db.hello-network (172.18.0.2): icmp_seq=3 ttl=64 time=0.089 ms</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이렇게 같은 네트워크에 속한 컨테이너끼리는 컨테이너 이름으로 접속할 수 있습니다.</p>`,9),L=e("hr",null,null,-1);function R(i,S){const l=a("VPCard"),o=a("SiteInfo"),c=a("FontIcon");return h(),r("div",null,[e("h1",b,[e("a",v,[e("span",null,d(i.$frontmatter.title)+" 관련",1)])]),n(l,m(u({title:"목차",desc:"언제나 최신 Docker",link:"/docker/always-up-to-date-docker/README.md",logo:"https://pyrasis.com/assets/images/pyrasis.png",background:"rgba(31,41,55,0.2)"})),null,16),g,f,n(o,{name:"6장 - 2. Docker 컨테이너 연결하기",desc:"언제나 최신 Docker",url:"https://pyrasis.com/jHLsAlwaysUpToDateDocker/Unit06/02",logo:"https://pyrasis.com/assets/images/pyrasis.png",preview:"hhttps://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/3.png"}),y,e("div",_,[D,e("p",null,[s("다음과 같이 "),w,s(" 명령으로 web 컨테이너의 세부 정보에서 "),n(c,{icon:"fas fa-file-lines"}),B,s(" 파일 경로를 구한 뒤 "),x,s(" 명령으로 내용을 살펴봅니다("),T,s("는 탭키 위에 있는 문자입니다).")]),j,e("p",null,[s("컨테이너를 연결하면 이렇게 "),n(c,{icon:"fas fa-file-lines"}),U,s(" 파일에 IP 주소가 자동으로 설정되기 때문에 별칭을 통해 연결한 컨테이너에 접속할 수 있습니다.")])]),e("div",A,[P,I,N,n(o,{name:"Legacy container links | Docker Docs",desc:"Learn how to connect Docker containers together.",url:"https://docs.docker.com/engine/userguide/networking/default_network/dockerlinks/",logo:"https://docs.docker.com/favicons/docs@2x.ico",preview:"https://docs.docker.com/assets/images/thumbnail.webp"}),q]),L])}const M=p(k,[["render",R],["__file","06B.html.vue"]]),C=JSON.parse('{"path":"/docker/always-up-to-date-docker/06B.html","title":"06B. Docker 컨테이너 연결하기","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"06B. Docker 컨테이너 연결하기","description":"언제나 최신 Docker > 06B. Docker 컨테이너 연결하기","category":["DevOps","Docker"],"tag":["crashcourse","pyrasis.com","docker","devops"],"head":[[{"meta":null},{"property":"og:title","content":"언제나 최신 Docker > 06B. Docker 컨테이너 연결하기"},{"property":"og:description","content":"06B. Docker 컨테이너 연결하기"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/docker/always-up-to-date-docker/06B.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/docker/always-up-to-date-docker/06B.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"06B. Docker 컨테이너 연결하기"}],["meta",{"property":"og:description","content":"언제나 최신 Docker > 06B. Docker 컨테이너 연결하기"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"hhttps://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/3.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"hhttps://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/3.png"}],["meta",{"name":"twitter:image:alt","content":"06B. Docker 컨테이너 연결하기"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"pyrasis.com"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:published_time","content":"2022-10-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"06B. Docker 컨테이너 연결하기\\",\\"image\\":[\\"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/3.png\\"],\\"datePublished\\":\\"2022-10-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]],"date":"2022-10-03T00:00:00.000Z","isOriginal":false,"cover":"hhttps://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/3.png"},"headers":[],"git":{"createdTime":1716977950000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":3}]},"readingTime":{"minutes":1.41,"words":422},"filePathRelative":"docker/always-up-to-date-docker/06B.md","localizedDate":"2022년 10월 3일","excerpt":"\\n"}');export{M as comp,C as data};
