import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as s,t as m,b as a,w as o,n as i,g as p,d as n,e as r,r as c,o as k}from"./app-U_bew1in.js";const w={},g={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},y=s("hr",null,null,-1),b=s("h2",{id:"project-13-part-3",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#project-13-part-3"},[s("span",null,"Project 13, part 3")])],-1),S=s("p",null,"Believe it or not, we still have one more day of techniques for this project before we get into the implementation phase, and I’ve left the fun stuff to the end.",-1),I=s("p",null,[n("Today you’re going to look at how to bring data "),s("em",null,"into"),n(" your app, and also send it back "),s("em",null,"out"),n(" again, which is where apps really come to life – users love to be able to bring in their existing content, remix it somehow, and share the results with their friends.")],-1),_=s("p",null,"Stick with it! After today we’ll start putting all these concepts into action, so you’re really close to the building part. Take your inspiration from the postage stamp – as the writer Josh Billings once quipped, “its usefulness consists in the ability to stick to one thing until it gets there.“",-1),x=s("p",null,[s("strong",null,"Today you have three topics to work through, in which you’ll learn about loading photos, sharing data, and asking for app reviews.")],-1),q=s("h3",{id:"loading-photos-from-the-user-s-photo-library",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#loading-photos-from-the-user-s-photo-library"},[s("span",null,"Loading photos from the user's photo library")])],-1),j={class:"hint-container details"},P=s("summary",null,"Loading photos from the user's photo library",-1),T=r(`<p>SwiftUI&#39;s <code>PhotosPicker</code> view provides us with a simple way to import one or more photos from the user&#39;s photo library. To avoid causing any performance hiccups, the data gets provided to us as a special type called <code>PhotosPickerItem</code>, which we can then load asynchronously to convert the data into a SwiftUI image.</p><p>This takes five steps in total, starting with adding an import for PhotosUI alongside your regular SwiftUI import, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token class-name">PhotosUI</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Second, we need to create two properties: one to store the item that was selected, and one to store that selected item as a SwiftUI image. This distinction matters, because the selected item is just a reference to a picture in the user&#39;s photo library until we actually ask for it to be loaded.</p><p>Add these two now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> pickerItem<span class="token punctuation">:</span> <span class="token class-name">PhotosPickerItem</span><span class="token operator">?</span></span>
<span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> selectedImage<span class="token punctuation">:</span> <span class="token class-name">Image</span><span class="token operator">?</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>The third step is to add a <code>PhotosPicker</code> view somewhere in your SwiftUI view hierarchy. This must be created with a title to show the user, a binding where to store the selected image, and also what type of data to show – that last part allows us use <code>PhotosPicker</code> to load videos, Live Photos, and more.</p><p>Replace the current <code>body</code> property of your view with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">PhotosPicker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Select a picture&quot;</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $pickerItem<span class="token punctuation">,</span> matching<span class="token punctuation">:</span> <span class="token punctuation">.</span>images<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Tip</strong>: That&#39;s in a <code>VStack</code> intentionally – more on that in a moment.</p><p>The fourth step is to watch <code>pickerItem</code> for changes, because when it changes it means the user has selected a picture for us to load. Once that&#39;s done, we can call <code>loadTransferable(type:)</code> on the picker item, which is a method that tells SwiftUI we want to load actual underlying data from the picker item into a SwiftUI image. If that succeeds, we can assign the resulting value to the <code>selectedImage</code> property.</p><p>Add this modifier to the <code>VStack</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> pickerItem<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Task</span> <span class="token punctuation">{</span></span>
<span class="line">        selectedImage <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> pickerItem<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">loadTransferable</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> <span class="token class-name">Image</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Tip</strong>: Calling <code>loadTransferable(type:)</code> might take a few seconds to complete, particularly for a large picture such as a panorama.</p><p>And now the fifth and final step is to show the loaded SwiftUI image somewhere. Add this to the <code>VStack</code>, either before or after the <code>PhotosPicker</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">selectedImage<span class="token operator">?</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now give it a try! The Simulator comes with a handful of built-in images you can test with, and if you select one you should see it loaded into the <code>Image</code> view and displayed on-screen.</p><p>There are lots of other ways <code>PhotosPicker</code> can be used, depending on what you need. For example, you can pass it a binding to an array of picker items and let the user select several. That means creating a an array of picker items as a property:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> pickerItems <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">PhotosPickerItem</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Then passing that array in just like before:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">PhotosPicker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Select images&quot;</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $pickerItems<span class="token punctuation">,</span> matching<span class="token punctuation">:</span> <span class="token punctuation">.</span>images<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The harder part is processing those images then displaying them somehow, because we can&#39;t watch a single photo picker item item any more.</p><p>Instead, you should create an array to store the images that get loaded, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> selectedImages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Image</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Then display them using a <code>ForEach</code> or similar, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">ScrollView</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span>selectedImages<span class="token punctuation">.</span>count<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token keyword">in</span></span>
<span class="line">        selectedImages<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And finally update your <code>onChange()</code> so that you clear that array when new items are selected, then load the new set individually:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> pickerItems<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Task</span> <span class="token punctuation">{</span></span>
<span class="line">        selectedImages<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">for</span> item <span class="token keyword">in</span> pickerItems <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token keyword">let</span> loadedImage <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token keyword">await</span> item<span class="token punctuation">.</span><span class="token function">loadTransferable</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> <span class="token class-name">Image</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                selectedImages<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>loadedImage<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you&#39;re going to allow users to select several photos, I would recommend you limit how many pictures actually can be selected at once by adding a <code>maxSelectionCount</code> parameter, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">PhotosPicker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Select images&quot;</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $pickerItems<span class="token punctuation">,</span> maxSelectionCount<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> matching<span class="token punctuation">:</span> <span class="token punctuation">.</span>images<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>There are two last ways you can customize photo import, starting with the label. As with many SwiftUI views, you can provide a completely custom label if you prefer, which might be a <code>Label</code> view or something completely custom:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">PhotosPicker</span><span class="token punctuation">(</span>selection<span class="token punctuation">:</span> $pickerItems<span class="token punctuation">,</span> maxSelectionCount<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> matching<span class="token punctuation">:</span> <span class="token punctuation">.</span>images<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Select a picture&quot;</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;photo&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And the last way is to limit the kinds of pictures that can be imported. We&#39;ve used <code>.images</code> here across the board, which means we&#39;ll get regular photos, screenshots, panoramas, and more. You can apply a more advanced filter using <code>.any()</code>, <code>.all()</code>, and <code>.not()</code>, and passing them an array. For example, this matches all images except screenshots:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">PhotosPicker</span><span class="token punctuation">(</span>selection<span class="token punctuation">:</span> $pickerItems<span class="token punctuation">,</span> maxSelectionCount<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> matching<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>images<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token punctuation">.</span>screenshots<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Select a picture&quot;</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;photo&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34),L=s("h3",{id:"how-to-let-the-user-share-content-with-sharelink",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#how-to-let-the-user-share-content-with-sharelink"},[s("span",null,[n("How to let the user share content with "),s("code",null,"ShareLink")])])],-1),U={class:"hint-container details"},D=s("summary",null,"How to let the user share content with ShareLink",-1),A=r(`<p>SwiftUI&#39;s <code>ShareLink</code> view lets users export content from our app to share elsewhere, such as saving a picture to their photo library, sending a link to a friend using Messages, and more.</p><p>We provide the content we want to share, and iOS takes care of showing all the apps that can handle the data we&#39;re sending. For example, we can share a URL like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">ShareLink</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://www.hackingwithswift.com&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That&#39;s going to make a button saying &quot;Share&quot; with an icon attached to it, and pressing it will bring up the iOS share sheet. If you&#39;re in the simulator you&#39;ll only see a few things there as samples, and some might not even work, but if you use a real device you&#39;ll see you can share that URL just fine.</p><p>If you want more control over the data, you have several options.</p><p>First, you can attach a subject and message to the shared data like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">ShareLink</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://www.hackingwithswift.com&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">,</span> subject<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Learn Swift here&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Check out the 100 Days of SwiftUI!&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>How that information is used depends on the app users share to – the URL will always be attached, because that&#39;s the most important thing, but some apps will use the subject, some the message, and others will use both.</p><p>Second, you can customize the button itself by providing whatever label you want:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">ShareLink</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://www.hackingwithswift.com&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Spread the word about Swift&quot;</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;swift&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And third, you can provide a preview to attach, which is important when you&#39;re sharing something more complex – it&#39;s possible to share entirely custom data here, so the preview is helpful for giving the recipient some idea of what&#39;s inside.</p><p>Annoyingly, this is needed even for data that is its own preview, such as an image. To avoid making your code repetitive, I&#39;d suggest assigning the image to a local constant then using that:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> example <span class="token operator">=</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">.</span>example<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">ShareLink</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> example<span class="token punctuation">,</span> preview<span class="token punctuation">:</span> <span class="token class-name">SharePreview</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Singapore Airport&quot;</span></span><span class="token punctuation">,</span> image<span class="token punctuation">:</span> example<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Click to share&quot;</span></span><span class="token punctuation">,</span> systemImage<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;airplane&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Letting users share data from your app is really important, because without it your data can feel quite isolated from the rest of their life!</p>`,14),R=s("h3",{id:"how-to-ask-the-user-to-leave-an-app-store-review",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#how-to-ask-the-user-to-leave-an-app-store-review"},[s("span",null,"How to ask the user to leave an App Store review")])],-1),C={class:"hint-container details"},V=s("summary",null,"How to ask the user to leave an App Store review",-1),H=r(`<p>SwiftUI provides a special environment key called <code>.requestReview</code>, which lets us ask the user to leave a review for our app on the App Store. Apple takes care of showing the whole user interface, making sure it doesn&#39;t get shown if the user has already left a review, and also limiting how often the request can be shown – we just need to make a request when we&#39;re ready.</p><p>This process takes three steps, starting with a new import for StoreKit:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token class-name">StoreKit</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Second, you need to add a property to read the review requester from SwiftUI&#39;s environment:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>requestReview<span class="token punctuation">)</span> <span class="token keyword">var</span> requestReview</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And third, you need to request a review when you&#39;re ready. When you&#39;re just starting out, you might think attaching the review to a button press is a good idea, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Leave a review&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">requestReview</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, that&#39;s far from ideal, not least because we&#39;re only <em>requesting</em> that a review prompt be shown – the user might have disabled these alerts system-wide, or they might already have reached the maximum number of review requests allowed, in which case your button would do nothing.</p><p>Instead, it&#39;s better to call <code>requestReview()</code> automatically when you think it&#39;s the right time. A good starting place is when the user has performed an important task some number of times, because that way it&#39;s clear they have realized the benefit of your app.</p>`,9),F=s("p",null,"I’d love to hear what you think of these APIs now that you’ve had some time with SwiftUI. Send me a tweet!",-1),N=s("hr",null,null,-1);function z(u,B){const e=c("router-link"),t=c("VPCard"),l=c("VidStack");return k(),h("div",null,[s("h1",g,[s("a",v,[s("span",null,m(u.$frontmatter.title)+" 관련",1)])]),s("nav",f,[s("ul",null,[s("li",null,[a(e,{to:"#project-13-part-3"},{default:o(()=>[n("Project 13, part 3")]),_:1}),s("ul",null,[s("li",null,[a(e,{to:"#loading-photos-from-the-user-s-photo-library"},{default:o(()=>[n("Loading photos from the user's photo library")]),_:1})]),s("li",null,[a(e,{to:"#how-to-let-the-user-share-content-with-sharelink"},{default:o(()=>[n("How to let the user share content with ShareLink")]),_:1})]),s("li",null,[a(e,{to:"#how-to-ask-the-user-to-leave-an-app-store-review"},{default:o(()=>[n("How to ask the user to leave an App Store review")]),_:1})])])])])]),y,b,a(t,i(p({title:"100 Days of SwiftUI - Day 64",desc:"Project 13, part 3",link:"https://www.hackingwithswift.com/100/swiftui/64",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),S,I,_,x,q,s("details",j,[P,a(t,i(p({title:"100 Days of SwiftUI - Day 64 - Loading photos from the user's photo library",desc:"Loading photos from the user's photo library",link:"https://www.hackingwithswift.com/books/ios-swiftui/loading-photos-from-the-users-photo-library",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(l,{src:"youtube/mEdXRmIIvVc"}),T]),L,s("details",U,[D,a(t,i(p({title:"100 Days of SwiftUI - Day 64 - How to let the user share content with ShareLink",desc:"How to let the user share content with ShareLink",link:"https://www.hackingwithswift.com/books/ios-swiftui/how-to-let-the-user-share-content-with-sharelink",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(l,{src:"youtube/xuDEVxghNDQ"}),A]),R,s("details",C,[V,a(t,i(p({title:"100 Days of SwiftUI - Day 64 - How to ask the user to leave an App Store review",desc:"How to ask the user to leave an App Store review",link:"https://www.hackingwithswift.com/books/ios-swiftui/how-to-ask-the-user-to-leave-an-app-store-review",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(l,{src:"youtube/RUWGjeDCkN8"}),H]),F,N])}const K=d(w,[["render",z],["__file","64.html.vue"]]),O=JSON.parse(`{"path":"/swift/100-days-of-swiftui/64.html","title":"Day 64","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 64","description":"100 Days of SwiftUI > Day 64","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 64"},{"property":"og:description","content":"Day 64"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/64.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/64.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 64"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 64"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 64\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 13, part 3","slug":"project-13-part-3","link":"#project-13-part-3","children":[{"level":3,"title":"Loading photos from the user's photo library","slug":"loading-photos-from-the-user-s-photo-library","link":"#loading-photos-from-the-user-s-photo-library","children":[]},{"level":3,"title":"How to let the user share content with ShareLink","slug":"how-to-let-the-user-share-content-with-sharelink","link":"#how-to-let-the-user-share-content-with-sharelink","children":[]},{"level":3,"title":"How to ask the user to leave an App Store review","slug":"how-to-ask-the-user-to-leave-an-app-store-review","link":"#how-to-ask-the-user-to-leave-an-app-store-review","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":8}]},"readingTime":{"minutes":6.24,"words":1871},"filePathRelative":"swift/100-days-of-swiftui/64.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n<h2>Project 13, part 3</h2>\\n"}`);export{K as comp,O as data};
