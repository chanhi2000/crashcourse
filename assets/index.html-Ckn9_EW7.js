import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,a as e,t as h,b as t,w as o,n,g as a,r as i,o as p,d as r}from"./app-U_bew1in.js";const g={},b={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},v={class:"table-of-contents"},x=e("hr",null,null,-1),f=e("h2",{id:"understanding-the-inner-workings-of-rust",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#understanding-the-inner-workings-of-rust"},[e("span",null,"Understanding the Inner Workings of Rust")])],-1),k=e("hr",null,null,-1);function _(c,w){const u=i("router-link"),l=i("RouteLink"),s=i("VPCard");return p(),m("div",null,[e("h1",b,[e("a",y,[e("span",null,h(c.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),e("nav",v,[e("ul",null,[e("li",null,[t(u,{to:"#understanding-the-inner-workings-of-rust"},{default:o(()=>[r("Understanding the Inner Workings of Rust")]),_:1})])])]),x,f,e("ul",null,[e("li",null,[t(l,{to:"/rust/eventhelix-rust-to-assembly/rust-enum-and-match-representation-in-assembly.html"},{default:o(()=>[r("Rust enum and match representation in assembly")]),_:1})]),e("li",null,[t(l,{to:"/rust/eventhelix-rust-to-assembly/assembly-code-generated-when-self-is-passed-by-value-reference-or-as-a-smart-pointer.html"},{default:o(()=>[r("Assembly code generated when self is passed by value, reference or as a smart pointer")]),_:1})]),e("li",null,[t(l,{to:"/rust/eventhelix-rust-to-assembly/mapping-arrays-tuples-box-and-option-to-assembly.html"},{default:o(()=>[r("Mapping Arrays, Tuples, Box and Option to assembly")]),_:1})]),e("li",null,[t(l,{to:"/rust/eventhelix-rust-to-assembly/rust-to-assembly-vector-iteration.html"},{default:o(()=>[r("Map Rust vector iteration to assembly")]),_:1})])]),t(s,n(a({title:"Mapping a bool vector to string slice vector",desc:"Understand the assembly code generated when mapping a Vec<bool> to a Vec<& 'static str> (static string slice vector). The allocations and de-allocations operations are also covered.",link:"https://eventhelix.com/rust/rust-to-assembly-mapping-to-str-slice-vector",logo:"https://eventhelix.com/images/EventHelix-white-rounded-bg-blue.png",background:"rgba(250,250,250,0.2)"})),null,16),t(s,n(a({title:"Mapping a bool vector to owned string vector",desc:"Understand the assembly code generated when mapping a Vec<bool> to a Vec<String> (owned string). The allocations and de-allocations operations are also covered.",link:"https://eventhelix.com/rust/rust-to-assembly-mapping-to-string-vector",logo:"https://eventhelix.com/images/EventHelix-white-rounded-bg-blue.png",background:"rgba(250,250,250,0.2)"})),null,16),t(s,n(a({title:"Compare static vs dynamic dispatch in Rust",desc:"Compare the assembly code generated for static vs dynamic dispatch for traits. Understand the performance implications of each approach.",link:"https://eventhelix.com/rust/rust-to-assembly-static-vs-dynamic-dispatch",logo:"https://eventhelix.com/images/EventHelix-white-rounded-bg-blue.png",background:"rgba(250,250,250,0.2)"})),null,16),t(s,n(a({title:"Understand tail call via vtable and freeing via a trait object",desc:"Learn how the compiler optimizes dynamically dispatched tail calls and how it frees memory when using trait objects.",link:"https://eventhelix.com/rust/rust-to-assembly-tail-call-via-vtable-and-box-trait-free",logo:"https://eventhelix.com/images/EventHelix-white-rounded-bg-blue.png",background:"rgba(250,250,250,0.2)"})),null,16),t(s,n(a({title:"Rust Recursive Tree Traversal in Assembly",desc:"Learn how Rust compiles recursive tree traversal to assembly code and the optimization techniques used.",link:"https://eventhelix.com/rust/rust-to-assembly-recursive-tree-fold",logo:"https://eventhelix.com/images/EventHelix-white-rounded-bg-blue.png",background:"rgba(250,250,250,0.2)"})),null,16),t(s,n(a({title:"Rust Closures - impl Fn vs Box dyn Fn",desc:"Compare assembly code for Rust closures returned as impl Fn and Box<dyn Fn>",link:"https://eventhelix.com/rust/rust-to-assembly-return-impl-fn-vs-dyn-fn",logo:"https://eventhelix.com/images/EventHelix-white-rounded-bg-blue.png",background:"rgba(250,250,250,0.2)"})),null,16),t(s,n(a({title:"Rust async/await - State Machines and Assembly",desc:"Learn how Rust implements async functions using state machines and assembly code",link:"https://eventhelix.com/rust/rust-to-assembly-async-await",logo:"https://eventhelix.com/images/EventHelix-white-rounded-bg-blue.png",background:"rgba(250,250,250,0.2)"})),null,16),t(s,n(a({title:"Rust async/await - Nested async function calls with loops",desc:"Desugaring and assembly code analysis for nested async function with a loop.",link:"https://eventhelix.com/rust/rust-to-assembly-async-await-nested",logo:"https://eventhelix.com/images/EventHelix-white-rounded-bg-blue.png",background:"rgba(250,250,250,0.2)"})),null,16),t(s,n(a({title:"Rust async/await - Async executor",desc:"Learn how the async executor schedules async tasks in Rust. Understand the code of a simple async executor.",link:"https://eventhelix.com/rust/rust-async-executor",logo:"https://eventhelix.com/images/EventHelix-white-rounded-bg-blue.png",background:"rgba(250,250,250,0.2)"})),null,16),k])}const T=d(g,[["render",_],["__file","index.html.vue"]]),E=JSON.parse('{"path":"/rust/eventhelix-rust-to-assembly/","title":"Rust to Assembly","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Rust to Assembly","description":"Rust to Assembly","icon":"fa-brands fa-rust","category":["Rust"],"tag":["crashcourse","digitalocean","eventhelix","rust","rs","wasm","assembly"],"head":[[{"meta":null},{"property":"og:title","content":"Rust to Assembly"},{"property":"og:description","content":"Rust to Assembly"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/rust/eventhelix-rust-toassembly/"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/rust/eventhelix-rust-to-assembly/"}],["meta",{"property":"og:site_name","content":"ü•ÅCrashcourse"}],["meta",{"property":"og:title","content":"Rust to Assembly"}],["meta",{"property":"og:description","content":"Rust to Assembly"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"digitalocean"}],["meta",{"property":"article:tag","content":"eventhelix"}],["meta",{"property":"article:tag","content":"rust"}],["meta",{"property":"article:tag","content":"rs"}],["meta",{"property":"article:tag","content":"wasm"}],["meta",{"property":"article:tag","content":"assembly"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Rust to Assembly\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Understanding the Inner Workings of Rust","slug":"understanding-the-inner-workings-of-rust","link":"#understanding-the-inner-workings-of-rust","children":[]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":8}]},"readingTime":{"minutes":1.97,"words":591},"filePathRelative":"rust/eventhelix-rust-to-assembly/README.md","localizedDate":"2023ÎÖÑ 12Ïõî 27Ïùº","excerpt":"\\n\\n<hr>\\n<h2>Understanding the Inner Workings of Rust</h2>\\n<ul>\\n<li><a href=\\"/crashcourse/rust/eventhelix-rust-to-assembly/rust-enum-and-match-representation-in-assembly.html\\" target=\\"_blank\\">Rust enum and match representation in assembly</a></li>\\n<li><a href=\\"/crashcourse/rust/eventhelix-rust-to-assembly/assembly-code-generated-when-self-is-passed-by-value-reference-or-as-a-smart-pointer.html\\" target=\\"_blank\\">Assembly code generated when self is passed by value, reference or as a smart pointer</a></li>\\n<li><a href=\\"/crashcourse/rust/eventhelix-rust-to-assembly/mapping-arrays-tuples-box-and-option-to-assembly.html\\" target=\\"_blank\\">Mapping Arrays, Tuples, Box and Option to assembly</a></li>\\n<li><a href=\\"/crashcourse/rust/eventhelix-rust-to-assembly/rust-to-assembly-vector-iteration.html\\" target=\\"_blank\\">Map Rust vector iteration to assembly</a></li>\\n</ul>"}');export{T as comp,E as data};
