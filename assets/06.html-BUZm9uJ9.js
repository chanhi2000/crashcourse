import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as n,t as k,b as s,w as i,n as l,g as p,d as e,e as a,r,o as m}from"./app-U_bew1in.js";const w={},f={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},b={class:"table-of-contents"},v=n("hr",null,null,-1),y=n("h2",{id:"loops",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#loops"},[n("span",null,"Loops")])],-1),_=n("p",null,"Loops are one of the things that make computers so utterly brilliant: the ability to repeat some simple task billions of times every second.",-1),x=n("p",null,"Of course, what goes in those loops is down to you: you might be adding some numbers, you might be reading some sensor data, or you might be redrawing the screen 120 times a second. As Craig Bruce said, “it’s hardware that makes a machine fast, but it’s software that makes a fast machine slow.”",-1),q=n("p",null,[n("strong",null,"Today you have three tutorials to work through, plus a summary and a checkpoint."),e(" Once you’ve completed each video you can read the optional extra section, and there’s a short test to help make sure you’ve understood what was taught.")],-1),S=n("h3",{id:"_1-how-to-use-a-for-loop-to-repeat-work",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-how-to-use-a-for-loop-to-repeat-work"},[n("span",null,"1. How to use a for loop to repeat work")])],-1),I={class:"hint-container details"},T=n("summary",null,"1. How to use a for loop to repeat work",-1),j=a(`<p>Computers are really great at doing repetitive work, and Swift makes it easy to repeat some code a fixed number of times, or once for every item in an array, dictionary, or set.</p><p>Let’s start with something simple: if we have an array of strings, we can print each string out like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> platforms <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;iOS&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;macOS&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;tvOS&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;watchOS&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> os <span class="token keyword">in</span> platforms <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Swift works great on </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">os</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That loops over all the items in <code>platforms</code>, putting them one by one into <code>os</code>. We haven’t created <code>os</code> elsewhere; it’s created for us as part of the loop and made available only inside the opening and closing braces.</p><p>Inside the braces is the code we want to run for each item in the array, so the code above will print four lines – one for each loop item. First it puts “iOS” in there then calls <code>print()</code>, then it puts “macOS” in there and calls <code>print()</code>, then “tvOS”, then “watchOS”.</p><p>To make things easier to understand, we give these things common names:</p><ul><li>We call the code inside the braces the loop body</li><li>We call one cycle through the loop body a loop iteration.</li><li>We call <code>os</code> the loop variable. This exists only inside the loop body, and will change to a new value in the next loop iteration.</li></ul><p>I should say that the name <code>os</code> isn’t special – we could have written this instead:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">for</span> name <span class="token keyword">in</span> platforms <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Swift works great on </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or even this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">for</span> rubberChicken <span class="token keyword">in</span> platforms <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Swift works great on </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">rubberChicken</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The code will still work exactly the same.</p><p>In fact, Xcode is really smart here: if you write <code>for plat</code> it will recognize that there’s an array called <code>platforms</code>, and offer to autocomplete all of <code>for platform in platforms</code> – it recognizes that <code>platforms</code> is plural and suggests the singular name for the loop variable. When you see Xcode’s suggestion appear, press Return to select it.</p><p>Rather than looping over an array (or set, or dictionary – the syntax is the same!), you can also loop over a fixed range of numbers. For example, we could print out the 5 times table from 1 through 12 like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">12</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;5 x </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token number">5</span> <span class="token operator">*</span> i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A couple of things are new there, so let’s pause and examine them:</p><ul><li>I used the loop variable <code>i</code>, which is a common coding convention for “number you’re counting with”. If you’re counting a second number you would use <code>j</code>, and if you’re counting a third you would use <code>k</code>, but if you’re counting a fourth maybe you should pick better variable names.</li><li>The <code>1...12</code> part is a range, and means “all integer numbers between 1 and 12, as well as 1 and 12 themselves.” Ranges are their own unique data type in Swift.</li></ul><p>So, when that loop first runs <code>i</code> will be 1, then it will be 2, then 3, etc, all the way up to 12, after which the loop finishes.</p><p>You can also put loops inside loops, called <em>nested loops</em>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">12</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;The </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> times table:&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">12</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;  </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">j</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> x </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">j <span class="token operator">*</span> i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    \`<span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\`</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That shows off a couple of other new things, so again let’s pause and look closer:</p><ul><li>There’s now a nested loop: we count from 1 through 12, and for each number inside there we count 1 through 12 again.</li><li>Using <code>print()</code> by itself, with no text or value being passed in, will just start a new line. This helps break up our output so it looks nicer on the screen. So, when you see <code>x...y</code> you know it creates a range that starts at whatever number <code>x</code> is, and counts up to and including whatever number <code>y</code> is.</li></ul><p>Swift has a similar-but-different type of range that counts up to but excluding the final number: <code>..&lt;</code>. This is best seen in code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">5</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Counting from 1 through 5: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">\`<span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\`</span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..&lt;</span><span class="token number">5</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Counting 1 up to 5: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">i</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When that runs, it will print for numbers 1, 2, 3, 4, 5 in the first loop, but only numbers 1, 2, 3, and 4 in the second. I pronounce <code>1...5</code> as “one through five”, and <code>1..&lt;5</code> as “one up to five,” and you’ll see similar wording elsewhere in Swift.</p><p><strong>Tip</strong>: <code>..&lt;</code> is really helpful for working with arrays, where we count from 0 and often want to count up to but excluding the number of items in the array.</p><p>Before we’re done with <code>for</code> loops, there’s one more thing I want to mention: sometimes you want to run some code a certain number of times using a range, but you don’t actually want the loop variable – you don’t want the <code>i</code> or <code>j</code>, because you don’t use it.</p><p>In this situation, you can replace the loop variable with an underscore, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> lyric <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Haters gonna&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">5</span> <span class="token punctuation">{</span></span>
<span class="line">    lyric <span class="token operator">+=</span> <span class="token string-literal"><span class="token string">&quot; hate&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>lyric<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>(Yes, that’s a Taylor Swift lyric from Shake It Off, written in Swift.)</p>`,30),D=a('<div class="hint-container info"><p class="hint-container-title">1. How to use a for loop to repeat work - Additional</p><p>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-use-underscores-with-loops" target="_blank" rel="noopener noreferrer">Why does Swift use underscores with loops?</a> Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-have-two-range-operators" target="_blank" rel="noopener noreferrer">Why does Swift have two range operators?</a> Test: <a href="https://hackingwithswift.com/review/sixty/for-loops" target="_blank" rel="noopener noreferrer">For loops</a></p></div><h3 id="_2-how-to-use-a-while-loop-to-repeat-work" tabindex="-1"><a class="header-anchor" href="#_2-how-to-use-a-while-loop-to-repeat-work"><span>2. How to use a while loop to repeat work</span></a></h3>',2),z={class:"hint-container details"},C=n("summary",null,"2. How to use a while loop to repeat work",-1),H=a(`<p>Swift has a second kind of loop called <code>while</code>: provide it with a condition, and a <code>while</code> loop will continually execute the loop body until the condition is false.</p><p>Although you’ll still see <code>while</code> loops from time to time, they aren’t as common as <code>for</code> loops. As a result, I want to cover them so you know they exist, but let’s not dwell on them too long, okay?</p><p>Here’s a basic <code>while</code> loop to get us started:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> countdown <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">while</span> countdown <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">countdown</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">…&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    countdown <span class="token operator">-=</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Blast off!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That creates an integer counter starting at 10, then starts a <code>while</code> loop with the condition <code>countdown &gt; 0</code>. So, the loop body – printing the number and subtracting 1 – will run continually until <code>countdown</code> is equal to or below 0, at which point the loop will finish and the final message will be printed.</p><p><code>while</code> loops are really useful when you just don’t know how many times the loop will go around. To demonstrate this, I want to introduce you to a really useful piece of functionality that <code>Int</code> and <code>Double</code> both have: <code>random(in:)</code>. Give that a range of numbers to work with, and it will send back a random <code>Int</code> or <code>Double</code> somewhere inside that range.</p><p>For example, this creates a new integer between 1 and 1000</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And this creates a random decimal between 0 and 1:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> amount <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token operator">...</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We can use this functionality with a <code>while</code> loop to roll some virtual 20-sided dice again and again, ending the loop only when a 20 is rolled – a critical hit for all you Dungeons &amp; Dragons players out there.</p><p>Here’s the code to make that happen:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token comment">// create an integer to store our roll</span></span>
<span class="line"><span class="token keyword">var</span> roll <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// carry on looping until we reach 20</span></span>
<span class="line"><span class="token keyword">while</span> roll <span class="token operator">!=</span> <span class="token number">20</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// roll a new dice and print what it was</span></span>
<span class="line">    roll <span class="token operator">=</span> <span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">20</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I rolled a </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">roll</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// if we&#39;re here it means the loop ended – we got a 20!    </span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Critical hit!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You’ll find yourself using both <code>for</code> and <code>while</code> loops in your own code: <code>for</code> loops are more common when you have a finite amount of data to go through, such as a range or an array, but <code>while</code> loops are really helpful when you need a custom condition.</p>`,14),O=a('<div class="hint-container info"><p class="hint-container-title">2. How to use a while loop to repeat work - Additional</p><p>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-should-you-use-a-while-loop" target="_blank" rel="noopener noreferrer">When should you use a while loop?</a> Test: <a href="https://hackingwithswift.com/review/sixty/while-loops" target="_blank" rel="noopener noreferrer">While loops</a></p></div><h3 id="_3-how-to-skip-loop-items-with-break-and-continue" tabindex="-1"><a class="header-anchor" href="#_3-how-to-skip-loop-items-with-break-and-continue"><span>3. How to skip loop items with break and continue</span></a></h3>',2),W={class:"hint-container details"},B=n("summary",null,"3. How to skip loop items with break and continue",-1),F=a(`<p>Swift gives us two ways to skip one or more items in a loop: <code>continue</code> skips the current loop iteration, and <code>break</code> skips all remaining iterations. Like <code>while</code> loops these are <em>sometimes</em> used, but in practice much less than you might think.</p><p>Let’s look at them individually, starting with <code>continue</code>. When you’re looping over an array of data, Swift will take out one item from the array and execute the loop body using it. If you call <code>continue</code> inside that loop body, Swift will immediately stop executing the current loop iteration and jump to the next item in the loop, where it will carry on as normal. This is commonly used near the start of loops, where you eliminate loop variables that don’t pass a test of your choosing.</p><p>Here’s an example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> filenames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;me.jpg&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;work.txt&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;sophie.jpg&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;logo.psd&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> filename <span class="token keyword">in</span> filenames <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> filename<span class="token punctuation">.</span><span class="token function">hasSuffix</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;.jpg&quot;</span></span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">continue</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Found picture: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">filename</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That creates an array of filename strings, then loops over each one and checks to make sure it has the suffix “.jpg” – that it’s a picture. <code>continue</code> is used with all the filenames failing that test, so that the rest of the loop body is skipped.</p><p>As for <code>break</code>, that exits a loop immediately and skips all remaining iterations. To demonstrate this, we could write some code to calculate 10 common multiples for two numbers:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> number1 <span class="token operator">=</span> <span class="token number">4</span></span>
<span class="line"><span class="token keyword">let</span> number2 <span class="token operator">=</span> <span class="token number">14</span></span>
<span class="line"><span class="token keyword">var</span> multiples <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">100_000</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> i<span class="token punctuation">.</span><span class="token function">isMultiple</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> number1<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i<span class="token punctuation">.</span><span class="token function">isMultiple</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> number2<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        multiples<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> multiples<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">10</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">break</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>multiples<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That does quite a lot:</p><ol><li>Create two constants to hold two numbers.</li><li>Create an integer array variable that will store common multiples of our two numbers.</li><li>Count from 1 through 100,000, assigning each loop variable to <code>i</code>.</li><li>If <code>i</code> is a multiple of both the first and second numbers, append it to the integer array.</li><li>Once we hit 10 multiples, call <code>break</code> to exit the loop.</li><li>Print out the resulting array.</li></ol><p>So, use <code>continue</code> when you want to skip the rest of the current loop iteration, and use <code>break</code> when you want to skip all remaining loop iterations.</p>`,10),U=a('<div class="hint-container info"><p class="hint-container-title">3. How to skip loop items with break and continue - Additional</p><p>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-would-you-want-to-exit-a-loop" target="_blank" rel="noopener noreferrer">Why would you want to exit a loop?</a> Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-to-use-break-and-when-to-use-continue" target="_blank" rel="noopener noreferrer">When to use break and when to use continue</a> Test: <a href="https://hackingwithswift.com/review/sixty/exiting-loops" target="_blank" rel="noopener noreferrer">Exiting loops</a></p></div><h3 id="_4-summary-conditions-and-loops" tabindex="-1"><a class="header-anchor" href="#_4-summary-conditions-and-loops"><span>4. Summary: Conditions and loops</span></a></h3>',2),A={class:"hint-container details"},P=n("summary",null,"4. Summary: Conditions and loops",-1),Y=a("<p>We’ve covered a lot about conditions and loops in the previous chapters, so let’s recap:</p><ul><li>We use <code>if</code> statements to check a condition is true. You can pass in any condition you want, but ultimately it must boil down to a Boolean.</li><li>If you want, you can add an <code>else</code> block, and/or multiple <code>else if</code> blocks to check other conditions. Swift executes these in order.</li><li>You can combine conditions using <code>||</code>, which means that the whole condition is true if either subcondition is true, or <code>&amp;&amp;</code>, which means the whole condition is true if both subconditions are true.</li><li>If you’re repeating the same kinds of check a lot, you can use a <code>switch</code> statement instead. These must always be exhaustive, which might mean adding a default case.</li><li>If one of your <code>switch</code> cases uses <code>fallthrough</code>, it means Swift will execute the following case afterwards. This is not used commonly.</li><li>The ternary conditional operator lets us check WTF: What, True, False. Although it’s a little hard to read at first, you’ll see this used a <em>lot</em> in SwiftUI.</li><li><code>for</code> loops let us loop over arrays, sets, dictionaries, and ranges. You can assign items to a loop variable and use it inside the loop, or you can use underscore, <code>_</code>, to ignore the loop variable.</li><li><code>while</code> loops let us craft custom loops that will continue running until a condition becomes false.</li><li>We can skip some or all loop items using <code>continue</code> or <code>break</code> respectively.</li></ul><p>That’s another huge chunk of new material, but with conditions and loops you now know enough to build some really useful software – give it a try!</p>",3),L=n("h3",{id:"_5-checkpoint-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-checkpoint-3"},[n("span",null,"5. Checkpoint 3")])],-1),V={class:"hint-container details"},R=n("summary",null,"5. Checkpoint 3",-1),N=a("<p>Now that you’re able to use conditions and loops, I’d like you to try a classic computer science problem. It’s not hard to understand, but it might take you a little time to solve depending on your prior experience!</p><p>The problem is called fizz buzz, and has been used in job interviews, university entrance tests, and more for as long as I can remember. Your goal is to loop from 1 through 100, and for each number:</p><ol><li>If it’s a multiple of 3, print “Fizz”</li><li>If it’s a multiple of 5, print “Buzz”</li><li>If it’s a multiple of 3 and 5, print “FizzBuzz”</li><li>Otherwise, just print the number.</li></ol><p>So, here are some example values you should have when your code runs:</p><ul><li>1 should print “1”</li><li>2 should print “2”</li><li>3 should print “Fizz”</li><li>4 should print “4”</li><li>5 should print “Buzz”</li><li>6 should print “Fizz”</li><li>7 should print “7”</li><li>…</li><li>15 should print “FizzBuzz”</li><li>…</li><li>100 should print “Buzz”</li></ul><p><strong>Before you start</strong>: This problem seems extremely simple, but many, many developers struggle to solve it. I’ve seen it happen personally, so don’t stress about it – just <em>trying</em> to solve the problem already teaches you about it.</p><p>You already know everything you need to solve that problem, but if you’d like some hints then I’ll add some below.</p><p>Please go ahead and try building the playground now.</p><p>Still here? Okay, here are some hints:</p><ol><li>You can check whether one number is a multiple of another by using <code>.isMultiple(of:)</code>. For example, <code>i.isMultiple(of: 3)</code>.</li><li>In this instance you need to check for 3 and 5 first because it’s the most specific, then 3, then 5, and finally have an <code>else</code> block to handle all other numbers.</li><li>You can either use <code>&amp;&amp;</code> to check for numbers that are multiples of 3 and 5, or have a nested <code>if</code> statement.</li><li>You need to count from 1 through 100, so use <code>...</code> rather than <code>..&lt;</code>.</li></ol>",10),M=n("hr",null,null,-1);function Z(u,G){const t=r("router-link"),o=r("VPCard"),c=r("VidStack");return m(),h("div",null,[n("h1",f,[n("a",g,[n("span",null,k(u.$frontmatter.title)+" 관련",1)])]),n("nav",b,[n("ul",null,[n("li",null,[s(t,{to:"#loops"},{default:i(()=>[e("Loops")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#_1-how-to-use-a-for-loop-to-repeat-work"},{default:i(()=>[e("1. How to use a for loop to repeat work")]),_:1})]),n("li",null,[s(t,{to:"#_2-how-to-use-a-while-loop-to-repeat-work"},{default:i(()=>[e("2. How to use a while loop to repeat work")]),_:1})]),n("li",null,[s(t,{to:"#_3-how-to-skip-loop-items-with-break-and-continue"},{default:i(()=>[e("3. How to skip loop items with break and continue")]),_:1})]),n("li",null,[s(t,{to:"#_4-summary-conditions-and-loops"},{default:i(()=>[e("4. Summary: Conditions and loops")]),_:1})]),n("li",null,[s(t,{to:"#_5-checkpoint-3"},{default:i(()=>[e("5. Checkpoint 3")]),_:1})])])])])]),v,y,s(o,l(p({title:"100 Days of SwiftUI - Day 6",desc:"Loops",link:"https://www.hackingwithswift.com/100/swiftui/6",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),_,x,q,S,n("details",I,[T,s(o,l(p({title:"100 Days of SwiftUI - Day 6 - 1. How to use a for loop to repeat work",desc:"1. How to use a for loop to repeat work",link:"https://hackingwithswift.com/quick-start/beginners/how-to-use-a-for-loop-to-repeat-work",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/PP321O-KZCs"}),j]),D,n("details",z,[C,s(o,l(p({title:"100 Days of SwiftUI - Day 6 - 2. How to use a while loop to repeat work",desc:"2. How to use a while loop to repeat work",link:"https://hackingwithswift.com/quick-start/beginners/how-to-use-a-while-loop-to-repeat-work",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/NduMuU0xeqk"}),H]),O,n("details",W,[B,s(o,l(p({title:"100 Days of SwiftUI - Day 6 - 3. How to skip loop items with break and continue",desc:"3. How to skip loop items with break and continue",link:"https://hackingwithswift.com/quick-start/beginners/how-to-skip-loop-items-with-break-and-continue",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/z_kR4cP23c4"}),F]),U,n("details",A,[P,s(o,l(p({title:"100 Days of SwiftUI - Day 6 - 4. Summary: Conditions and loops",desc:"4. Summary: Conditions and loops",link:"https://hackingwithswift.com/quick-start/beginners/summary-conditions-and-loops",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/GbGhrnjZIP8"}),Y]),L,n("details",V,[R,s(o,l(p({title:"100 Days of SwiftUI - Day 6 - 5. Checkpoint 3",desc:"5. Checkpoint 3",link:"https://hackingwithswift.com/quick-start/beginners/checkpoint-3",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/GSqLnVOsV70"}),N]),M])}const X=d(w,[["render",Z],["__file","06.html.vue"]]),J=JSON.parse('{"path":"/swift/100-days-of-swiftui/06.html","title":"Day 06","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 06","description":"100 Days of SwiftUI > Day 06","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 06"},{"property":"og:description","content":"Day 06"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/06.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/06.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 06"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 06"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 06\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Loops","slug":"loops","link":"#loops","children":[{"level":3,"title":"1. How to use a for loop to repeat work","slug":"_1-how-to-use-a-for-loop-to-repeat-work","link":"#_1-how-to-use-a-for-loop-to-repeat-work","children":[]},{"level":3,"title":"2. How to use a while loop to repeat work","slug":"_2-how-to-use-a-while-loop-to-repeat-work","link":"#_2-how-to-use-a-while-loop-to-repeat-work","children":[]},{"level":3,"title":"3. How to skip loop items with break and continue","slug":"_3-how-to-skip-loop-items-with-break-and-continue","link":"#_3-how-to-skip-loop-items-with-break-and-continue","children":[]},{"level":3,"title":"4. Summary: Conditions and loops","slug":"_4-summary-conditions-and-loops","link":"#_4-summary-conditions-and-loops","children":[]},{"level":3,"title":"5. Checkpoint 3","slug":"_5-checkpoint-3","link":"#_5-checkpoint-3","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":8}]},"readingTime":{"minutes":10.1,"words":3029},"filePathRelative":"swift/100-days-of-swiftui/06.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n<h2>Loops</h2>\\n"}');export{X as comp,J as data};
