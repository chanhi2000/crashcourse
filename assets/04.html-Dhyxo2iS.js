import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,a as n,t as k,b as e,w as a,n as v,g,e as l,r as o,o as b,d as s}from"./app-U_bew1in.js";const h={},_={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},x=n("hr",null,null,-1),w=l(`<h2 id="_01-데이터프레임의-출력" tabindex="-1"><a class="header-anchor" href="#_01-데이터프레임의-출력"><span>01. 데이터프레임의 출력</span></a></h2><p>판다스는 데이터가 위치한 URL을 입력하는 것만으로도 데이터를 바로 읽어오는 기능을 가지고 있습니다. csv 파일 형태의 데이터를 로드하여 데이터프레임에 저장해봅시다. csv 파일을 데이터프레임으로 읽을 때 <code>pd.read_csv()</code>를 사용합니다. 데이터가 위치한 url을 기재하여 파일을 읽어옵시다.</p><h3 id="데이터-로드" tabindex="-1"><a class="header-anchor" href="#데이터-로드"><span>데이터 로드</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd</span>
<span class="line"></span>
<span class="line">url <span class="token operator">=</span> <span class="token string">&#39;https://raw.githubusercontent.com/justmarkham/DAT8/master/data/drinks.csv&#39;</span></span>
<span class="line">drink_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>drink_df</code>의 타입을 확인해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 타입 확인</span></span>
<span class="line"><span class="token builtin">type</span><span class="token punctuation">(</span>drink_df<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>데이터프레임이라고 출력됩니다. <code>drink_df</code>를 출력해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">drink_df</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172655/drink_df.PNG" alt="drink_df" tabindex="0" loading="lazy"><figcaption>drink_df</figcaption></figure><h3 id="데이터프레임의-출력" tabindex="-1"><a class="header-anchor" href="#데이터프레임의-출력"><span>데이터프레임의 출력</span></a></h3><p><code>head()</code>는 상위 5개의 행을 출력합니다.</p>`,11),N=n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"# 상위 5개의 행을 출력")]),s(`
`),n("span",{class:"line"},[s("drink_df"),n("span",{class:"token punctuation"},"."),s("head"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),j=n("figure",null,[n("img",{src:"https://wikidocs.net/images/page/172655/head.PNG",alt:"head5",tabindex:"0",loading:"lazy"}),n("figcaption",null,"head5")],-1),A=n("p",null,null,-1),E=n("p",null,[n("code",null,"head(숫자)"),s("는 상위 입력한 숫자만큼의 행을 출력합니다.")],-1),P=n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"# 상위 10개의 행을 출력")]),s(`
`),n("span",{class:"line"},[s("drink_df"),n("span",{class:"token punctuation"},"."),s("head"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),G=n("figure",null,[n("img",{src:"https://wikidocs.net/images/page/172655/head.PNG",alt:"headn",tabindex:"0",loading:"lazy"}),n("figcaption",null,"headn")],-1),B=n("p",null,[n("code",null,"tail()"),s("은 하위 5개의 행을 출력합니다.")],-1),D=n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"# 하위 5개의 행을 출력")]),s(`
`),n("span",{class:"line"},[s("drink_df"),n("span",{class:"token punctuation"},"."),s("tail"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),z=n("figure",null,[n("img",{src:"https://wikidocs.net/images/page/172655/tail.PNG",alt:"tail5",tabindex:"0",loading:"lazy"}),n("figcaption",null,"tail5")],-1),T=n("p",null,[n("code",null,"sample(숫자)"),s("는 랜덤으로 선택된 10개의 행을 출력합니다. 데이터를 눈으로 파악할 때 연속적으로 실행하며 데이터를 파악하기에 좋습니다.")],-1),C=n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"# 랜덤으로 선택된 10개의 행을 출력")]),s(`
`),n("span",{class:"line"},[s("drink_df"),n("span",{class:"token punctuation"},"."),s("sample"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),F=n("figure",null,[n("img",{src:"https://wikidocs.net/images/page/172655/sample10.PNG",alt:"sample10",tabindex:"0",loading:"lazy"}),n("figcaption",null,"sample10")],-1),S=l(`<h3 id="데이터프레임의-인덱스" tabindex="-1"><a class="header-anchor" href="#데이터프레임의-인덱스"><span>데이터프레임의 인덱스</span></a></h3><p><code>index</code>는 데이터프레임의 인덱스를 확인합니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 인덱스의 범위 확인</span></span>
<span class="line">drink_df<span class="token punctuation">.</span>index</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># RangeIndex(start=0, stop=193, step=1)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>현재 인덱스는 0부터 시작해서 +1씩(<code>step</code>) 증가하여 192까지 있습니다. 참고로 193에서 stop한다는 것은 193은 포함하지 않는다는 의미입니다. 즉, 0번부터 192번까지의 샘플이 있는 셈이므로 총 샘플의 수는 193개입니다.</p><h3 id="데이터프레임의-데이터타입" tabindex="-1"><a class="header-anchor" href="#데이터프레임의-데이터타입"><span>데이터프레임의 데이터타입</span></a></h3><p><code>dtypes</code>는 각 데이터프레임의 열의 타입을 확인할 수 있습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 각 컬럼의 타입 출력</span></span>
<span class="line">drink_df<span class="token punctuation">.</span>dtypes</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># country                          object</span></span>
<span class="line"><span class="token comment"># beer_servings                     int64</span></span>
<span class="line"><span class="token comment"># spirit_servings                   int64</span></span>
<span class="line"><span class="token comment"># wine_servings                     int64</span></span>
<span class="line"><span class="token comment"># total_litres_of_pure_alcohol    float64</span></span>
<span class="line"><span class="token comment"># continent                        object</span></span>
<span class="line"><span class="token comment"># dtype: object</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>참고로 데이터프레임의 타입에서 <code>object</code>라고 표현되는 부분은 해당 타입이 문자열이라는 의미입니다. <code>int64</code>는 정수형 데이터, <code>float64</code>는 실수형 데이터를 의미합니다.</p><p>다시 말해 위의 출력 결과를 해석해보면, country, continent 열은 문자열 데이터로 구성되어져 있고, <code>beer_servings</code>, <code>spirit_servings</code>, <code>wine_servings</code> 열은 정수형 데이터, <code>total_litres_of_prue_alcohol</code> 열은 실수형 데이터로 구성되어져 있다는 의미입니다. 이를 통해서 각 열의 데이터 자료형이 무엇인지를 파악할 수 있습니다. <code>shape</code>는 데이터프레임의 행과 열의 수를 확인할 수 있습니다.</p><h3 id="데이터프레임의-크기" tabindex="-1"><a class="header-anchor" href="#데이터프레임의-크기"><span>데이터프레임의 크기</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 데이터프레임의 행과 열의 개수 출력</span></span>
<span class="line">drink_df<span class="token punctuation">.</span>shape</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>위 출력 결과는 해당 데이터프레임이 193개의 행, 6개의 열을 가지고 있음을 알려줍니다.</p><h3 id="데이터프레임의-행렬-변환" tabindex="-1"><a class="header-anchor" href="#데이터프레임의-행렬-변환"><span>데이터프레임의 행렬 변환</span></a></h3><p><code>values</code>는 데이터프레임 형태를 Numpy 행렬 형태로 변환하여 출력합니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># Numpy 타입으로 출력</span></span>
<span class="line">drink_df<span class="token punctuation">.</span>values</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># array([[&#39;Afghanistan&#39;, 0, 0, 0, 0.0, &#39;AS&#39;],</span></span>
<span class="line"><span class="token comment">#        [&#39;Albania&#39;, 89, 132, 54, 4.9, &#39;EU&#39;],</span></span>
<span class="line"><span class="token comment">#        [&#39;Algeria&#39;, 25, 0, 14, 0.7, &#39;AF&#39;],</span></span>
<span class="line"><span class="token comment">#        ...,</span></span>
<span class="line"><span class="token comment">#        [&#39;Yemen&#39;, 6, 0, 0, 0.1, &#39;AS&#39;],</span></span>
<span class="line"><span class="token comment">#        [&#39;Zambia&#39;, 32, 19, 4, 2.5, &#39;AF&#39;],</span></span>
<span class="line"><span class="token comment">#        [&#39;Zimbabwe&#39;, 64, 18, 4, 4.7, &#39;AF&#39;]], dtype=object)</span></span>
<span class="line"><span class="token builtin">type</span><span class="token punctuation">(</span>drink_df<span class="token punctuation">.</span>values<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># numpy.ndarray</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Numpy에 대해서는 이 수업에서 다루지는 않았지만 정말~ 간단히 요약하자면 각각의 행을 아래와 같이 데이터프레임의 행 형태에서 아래와 같은 형태로 변환된다고 보면 되겠습니다.</p><ul><li><code>[&#39;Afghanistan&#39;, 0, 0, 0, 0.0, &#39;AS&#39;]</code></li></ul><p>변환한 데이터의 첫번째 행을 출력해볼까요? 이는 변환 후 0번 인덱스로 접근하면 됩니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">drink_df<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># array([&#39;Afghanistan&#39;, 0, 0, 0, 0.0, &#39;AS&#39;], dtype=object)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위와 같은 형태로 변환이 되었다는 것은 다음과 같이 <code>for</code>문 접근도 가능하다는 의미입니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">for</span> element <span class="token keyword">in</span> drink_df<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token keyword">print</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#   </span></span>
<span class="line"><span class="token comment"># Afghanistan</span></span>
<span class="line"><span class="token comment"># 0</span></span>
<span class="line"><span class="token comment"># 0</span></span>
<span class="line"><span class="token comment"># 0</span></span>
<span class="line"><span class="token comment"># 0.0</span></span>
<span class="line"><span class="token comment"># AS</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="데이터프레임의-info" tabindex="-1"><a class="header-anchor" href="#데이터프레임의-info"><span>데이터프레임의 <code>info</code></span></a></h3><p><code>info()</code>는 데이터프레임의 전반적인 정보를 보여줍니다. <code>info()</code> 사용하고, <code>info()</code>를 통해 알 수 있는 정보들을 최대한 정리해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">drink_df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;</span></span>
<span class="line"><span class="token comment"># RangeIndex: 193 entries, 0 to 192</span></span>
<span class="line"><span class="token comment"># Data columns (total 6 columns):</span></span>
<span class="line"><span class="token comment">#  #   Column                        Non-Null Count  Dtype  </span></span>
<span class="line"><span class="token comment"># ---  ------                        --------------  -----  </span></span>
<span class="line"><span class="token comment">#  0   country                       193 non-null    object </span></span>
<span class="line"><span class="token comment">#  1   beer_servings                 193 non-null    int64  </span></span>
<span class="line"><span class="token comment">#  2   spirit_servings               193 non-null    int64  </span></span>
<span class="line"><span class="token comment">#  3   wine_servings                 193 non-null    int64  </span></span>
<span class="line"><span class="token comment">#  4   total_litres_of_pure_alcohol  193 non-null    float64</span></span>
<span class="line"><span class="token comment">#  5   continent                     170 non-null    object </span></span>
<span class="line"><span class="token comment"># dtypes: float64(1), int64(3), object(2)</span></span>
<span class="line"><span class="token comment"># memory usage: 9.2+ KB</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>info()</code>를 통해 다음과 같은 정보를 알 수 있습니다.</p><p>해당 데이터는 다음과 같은 열들을 가지고 있습니다. 데이터 분석 용어로는 데이터를 파악하기 위한 이러한 열을 특성(<code>feature</code>) 이라고 부릅니다. 총 6개의 특성이 있는 셈입니다.</p><ul><li><code>country</code> : 국가</li><li><code>beer_servings</code> : 맥주 소비량</li><li><code>spiti_servings</code> : spirit 소비량</li><li><code>wine_servings</code> : wine 소비량</li><li><code>total_litres_of_pure_alcohol</code> : 총 알코올 소비량</li><li><code>continent</code> : 대륙 정보</li></ul><p><code>info()</code>의 출력 결과로부터 총 193개의 데이터가 존재하며, <code>contry</code>, <code>continet</code> 데이터의 경우에는 <code>object</code>. 데이터프레임에서 <code>object</code>는 문자열을 의미합니다. 그 외에는 정수형 데이터(<code>int64</code>) 또는 실수형 데이터(<code>float64</code>)로 구성되어져 있음을 알 수 있습니다.</p><p>또 하나 주목할 점은 데이터의 총 개수는 193개인데, <code>Non-Null</code> Count를 보면 <code>continent</code>의 경우에만 170개가 있습니다.</p><p>이는 <code>Null</code> 데이터. 다시 말해 결측 데이터가 23개 존재한다는 것을 의미합니다.</p><h3 id="데이터프레임의-결측값-null" tabindex="-1"><a class="header-anchor" href="#데이터프레임의-결측값-null"><span>데이터프레임의 결측값(Null)</span></a></h3><p>결측값이란 정상적으로 존재하지 않는 경우의 값을 의미합니다. <code>Null</code> 값이라고도 표현합니다. <code>isnull().sum()</code>은 해당 데이터프레임의 각 열에서 <code>Null</code> 데이터가 총 몇 개인지를 출력합니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>drink_df<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># country                          0</span></span>
<span class="line"><span class="token comment"># beer_servings                    0</span></span>
<span class="line"><span class="token comment"># spirit_servings                  0</span></span>
<span class="line"><span class="token comment"># wine_servings                    0</span></span>
<span class="line"><span class="token comment"># total_litres_of_pure_alcohol     0</span></span>
<span class="line"><span class="token comment"># continent                       23</span></span>
<span class="line"><span class="token comment"># dtype: int64</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>continent</code>라는 열에서 총 23개의 Null\`(결측) 데이터가 있음을 확인할 수 있습니다.</p><hr><h2 id="_02-데이터프레임의-열-접근" tabindex="-1"><a class="header-anchor" href="#_02-데이터프레임의-열-접근"><span>02. 데이터프레임의 열 접근</span></a></h2><p>앞서 사용했던 동일한 데이터프레임인 drink_df를 사용합니다.</p><h3 id="데이터-로드-1" tabindex="-1"><a class="header-anchor" href="#데이터-로드-1"><span>데이터 로드</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd</span>
<span class="line"></span>
<span class="line">url <span class="token operator">=</span> <span class="token string">&#39;https://raw.githubusercontent.com/justmarkham/DAT8/master/data/drinks.csv&#39;</span></span>
<span class="line">drink_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span></span>
<span class="line">drink_df</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172655/drink_df.PNG" alt="drink_df" tabindex="0" loading="lazy"><figcaption>drink_df</figcaption></figure><h3 id="데이터프레임의-열-접근" tabindex="-1"><a class="header-anchor" href="#데이터프레임의-열-접근"><span>데이터프레임의 열 접근</span></a></h3><p>데이터프레임의 특정 열에 접근하는 가장 쉬운 방법은</p><p><code>데이터프레임의 이름.열의 이름</code></p><p>과 같은 방식으로 접근하는 것입니다. 다시 말해, 데이터프레임의 이름을 적고, 온점을 찍은 후에 열의 이름을 적으면 해당 열만을 불러옵니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">drink_df<span class="token punctuation">.</span>beer_servings</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># 0        0</span></span>
<span class="line"><span class="token comment"># 1       89</span></span>
<span class="line"><span class="token comment"># 2       25</span></span>
<span class="line"><span class="token comment"># 3      245</span></span>
<span class="line"><span class="token comment"># 4      217</span></span>
<span class="line"><span class="token comment">#       ... </span></span>
<span class="line"><span class="token comment"># 188    333</span></span>
<span class="line"><span class="token comment"># 189    111</span></span>
<span class="line"><span class="token comment"># 190      6</span></span>
<span class="line"><span class="token comment"># 191     32</span></span>
<span class="line"><span class="token comment"># 192     64</span></span>
<span class="line"><span class="token comment"># Name: beer_servings, Length: 193, dtype: int64</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>또 다른 방법은 <code>데이터프레임의 이름[&#39;해당 열의 이름&#39;]</code>과 같은 방법입니다. 이는 위와 동일한 결과를 출력합니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 또 다른 방법</span></span>
<span class="line">drink_df<span class="token punctuation">[</span><span class="token string">&#39;beer_servings&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># 0        0</span></span>
<span class="line"><span class="token comment"># 1       89</span></span>
<span class="line"><span class="token comment"># 2       25</span></span>
<span class="line"><span class="token comment"># 3      245</span></span>
<span class="line"><span class="token comment"># 4      217</span></span>
<span class="line"><span class="token comment">#       ... </span></span>
<span class="line"><span class="token comment"># 188    333</span></span>
<span class="line"><span class="token comment"># 189    111</span></span>
<span class="line"><span class="token comment"># 190      6</span></span>
<span class="line"><span class="token comment"># 191     32</span></span>
<span class="line"><span class="token comment"># 192     64</span></span>
<span class="line"><span class="token comment"># Name: beer_servings, Length: 193, dtype: int64</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2차원 테이블 형태를 데이터프레임이라고 부르지만, 이렇게 특정 하나의 열만을 불러올 경우에는 데이터프레임이 아니라 데이터 타입이 판다스(Pandas)에서 제공하는 또 다른 데이터 타입인 &#39;시리즈(Series)&#39;가 됩니다. 실제로 특정 열만 불러오고 타입을 확인해볼까요?</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 컬럼의 타입 확인</span></span>
<span class="line"><span class="token builtin">type</span><span class="token punctuation">(</span>drink_df<span class="token punctuation">.</span>beer_servings<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># pandas.core.series.Series</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>만약 하나의 열이 아니라 선택적으로 다수의 열에 접근려면 어떻게 하면 될까요?</p><p><code>데이터프레임의 이름[[&#39;특정열의 이름1&#39;, &#39;특정열의 이름2&#39;]]</code></p><p>와 같은 방식으로 접근하면 됩니다. 예를 들어서 <code>beer_servings</code>과 <code>wine_servings</code> 2개의 열만을 불러오고 싶다고 해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">drink_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;beer_servings&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;wine_servings&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172724/drink_df_columns.PNG" alt="drink_df_columns" tabindex="0" loading="lazy"><figcaption>drink_df_columns</figcaption></figure><p>두 개의 열만이 뽑힌 데이터프레임이 출력됩니다.</p><p><code>[&#39;특정 열의 이름1&#39;, &#39;특정 열의 이름2&#39;]</code> 은 파이썬 리스트 형태입니다.</p><p>다시 말해 파이썬 리스트의 형태로 열의 이름을 나열한 뒤에</p><p><code>데이터프레임의 이름[열의 이름이 나열된 파이썬 리스트]</code></p><p>를 사용해도 동일한 결과를 출력합니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;beer_servings&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;wine_servings&#39;</span><span class="token punctuation">]</span></span>
<span class="line">drink_df<span class="token punctuation">[</span>cols<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172724/drink_df_columns.PNG" alt="drink_df_columns" tabindex="0" loading="lazy"><figcaption>drink_df_columns</figcaption></figure><hr><h2 id="_03-특성의-수치-정보-파악하기" tabindex="-1"><a class="header-anchor" href="#_03-특성의-수치-정보-파악하기"><span>03. 특성의 수치 정보 파악하기</span></a></h2><p>앞서 사용했던 동일한 데이터프레임인 drink_df를 사용합니다.</p><h3 id="데이터-로드-2" tabindex="-1"><a class="header-anchor" href="#데이터-로드-2"><span>데이터 로드</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd</span>
<span class="line"></span>
<span class="line">url <span class="token operator">=</span> <span class="token string">&#39;https://raw.githubusercontent.com/justmarkham/DAT8/master/data/drinks.csv&#39;</span></span>
<span class="line">drink_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span></span>
<span class="line">drink_df</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172655/drink_df.PNG" alt="drink_df" tabindex="0" loading="lazy"><figcaption>drink_df</figcaption></figure><h3 id="특성-features" tabindex="-1"><a class="header-anchor" href="#특성-features"><span>특성(features)</span></a></h3><p>앞서 데이터프레임의 <code>info()</code>를 설명한 적이 있습니다. <code>info()</code>는 데이터프레임의 전반적인 정보를 보여줍니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">drink_df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;</span></span>
<span class="line"><span class="token comment"># RangeIndex: 193 entries, 0 to 192</span></span>
<span class="line"><span class="token comment"># Data columns (total 6 columns):</span></span>
<span class="line"><span class="token comment">#  #   Column                        Non-Null Count  Dtype  </span></span>
<span class="line"><span class="token comment"># ---  ------                        --------------  -----  </span></span>
<span class="line"><span class="token comment">#  0   country                       193 non-null    object </span></span>
<span class="line"><span class="token comment">#  1   beer_servings                 193 non-null    int64  </span></span>
<span class="line"><span class="token comment">#  2   spirit_servings               193 non-null    int64  </span></span>
<span class="line"><span class="token comment">#  3   wine_servings                 193 non-null    int64  </span></span>
<span class="line"><span class="token comment">#  4   total_litres_of_pure_alcohol  193 non-null    float64</span></span>
<span class="line"><span class="token comment">#  5   continent                     170 non-null    object </span></span>
<span class="line"><span class="token comment"># dtypes: float64(1), int64(3), object(2)</span></span>
<span class="line"><span class="token comment"># memory usage: 9.2+ KB</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>info()</code>를 통해 다음과 같은 정보를 알 수 있습니다.</p><p>해당 데이터는 다음과 같은 열들을 가지고 있습니다. 데이터 분석 용어로는 데이터를 파악하기 위한 이러한 열을 <strong>특성(feature)</strong> 이라고 부릅니다. 총 6개의 특성이 있는 셈입니다.</p><h3 id="특성의-수치-정보-파악하기" tabindex="-1"><a class="header-anchor" href="#특성의-수치-정보-파악하기"><span>특성의 수치 정보 파악하기</span></a></h3><p>이제 본격적으로 데이터프레임을 통해서 데이터를 파악해가는 과정을 시작해볼텐데요. 숫자와 같은 수치 데이터를 다루고 있다면, 해당 데이터의 최솟값, 최댓값, 평균값 등을 파악하는 것은 데이터 파악의 가장 첫 걸음입니다.</p><p>데이터가 데이터프레임 형태로 저장된 상황에서 이를 가장 빠르게 파악할 수 있는 방법은</p><p><code>describe()</code>를 사용하는 것입니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">drink_df<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172729/drink_df_describe.PNG" alt="drink_df_describe" tabindex="0" loading="lazy"><figcaption>drink_df_describe</figcaption></figure><p><code>describe()</code>는 데이터프레임의 총 데이터의 수(count), 평균(mean), 표준편차(std), 분위수(25%, 50%, 75%)를 파악하여 출력합니다. 하지만 이는 숫자. 즉, 수치 정보에 국한되어서 계산하므로 문자열 타입의 데이터였던 country 열과 continent 열은 제외되었습니다. 특정 열에 대해서만 출력해볼 수도 있습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">drink_df<span class="token punctuation">.</span>beer_servings<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># count    193.000000</span></span>
<span class="line"><span class="token comment"># mean     106.160622</span></span>
<span class="line"><span class="token comment"># std      101.143103</span></span>
<span class="line"><span class="token comment"># min        0.000000</span></span>
<span class="line"><span class="token comment"># 25%       20.000000</span></span>
<span class="line"><span class="token comment"># 50%       76.000000</span></span>
<span class="line"><span class="token comment"># 75%      188.000000</span></span>
<span class="line"><span class="token comment"># max      376.000000</span></span>
<span class="line"><span class="token comment"># Name: beer_servings, dtype: float64</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>특정 열의 최대값, 최소값, 평균값, 합계, 카운트도 계산가능합니다.</p>`,81),q=n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("drink_df"),n("span",{class:"token punctuation"},"."),s("beer_servings"),n("span",{class:"token punctuation"},"."),s("mean"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"#")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# 106.16062176165804")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),O=n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("drink_df"),n("span",{class:"token punctuation"},"."),s("beer_servings"),n("span",{class:"token punctuation"},"."),n("span",{class:"token builtin"},"max"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"#")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# 376")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),R=n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("drink_df"),n("span",{class:"token punctuation"},"."),s("beer_servings"),n("span",{class:"token punctuation"},"."),n("span",{class:"token builtin"},"min"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"#")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# 0")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),U=n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("drink_df"),n("span",{class:"token punctuation"},"."),s("beer_servings"),n("span",{class:"token punctuation"},"."),n("span",{class:"token builtin"},"sum"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"#")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# 20489")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),L=n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("drink_df"),n("span",{class:"token punctuation"},"."),s("beer_servings"),n("span",{class:"token punctuation"},"."),s("count"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"#")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# 193")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Q=l(`<p>이렇게 바로 계산한 수치를 뽑을 수 있다면, 이 수치를 가지고 계산도 가능하겠죠? <code>mean()</code>으로 평균을 바로 구할 수 있긴 하지만, <code>sum()</code>과 <code>count()</code>를 이용하여 평균을 계산해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token builtin">float</span><span class="token punctuation">(</span>drink_df<span class="token punctuation">.</span>beer_servings<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>drink_df<span class="token punctuation">.</span>beer_servings<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># 106.16062176165804</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_04-조건부-로직" tabindex="-1"><a class="header-anchor" href="#_04-조건부-로직"><span>04. 조건부 로직</span></a></h2><p>앞서 사용했던 동일한 데이터프레임인 <code>drink_df</code>를 사용합니다.</p><h3 id="데이터-로드-3" tabindex="-1"><a class="header-anchor" href="#데이터-로드-3"><span>데이터 로드</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd</span>
<span class="line"></span>
<span class="line">url <span class="token operator">=</span> <span class="token string">&#39;https://raw.githubusercontent.com/justmarkham/DAT8/master/data/drinks.csv&#39;</span></span>
<span class="line">drink_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span></span>
<span class="line">drink_df</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172655/drink_df.PNG" alt="drink_df" tabindex="0" loading="lazy"><figcaption>drink_df</figcaption></figure><h3 id="조건부-로직" tabindex="-1"><a class="header-anchor" href="#조건부-로직"><span>조건부 로직</span></a></h3><p>데이터프레임에 우리가 원하는 조건을 걸어서 해당 조건을 충족하는 값들만을 뽑아오는 것도 가능합니다. 우선 특정 열에 대해서 조건을 걸었을 때 어떤 값을 반환하는지를 봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">데이터프레임의 이름<span class="token punctuation">.</span>특정 열의 이름 <span class="token operator">==</span> <span class="token string">&#39;특정값&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>이라는 코드는 각 행에서 해당 조건을 만족하는지를 판단하여 만족한다면 <code>True</code>, 아니라면 <code>False</code>의 값을 가지는 시리즈(Series)를 리턴합니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">drink_df<span class="token punctuation">.</span>continent<span class="token operator">==</span><span class="token string">&#39;EU&#39;</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># 0      False</span></span>
<span class="line"><span class="token comment"># 1       True</span></span>
<span class="line"><span class="token comment"># 2      False# 3       True</span></span>
<span class="line"><span class="token comment"># 4      False</span></span>
<span class="line"><span class="token comment">#        ...  </span></span>
<span class="line"><span class="token comment"># 188    False</span></span>
<span class="line"><span class="token comment"># 189    False</span></span>
<span class="line"><span class="token comment"># 190    False</span></span>
<span class="line"><span class="token comment"># 191    False</span></span>
<span class="line"><span class="token comment"># 192    False</span></span>
<span class="line"><span class="token comment"># Name: continent, Length: 193, dtype: bool</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>하지만 일반적으로 저런 조건을 걸었을 때 우리가 원하는 건 <code>True</code>와 <code>False</code>로 구성된 시리즈(Series)가 아니라 continent의 값이 &#39;EU&#39;일 때의 데이터프레임 값을 뽑아내는 것일텐데요.</p><p>이 경우에는 저렇게 <code>True</code>와 <code>False</code>로 구성된 Series를 다음과 같이 사용해주면 됩니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">데이터프레임의 이름<span class="token punctuation">[</span><span class="token boolean">True</span>와 <span class="token boolean">False</span>로 구성된 시리즈<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>일단 <code>drink_df.continent==&#39;EU&#39;</code>의 타입이 시리즈임을 확인합니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token builtin">type</span><span class="token punctuation">(</span>drink_df<span class="token punctuation">.</span>continent<span class="token operator">==</span><span class="token string">&#39;EU&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># pandas.core.series.Series</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이를 <code>데이터프레임의 이름[ ]</code> 의 대괄호 안에 넣어봅시다. <code>head(20)</code>을 이용하여 상위 20개만 출력합니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">drink_df<span class="token punctuation">[</span>drink_df<span class="token punctuation">.</span>continent<span class="token operator">==</span><span class="token string">&#39;EU&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172780/dataframe.PNG" alt="dataframe" tabindex="0" loading="lazy"><figcaption>dataframe</figcaption></figure><p>그렇다면 만약 <code>beer_servings</code>의 값이 158보다 큰 경우만을 필터링하고 싶다면 어떨까요?</p><p>앞서 데이터프레임의 열을 호출하는 방법으로 다음과 같이 두 가지를 소개했습니다.</p><ul><li><code>데이터프레임의 이름.열의 이름</code></li><li><code>데이터프레임의 이름[&#39;열의 이름&#39;]</code></li></ul><p>다시 말해 <code>beer_servings</code>의 값이 158보다 큰 경우로 필터링하는 코드는 아래의 두 가지 방법이 있습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">drink_df<span class="token punctuation">[</span>drink_df<span class="token punctuation">.</span>beer_servings <span class="token operator">&gt;</span> <span class="token number">158</span><span class="token punctuation">]</span></span>
<span class="line">drink_df<span class="token punctuation">[</span>drink_df<span class="token punctuation">[</span><span class="token string">&#39;beer_servings&#39;</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">158</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 아래 두 가지는 동일함</span></span>
<span class="line"><span class="token comment"># drink_df[drink_df.beer_servings &gt; 158]</span></span>
<span class="line"><span class="token comment"># drink_df[drink_df[&#39;beer_servings&#39;] &gt; 158] </span></span>
<span class="line">drink_df<span class="token punctuation">[</span>drink_df<span class="token punctuation">[</span><span class="token string">&#39;beer_servings&#39;</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">158</span><span class="token punctuation">]</span><span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172780/데이터프레임.PNG" alt="데이터프레임" tabindex="0" loading="lazy"><figcaption>데이터프레임</figcaption></figure><p>그렇다면 조건을 걸되, 특정 열 몇 개만 출력하고 싶다면 어떨까요?</p><p>앞서 특정 열들만을 뽑아서 출력하는 방법을 아래와 같이 소개했었습니다.</p><ul><li><code>데이터프레임의 이름[[&#39;특정 열의 이름1, &#39;특정 열의 이름2&#39;]]</code></li></ul><p>이를 응용하여 <code>beer_servings</code>의 값이 10 이하이면서 <code>country</code>, <code>beer_servings</code>의 두 개의 열만을 뽑아내는 방법은 다음과 같습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">drink_df<span class="token punctuation">[</span>drink_df<span class="token punctuation">.</span>beer_servings <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;country&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;beer_servings&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>우선, <code>drink_df[drink_df.beer_servings &lt;= 10]</code>로 조건에 맞는 데이터프레임을 뽑아낸 뒤에 이 데이터프레임에 <code>[[&#39;country&#39;,&#39;beer_servings&#39;]]</code>를 붙여서 2개의 열만을 뽑아내는 것이죠.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># drink_df[drinks.beer_servings &lt;= 10]는 데이터프레임이다. </span></span>
<span class="line">drink_df<span class="token punctuation">[</span>drink_df<span class="token punctuation">.</span>beer_servings <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;country&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;beer_servings&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172780/데이터프레임2.PNG" alt="데이터프레임2" tabindex="0" loading="lazy"><figcaption>데이터프레임2</figcaption></figure><p>이번에는 조건으로 필터링하여 시리즈(Series)를 얻어낸 뒤에 평균(mean)을 얻어보겠습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">drink_df<span class="token punctuation">[</span>drink_df<span class="token punctuation">.</span>continent<span class="token operator">==</span><span class="token string">&#39;EU&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>beer_servings<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># 193.77777777777777</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위 코드는 continent의 값이 &#39;EU&#39;인 경우로 데이터프레임을 뽑아내지만, 그 중 <code>beer_serving</code>s라는 하나의 열만을 뽑아내므로 (앞서 열을 하나만 뽑을 경우 데이터프레임이 아니라 시리즈가 된다고 언급한 바 있습니다.) 시리즈로 변환되며, 시리즈에 대해서 <code>mean()</code>을 사용하여 평균값을 뽑아내게 됩니다. 결과적으로 continent의 값이 EU인 <code>beer_servings</code> 열의 평균값(mean)을 구하게 되는 것이죠.</p><p>이번에는 <code>beer_servings</code> 열의 평균값을 조건에 넣어보겠습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">drink_df<span class="token punctuation">[</span>drink_df<span class="token punctuation">.</span>beer_servings <span class="token operator">&gt;</span> drink_df<span class="token punctuation">.</span>beer_servings<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172780/데이터프레임3.PNG" alt="데이터프레임3" tabindex="0" loading="lazy"><figcaption>데이터프레임3</figcaption></figure><p>해당 열에 <code>null</code> 값(결측값)이 존재하는지 유무에 대한 True와 False의 시리즈(Series)로 얻어내는 방법은 해당 열의 <code>isnull()</code>을 하면 알 수 있습니다. <code>isnull()</code>은 해당 행에 Null 값이 들어있는 경우만 <code>True</code>를 리턴하고, 아니라면 <code>False</code>를 리턴합니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">drink_df<span class="token punctuation">.</span>continent<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># 0      False</span></span>
<span class="line"><span class="token comment"># 1      False</span></span>
<span class="line"><span class="token comment"># 2      False</span></span>
<span class="line"><span class="token comment"># 3      False</span></span>
<span class="line"><span class="token comment"># 4      False</span></span>
<span class="line"><span class="token comment">#        ...  </span></span>
<span class="line"><span class="token comment"># 188    False</span></span>
<span class="line"><span class="token comment"># 189    False</span></span>
<span class="line"><span class="token comment"># 190    False</span></span>
<span class="line"><span class="token comment"># 191    False</span></span>
<span class="line"><span class="token comment"># 192    False</span></span>
<span class="line"><span class="token comment"># Name: continent, Length: 193, dtype: bool</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line">drink_df<span class="token punctuation">.</span>continent<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># 23</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이를 이용하면 데이터프레임에서 특정 열에 Null 값이 위치한 경우만 뽑을 수 있습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">drink_df<span class="token punctuation">[</span>drink_df<span class="token punctuation">.</span>continent<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172780/데이터프레임4.PNG" alt="데이터프레임4" tabindex="0" loading="lazy"><figcaption>데이터프레임4</figcaption></figure><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token builtin">len</span><span class="token punctuation">(</span>drink_df<span class="token punctuation">[</span>drink_df<span class="token punctuation">.</span>continent<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># 23</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>continent</code>의 값에 <code>NaN</code> 값(결측값을 의미)인 경우만 출력되는 것을 확인할 수 있습니다. 즉, 이 데이터들은 다른 열에는 값이 다 존재하지만 <code>continent</code>의 열에는 실질적으로 값이 존재하지 않는다고 해석할 수 있습니다.</p><hr><h2 id="_05-and-or-not-연산자-사용하기" tabindex="-1"><a class="header-anchor" href="#_05-and-or-not-연산자-사용하기"><span>05. <code>AND</code>, <code>OR</code>, <code>NOT</code> 연산자 사용하기</span></a></h2><blockquote><p><a href="https://wikidocs.net/22211" target="_blank" rel="noopener noreferrer">📚참고</a></p></blockquote><p>앞서 사용했던 동일한 데이터프레임인 <code>drink_df</code>를 사용합니다.</p><h3 id="데이터-로드-4" tabindex="-1"><a class="header-anchor" href="#데이터-로드-4"><span>데이터 로드</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd</span>
<span class="line"></span>
<span class="line">url <span class="token operator">=</span> <span class="token string">&#39;https://raw.githubusercontent.com/justmarkham/DAT8/master/data/drinks.csv&#39;</span></span>
<span class="line">drink_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span></span>
<span class="line">drink_df</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172655/drink_df.PNG" alt="" tabindex="0" loading="lazy"><figcaption><code>drink_df</code></figcaption></figure><h3 id="and-or-not-연산자-사용하기" tabindex="-1"><a class="header-anchor" href="#and-or-not-연산자-사용하기"><span><code>AND</code>, <code>OR</code>, <code>NOT</code> 연산자 사용하기</span></a></h3><p><code>AND</code>나 <code>OR</code> 또는 <code>NOT</code>과 같은 연산자를 사용하여 여러 개의 조건을 동시에 사용하거나, 조건문 자체를 반대로 해석하도록 할 수도 있습니다.</p><p>데이터프레임에서는 AND, OR, NOT은 각각 <code>&amp;</code>, <code>|</code>, <code>~</code>로 표현합니다.</p><ul><li><code>&amp;</code>: AND</li><li><code>|</code>: OR</li><li><code>~</code>: NOT</li></ul><p>다시 말해 다음과 같이 사용할 수 있습니다.</p><ul><li><code>A조건 &amp; B조건</code> : A조건과 B조건 모두 만족하는 경우</li><li><code>A조건 | B조건</code> : A조건 또는 B조건 둘 중 하나를 만족하는 경우</li><li><code>~A조건</code> : A조건을 만족하는 경우의 반대. 즉, A조건을 만족하지 않는 경우.</li></ul><p>물론 실제로는 조건이 2개 이상일 수도 있고, 이들을 섞어서 사용하는 것도 가능하므로 위 케이스보다 다양하게 사용할 수 있습니다. 여기서는 가장 기본적인 위의 세 가지 경우에 대해서만 다뤄보겠습니다.</p><p>우선 NOT을 사용한 경우를 봅시다.</p>`,64),V=n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("drink_df"),n("span",{class:"token punctuation"},"["),n("span",{class:"token operator"},"~"),n("span",{class:"token punctuation"},"("),s("drink_df"),n("span",{class:"token punctuation"},"."),s("continent"),n("span",{class:"token operator"},"=="),n("span",{class:"token string"},"'EU'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1),K=n("figure",null,[n("img",{src:"https://wikidocs.net/images/page/172785/not.PNG",alt:"not",tabindex:"0",loading:"lazy"}),n("figcaption",null,"not")],-1),M=n("p",null,"위 코드는 continent의 값이 'EU'가 아닌 경우만을 필터링하는 코드입니다.",-1),Z=n("p",null,"이번에는 두 개의 조건 모두가 참인 경우만을 필터링하는 AND를 사용해봅시다.",-1),I=n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("drink_df"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"("),s("drink_df"),n("span",{class:"token punctuation"},"."),s("continent"),n("span",{class:"token operator"},"=="),n("span",{class:"token string"},"'EU'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"&"),s(),n("span",{class:"token punctuation"},"("),s("drink_df"),n("span",{class:"token punctuation"},"."),s("wine_servings "),n("span",{class:"token operator"},">"),s(),n("span",{class:"token number"},"300"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1),W=n("figure",null,[n("img",{src:"https://wikidocs.net/images/page/172785/and.PNG",alt:"and",tabindex:"0",loading:"lazy"}),n("figcaption",null,"and")],-1),J=n("p",null,[s("위 코드는 "),n("code",null,"continent"),s("의 값이 'EU'이면서 "),n("code",null,"wine_servings"),s("의 값이 300보다 큰 경우만을 필터링합니다. 두 개의 조건을 만족하는 행은 193개의 행 중 단 3개뿐입니다.")],-1),Y=l(`<p>하지만 두 가지 조건을 모두 만족하는 것이 아니라 단, 한 개만 만족하더라도 데이터를 뽑으려고 한다면 <code>AND</code>를 단지 <code>OR</code>로 바꿔주기만 하면 됩니다. 두 개의 조건은 같지만 <code>AND</code>를 단순히 <code>OR</code>로 바꾼 경우에는 데이터가 몇 개나 뽑히는지 확인해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token builtin">len</span><span class="token punctuation">(</span>입력<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>을 사용하면 입력의 길이를 계산하여 알려줍니다. 데이터프레임의 이름을 입력으로 할 경우에는 데이터프레임의 행의 길이를 출력합니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># OR 조건</span></span>
<span class="line"><span class="token builtin">len</span><span class="token punctuation">(</span>drink_df<span class="token punctuation">[</span><span class="token punctuation">(</span>drink_df<span class="token punctuation">.</span>continent<span class="token operator">==</span><span class="token string">&#39;EU&#39;</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>drink_df<span class="token punctuation">.</span>wine_servings <span class="token operator">&gt;</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># 45</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>AND</code> 조건을 사용하였을 경우에는 행이 3개밖에 없었지만, 이번에는 45개로 훨씬 많습니다.</p><hr><h2 id="_06-로직과-수치-정보의-결합-정렬" tabindex="-1"><a class="header-anchor" href="#_06-로직과-수치-정보의-결합-정렬"><span>06. 로직과 수치 정보의 결합 &amp; 정렬</span></a></h2><p>앞서 사용했던 동일한 데이터프레임인 <code>drink_df</code>를 사용합니다.</p><h3 id="데이터-로드-5" tabindex="-1"><a class="header-anchor" href="#데이터-로드-5"><span>데이터 로드</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd</span>
<span class="line"></span>
<span class="line">url <span class="token operator">=</span> <span class="token string">&#39;https://raw.githubusercontent.com/justmarkham/DAT8/master/data/drinks.csv&#39;</span></span>
<span class="line">drink_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span></span>
<span class="line">drink_df</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172655/drink_df.PNG" alt="drink_df" tabindex="0" loading="lazy"><figcaption>drink_df</figcaption></figure><h3 id="로직과-수치-정보의-결합" tabindex="-1"><a class="header-anchor" href="#로직과-수치-정보의-결합"><span>로직과 수치 정보의 결합</span></a></h3><p><code>drink_df</code>에서 <code>total_litres_of_pure_alchohol</code>의 값이 최대값인 경우의 <code>country</code> 열을 출력한다면?</p><ol><li>특정 열의 최대값을 구하는 방법이 무엇이었는지 생각해봅시다.</li><li>특정 열만을 출력하는 방법이 무엇이었는지 생각해봅시다.</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 어떤 나라가 total litres of pure alcohol의 값이 가장 클까요?</span></span>
<span class="line">drink_df<span class="token punctuation">[</span>drink_df<span class="token punctuation">.</span>total_litres_of_pure_alcohol <span class="token operator">==</span> drink_df<span class="token punctuation">.</span>total_litres_of_pure_alcohol<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;country&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># 15    Belarus</span></span>
<span class="line"><span class="token comment"># Name: country, dtype: object</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>우선 <code>drink_df.total_litres_of_pure_alcohol.max()</code>를 통해서 <code>total_litres_of_pure_alcohol</code>열의 최댓값을 구하고, 이를 로직에 적용하여 출력할 수 있습니다.</p><p>이번에는 <code>drink_df</code>에서 <code>wine_servings</code>의 값이 300보다 크거나, <code>beer_servings</code>의 값이 300보다 크거나, <code>spirit_servings</code>의 값이 300보다 큰 경우의 <code>country</code>열의 데이터를 모두 카운트하였을 때의 숫자를 출력해봅시다. 이를 구현하기 위해서 고려해야할 것은 총 두 가지입니다.</p><ol><li>다수의 조건을 &#39;또는&#39;으로 한 번에 사용하는 방법이 무엇이었는지 생각해봅시다.</li><li>숫자를 &#39;카운트&#39; 하는 방법이 무엇이었는지 생각해봅시다.</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 이번에는 drink_df에서 wine_servings의 값이 300보다 크거나,</span></span>
<span class="line"><span class="token comment"># beer_servings의 값이 300보다 크거나,</span></span>
<span class="line"><span class="token comment"># spirit_servings의 값이 300보다 큰 경우를 모두 카운트하였을 때의 숫자를 출력해봅시다.</span></span>
<span class="line">drink_df<span class="token punctuation">[</span><span class="token punctuation">(</span>drink_df<span class="token punctuation">.</span>wine_servings <span class="token operator">&gt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>drink_df<span class="token punctuation">.</span>beer_servings <span class="token operator">&gt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>drink_df<span class="token punctuation">.</span>spirit_servings <span class="token operator">&gt;</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>country<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># 18</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="정렬" tabindex="-1"><a class="header-anchor" href="#정렬"><span>정렬</span></a></h3><p>데이터를 특정 기준으로 정렬해서 볼 수도 있습니다.</p><p>정렬해서 보는 방법은 다음과 같습니다.</p><p><code>데이터프레임의 이름.sort_values(&#39;정렬 기준이 되는 열의 이름&#39;)</code></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">drink_df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">&#39;beer_servings&#39;</span><span class="token punctuation">)</span> <span class="token comment"># 특정 컬럼을 기준으로 정렬</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172788/정렬.PNG" alt="정렬" tabindex="0" loading="lazy"><figcaption>정렬</figcaption></figure><p><code>beer_servings</code>의 열을 보면 오름차순을 기준으로 정렬된 것을 확인할 수 있습니다. 기본적으로는 오름차순으로 정렬되지만, 만약 내림차순으로 정렬하고 싶다면 데이터프레임의 <code>이름.sort_values(&#39;정렬 기준이 되는 열의 이름&#39;, ascending=False)</code><code>sort_values</code>의 인자로 <code>ascending=False</code>를 추가해주면 됩니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 내림차순으로 정렬</span></span>
<span class="line">drink_df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">&#39;beer_servings&#39;</span><span class="token punctuation">,</span> ascending<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://wikidocs.net/images/page/172788/내림차순.PNG" alt="내림차순" loading="lazy"> 정렬의 기준은 하나의 열이 아니라 다수의 열일 수 있습니다. 열의 이름들을 원소로하는 리스트를 <code>sort_values</code>의 입력으로 사용하면 해당 열들을 기준으로 정렬을 수행합니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 2개의 컬럼 기준으로 정렬</span></span>
<span class="line">drink_df<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;beer_servings&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wine_servings&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172788/정렬2.PNG" alt="정렬2" tabindex="0" loading="lazy"><figcaption>정렬2</figcaption></figure><hr><h2 id="_07-상관-관계-분석" tabindex="-1"><a class="header-anchor" href="#_07-상관-관계-분석"><span>07. 상관 관계 분석</span></a></h2><p><strong>상관 분석</strong> 이란 두 변수 간의 선형적 관계를 상관 계수로 표현하는 것을 말합니다. 상관 계수를 구하는 것은 공분산의 개념을 포함하는데, 공분산은 2개의 변수에 대한 상관 정도. 2개의 변수 중 하나의 값이 상승하는 경향을 보이면 다른 값도 상승하는 경향을 수치로 표현한 것입니다. 하지만 공분산만으로 두 확률 변수의 상관 관계를 구한다면 두 변수의 단위 크기에 영향을 받을 수 있습니다. 따라서 이를 -1과 1 사이 값으로 변환합니다. 이를 상관 계수라 합니다.</p><p>만약 상관 계수가 1에 가깝다면 서로 강한 양의 상관 관계가 있는 것이고, -1에 가깝다면 음의 상관 관계가 있는 것입니다. 0이면 상관 관계가 없습니다.</p><p><code>Matplotlib</code>는 파이썬에서 자료를 차트나 플롯으로 시각화하는 패키지입니다. <code>Seaborn</code>은 <code>Matplotlib</code>을 기반으로 다양한 테마와 기능을 추가한 시각화 패키지입니다. 데이터를 시각화하기위해서 Matplotlib만을 사용할 수도 있고, Seaborn을 사용할 수도 있으며, 이 두 가지를 함께 사용할 수도 있습니다.</p><h4 id="상관관계-분석" tabindex="-1"><a class="header-anchor" href="#상관관계-분석"><span>상관관계 분석</span></a></h4><p>상관관계 분석 실습을 위해 임의로 데이터프레임을 하나 만들어봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd <span class="token comment"># 판다스 임포트.</span></span>
<span class="line"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt <span class="token comment"># 맷플롯립 임포트.</span></span>
<span class="line"><span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns <span class="token comment"># 시본 임포트</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>다수의 파이썬 리스트를 통해 데이터프레임을 만드는 방법은 다음과 같습니다.</p><p><code>pd.DataFrame({&quot;열이름1&quot;:리스트1, &quot;열이름2&quot;:리스트2, &quot;열이름3&quot;:리스트3})</code></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">test_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;v1&quot;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;v2&quot;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;v3&quot;</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">test_df</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>| . | v1 | v2 | v3 | | :--- | ---: | ---: ---: | | 0 | 100 | 400 | 40 | | 1 | 200 | 200 | 60 | | 2 | 300 | 100 | 60 | | 3 | 400 | 250 | 10 |</p><p>데이터의 상관계수를 구하는 방법은 다음과 같습니다.</p><p><code>데이터프레임의 이름.corr(method=&#39;pearson&#39;)</code></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">corr <span class="token operator">=</span> test_df<span class="token punctuation">.</span>corr<span class="token punctuation">(</span>method <span class="token operator">=</span> <span class="token string">&#39;pearson&#39;</span><span class="token punctuation">)</span></span>
<span class="line">corr</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>| . | v1 | v2 | v3 | | :--- | ---: | ---: ---: | | v1 | 1.000000 | -0.568038 | 0.923381 | | v2 | -0.568038 | 1.000000 | -0.291397 | | v3 | 0.923381 | -0.291397 | 1.000000 |</p><h4 id="히트맵-그리기" tabindex="-1"><a class="header-anchor" href="#히트맵-그리기"><span>히트맵 그리기</span></a></h4><p>데이터프레임에서 <code>.values</code>를 하게되면 데이터프레임의 각 행이 마치 리스트 형태로 변환되어서 출력이 됩니다. 이를 뒤에 차트를 그릴 때, 입력으로 사용할 것입니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">corr<span class="token punctuation">.</span>values</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># array([[ 1.        , -0.56803756,  0.92338052],</span></span>
<span class="line"><span class="token comment">#        [-0.56803756,  1.        , -0.29139712],</span></span>
<span class="line"><span class="token comment">#        [ 0.92338052, -0.29139712,  1.        ]])</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>차트에 이름을 입력하기 위해서 다음과 같이 <code>column_names</code>라는 리스트를 만듭니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">column_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;ver1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ver2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ver3&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>일반적으로 상관계수 차트를 그릴 때는 <code>seaborn</code>에서 제공하는 <code>heatmap()</code>을 주로 사용합니다. <code>seaborn</code>을 <code>sns</code>이라는 이름으로 임포트하였다면, 기본적인 사용 방법은 다음과 같습니다.</p><p><code>sns.heatmap(데이터프레임의 상관계수 데이터)</code></p><p>아래 코드에 <code>heatmap</code>에서 사용하는 각종 추가적인 설정값에 대해서 주석을 달아두었습니다. 이 설정값들은 필수적인 입력이 아니며, 좀 더 예쁘게 차트를 그리기 위해서 여러분들이 추가적으로 조작하는 것들입니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 레이블의 폰트 사이즈를 조정</span></span>
<span class="line">sns<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>font_scale<span class="token operator">=</span><span class="token number">2.0</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">test_heatmap <span class="token operator">=</span> sns<span class="token punctuation">.</span>heatmap<span class="token punctuation">(</span>corr<span class="token punctuation">.</span>values<span class="token punctuation">,</span> <span class="token comment"># 데이터</span></span>
<span class="line">                          cbar <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token comment"># 오른쪽 컬러 막대 출력 여부</span></span>
<span class="line">                           annot <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token comment"># 차트에 숫자를 보여줄 것인지 여부</span></span>
<span class="line">                          annot_kws<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;size&#39;</span> <span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment"># 숫자 출력 시 숫자 크기 조절</span></span>
<span class="line">                           fmt <span class="token operator">=</span> <span class="token string">&#39;.2f&#39;</span><span class="token punctuation">,</span> <span class="token comment"># 숫자의 출력 소수점자리 개수 조절</span></span>
<span class="line">                           square <span class="token operator">=</span> <span class="token string">&#39;True&#39;</span><span class="token punctuation">,</span> <span class="token comment"># 차트를 정사각형으로 할 것인지</span></span>
<span class="line">                          yticklabels<span class="token operator">=</span>column_names<span class="token punctuation">,</span> <span class="token comment"># y축에 컬럼명 출력</span></span>
<span class="line">                          xticklabels<span class="token operator">=</span>column_names<span class="token punctuation">)</span> <span class="token comment"># x축에 컬럼명 출력</span></span>
<span class="line">plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172919/히트맵.PNG" alt="히트맵" tabindex="0" loading="lazy"><figcaption>히트맵</figcaption></figure><p>이번에는 <code>cbar</code>를 <code>True</code>로 해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 레이블의 폰트 사이즈를 조정</span></span>
<span class="line">sns<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>font_scale<span class="token operator">=</span><span class="token number">2.0</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">test_heatmap <span class="token operator">=</span> sns<span class="token punctuation">.</span>heatmap<span class="token punctuation">(</span>corr<span class="token punctuation">.</span>values<span class="token punctuation">,</span></span>
<span class="line">                           cbar <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span></span>
<span class="line">                           annot <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span></span>
<span class="line">                           annot_kws<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;size&#39;</span> <span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">                           fmt <span class="token operator">=</span> <span class="token string">&#39;.2f&#39;</span><span class="token punctuation">,</span></span>
<span class="line">                           square <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span></span>
<span class="line">                          yticklabels<span class="token operator">=</span>column_names<span class="token punctuation">,</span></span>
<span class="line">                          xticklabels<span class="token operator">=</span>column_names<span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172919/히트맵2.PNG" alt="히트맵2" tabindex="0" loading="lazy"><figcaption>히트맵2</figcaption></figure><p>각종 설정값이 어떻게 동작하는지 가장 쉽게 알 수 있는 방법은 해당 설정값을 지워서 재출력해보는 것입니다! 예를 들어서 <code>fmt = &#39;.2f&#39;</code>의 값을 <code>fmt = &#39;.3f&#39;</code>으로 바꿔서 재실행해보세요. 그러면 차트 위의 숫자가 소수점 셋 째자리까지 출력 될 것입니다.</p><p>다른 설정값에 대해서도 여러분들이 자유자재로 바꿔서 출력해보세요.</p><p>상관 분석을 시각화 할 수 있는 또 다른 방법을 <strong>산점도(scatter plot)</strong> 를 그리는 것입니다. 산점도는 좌표상에 점들을 표시하는 방법으로 두 개 변수 간의 관계를 나타내는 그래프 방법입니다. 변수 A가 증가할 때 변수 B 또한 증가하는 어떤 상관 관계가 있는지, 아니면 아무런 관계가 없는지 산점도를 통해서 확인해 볼 수 있습니다.</p><p><code>seaborn</code>을 <code>sns</code>란 이름으로 임포트하였다면, 산점도를 그리는 기본 방법은 다음과 같습니다. <code>pairplot</code>은 각 열의 조합에 대해서 산점도를 그리고, 같은 데이터가 만나는 대각선 영역에는 해당 데이터의 히스토그램을 그립니다.</p><p><code>sns.pairplot(데이터프레임)</code></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># whitegrid = 배경에 하얀 선을 넣는다.</span></span>
<span class="line">sns<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>style<span class="token operator">=</span><span class="token string">&#39;whitegrid&#39;</span><span class="token punctuation">)</span></span>
<span class="line">sns<span class="token punctuation">.</span>pairplot<span class="token punctuation">(</span>test_df<span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172919/페어플롯.PNG" alt="페어플롯" tabindex="0" loading="lazy"><figcaption>페어플롯</figcaption></figure><p>지금은 데이터가 너무 적어서 산점도를 해석하기에는 무리가 있습니다. 산점도의 해석은 주류 데이터에 대해서 진행해보겠습니다!</p><hr><h2 id="_08-응용-상관-관계-분석과-산점도" tabindex="-1"><a class="header-anchor" href="#_08-응용-상관-관계-분석과-산점도"><span>08. 응용! 상관 관계 분석과 산점도</span></a></h2><p>앞서 사용했던 동일한 데이터프레임인 <code>drink_df</code>를 사용합니다.</p><h3 id="데이터-로드-6" tabindex="-1"><a class="header-anchor" href="#데이터-로드-6"><span>데이터 로드</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd</span>
<span class="line"></span>
<span class="line">url <span class="token operator">=</span> <span class="token string">&#39;https://raw.githubusercontent.com/justmarkham/DAT8/master/data/drinks.csv&#39;</span></span>
<span class="line">drink_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span></span>
<span class="line">drink_df</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172655/drink_df.PNG" alt="drink_df" tabindex="0" loading="lazy"><figcaption>drink_df</figcaption></figure><h3 id="주류-데이터의-상관-계수" tabindex="-1"><a class="header-anchor" href="#주류-데이터의-상관-계수"><span>주류 데이터의 상관 계수</span></a></h3><p>주류 데이터의 각 특성(<code>feature</code>)에 대해서 상관계수를 계산하고, 이를 <code>seaborn</code>의 <code>heatmap</code>과 <code>pairplot</code>을 통해서 시각화해봅시다! 우선, &#39;<code>beer_servings</code>&#39;, &#39;<code>wine_servings</code>&#39; 두 특성 간의 상관계수를 계산해보겠습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># &#39;beer_servings&#39;, &#39;wine_servings&#39; 두 피처간의 상관계수를 계산합니다.</span></span>
<span class="line"><span class="token comment"># pearson은 상관계수를 구하는 계산 방법 중 하나를 의미하며, 가장 널리 쓰이는 방법입니다.</span></span>
<span class="line">corr <span class="token operator">=</span> drink_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;beer_servings&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wine_servings&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>corr<span class="token punctuation">(</span>method <span class="token operator">=</span> <span class="token string">&#39;pearson&#39;</span><span class="token punctuation">)</span></span>
<span class="line">corr</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172922/상관계수.PNG" alt="상관계수" tabindex="0" loading="lazy"><figcaption>상관계수</figcaption></figure><p>주류 데이터의 각 특성(<code>feature</code>)에 대해서 상관계수를 계산하고, 이를 <code>seaborn</code>의 heatmap과 <code>pairplot</code>을 통해서 시각화해봅시다! 우선, &#39;<code>beer_servings</code>&#39;, &#39;<code>wine_servings</code>&#39; 두 특성 간의 상관계수를 계산해보겠습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 피처간의 상관계수 행렬을 구합니다.</span></span>
<span class="line">cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;beer_servings&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;spirit_servings&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wine_servings&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;total_litres_of_pure_alcohol&#39;</span><span class="token punctuation">]</span></span>
<span class="line">corr <span class="token operator">=</span> drink_df<span class="token punctuation">[</span>cols<span class="token punctuation">]</span><span class="token punctuation">.</span>corr<span class="token punctuation">(</span>method <span class="token operator">=</span> <span class="token string">&#39;pearson&#39;</span><span class="token punctuation">)</span></span>
<span class="line">corr</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172922/상관계수2.PNG" alt="상관계수2" tabindex="0" loading="lazy"><figcaption>상관계수2</figcaption></figure><p>가장 상관계수 값이 높은 경우는 <code>beer_servings</code>와 <code>total_litres_of_pure_alcohold</code>의 상관계수 값으로 0.835839에 해당됩니다. 이를 <code>seaborn</code>의 <code>heatmap</code>을 통해서 시각화해봅시다. 우선 <code>heatmap</code>의 입력을 만들기 위해서 상관계수값에 <code>.values</code>를 적용시켜줍니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">corr<span class="token punctuation">.</span>values</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># array([[1.        , 0.45881887, 0.52717169, 0.83583863],</span></span>
<span class="line"><span class="token comment">#        [0.45881887, 1.        , 0.19479705, 0.65496818],</span></span>
<span class="line"><span class="token comment">#        [0.52717169, 0.19479705, 1.        , 0.66759834],</span></span>
<span class="line"><span class="token comment">#        [0.83583863, 0.65496818, 0.66759834, 1.        ]])</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>히트맵 차트의 <code>x</code>축과 <code>y</code>축에 각각의 레이블을 달아주기 위해서 다음의 리스트를 만들어줍니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">column_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;beer&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;spirit&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wine&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;alcohol&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>seaborn</code>의 <code>heatmap</code> 시각화를 진행해봅시다!</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns</span>
<span class="line"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 레이블의 폰트 사이즈를 조정</span></span>
<span class="line">sns<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>font_scale<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">)</span></span>
<span class="line">hm <span class="token operator">=</span> sns<span class="token punctuation">.</span>heatmap<span class="token punctuation">(</span>corr<span class="token punctuation">.</span>values<span class="token punctuation">,</span></span>
<span class="line">            cbar<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span></span>
<span class="line">            annot<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> </span>
<span class="line">            square<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span></span>
<span class="line">            fmt<span class="token operator">=</span><span class="token string">&#39;.2f&#39;</span><span class="token punctuation">,</span></span>
<span class="line">            annot_kws<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;size&#39;</span><span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            yticklabels<span class="token operator">=</span>column_names<span class="token punctuation">,</span></span>
<span class="line">            xticklabels<span class="token operator">=</span>column_names<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">plt<span class="token punctuation">.</span>tight_layout<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172922/상관계수3.PNG" alt="상관계수3" tabindex="0" loading="lazy"><figcaption>상관계수3</figcaption></figure><ul><li><code>cbar</code>는 오른쪽에 있는 막대(범주)를 표시하는 것입니다.</li><li><code>annot</code>는 상관계수를 표시합니다.</li><li><code>square</code>는 정사각형으로 지정하는 것이며, False로 설정 시 직사각형이 됩니다.</li><li><code>fmt</code>는 상관계수의 소수점 자리수를 지정합니다.</li><li><code>annot_kws</code>는 상관계수의 글자 크기를 지정합니다.</li><li><code>yticklabels</code>는 y축 레이블 값을 의미합니다.</li><li><code>xticklabels</code>는 x축 레이블 값을 의미합니다.</li></ul><p><code>alcohol</code>은 대체적으로 다른 특성들과 모두 상관 계수가 높습니다. 이미 시각화를 진행하기 전에도 확인한 내용이기는 하지만, 그 중에서도 0.84로 <code>beer</code>와 상관 계수값이 가장 높습니다. 앞서 확인하였을 때는 0.835839였지만, 여기서는 소수점 두 자리까지만 출력하면서 반올림되어 0.84로 출력된 것이라 보면 됩니다.</p><p>피어슨의 상관계수는 일반적으로,</p><ul><li>값이 -1.0 ~ -0.7 이면, 강한 음적 상관관계 값이 -0.7 ~ -0.3 이면, 뚜렷한 음적 상관관계</li><li>값이 -0.3 ~ -0.1 이면, 약한 음적 상관관계</li><li>값이 -0.1 ~ +0.1 이면, 없다고 할 수 있는 상관관계</li><li>값이 +0.1 ~ +0.3 이면, 약한 양적 상관관계</li><li>값이 +0.3 ~ +0.7 이면, 뚜렷한 양적 상관관계</li><li>값이 +0.7 ~ +1.0 이면, 강한 양적 상관관계 로 해석됩니다.</li></ul><h3 id="산점도" tabindex="-1"><a class="header-anchor" href="#산점도"><span>산점도</span></a></h3><p>주류 데이터의 산점도. 즉, <code>pairplot</code>을 확인해봅시다. <code>pairplot</code>은 데이터프레임을 인수로 받아 그리드(<code>grid</code>) 형태로 각 데이터 열의 조합에 대해 산점도를 그립니다. 같은 데이터가 만나는 대각선 영역에는 해당 데이터의 히스토그램을 그립니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 시각화 라이브러리를 이용한 피처간의 scatter plot을 출력합니다.</span></span>
<span class="line">sns<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>style<span class="token operator">=</span><span class="token string">&#39;whitegrid&#39;</span><span class="token punctuation">)</span></span>
<span class="line">sns<span class="token punctuation">.</span>pairplot<span class="token punctuation">(</span>drink_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;beer_servings&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;spirit_servings&#39;</span><span class="token punctuation">,</span> </span>
<span class="line">                     <span class="token string">&#39;wine_servings&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;total_litres_of_pure_alcohol&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172922/산점도.PNG" alt="산점도" tabindex="0" loading="lazy"><figcaption>산점도</figcaption></figure><hr><h2 id="_09-데이터-탐색하기-결측값-제거-시각화-통계-확인" tabindex="-1"><a class="header-anchor" href="#_09-데이터-탐색하기-결측값-제거-시각화-통계-확인"><span>09. 데이터 탐색하기 (결측값 제거, 시각화, 통계 확인)</span></a></h2><p>앞서 사용했던 동일한 데이터프레임인 drink_df를 사용합니다.</p><h3 id="데이터-로드-7" tabindex="-1"><a class="header-anchor" href="#데이터-로드-7"><span>데이터 로드</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd</span>
<span class="line"></span>
<span class="line">url <span class="token operator">=</span> <span class="token string">&#39;https://raw.githubusercontent.com/justmarkham/DAT8/master/data/drinks.csv&#39;</span></span>
<span class="line">drink_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span></span>
<span class="line">drink_df</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172655/drink_df.PNG" alt="drink_df" tabindex="0" loading="lazy"><figcaption>drink_df</figcaption></figure><h3 id="결측값-제거" tabindex="-1"><a class="header-anchor" href="#결측값-제거"><span>결측값 제거</span></a></h3><p>결측값은 탐색적 데이터 분석에서도, 그 후 더 나아가 머신 러닝 알고리즘을 통해 분석을 할 때에도 성능에 영향을 줄 수 있는 값입니다. 결측값은 <strong>아예 제거를 해주거나, 특정 값으로 채워주거나</strong> 크게 두 가지 선택을 해줄 수 있습니다.</p><p>제거할 때는 주로 <code>dropna()</code>를 쓰는 반면, 채워줄 때는 주로 <code>fillna()</code>를 사용합니다. 앞서 <code>continent</code>열에 결측값이 23개가 있는 것을 확인했었습니다. 여기서는 특정값으로 채우는 <code>fillna()</code>를 사용해보겠습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 결측 데이터를 특정값으로 채우는 방법은 .fillna()를 사용하는 것이다.</span></span>
<span class="line"><span class="token comment"># 이 경우 기타 값이라는 의미에서 &#39;ETC&#39;를 넣어준다.</span></span>
<span class="line">drink_df<span class="token punctuation">[</span><span class="token string">&#39;continent&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> drink_df<span class="token punctuation">[</span><span class="token string">&#39;continent&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">&#39;ETC&#39;</span><span class="token punctuation">)</span></span>
<span class="line">drink_df<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172958/continent_etc.PNG" alt="continent_etc" tabindex="0" loading="lazy"><figcaption>continent_etc</figcaption></figure><p><code>continent</code>열에 결측값이 있을 경우 &#39;ETC&#39;라는 값으로 채우도록 했습니다. 채우고 나서 랜덤으로 10개를 출력하도록 해보았는데, ETC란 값이 중간에 보입니다. 이제 결측값이 사라졌는지 앞서 배운 코드인 <code>isnull().sum()</code>으로 확인해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">drink_df<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># country                         0</span></span>
<span class="line"><span class="token comment"># beer_servings                   0</span></span>
<span class="line"><span class="token comment"># spirit_servings                 0</span></span>
<span class="line"><span class="token comment"># wine_servings                   0</span></span>
<span class="line"><span class="token comment"># total_litres_of_pure_alcohol    0</span></span>
<span class="line"><span class="token comment"># continent                       0</span></span>
<span class="line"><span class="token comment"># dtype: int64</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이제 <code>continent</code> 열에는 결측값이 존재하지 않습니다.</p><h3 id="파이차트-그리기" tabindex="-1"><a class="header-anchor" href="#파이차트-그리기"><span>파이차트 그리기</span></a></h3><p>파이 차트를 그리려면</p><ul><li>파이 차트로 사용할 데이터의 이름이 담긴 리스트,</li><li>그리고 해당 이름에 해당하는 데이터의 값이 담긴 리스트</li></ul><p>이 두 가지가 필요합니다. 여기서는 <code>continent</code>에 대해서 파이차트를 그려보고자 합니다. 파이 차트의 값으로는 <code>continent</code>에 있는 각 값들의 개수를 사용하고자 하구요. <code>continent</code> 열에 대해서 <code>value_counts()</code>를 사용하였을 때의 결과를 출력해보고, 타입을 확인해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">drink_df<span class="token punctuation">[</span><span class="token string">&#39;continent&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># AF     53</span></span>
<span class="line"><span class="token comment"># EU     45</span></span>
<span class="line"><span class="token comment"># AS     44</span></span>
<span class="line"><span class="token comment"># ETC    23</span></span>
<span class="line"><span class="token comment"># OC     16</span></span>
<span class="line"><span class="token comment"># SA     12</span></span>
<span class="line"><span class="token comment"># Name: continent, dtype: int64</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">type</span><span class="token punctuation">(</span>drink_df<span class="token punctuation">[</span><span class="token string">&#39;continent&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># pandas.core.series.Series</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>인덱스에는 <code>continents</code>의 이름, 그리고 실제 값 부분에는 해당 <code>continents</code>에 있는 값들을 각각 카운트한 값이 들어가있습니다. 인덱스는 <code>index</code>로 접근하고 값에 대해서는 <code>values</code>로 접근하므로 각각 접근 후에 리스트로 값을 변환하는 <code>tolist()</code>를 사용해줍니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">pie_labels <span class="token operator">=</span> drink_df<span class="token punctuation">[</span><span class="token string">&#39;continent&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">pie_values <span class="token operator">=</span> drink_df<span class="token punctuation">[</span><span class="token string">&#39;continent&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>pie_labels<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>pie_values<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># [&#39;AF&#39;, &#39;EU&#39;, &#39;AS&#39;, &#39;ETC&#39;, &#39;OC&#39;, &#39;SA&#39;]</span></span>
<span class="line"><span class="token comment"># [53, 45, 44, 23, 16, 12]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이제 파이 차트를 그리기 위해 필요한 두 가지를 얻었습니다. 파이 차트를 그리는 방법은 <code>plt.pie()</code>를 사용합니다. <code>autopct</code>는 소수점을 몇 개까지 출력할지를 정하기 위한 값입니다.</p><p>사용 방법은 다음과 같습니다.</p><p><code>plt.pie(데이터의 실질적인 값, labels=데이터의 레이블 리스트)</code></p><p><code>autopct</code>는 소수점을 몇 개까지 출력할지를 정하기 위한 값입니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">plt<span class="token punctuation">.</span>pie<span class="token punctuation">(</span>pie_values<span class="token punctuation">,</span> labels<span class="token operator">=</span>pie_labels<span class="token punctuation">,</span> autopct<span class="token operator">=</span><span class="token string">&#39;%.02f%%&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;Percentage of each continent&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172958/파이차트.PNG" alt="파이차트" tabindex="0" loading="lazy"><figcaption>파이차트</figcaption></figure><h3 id="groupby를-이용한-통계-확인" tabindex="-1"><a class="header-anchor" href="#groupby를-이용한-통계-확인"><span><code>GroupBy</code>를 이용한 통계 확인</span></a></h3><p><code>GroupBy</code>는 특정 값을 기준으로 그룹핑한 후에 그룹 별로 통계적인 수치 정보를 구할 수 있도록 하는 방법입니다. 사용 방법은 다음과 같습니다.</p><p><code>데이터프레임의 이름.groupby(&#39;그룹핑 기준이 되는 열&#39;)[&#39;보고자 하는 열&#39;].통계 함수</code></p><p><code>GroupBy</code>를 통해서 수치 정보를 계산해봅시다.</p><ul><li>어떤 대륙이 평균적으로 맥주를 더 먹을까?</li></ul><p>대륙에 대한 열은 <code>continent</code>에 있습니다. 그리고 맥주의 소비량은 <code>beer_servings</code> 열입니다.</p><p>평균을 구하는 함수는 <code>mean()</code>이므로 다음과 같이 사용합니다.</p><p>어떤 대륙이 평균적으로 맥주를 더 먹을까요?</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">drink_df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">&#39;continent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;beer_servings&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># continent</span></span>
<span class="line"><span class="token comment"># AF      61.471698</span></span>
<span class="line"><span class="token comment"># AS      37.045455</span></span>
<span class="line"><span class="token comment"># ETC    145.434783</span></span>
<span class="line"><span class="token comment"># EU     193.777778</span></span>
<span class="line"><span class="token comment"># OC      89.687500</span></span>
<span class="line"><span class="token comment"># SA     175.083333</span></span>
<span class="line"><span class="token comment"># Name: beer_servings, dtype: float64</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">type</span><span class="token punctuation">(</span>drink_df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">&#39;continent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;beer_servings&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># pandas.core.series.Series</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>각 대륙 별로 와인 소비에 대한 통계 정보를 출력해볼까요?</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">drink_df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">&#39;continent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;wine_servings&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172958/wine.PNG" alt="wine" tabindex="0" loading="lazy"><figcaption>wine</figcaption></figure><p>모든 컬럼에 대해서 대륙별로 평균 알콜 소비량을 출력해볼까요</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">drink_df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">&#39;continent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172958/alcohol_usage.PNG" alt="alcohol_usage" tabindex="0" loading="lazy"><figcaption>alcohol_usage</figcaption></figure><p>전체 평균보다 많은 알코올을 섭취하는 대륙을 구해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">total_mean <span class="token operator">=</span> drink_df<span class="token punctuation">.</span>total_litres_of_pure_alcohol<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">continent_mean <span class="token operator">=</span> drink_df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">&#39;continent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">&#39;total_litres_of_pure_alcohol&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">continent_over_mean <span class="token operator">=</span> continent_mean<span class="token punctuation">[</span>continent_mean <span class="token operator">&gt;=</span> total_mean<span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>continent_over_mean<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># continent</span></span>
<span class="line"><span class="token comment"># ETC    5.995652</span></span>
<span class="line"><span class="token comment"># EU     8.617778</span></span>
<span class="line"><span class="token comment"># SA     6.308333</span></span>
<span class="line"><span class="token comment"># Name: total_litres_of_pure_alcohol, dtype: float64</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>평균 <code>wine_servings</code>이 가장 높은 대륙을 구해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">beer_continent <span class="token operator">=</span> drink_df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">&#39;continent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>wine_servings<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>idxmax<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>beer_continent<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_10-quiz" tabindex="-1"><a class="header-anchor" href="#_10-quiz"><span>10. Quiz</span></a></h2><h3 id="quiz-1" tabindex="-1"><a class="header-anchor" href="#quiz-1"><span>Quiz 1</span></a></h3><p><code>sklearn</code>은 머신 러닝 패키지로 각종 머신 러닝 데이터셋도 제공하고 있습니다. 이번 퀴즈에서 사용할 머신 러닝 데이터셋은 iris data(붓꽃 데이터)입니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 퀴즈에 필요한 패키지는 아래의 두 가지가 전부가 아닙니다.</span></span>
<span class="line"><span class="token comment"># 여러분들의 필요에 따라서 패키지를 지속 추가하셔도 됩니다.</span></span>
<span class="line"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd</span>
<span class="line"><span class="token keyword">from</span> sklearn <span class="token keyword">import</span> datasets</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 붓꽃 데이터 로드</span></span>
<span class="line">iris_data <span class="token operator">=</span> datasets<span class="token punctuation">.</span>load_iris<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>iris</code> 데이터셋의 각 열은 다음과 같습니다.</p><ul><li>Sepal Length : 꽃받침의 길이 정보</li><li>Sepal Width : 꽃받침의 너비 정보</li><li>Petal Length : 꽃잎의 길이 정보</li><li>Petal Width : 꽃잎의 너비 정보</li></ul><p>이러한 4개의 특성을 알려줄테니</p><p>꽃의 종류를 예측해보라는 것이 iris 데이터셋이 제시하는 머신러닝 문제입니다.</p><ul><li>Species 꽃의 종류 정보 : setosa / versicolor / virginica 의 3종류.</li></ul><p>우선 4개의 특성에 해당되는 데이터를 df_data에 로드합니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">df_data <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>iris_data<span class="token punctuation">[</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span>iris_data<span class="token punctuation">[</span><span class="token string">&#39;feature_names&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">df_data<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172960/sample.PNG" alt="sample" tabindex="0" loading="lazy"><figcaption>sample</figcaption></figure><p>4개의 열이 출력되는데, 각각 꽃받침의 길이 정보, 꽃받침의 너비 정보, 꽃잎의 길이 정보, 꽃잎의 너비 정보에 해당됩니다. iris 데이터(붓꽃 데이터)는 이 4개의 특성만 보고 이 꽃이 어떤 품종의 붓꽃인지를 예측해야하는 머신 러닝 문제를 위한 데이터셋입니다. 정답에 해당되는 레이블을 df_target에 로드합니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">df_target <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>iris_data<span class="token punctuation">[</span><span class="token string">&#39;target&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;species&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">df_target<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172960/species.PNG" alt="species" tabindex="0" loading="lazy"><figcaption>species</figcaption></figure><p>이 시리즈에는 어떤 값들이 있는지 출력해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 값의 종류를 전부 출력</span></span>
<span class="line">df_target<span class="token punctuation">[</span><span class="token string">&#39;species&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>숫자가 0, 1, 2가 나오는데 각각이 의미하는 품종은 다음과 같습니다.</p><ul><li>0 = setosa</li><li>1 = versicolor</li><li>2 = virginica</li></ul><p><code>pd.concat()</code>을 사용하면 위 데이터프레임과 시리즈를 하나의 데이터프레임으로 합치는 것이 가능합니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df_data<span class="token punctuation">,</span> df_target<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">df</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/172960/퀴즈.PNG" alt="퀴즈" tabindex="0" loading="lazy"><figcaption>퀴즈</figcaption></figure><p>이렇게 150개의 행과 5개의 열을 가진 붓꽃 데이터가 데이터프레임에 로드된 상태입니다.</p><p>총 150개의 붓꽃이 있는데, 종류는 3개였고,</p><p>각 붓꽃의 꽃받침의 길이와 너비, 꽃잎의 길이와 너비를 기록한 데이터셋인 것이죠.</p><p>여러분들의 퀴즈는 이 붓꽃 데이터를 가지고 데이터프레임의 기능(조건부 필터링, 상관 계수 분석 등), Matplotlib, Seaborn을 사용하여 각종 통계 정보를 구하고, 시각화를 해보는 것입니다. <strong>단 하나의 정답이 존재하는 것은 아닙니다.</strong> 여러분들이 배운 내용들을 복습하여 최대한 성실하게 퀴즈를 수행해보세요.</p><hr>`,169);function $(d,H){const t=o("router-link"),r=o("VPCard"),c=o("Tabs");return b(),m("div",null,[n("h1",_,[n("a",y,[n("span",null,k(d.$frontmatter.title)+" 관련",1)])]),n("nav",f,[n("ul",null,[n("li",null,[e(t,{to:"#_01-데이터프레임의-출력"},{default:a(()=>[s("01. 데이터프레임의 출력")]),_:1}),n("ul",null,[n("li",null,[e(t,{to:"#데이터-로드"},{default:a(()=>[s("데이터 로드")]),_:1})]),n("li",null,[e(t,{to:"#데이터프레임의-출력"},{default:a(()=>[s("데이터프레임의 출력")]),_:1})]),n("li",null,[e(t,{to:"#데이터프레임의-인덱스"},{default:a(()=>[s("데이터프레임의 인덱스")]),_:1})]),n("li",null,[e(t,{to:"#데이터프레임의-데이터타입"},{default:a(()=>[s("데이터프레임의 데이터타입")]),_:1})]),n("li",null,[e(t,{to:"#데이터프레임의-크기"},{default:a(()=>[s("데이터프레임의 크기")]),_:1})]),n("li",null,[e(t,{to:"#데이터프레임의-행렬-변환"},{default:a(()=>[s("데이터프레임의 행렬 변환")]),_:1})]),n("li",null,[e(t,{to:"#데이터프레임의-info"},{default:a(()=>[s("데이터프레임의 info")]),_:1})]),n("li",null,[e(t,{to:"#데이터프레임의-결측값-null"},{default:a(()=>[s("데이터프레임의 결측값(Null)")]),_:1})])])]),n("li",null,[e(t,{to:"#_02-데이터프레임의-열-접근"},{default:a(()=>[s("02. 데이터프레임의 열 접근")]),_:1}),n("ul",null,[n("li",null,[e(t,{to:"#데이터-로드-1"},{default:a(()=>[s("데이터 로드")]),_:1})]),n("li",null,[e(t,{to:"#데이터프레임의-열-접근"},{default:a(()=>[s("데이터프레임의 열 접근")]),_:1})])])]),n("li",null,[e(t,{to:"#_03-특성의-수치-정보-파악하기"},{default:a(()=>[s("03. 특성의 수치 정보 파악하기")]),_:1}),n("ul",null,[n("li",null,[e(t,{to:"#데이터-로드-2"},{default:a(()=>[s("데이터 로드")]),_:1})]),n("li",null,[e(t,{to:"#특성-features"},{default:a(()=>[s("특성(features)")]),_:1})]),n("li",null,[e(t,{to:"#특성의-수치-정보-파악하기"},{default:a(()=>[s("특성의 수치 정보 파악하기")]),_:1})])])]),n("li",null,[e(t,{to:"#_04-조건부-로직"},{default:a(()=>[s("04. 조건부 로직")]),_:1}),n("ul",null,[n("li",null,[e(t,{to:"#데이터-로드-3"},{default:a(()=>[s("데이터 로드")]),_:1})]),n("li",null,[e(t,{to:"#조건부-로직"},{default:a(()=>[s("조건부 로직")]),_:1})])])]),n("li",null,[e(t,{to:"#_05-and-or-not-연산자-사용하기"},{default:a(()=>[s("05. AND, OR, NOT 연산자 사용하기")]),_:1}),n("ul",null,[n("li",null,[e(t,{to:"#데이터-로드-4"},{default:a(()=>[s("데이터 로드")]),_:1})]),n("li",null,[e(t,{to:"#and-or-not-연산자-사용하기"},{default:a(()=>[s("AND, OR, NOT 연산자 사용하기")]),_:1})])])]),n("li",null,[e(t,{to:"#_06-로직과-수치-정보의-결합-정렬"},{default:a(()=>[s("06. 로직과 수치 정보의 결합 & 정렬")]),_:1}),n("ul",null,[n("li",null,[e(t,{to:"#데이터-로드-5"},{default:a(()=>[s("데이터 로드")]),_:1})]),n("li",null,[e(t,{to:"#로직과-수치-정보의-결합"},{default:a(()=>[s("로직과 수치 정보의 결합")]),_:1})]),n("li",null,[e(t,{to:"#정렬"},{default:a(()=>[s("정렬")]),_:1})])])]),n("li",null,[e(t,{to:"#_07-상관-관계-분석"},{default:a(()=>[s("07. 상관 관계 분석")]),_:1})]),n("li",null,[e(t,{to:"#_08-응용-상관-관계-분석과-산점도"},{default:a(()=>[s("08. 응용! 상관 관계 분석과 산점도")]),_:1}),n("ul",null,[n("li",null,[e(t,{to:"#데이터-로드-6"},{default:a(()=>[s("데이터 로드")]),_:1})]),n("li",null,[e(t,{to:"#주류-데이터의-상관-계수"},{default:a(()=>[s("주류 데이터의 상관 계수")]),_:1})]),n("li",null,[e(t,{to:"#산점도"},{default:a(()=>[s("산점도")]),_:1})])])]),n("li",null,[e(t,{to:"#_09-데이터-탐색하기-결측값-제거-시각화-통계-확인"},{default:a(()=>[s("09. 데이터 탐색하기 (결측값 제거, 시각화, 통계 확인)")]),_:1}),n("ul",null,[n("li",null,[e(t,{to:"#데이터-로드-7"},{default:a(()=>[s("데이터 로드")]),_:1})]),n("li",null,[e(t,{to:"#결측값-제거"},{default:a(()=>[s("결측값 제거")]),_:1})]),n("li",null,[e(t,{to:"#파이차트-그리기"},{default:a(()=>[s("파이차트 그리기")]),_:1})]),n("li",null,[e(t,{to:"#groupby를-이용한-통계-확인"},{default:a(()=>[s("GroupBy를 이용한 통계 확인")]),_:1})])])]),n("li",null,[e(t,{to:"#_10-quiz"},{default:a(()=>[s("10. Quiz")]),_:1}),n("ul",null,[n("li",null,[e(t,{to:"#quiz-1"},{default:a(()=>[s("Quiz 1")]),_:1})])])])])]),x,e(r,v(g({title:"04. 판다스 데이터프레임 기초 이해",desc:"금융 데이터 분석을 위한 파이썬 - WikiDocs",link:"https://wikidocs.net/172654",logo:"https://wikidocs.net/static/img/favicon.ico",background:"rgba(255,255,255,0.2)"})),null,16),w,e(c,{id:"35",data:[{id:"상위 5개"},{id:"상위 n개"},{id:"하위 5개"},{id:"랜덤 10개"}],active:0},{title0:a(({value:p,isActive:i})=>[s("상위 5개")]),title1:a(({value:p,isActive:i})=>[s("상위 n개")]),title2:a(({value:p,isActive:i})=>[s("하위 5개")]),title3:a(({value:p,isActive:i})=>[s("랜덤 10개")]),tab0:a(({value:p,isActive:i})=>[N,j,A]),tab1:a(({value:p,isActive:i})=>[E,P,G]),tab2:a(({value:p,isActive:i})=>[B,D,z]),tab3:a(({value:p,isActive:i})=>[T,C,F]),_:1}),S,e(c,{id:"309",data:[{id:"평균"},{id:"최대값"},{id:"최소값"},{id:"합계"},{id:"카운트"}],active:0},{title0:a(({value:p,isActive:i})=>[s("평균")]),title1:a(({value:p,isActive:i})=>[s("최대값")]),title2:a(({value:p,isActive:i})=>[s("최소값")]),title3:a(({value:p,isActive:i})=>[s("합계")]),title4:a(({value:p,isActive:i})=>[s("카운트")]),tab0:a(({value:p,isActive:i})=>[q]),tab1:a(({value:p,isActive:i})=>[O]),tab2:a(({value:p,isActive:i})=>[R]),tab3:a(({value:p,isActive:i})=>[U]),tab4:a(({value:p,isActive:i})=>[L]),_:1}),Q,e(c,{id:"523",data:[{id:"NOT 조건"},{id:"AND 조건"}],active:0},{title0:a(({value:p,isActive:i})=>[s("NOT 조건")]),title1:a(({value:p,isActive:i})=>[s("AND 조건")]),tab0:a(({value:p,isActive:i})=>[V,K,M]),tab1:a(({value:p,isActive:i})=>[Z,I,W,J]),_:1}),Y])}const sn=u(h,[["render",$],["__file","04.html.vue"]]),an=JSON.parse('{"path":"/py/finance/04.html","title":"04. 판다스 데이터프레임 기초 이해","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"04. 판다스 데이터프레임 기초 이해","description":"Finance with Python > 04. 판다스 데이터프레임 기초 이해","category":["Python"],"tag":["crashcourse","python","py","google","google-colab","jupyter-notebook","numpy","pandas","ipython"],"head":[[{"meta":null},{"property":"og:title","content":"Finance with Python > 04. 판다스 데이터프레임 기초 이해"},{"property":"og:description","content":"04. 판다스 데이터프레임 기초 이해"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/py/finance/04.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/py/finance/04.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"04. 판다스 데이터프레임 기초 이해"}],["meta",{"property":"og:description","content":"Finance with Python > 04. 판다스 데이터프레임 기초 이해"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://wikidocs.net/images/page/172655/drink_df.PNG"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"py"}],["meta",{"property":"article:tag","content":"google"}],["meta",{"property":"article:tag","content":"google-colab"}],["meta",{"property":"article:tag","content":"jupyter-notebook"}],["meta",{"property":"article:tag","content":"numpy"}],["meta",{"property":"article:tag","content":"pandas"}],["meta",{"property":"article:tag","content":"ipython"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"04. 판다스 데이터프레임 기초 이해\\",\\"image\\":[\\"https://wikidocs.net/images/page/172655/drink_df.PNG\\",\\"https://wikidocs.net/images/page/172655/head.PNG\\",\\"https://wikidocs.net/images/page/172655/head.PNG\\",\\"https://wikidocs.net/images/page/172655/tail.PNG\\",\\"https://wikidocs.net/images/page/172655/sample10.PNG\\",\\"https://wikidocs.net/images/page/172655/drink_df.PNG\\",\\"https://wikidocs.net/images/page/172724/drink_df_columns.PNG\\",\\"https://wikidocs.net/images/page/172724/drink_df_columns.PNG\\",\\"https://wikidocs.net/images/page/172655/drink_df.PNG\\",\\"https://wikidocs.net/images/page/172729/drink_df_describe.PNG\\",\\"https://wikidocs.net/images/page/172655/drink_df.PNG\\",\\"https://wikidocs.net/images/page/172780/dataframe.PNG\\",\\"https://wikidocs.net/images/page/172780/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%94%84%EB%A0%88%EC%9E%84.PNG\\",\\"https://wikidocs.net/images/page/172780/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%94%84%EB%A0%88%EC%9E%842.PNG\\",\\"https://wikidocs.net/images/page/172780/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%94%84%EB%A0%88%EC%9E%843.PNG\\",\\"https://wikidocs.net/images/page/172780/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%94%84%EB%A0%88%EC%9E%844.PNG\\",\\"https://wikidocs.net/images/page/172655/drink_df.PNG\\",\\"https://wikidocs.net/images/page/172785/not.PNG\\",\\"https://wikidocs.net/images/page/172785/and.PNG\\",\\"https://wikidocs.net/images/page/172655/drink_df.PNG\\",\\"https://wikidocs.net/images/page/172788/%EC%A0%95%EB%A0%AC.PNG\\",\\"https://wikidocs.net/images/page/172788/%EB%82%B4%EB%A6%BC%EC%B0%A8%EC%88%9C.PNG\\",\\"https://wikidocs.net/images/page/172788/%EC%A0%95%EB%A0%AC2.PNG\\",\\"https://wikidocs.net/images/page/172919/%ED%9E%88%ED%8A%B8%EB%A7%B5.PNG\\",\\"https://wikidocs.net/images/page/172919/%ED%9E%88%ED%8A%B8%EB%A7%B52.PNG\\",\\"https://wikidocs.net/images/page/172919/%ED%8E%98%EC%96%B4%ED%94%8C%EB%A1%AF.PNG\\",\\"https://wikidocs.net/images/page/172655/drink_df.PNG\\",\\"https://wikidocs.net/images/page/172922/%EC%83%81%EA%B4%80%EA%B3%84%EC%88%98.PNG\\",\\"https://wikidocs.net/images/page/172922/%EC%83%81%EA%B4%80%EA%B3%84%EC%88%982.PNG\\",\\"https://wikidocs.net/images/page/172922/%EC%83%81%EA%B4%80%EA%B3%84%EC%88%983.PNG\\",\\"https://wikidocs.net/images/page/172922/%EC%82%B0%EC%A0%90%EB%8F%84.PNG\\",\\"https://wikidocs.net/images/page/172655/drink_df.PNG\\",\\"https://wikidocs.net/images/page/172958/continent_etc.PNG\\",\\"https://wikidocs.net/images/page/172958/%ED%8C%8C%EC%9D%B4%EC%B0%A8%ED%8A%B8.PNG\\",\\"https://wikidocs.net/images/page/172958/wine.PNG\\",\\"https://wikidocs.net/images/page/172958/alcohol_usage.PNG\\",\\"https://wikidocs.net/images/page/172960/sample.PNG\\",\\"https://wikidocs.net/images/page/172960/species.PNG\\",\\"https://wikidocs.net/images/page/172960/%ED%80%B4%EC%A6%88.PNG\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"01. 데이터프레임의 출력","slug":"_01-데이터프레임의-출력","link":"#_01-데이터프레임의-출력","children":[{"level":3,"title":"데이터 로드","slug":"데이터-로드","link":"#데이터-로드","children":[]},{"level":3,"title":"데이터프레임의 출력","slug":"데이터프레임의-출력","link":"#데이터프레임의-출력","children":[]},{"level":3,"title":"데이터프레임의 인덱스","slug":"데이터프레임의-인덱스","link":"#데이터프레임의-인덱스","children":[]},{"level":3,"title":"데이터프레임의 데이터타입","slug":"데이터프레임의-데이터타입","link":"#데이터프레임의-데이터타입","children":[]},{"level":3,"title":"데이터프레임의 크기","slug":"데이터프레임의-크기","link":"#데이터프레임의-크기","children":[]},{"level":3,"title":"데이터프레임의 행렬 변환","slug":"데이터프레임의-행렬-변환","link":"#데이터프레임의-행렬-변환","children":[]},{"level":3,"title":"데이터프레임의 info","slug":"데이터프레임의-info","link":"#데이터프레임의-info","children":[]},{"level":3,"title":"데이터프레임의 결측값(Null)","slug":"데이터프레임의-결측값-null","link":"#데이터프레임의-결측값-null","children":[]}]},{"level":2,"title":"02. 데이터프레임의 열 접근","slug":"_02-데이터프레임의-열-접근","link":"#_02-데이터프레임의-열-접근","children":[{"level":3,"title":"데이터 로드","slug":"데이터-로드-1","link":"#데이터-로드-1","children":[]},{"level":3,"title":"데이터프레임의 열 접근","slug":"데이터프레임의-열-접근","link":"#데이터프레임의-열-접근","children":[]}]},{"level":2,"title":"03. 특성의 수치 정보 파악하기","slug":"_03-특성의-수치-정보-파악하기","link":"#_03-특성의-수치-정보-파악하기","children":[{"level":3,"title":"데이터 로드","slug":"데이터-로드-2","link":"#데이터-로드-2","children":[]},{"level":3,"title":"특성(features)","slug":"특성-features","link":"#특성-features","children":[]},{"level":3,"title":"특성의 수치 정보 파악하기","slug":"특성의-수치-정보-파악하기","link":"#특성의-수치-정보-파악하기","children":[]}]},{"level":2,"title":"04. 조건부 로직","slug":"_04-조건부-로직","link":"#_04-조건부-로직","children":[{"level":3,"title":"데이터 로드","slug":"데이터-로드-3","link":"#데이터-로드-3","children":[]},{"level":3,"title":"조건부 로직","slug":"조건부-로직","link":"#조건부-로직","children":[]}]},{"level":2,"title":"05. AND, OR, NOT 연산자 사용하기","slug":"_05-and-or-not-연산자-사용하기","link":"#_05-and-or-not-연산자-사용하기","children":[{"level":3,"title":"데이터 로드","slug":"데이터-로드-4","link":"#데이터-로드-4","children":[]},{"level":3,"title":"AND, OR, NOT 연산자 사용하기","slug":"and-or-not-연산자-사용하기","link":"#and-or-not-연산자-사용하기","children":[]}]},{"level":2,"title":"06. 로직과 수치 정보의 결합 & 정렬","slug":"_06-로직과-수치-정보의-결합-정렬","link":"#_06-로직과-수치-정보의-결합-정렬","children":[{"level":3,"title":"데이터 로드","slug":"데이터-로드-5","link":"#데이터-로드-5","children":[]},{"level":3,"title":"로직과 수치 정보의 결합","slug":"로직과-수치-정보의-결합","link":"#로직과-수치-정보의-결합","children":[]},{"level":3,"title":"정렬","slug":"정렬","link":"#정렬","children":[]}]},{"level":2,"title":"07. 상관 관계 분석","slug":"_07-상관-관계-분석","link":"#_07-상관-관계-분석","children":[]},{"level":2,"title":"08. 응용! 상관 관계 분석과 산점도","slug":"_08-응용-상관-관계-분석과-산점도","link":"#_08-응용-상관-관계-분석과-산점도","children":[{"level":3,"title":"데이터 로드","slug":"데이터-로드-6","link":"#데이터-로드-6","children":[]},{"level":3,"title":"주류 데이터의 상관 계수","slug":"주류-데이터의-상관-계수","link":"#주류-데이터의-상관-계수","children":[]},{"level":3,"title":"산점도","slug":"산점도","link":"#산점도","children":[]}]},{"level":2,"title":"09. 데이터 탐색하기 (결측값 제거, 시각화, 통계 확인)","slug":"_09-데이터-탐색하기-결측값-제거-시각화-통계-확인","link":"#_09-데이터-탐색하기-결측값-제거-시각화-통계-확인","children":[{"level":3,"title":"데이터 로드","slug":"데이터-로드-7","link":"#데이터-로드-7","children":[]},{"level":3,"title":"결측값 제거","slug":"결측값-제거","link":"#결측값-제거","children":[]},{"level":3,"title":"파이차트 그리기","slug":"파이차트-그리기","link":"#파이차트-그리기","children":[]},{"level":3,"title":"GroupBy를 이용한 통계 확인","slug":"groupby를-이용한-통계-확인","link":"#groupby를-이용한-통계-확인","children":[]}]},{"level":2,"title":"10. Quiz","slug":"_10-quiz","link":"#_10-quiz","children":[{"level":3,"title":"Quiz 1","slug":"quiz-1","link":"#quiz-1","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":7.38,"words":2214},"filePathRelative":"py/finance/04.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{sn as comp,an as data};
