import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as m,a as n,t as h,b as a,w as o,n as p,g as l,d as s,e,r,o as v}from"./app-U_bew1in.js";const w={},g={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},b={class:"table-of-contents"},y=n("hr",null,null,-1),x=e('<h2 id="project-19-part-2" tabindex="-1"><a class="header-anchor" href="#project-19-part-2"><span>Project 19, part 2</span></a></h2><p>Today we’re going to implement the first half of our program, which means we’ll get a list of ski resorts, a detail view to show more information, and a <code>NavigationView</code> that can show them side by side. That by itself shouldn’t present a problem for you, but along the way you’ll also learn about loading static example data from the bundle, controlling how <code>NavigationView</code> should show primary and secondary views on iPhone, and even how to format lists of strings more neatly.</p><p>Although you already know so much of what is needed to make this code work, we’re still here on day 97 introducing new things to learn. I hope you’re not discouraged by that – learning is an important skill, and in programming as well as many other industries you can find yourself constantly trying new things throughout your whole career. That might feel hard at times, but as the Spanish painter Pablo Picasso once said, “I am always doing that which I cannot do, in order that I may learn how to do it.”</p><p>So, keep learning and be proud to <em>say</em> you’re still learning – it’s an important skill to have!</p><p><strong>Today you have four topics to work through, in which you’ll learn about build our primary and secondary views, show them side by side in a <code>NavigationView</code>, learn an improved way to format lists, and more.</strong></p><h3 id="building-a-primary-list-of-items" tabindex="-1"><a class="header-anchor" href="#building-a-primary-list-of-items"><span>Building a primary list of items</span></a></h3>',6),S={class:"hint-container details"},V=n("summary",null,"Building a primary list of items",-1),_=n("p",null,[s("In this app we’re going to display two views side by side, just like Apple’s Mail and Notes apps. In SwiftUI this is done by placing two views into a "),n("code",null,"NavigationView"),s(", then using a "),n("code",null,"NavigationLink"),s(" in the primary view to control what’s visible in the secondary view.")],-1),T=n("p",null,"So, we’re going to start off our project by building the primary view for our app, which will show a list of all ski resorts, along with which country they are from and how many ski runs it has – how many pistes you can ski down, sometimes called “trails” or just “slopes”.",-1),I=n("code",null,"resorts.json",-1),j=n("p",null,[s("To get our list up and running quickly, we need to define a simple "),n("code",null,"Resort"),s(" struct that can be loaded from our JSON. That means it needs to conform to "),n("code",null,"Codable"),s(", but to make it easier to use in SwiftUI we’ll also make it conform to "),n("code",null,"Identifiable"),s(". The actual data itself is mostly just strings andCodable integers, but there’s also a string array called "),n("code",null,"facilities"),s(" that describe what else there is on the resort – I should add that this data is mostly fictional, so don’t try to use it in a real app!")],-1),q=n("code",null,"Resort.swift",-1),R=e(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Resort</span><span class="token punctuation">:</span> <span class="token class-name">Codable</span><span class="token punctuation">,</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> id<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">let</span> country<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">let</span> description<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">let</span> imageCredit<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">let</span> price<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line">    <span class="token keyword">let</span> size<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line">    <span class="token keyword">let</span> snowDepth<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line">    <span class="token keyword">let</span> elevation<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line">    <span class="token keyword">let</span> runs<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line">    <span class="token keyword">let</span> facilities<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As usual, it’s a good idea to add an example value to your model so that it’s easier to show working data in your designs. This time, though, there are quite a few fields to work with and it’s helpful if they have real data, so I don’t really want to create one by hand.</p>`,2),N=n("code",null,"Bundle-Decodable.swift",-1),P=n("code",null,"Bundle-Decodable.swift",-1),D=e(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">Bundle</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">decode</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Decodable</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> file<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">T</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">guard</span> <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>forResource<span class="token punctuation">:</span> file<span class="token punctuation">,</span> withExtension<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Failed to locate </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">file</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> in bundle.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">guard</span> <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> <span class="token class-name">Data</span><span class="token punctuation">(</span>contentsOf<span class="token punctuation">:</span> url<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Failed to load </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">file</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> from bundle.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">let</span> decoder <span class="token operator">=</span> <span class="token class-name">JSONDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">guard</span> <span class="token keyword">let</span> loaded <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> decoder<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> data<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">fatalError</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Failed to decode </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">file</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> from bundle.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> loaded</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With that in place, we can add some properties to <code>Resort</code> to store our example data, and there are two options here. The first option is to add two static properties: one to load all resorts into an array, and one to store the first item in that array, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">let</span> allResorts<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Resort</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Bundle</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;resorts.json&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">let</span> example <span class="token operator">=</span> allResorts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>The second is to collapse all that down to a single line of code. This requires a little bit of gentle typecasting because our <code>decode()</code> extension method needs to know what type of data it’s decoding:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">let</span> example <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Bundle</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;resorts.json&quot;</span></span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token punctuation">[</span><span class="token class-name">Resort</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Of the two, I prefer the first option because it’s simpler and has a little more use if we wanted to show random examples rather than the same one again and again. In case you were curious, when we use <code>static let</code> for properties, Swift automatically makes them lazy – they don’t get created until they are used. This means when we try to read <code>Resort.example</code> Swift will be forced to create <code>Resort.allResorts</code> first, then send back the first item in that array for <code>Resort.example</code>. This means we can always be sure the two properties will be run in the correct order – there’s no chance of <code>example</code> going missing because <code>allResorts</code> wasn’t called yet.</p><p>Now that our simple <code>Resort</code> struct is done, we can also use that same <code>Bundle</code> extension to add a property to <code>ContentView</code> that loads all our resorts into a single array:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> resorts<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Resort</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Bundle</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;resorts.json&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>For the body of our view, we’re going to use a <code>NavigationView</code> with a <code>List</code> inside it, showing all our resorts. In each row we’re going to show:</p><ul><li>A 40x25 flag of which country the resort is in.</li><li>The name of the resort.</li><li>How many runs it has.</li></ul><p>40x25 is smaller than our flag source image, and also a different aspect ratio, but we can fix that by using <code>resizable()</code>, <code>scaledToFill()</code>, and a custom frame. To make it look a little better on the screen, we’ll use a custom clip shape and a stroked overlay.</p><p>When the row is tapped we’re going to push to a detail view showing more information about the resort, but we haven’t built that yet so instead we’ll just push to a temporary text view as a placeholder.</p><p>Replace your current <code>body</code> property with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">NavigationView</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token punctuation">(</span>resorts<span class="token punctuation">)</span> <span class="token punctuation">{</span> resort <span class="token keyword">in</span></span>
<span class="line">        <span class="token class-name">NavigationLink</span> <span class="token punctuation">{</span> </span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span>resort<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> label<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Image</span><span class="token punctuation">(</span>resort<span class="token punctuation">.</span>country<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">scaledToFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">clipShape</span><span class="token punctuation">(</span></span>
<span class="line">                    <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">overlay</span><span class="token punctuation">(</span></span>
<span class="line">                    <span class="token class-name">RoundedRectangle</span><span class="token punctuation">(</span>cornerRadius<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">.</span>black<span class="token punctuation">,</span> lineWidth<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span>resort<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">resort<span class="token punctuation">.</span>runs</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> runs&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>secondary<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Resorts&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Go ahead and run the app now and you should see it looks good enough, but if you rotate your iPhone to landscape you might see the screen is almost blank depending on which device you’re using – an iPhone 13 Pro Max will be almost empty, whereas a regular iPhone 13 Pro won’t.</p><p>This happens because SwiftUI wants to show a detail view there, but we haven’t created one yet – let’s fix that next.</p>`,16),C=n("h3",{id:"making-navigationview-work-in-landscape",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#making-navigationview-work-in-landscape"},[n("span",null,"Making NavigationView work in landscape")])],-1),U={class:"hint-container details"},A=n("summary",null,"Making NavigationView work in landscape",-1),B=e(`<p>When we use a <code>NavigationView</code>, by default SwiftUI expects us to provide both a primary view and a secondary detail view that can be shown side by side, with the primary view shown on the left and the secondary on the right. This isn’t <em>required</em> – you can force the push/pop <code>NavigationLink</code> behavior if you want by using the <code>navigationViewStyle()</code> modifier – but in this project we actually <em>want</em> the two-view behavior so we aren’t going to use that.</p><p>On landscape iPhones that are big enough – iPhone 13 Pro Max, for example – SwiftUI’s default behavior is to show the secondary view, and provide the primary view as a slide over. It’s always been there, but you might not have realized until recently: try sliding from the left edge of your screen to reveal the <code>ContentView</code> we just made. If you tap rows in there you’ll see the text behind <code>ContentView</code> change as the result of our <code>NavigationLink</code>, and if you <em>tap</em> on the text behind you can dismiss the <code>ContentView</code> slide over.</p><p>Now, there is a problem here, and it’s the same problem you’ve had all along: it’s not immediately obvious to the user that they need to slide from the left to reveal the list of options. In UIKit this can be fixed easily, but SwiftUI doesn’t give us an alternative right now so we’re going to work around the problem: we’ll create a second view to show on the right by default, and use <em>that</em> to help the user discover the left-hand list.</p><p>First, create a new SwiftUI view called <code>WelcomeView</code>, then give it this code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">WelcomeView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Welcome to SnowSeeker!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Please select a resort from the left-hand menu; swipe from the left edge to show it.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">foregroundColor</span><span class="token punctuation">(</span><span class="token punctuation">.</span>secondary<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That’s all just static text; it will only be shown when the app first launches, because as soon as the user taps any of our navigation links it will get replaced with whatever they were navigating to.</p><p>To put that into <code>ContentView</code> so the two parts of our UI can be used side by side, all we need to do is add a second view to our <code>NavigationView</code> like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">NavigationView</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">List</span><span class="token punctuation">(</span>resorts<span class="token punctuation">)</span> <span class="token punctuation">{</span> resort <span class="token keyword">in</span></span>
<span class="line">        <span class="token comment">// all the previous list code</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Resorts&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">WelcomeView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That’s enough for SwiftUI to understand exactly what we want. Try running the app on several different devices, both in portrait and landscape, to see how SwiftUI responds – on an iPhone 13 Pro you’ll see <code>ContentView</code> in both portrait and landscape, but on an iPhone 13 Pro Max you’ll see <code>ContentView</code> in portrait and <code>WelcomeView</code> in landscape. If you’re using an iPad, you might see several different things depending on the device orientation and whether the app has all the screen to itself as opposed to using split screen.</p><p>Although UIKit lets us control whether the primary view should be shown on iPad portrait, this is not yet possible in SwiftUI. However, we <em>can</em> stop iPhones from using the slide over approach if that’s what you want – try it first and see what you think. If you want it gone, add this extension to your project:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">extension</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@ViewBuilder</span> <span class="token keyword">func</span> <span class="token function-definition function">phoneOnlyStackNavigationView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token class-name">UIDevice</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>userInterfaceIdiom <span class="token operator">==</span> <span class="token punctuation">.</span>phone <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">navigationViewStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>stack<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">self</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That uses Apple’s <code>UIDevice</code> class to detect whether we are currently running on a phone or a tablet, and if it’s a phone enables the simpler <code>StackNavigationViewStyle</code> approach. We need to use the <code>@ViewBuilder</code> attribute here because the two returned view types are different.</p><p>Once you have that extension, simply add the <code>.phoneOnlyStackNavigationView()</code> modifier to your <code>NavigationView</code> so that iPads retain their default behavior whilst iPhones always use stack navigation. Again, give it a try and see what you think – it’s your app, and it’s important you like how it works.</p><p><strong>Tip</strong>: I’m not going to be using this modifier in my own project because I prefer to use Apple’s default behavior where possible, but don’t let that stop you from making your own choice!</p>`,14),z=n("h3",{id:"creating-a-secondary-view-for-navigationview",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#creating-a-secondary-view-for-navigationview"},[n("span",null,"Creating a secondary view for NavigationView")])],-1),L={class:"hint-container details"},W=n("summary",null,"Creating a secondary view for NavigationView",-1),M=e(`<p>Right now our <code>NavigationLink</code> directs the user to some sample text, which is fine for prototyping but obviously not good enough for our actual project. We’re going to replace that with a new <code>ResortView</code> that shows a picture from the resort, some description text, and a list of facilities.</p><p><strong>Important</strong>: Like I said earlier, the content in my example JSON is mostly fictional, and this includes the photos – these are just generic ski photos taken from Unsplash. Unsplash photos can be used commercially or non-commercially without attribution, but I’ve included the photo credit in the JSON so you can add it later on. As for the text, this is taken from Wikipedia. If you intend to use the text in your own shipping projects, it’s important you give credit to Wikipedia and its authors and make it clear that the work is licensed under CC-BY-SA available from here: <a href="https://creativecommons.org/licenses/by-sa/3.0" target="_blank" rel="noopener noreferrer">https://creativecommons.org/licenses/by-sa/3.0</a>.</p><p>To start with, our <code>ResortView</code> layout is going to be pretty simple – not much more than a scroll view, a <code>VStack</code>, an <code>Image</code>, and some <code>Text</code>. The only interesting part is that we’re going to show the resort’s facilities as a single text view using <code>resort.facilities.joined(separator: &quot;, &quot;)</code> to get a single string.</p><p>Create a new SwiftUI view called <code>ResortView</code>, and give it this code to start with:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ResortView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> resort<span class="token punctuation">:</span> <span class="token class-name">Resort</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ScrollView</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">VStack</span><span class="token punctuation">(</span>alignment<span class="token punctuation">:</span> <span class="token punctuation">.</span>leading<span class="token punctuation">,</span> spacing<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Image</span><span class="token punctuation">(</span>decorative<span class="token punctuation">:</span> resort<span class="token punctuation">.</span>id<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">                <span class="token class-name">Group</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">Text</span><span class="token punctuation">(</span>resort<span class="token punctuation">.</span>description<span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>vertical<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Facilities&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>headline<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">                    <span class="token class-name">Text</span><span class="token punctuation">(</span>resort<span class="token punctuation">.</span>facilities<span class="token punctuation">.</span><span class="token function">joined</span><span class="token punctuation">(</span>separator<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;, &quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>vertical<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">resort<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">resort<span class="token punctuation">.</span>country</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">navigationBarTitleDisplayMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>inline<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You’ll also need to update <code>ResortView_Previews</code> to pass in an example resort for Xcode’s preview window:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ResortView_Previews</span><span class="token punctuation">:</span> <span class="token class-name">PreviewProvider</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> previews<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ResortView</span><span class="token punctuation">(</span>resort<span class="token punctuation">:</span> <span class="token class-name">Resort</span><span class="token punctuation">.</span>example<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And now we can update the navigation link in <code>ContentView</code> to point to our actual view, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">NavigationLink</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ResortView</span><span class="token punctuation">(</span>resort<span class="token punctuation">:</span> resort<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> label<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There’s nothing terribly interesting in our code so far, but that’s going to change now because I want to add more details to this screen – how big the resort is, roughly how much it costs, how high it is, and how deep the snow is.</p><p>We could just put all that into a single <code>HStack</code> in <code>ResortView</code>, but that restricts what we can do in the future. So instead we’re going to group them into two views: one for resort information (price and size) and one for ski information (elevation and snow depth).</p><p>The ski view is the easier of the two to implement, so we’ll start there: create a new SwiftUI view called <code>SkiDetailsView</code> and give it this code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">SkiDetailsView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> resort<span class="token punctuation">:</span> <span class="token class-name">Resort</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Group</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Elevation&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>caption<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">resort<span class="token punctuation">.</span>elevation</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">m&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title3<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Snow&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>caption<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">resort<span class="token punctuation">.</span>snowDepth</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">cm&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title3<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">:</span> <span class="token punctuation">.</span>infinity<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">SkiDetailsView_Previews</span><span class="token punctuation">:</span> <span class="token class-name">PreviewProvider</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> previews<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">SkiDetailsView</span><span class="token punctuation">(</span>resort<span class="token punctuation">:</span> <span class="token class-name">Resort</span><span class="token punctuation">.</span>example<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Giving the <code>Group</code> view a maximum frame width of <code>.infinity</code> doesn’t actually affect the group itself, because it has no impact on layout. However, it <em>does</em> get passed down to its child views, which means they will automatically spread out horizontally.</p><p>As for the resort details, this is a little trickier because of two things:</p><ol><li>The size of a resort is stored as a value from 1 to 3, but really we want to use “Small”, “Average”, and “Large” instead.</li><li>The price is stored as a value from 1 to 3, but we’re going to replace that with $, $$, or $$$.</li></ol><p>As always, it’s a good idea to get calculations out of your SwiftUI layouts so it’s nice and clear, so we’re going to create two computed properties: <code>size</code> and <code>price</code>.</p><p>Start by creating a new SwiftUI view called <code>ResortDetailsView</code>, and give it this property:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> resort<span class="token punctuation">:</span> <span class="token class-name">Resort</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>As with <code>ResortView</code>, you’ll need to update the preview struct to use some example data:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ResortDetailsView_Previews</span><span class="token punctuation">:</span> <span class="token class-name">PreviewProvider</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> previews<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ResortDetailsView</span><span class="token punctuation">(</span>resort<span class="token punctuation">:</span> <span class="token class-name">Resort</span><span class="token punctuation">.</span>example<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When it comes to getting the size of the resort we could just add this property to <code>ResortDetailsView</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> size<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Small&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Average&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Large&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">[</span>resort<span class="token punctuation">.</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That works, but it would cause a crash if an invalid value was used, and it’s also a bit too cryptic for my liking. Instead, it’s safer and clearer to use a <code>switch</code> block like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> size<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">switch</span> resort<span class="token punctuation">.</span>size <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;Small&quot;</span></span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;Average&quot;</span></span></span>
<span class="line">    <span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;Large&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As for the <code>price</code> property, we can leverage the same repeating/count initializer we used to create example cards in project 17: <code>String(repeating:count:)</code> creates a new string by repeating a substring a certain number of times.</p><p>So, please add this second computed property to <code>ResortDetailsView</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> price<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span><span class="token punctuation">(</span>repeating<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;$&quot;</span></span><span class="token punctuation">,</span> count<span class="token punctuation">:</span> resort<span class="token punctuation">.</span>price<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now what remains in the <code>body</code> property is simple, because we just use the two computed properties we wrote:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Group</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Size&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>caption<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title3<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Price&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>caption<span class="token punctuation">.</span><span class="token function">bold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title3<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">:</span> <span class="token punctuation">.</span>infinity<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Again, giving the whole <code>Group</code> an infinite maximum width means these views will spread out horizontally just like those from the previous view.</p><p>That completes our two mini views, so we can now drop them into <code>ResortView</code> – put this just before the group in <code>ResortView</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">HStack</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ResortDetailsView</span><span class="token punctuation">(</span>resort<span class="token punctuation">:</span> resort<span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">SkiDetailsView</span><span class="token punctuation">(</span>resort<span class="token punctuation">:</span> resort<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>vertical<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>primary<span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We’re going to add to that some more in a moment, but first I want to make one small tweak: using <code>joined(separator:)</code> does an okay job of converting a string array into a single string, but we’re not here to write okay code – we’re here to write <em>great</em> code.</p><p>Previously we’ve used the <code>format</code> parameter of <code>Text</code> to control the way numbers are formatted, but there’s a format for string arrays too. This is similar to using <code>joined(separator:)</code>, but rather than sending back “A, B, C” like we have right now, we get back “A, B, <em>and</em> C” – it’s more natural to read.</p><p>Replace the current facilities text view with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span>resort<span class="token punctuation">.</span>facilities<span class="token punctuation">,</span> format<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> <span class="token punctuation">.</span>and<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">.</span>vertical<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice how the <code>.and</code> type is there? That’s because you can also use <code>.or</code> to get “A, B, or C” if that’s what you want.</p><p>Anyway, it’s a tiny change but I think it’s much better!</p>`,39),O=n("h3",{id:"searching-for-data-in-a-list",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#searching-for-data-in-a-list"},[n("span",null,"Searching for data in a List")])],-1),F={class:"hint-container details"},$=n("summary",null,"Searching for data in a List",-1),G=e(`<p>Before our <code>List</code> view is done, we’re going to add a SwiftUI modifier that makes our user’s experience a whole lot better without too much work: <code>searchable()</code>. Adding this will allow users to filter the list of resorts we’re showing, making it easy to find the exact thing they’re looking for.</p><p>This takes only four steps, starting with a new <code>@State</code> property in <code>ContentView</code> to store the text the user is searching for:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> searchText <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Second, we can bind that to our <code>List</code> in <code>ContentView</code> by adding this directly below the existing <code>navigationTitle()</code> modifier:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">searchable</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> $searchText<span class="token punctuation">,</span> prompt<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Search for a resort&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Third, we need a computed property that will handle the filtering of our data. If our new <code>searchText</code> property is empty then we can just send back all the resorts we loaded, otherwise we’ll use <code>localizedCaseInsensitiveContains()</code> to filter the array based on their search criteria:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> filteredResorts<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Resort</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> searchText<span class="token punctuation">.</span>isEmpty <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> resorts</span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> resorts<span class="token punctuation">.</span>filter <span class="token punctuation">{</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">localizedCaseInsensitiveContains</span><span class="token punctuation">(</span>searchText<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And the final step is to use <code>filteredResorts</code> as the data source for our list, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">List</span><span class="token punctuation">(</span>filteredResorts<span class="token punctuation">)</span> <span class="token punctuation">{</span> resort <span class="token keyword">in</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And with that we’re done! If you run the app again you’ll see you can drag the resort list gently down to see the search box, and entering something in there will filter the list straight away. Honestly, <code>searchable()</code> is one of the biggest “bang for buck” features in SwiftUI – it’s such an important feature for users, and took us only a few minutes to implement!</p>`,10),H=n("hr",null,null,-1);function E(d,J){const t=r("router-link"),i=r("VPCard"),c=r("VidStack"),u=r("FontIcon");return v(),m("div",null,[n("h1",g,[n("a",f,[n("span",null,h(d.$frontmatter.title)+" 관련",1)])]),n("nav",b,[n("ul",null,[n("li",null,[a(t,{to:"#project-19-part-2"},{default:o(()=>[s("Project 19, part 2")]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#building-a-primary-list-of-items"},{default:o(()=>[s("Building a primary list of items")]),_:1})]),n("li",null,[a(t,{to:"#making-navigationview-work-in-landscape"},{default:o(()=>[s("Making NavigationView work in landscape")]),_:1})]),n("li",null,[a(t,{to:"#creating-a-secondary-view-for-navigationview"},{default:o(()=>[s("Creating a secondary view for NavigationView")]),_:1})]),n("li",null,[a(t,{to:"#searching-for-data-in-a-list"},{default:o(()=>[s("Searching for data in a List")]),_:1})])])])])]),y,a(i,p(l({title:"100 Days of SwiftUI - Day 97",desc:"Project 19, part 2",link:"https://www.hackingwithswift.com/100/swiftui/97",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),x,n("details",S,[V,a(i,p(l({title:"100 Days of SwiftUI - Day 97 - Building a primary list of items",desc:"Building a primary list of items",link:"https://www.hackingwithswift.com/books/ios-swiftui/building-a-primary-list-of-items",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(c,{src:"youtube/MUnWSHL51nA"}),_,T,n("p",null,[s("I’ve provided some assets for this project in the GitHub repository for this book, so if you haven’t already downloaded them please do so now. You should drag "),a(u,{icon:"iconfont icon-json"}),I,s(" into your project navigator, then copy all the pictures into your asset catalog. You might notice that I’ve included 2x and 3x images for the countries, but only 2x pictures for the resorts. This is intentional: those flags are going to be used for both retina and Super Retina devices, but the resort pictures are designed to fill all the space on an iPad Pro – they are more than big enough for a Super Retina iPhone even at 2x resolution.")]),j,n("p",null,[s("Create a new Swift file called "),a(u,{icon:"fa-brands fa-swift"}),q,s(", then give it this code:")]),R,n("p",null,[s("Instead, we’re going to load an array of resorts from JSON stored in our app bundle, which means we can re-use the same code we wrote for project 8 – the "),a(u,{icon:"fa-brands fa-swift"}),N,s(" extension. If you still have yours, you can drop it into your new project, but if not then create a new Swift file called "),a(u,{icon:"fa-brands fa-swift"}),P,s(" and give it this code:")]),D]),C,n("details",U,[A,a(i,p(l({title:"100 Days of SwiftUI - Day 97 - Making NavigationView work in landscape",desc:"Making NavigationView work in landscape",link:"https://www.hackingwithswift.com/books/ios-swiftui/making-navigationview-work-in-landscape",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(c,{src:"youtube/KWAv1IHZRuo"}),B]),z,n("details",L,[W,a(i,p(l({title:"100 Days of SwiftUI - Day 97 - Creating a secondary view for NavigationView",desc:"Creating a secondary view for NavigationView",link:"https://www.hackingwithswift.com/books/ios-swiftui/creating-a-secondary-view-for-navigationview",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(c,{src:"youtube/wYphGI4k8AQ"}),M]),O,n("details",F,[$,a(i,p(l({title:"100 Days of SwiftUI - Day 97 - Searching for data in a List",desc:"Searching for data in a List",link:"https://www.hackingwithswift.com/books/ios-swiftui/searching-for-data-in-a-list",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),a(c,{src:"youtube/7-3_BbLTsUM"}),G]),H])}const Z=k(w,[["render",E],["__file","97.html.vue"]]),Q=JSON.parse('{"path":"/swift/100-days-of-swiftui/97.html","title":"Day 97","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 97","description":"100 Days of SwiftUI > Day 97","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 97"},{"property":"og:description","content":"Day 97"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/97.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/97.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 97"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 97"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 97\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 19, part 2","slug":"project-19-part-2","link":"#project-19-part-2","children":[{"level":3,"title":"Building a primary list of items","slug":"building-a-primary-list-of-items","link":"#building-a-primary-list-of-items","children":[]},{"level":3,"title":"Making NavigationView work in landscape","slug":"making-navigationview-work-in-landscape","link":"#making-navigationview-work-in-landscape","children":[]},{"level":3,"title":"Creating a secondary view for NavigationView","slug":"creating-a-secondary-view-for-navigationview","link":"#creating-a-secondary-view-for-navigationview","children":[]},{"level":3,"title":"Searching for data in a List","slug":"searching-for-data-in-a-list","link":"#searching-for-data-in-a-list","children":[]}]}],"git":{"createdTime":1710143569000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":6}]},"readingTime":{"minutes":12.35,"words":3706},"filePathRelative":"swift/100-days-of-swiftui/97.md","localizedDate":"2024년 3월 11일","excerpt":"\\n\\n<hr>\\n"}');export{Z as comp,Q as data};
