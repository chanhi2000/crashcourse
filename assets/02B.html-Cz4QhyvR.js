import{_ as m}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as t,t as d,b as e,w as n,n as r,g as s,r as l,o as p,d as a}from"./app-U_bew1in.js";const u={},g={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},_={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},f={class:"table-of-contents"},k=t("hr",null,null,-1),T=t("h2",{id:"disjoint-set-union",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#disjoint-set-union"},[t("span",null,"Disjoint Set Union")])],-1),v={class:"hint-container details"},y=t("summary",null,"Disjoint Set Union",-1),S=t("hr",null,null,-1),b=t("h2",{id:"fenwick-tree",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#fenwick-tree"},[t("span",null,"Fenwick Tree")])],-1),q={class:"hint-container details"},D=t("summary",null,"Fenwick Tree",-1),w=t("hr",null,null,-1),B=t("h2",{id:"sqrt-decomposition",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#sqrt-decomposition"},[t("span",null,"Sqrt Decomposition")])],-1),C={class:"hint-container details"},j=t("summary",null,"Sqrt Decomposition",-1),P=t("hr",null,null,-1),x=t("h2",{id:"segment-tree",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#segment-tree"},[t("span",null,"Segment Tree")])],-1),z={class:"hint-container details"},A=t("summary",null,"Segment Tree",-1),R=t("hr",null,null,-1),F=t("h2",{id:"treap",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#treap"},[t("span",null,"Treap")])],-1),U={class:"hint-container details"},H=t("summary",null,"Treap",-1),V=t("hr",null,null,-1),N=t("h2",{id:"sqrt-tree",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#sqrt-tree"},[t("span",null,"Sqrt Tree")])],-1),K={class:"hint-container details"},Z=t("summary",null,"Sqrt Tree",-1),E=t("hr",null,null,-1),J=t("h2",{id:"randomized-heap",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#randomized-heap"},[t("span",null,"Randomized Heap")])],-1),M={class:"hint-container details"},O=t("summary",null,"Randomized Heap",-1),$=t("hr",null,null,-1);function G(c,I){const o=l("router-link"),i=l("VPCard");return p(),h("div",null,[t("h1",g,[t("a",_,[t("span",null,d(c.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),t("nav",f,[t("ul",null,[t("li",null,[e(o,{to:"#disjoint-set-union"},{default:n(()=>[a("Disjoint Set Union")]),_:1})]),t("li",null,[e(o,{to:"#fenwick-tree"},{default:n(()=>[a("Fenwick Tree")]),_:1})]),t("li",null,[e(o,{to:"#sqrt-decomposition"},{default:n(()=>[a("Sqrt Decomposition")]),_:1})]),t("li",null,[e(o,{to:"#segment-tree"},{default:n(()=>[a("Segment Tree")]),_:1})]),t("li",null,[e(o,{to:"#treap"},{default:n(()=>[a("Treap")]),_:1})]),t("li",null,[e(o,{to:"#sqrt-tree"},{default:n(()=>[a("Sqrt Tree")]),_:1})]),t("li",null,[e(o,{to:"#randomized-heap"},{default:n(()=>[a("Randomized Heap")]),_:1})])])]),k,T,t("details",v,[y,e(i,r(s({title:"Algorithms for Competitive Programming > Disjoint Set Union",desc:"Disjoint Set Union",link:"https://cp-algorithms.com/data_structures/disjoint_set_union.html",logo:"https://cp-algorithms.com/favicon.ico",background:"rgba(119,119,170,0.2)"})),null,16)]),S,b,t("details",q,[D,e(i,r(s({title:"Algorithms for Competitive Programming > Fenwick Tree",desc:"Fenwick Tree",link:"https://cp-algorithms.com/data_structures/fenwick.html",logo:"https://cp-algorithms.com/favicon.ico",background:"rgba(119,119,170,0.2)"})),null,16)]),w,B,t("details",C,[j,e(i,r(s({title:"Algorithms for Competitive Programming > Sqrt Decomposition",desc:"Sqrt Decomposition",link:"https://cp-algorithms.com/data_structures/sqrt_decomposition.html",logo:"https://cp-algorithms.com/favicon.ico",background:"rgba(119,119,170,0.2)"})),null,16)]),P,x,t("details",z,[A,e(i,r(s({title:"Algorithms for Competitive Programming > Segment Tree",desc:"Segment Tree",link:"https://cp-algorithms.com/data_structures/segment_tree.html",logo:"https://cp-algorithms.com/favicon.ico",background:"rgba(119,119,170,0.2)"})),null,16)]),R,F,t("details",U,[H,e(i,r(s({title:"Algorithms for Competitive Programming > Treap",desc:"Treap",link:"https://cp-algorithms.com/data_structures/treap.html",logo:"https://cp-algorithms.com/favicon.ico",background:"rgba(119,119,170,0.2)"})),null,16)]),V,N,t("details",K,[Z,e(i,r(s({title:"Algorithms for Competitive Programming > Sqrt Tree",desc:"Sqrt Tree",link:"https://cp-algorithms.com/data_structures/sqrt-tree.html",logo:"https://cp-algorithms.com/favicon.ico",background:"rgba(119,119,170,0.2)"})),null,16)]),E,J,t("details",M,[O,e(i,r(s({title:"Algorithms for Competitive Programming > Randomized Heap",desc:"Randomized Heap",link:"https://cp-algorithms.com/data_structures/randomized_heap.html",logo:"https://cp-algorithms.com/favicon.ico",background:"rgba(119,119,170,0.2)"})),null,16)]),$])}const W=m(u,[["render",G],["__file","02B.html.vue"]]),X=JSON.parse('{"path":"/cpp/algorithms-for-competitive-programming/02-data-structures/02B.html","title":"02B. Trees","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"02B. Trees","description":"Algorithms for Competitive Programming > 02B. Trees","category":["Cpp"],"tag":["crashcourse","cpp","c-plus-plus","algorithm"],"head":[[{"meta":null},{"property":"og:title","content":"Algorithms for Competitive Programming > 02B. Trees"},{"property":"og:description","content":"02B. Trees"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/cpp/algorithms-for-competitive-programming/02-data-structures/02B.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/cpp/algorithms-for-competitive-programming/02-data-structures/02B.html"}],["meta",{"property":"og:site_name","content":"ü•ÅCrashcourse"}],["meta",{"property":"og:title","content":"02B. Trees"}],["meta",{"property":"og:description","content":"Algorithms for Competitive Programming > 02B. Trees"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"cpp"}],["meta",{"property":"article:tag","content":"c-plus-plus"}],["meta",{"property":"article:tag","content":"algorithm"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"02B. Trees\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Disjoint Set Union","slug":"disjoint-set-union","link":"#disjoint-set-union","children":[]},{"level":2,"title":"Fenwick Tree","slug":"fenwick-tree","link":"#fenwick-tree","children":[]},{"level":2,"title":"Sqrt Decomposition","slug":"sqrt-decomposition","link":"#sqrt-decomposition","children":[]},{"level":2,"title":"Segment Tree","slug":"segment-tree","link":"#segment-tree","children":[]},{"level":2,"title":"Treap","slug":"treap","link":"#treap","children":[]},{"level":2,"title":"Sqrt Tree","slug":"sqrt-tree","link":"#sqrt-tree","children":[]},{"level":2,"title":"Randomized Heap","slug":"randomized-heap","link":"#randomized-heap","children":[]}],"git":{"createdTime":1709715232000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":6}]},"readingTime":{"minutes":0.9,"words":271},"filePathRelative":"cpp/algorithms-for-competitive-programming/02-data-structures/02B.md","localizedDate":"2024ÎÖÑ 3Ïõî 6Ïùº","excerpt":"\\n\\n<hr>\\n<h2>Disjoint Set Union</h2>\\n<details class=\\"hint-container details\\"><summary>Disjoint Set Union</summary>\\n</details>\\n<hr>\\n<h2>Fenwick Tree</h2>\\n<details class=\\"hint-container details\\"><summary>Fenwick Tree</summary>\\n</details>\\n<hr>\\n<h2>Sqrt Decomposition</h2>\\n<details class=\\"hint-container details\\"><summary>Sqrt Decomposition</summary>\\n</details>"}');export{W as comp,X as data};
