import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,a as n,t as r,b as s,w as o,n as m,g as v,d as t,e as p,r as c,o as b}from"./app-U_bew1in.js";const g={},h={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},w=n("hr",null,null,-1),j=n("hr",null,null,-1),q={href:"https://github.com/pahkey/sbb3/tree/2-05",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"pahkey/sbb3",-1),A=n("code",null,"2-05",-1),T=p('<p>이번 장에서는 JPA를 사용하여 데이터를 처리해 보자.</p><hr><h2 id="리포지터리" tabindex="-1"><a class="header-anchor" href="#리포지터리"><span>리포지터리</span></a></h2><p>엔티티만으로는 데이터베이스에 데이터를 저장하거나 조회 할 수 없다. 데이터 처리를 위해서는 실제 데이터베이스와 연동하는 JPA 리포지터리가 필요하다.</p><div class="hint-container info"><p class="hint-container-title">리포지터리란?</p><p>리포지터리는 엔티티에 의해 생성된 데이터베이스 테이블에 접근하는 메서드들(예: <code>findAll</code>, <code>save</code> 등)을 사용하기 위한 인터페이스이다. 데이터 처리를 위해서는 테이블에 어떤 값을 넣거나 값을 조회하는 등의 CRUD(Create, Read, Update, Delete)가 필요하다. 이 때 이러한 CRUD를 어떻게 처리할지 정의하는 계층이 바로 리포지터리이다.</p></div><p>다음과 같이 <code>QuestionRepository</code> 인터페이스를 생성하자.</p>',6),S=n("code",null,"/sbb/src/main/java/com/mysite/sbb/",-1),R=n("code",null,"QuestionRepository.java",-1),x=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mysite<span class="token punctuation">.</span>sbb</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">JpaRepository</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">QuestionRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Question</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>QuestionRepository</code>는 리포지터리로 만들기 위해 JpaRepository 인터페이스를 상속했다. JpaRepository를 상속할 때는 제네릭스 타입으로 <code>&lt;Question, Integer&gt;</code> 처럼 리포지터리의 대상이 되는 엔티티의 타입(Question)과 해당 엔티티의 PK의 속성 타입(Integer)을 지정해야 한다. 이것은 JpaRepository를 생성하기 위한 규칙이다.</p><blockquote><p>Question 엔티티의 PK(Primary Key) 속성인 <code>id</code>의 타입은 <code>Integer</code> 이다.</p></blockquote><p>마찬가지로 <code>AnswerRepository</code>도 다음과 같이 생성하자.</p>`,4),B=n("code",null,"/sbb/src/main/java/com/mysite/sbb/",-1),Q=n("code",null,"AnswerRepository.java",-1),E=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mysite<span class="token punctuation">.</span>sbb</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">JpaRepository</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AnswerRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Answer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이제 <code>QuestionRepository</code>, <code>AnswerRepository를</code> 이용하여 <code>question</code>, <code>answer</code> 테이블에 데이터를 저장하거나 조회할 수 있다.</p><hr><h2 id="데이터-저장하기" tabindex="-1"><a class="header-anchor" href="#데이터-저장하기"><span>데이터 저장하기</span></a></h2><p>작성한 리포지터리를 테스트하기 위해서 JUnit 기반의 스프링부트의 테스트 프레임워크를 사용해 보자.</p><figure><img src="https://wikidocs.net/images/page/160890/C_2-05_1.png" alt="위 파일을 열고 다음처럼 수정하자." tabindex="0" loading="lazy"><figcaption>위 파일을 열고 다음처럼 수정하자.</figcaption></figure>`,6),J=n("code",null,"/sbb/src/test/java/com/mysite/sbb/",-1),L=n("code",null,"SbbApplicationTests.java",-1),I=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mysite<span class="token punctuation">.</span>sbb</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@SpringBootTest</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">SbbApplicationTests</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">QuestionRepository</span> questionRepository<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">testJpa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        </span>
<span class="line">        <span class="token class-name">Question</span> q1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Question</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        q1<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">&quot;sbb가 무엇인가요?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        q1<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">&quot;sbb에 대해서 알고 싶습니다.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        q1<span class="token punctuation">.</span><span class="token function">setCreateDate</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>questionRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>q1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 첫번째 질문 저장</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Question</span> q2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Question</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        q2<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">&quot;스프링부트 모델 질문입니다.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        q2<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">&quot;id는 자동으로 생성되나요?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        q2<span class="token punctuation">.</span><span class="token function">setCreateDate</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>questionRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>q2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 두번째 질문 저장</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@SpringBootTest</code> 애너테이션은 <code>SbbApplicationTests</code> 클래스가 스프링부트 테스트 클래스임을 의미한다. 그리고 <code>@Autowired</code> 애너테이션은 스프링의 DI 기능으로 <code>questionRepository</code> 객체를 스프링이 자동으로 생성해 준다.</p><blockquote><p>DI(Dependency Injection) - 스프링이 객체를 대신 생성하여 주입한다.</p></blockquote><div class="hint-container info"><p class="hint-container-title">@Autowired</p><p>객체를 주입하기 위해 사용하는 스프링의 애너테이션이다. 객체를 주입하는 방식에는 <code>@Autowired</code> 외에 Setter 또는 생성자를 사용하는 방식이 있다. 순환참조 문제와 같은 이유로 <code>@Autowired</code> 보다는 생성자를 통한 객체 주입방식이 권장된다. 하지만 테스트 코드의 경우에는 생성자를 통한 객체의 주입이 불가능하므로 테스트 코드 작성시에만 <code>@Autowired</code>를 사용하고 실제 코드 작성시에는 생성자를 통한 객체 주입방식을 사용하겠다.</p></div><p><code>testJpa</code> 메서드 위의 <code>@Test</code> 애너테이션은 <code>testJpa</code> 메서드가 테스트 메서드임을 나타낸다. 위 클래스를 JUnit으로 실행하면 <code>@Test</code> 애너테이션이 붙은 메서드가 실행된다.</p><blockquote><p>JUnit은 테스트코드를 작성하고 작성한 테스트코드를 실행하기 위해 사용하는 자바의 테스트 프레임워크이다.</p></blockquote><p><code>testJpa</code> 메서드의 내용을 잠시 살펴보자. <code>testJpa</code> 메서드는 <code>q1</code>, <code>q2</code> 라는 <code>Question</code> 엔티티 객체를 생성하고 <code>QuestionRepository</code>를 이용하여 그 값을 데이터베이스에 저장하는 코드이다.</p>`,7),C=n("img",{src:"https://wikidocs.net/images/page/160890/C_2-05_2.png",alt:'이제 작성한  클래스를 실행해 보자. 다음처럼 <FontIcon icon="iconfont icon-select"/>를 선택하면  클래스를 실행할수 있다.',tabindex:"0",loading:"lazy"},null,-1),D=n("code",null,"SbbApplicationTests",-1),O=n("code",null,"[Run -> Run As -> JUnit Test]",-1),P=n("code",null,"SbbApplicationTests",-1),z=p(`<p>하지만 로컬서버가 이미 구동중이라면 <code>The file is locked: nio:/Users/pahkey/local.mv.db</code> 와 비슷한 오류가 발생할 것이다. H2 데이터베이스는 파일 기반의 데이터베이스이기 때문에 이미 로컬서버가 점유하고 있기 때문에 이러한 오류가 발생하는 것이다. 따라서 테스트를 하기 위해서는 로컬 서버를 중지해야 한다.</p><p>로컬서버를 중지하고 다시 테스트를 실행해 보자. 그러면 다음과 같은 JUnit 화면이 나타나고 오류없이 잘 실행될 것이다.</p><figure><img src="https://wikidocs.net/images/page/160890/O_2-05_3.png" alt="다음 화면처럼 초록색이 표시되면 성공이고 빨간색이 표시되면 실패이다." tabindex="0" loading="lazy"><figcaption>다음 화면처럼 초록색이 표시되면 성공이고 빨간색이 표시되면 실패이다.</figcaption></figure><p>실제 데이터베이스에 값이 잘 들어갔는지 확인해 보기 위해 다시 로컬서버를 시작하고 H2 콘솔에 접속하여 다음 쿼리문을 실행해 보자.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> QUESTION </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="https://wikidocs.net/images/page/160890/C_2-05_4.png" alt="그러면 다음처럼 우리가 저장한  객체의 값이 데이터베이스에 저장된 것을 확인한 수 있다." tabindex="0" loading="lazy"><figcaption>그러면 다음처럼 우리가 저장한 <code>Question</code> 객체의 값이 데이터베이스에 저장된 것을 확인한 수 있다.</figcaption></figure><p><code>id</code>는 <code>Question</code> 엔티티의 기본 키(Primary Key)이다. <code>id</code>는 앞에서 엔티티를 생성할 때 설정했던대로 데이터를 생성할 때 속성값이 자동으로 1씩 증가하는 것을 확인할 수 있다.</p><blockquote><p>Question 엔티티의 id는 <code>@GeneratedValue</code> 설정을 했다.</p></blockquote><hr><h2 id="데이터-조회하기" tabindex="-1"><a class="header-anchor" href="#데이터-조회하기"><span>데이터 조회하기</span></a></h2><p>이번에는 데이터베이스에 저장된 데이터를 조회해 보자.</p><h3 id="findall" tabindex="-1"><a class="header-anchor" href="#findall"><span><code>findAll</code></span></a></h3><p>작성한 테스트 코드를 다음처럼 수정해 보자.</p>`,13),U=n("code",null,"/sbb/src/test/java/com/mysite/sbb/",-1),N=n("code",null,"SbbApplicationTests.java",-1),V=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mysite<span class="token punctuation">.</span>sbb</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token static">assertEquals</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@SpringBootTest</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">SbbApplicationTests</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">QuestionRepository</span> questionRepository<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">testJpa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Question</span><span class="token punctuation">&gt;</span></span> all <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>questionRepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> all<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted">        <span class="token class-name">Question</span> q <span class="token operator">=</span> all<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;sbb가 무엇인가요?&quot;</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>question</code> 테이블에 저장된 모든 데이터를 조회하기 위해서 리포지터리의 <code>findAll</code> 메서드를 사용했다.</p><blockquote><p><code>findAll</code>은 데이터를 조회할때 사용하는 메서드이다.</p></blockquote><p>우리는 총 2건의 데이터를 저장했기 때문에 데이터의 사이즈는 2가 되어야 한다. 데이터 사이즈가 2인지 확인하기 위해 JUnit의 <code>assertEquals</code> 메서드를 사용했다. <code>assertEquals</code>는 <code>assertEquals(기대값, 실제값)</code>와 같이 사용하고 기대값과 실제값이 동일한지를 조사한다. 만약 기대값과 실제값이 동일하지 않다면 테스트는 실패로 처리된다. 그리고 우리가 저장한 첫번째 데이터의 제목이 &quot;sbb가 무엇인가요?&quot;와 일치하는지도 테스트했다.</p><p>테스트를 위해서는 로컬 서버를 중지하고 다시한번 <code>[Run -&gt; Run As -&gt; JUnit Test]</code>을 실행하면 된다. 테스트는 잘 통과될 것이다.</p><p>우리는 편의상 <code>testJpa</code> 메서드 하나만을 가지고 JPA의 여러기능을 테스트할 것이다.</p><h3 id="findbyid" tabindex="-1"><a class="header-anchor" href="#findbyid"><span><code>findById</code></span></a></h3><p>이번에는 <code>Question</code> 엔티티의 Id값으로 데이터를 조회해 보자. 테스트 코드를 다음과 같이 수정하자.</p>`,8),K=n("code",null,"/sbb/src/test/java/com/mysite/sbb/",-1),H=n("code",null,"SbbApplicationTests.java",-1),F=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mysite<span class="token punctuation">.</span>sbb</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token static">assertEquals</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@SpringBootTest</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">SbbApplicationTests</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">QuestionRepository</span> questionRepository<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">testJpa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Question</span><span class="token punctuation">&gt;</span></span> oq <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>questionRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token keyword">if</span><span class="token punctuation">(</span>oq<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">            <span class="token class-name">Question</span> q <span class="token operator">=</span> oq<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">            <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;sbb가 무엇인가요?&quot;</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>id 값으로 데이터를 조회하기 위해서는 리포지터리의 <code>findById</code> 메서드를 사용해야 한다. 하지만 <code>findById</code>의 리턴 타입은 <code>Question</code>이 아닌 <code>Optional</code>임에 주의하자. <code>Optional</code>은 <code>null</code> 처리를 유연하게 처리하기 위해 사용하는 클래스로 위와 같이 <code>isPresent</code>로 <code>null</code>이 아닌지를 확인한 후에 get으로 실제 <code>Question</code> 객체 값을 얻어야 한다.</p><h3 id="findbysubject" tabindex="-1"><a class="header-anchor" href="#findbysubject"><span><code>findBySubject</code></span></a></h3><p>이번에는 Question 엔티티의 subject 값으로 데이터를 조회해 보자.</p><p>하지만 아쉽게도 <code>Question</code> 리포지터리는 <code>findBySubject</code>와 같은 메서드를 기본적으로 제공하지는 않는다. findBySubject 메서드를 사용하려면 다음처럼 <code>QuestionRepository</code> 인터페이스를 변경해야 한다.</p>`,5),W=n("code",null,"/sbb/src/main/java/com/mysite/sbb/",-1),G=n("code",null,"QuestionRepository.java",-1),M=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mysite<span class="token punctuation">.</span>sbb</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">JpaRepository</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">QuestionRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Question</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line highlighted">    <span class="token class-name">Question</span> <span class="token function">findBySubject</span><span class="token punctuation">(</span><span class="token class-name">String</span> subject<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>그러면 다음처럼 제목으로 테이블 데이터를 조회할 수 있다.</p>`,2),Z=n("code",null,"/sbb/src/test/java/com/mysite/sbb/",-1),Y=n("code",null,"SbbApplicationTests.java",-1),$=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mysite<span class="token punctuation">.</span>sbb</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token static">assertEquals</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@SpringBootTest</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">SbbApplicationTests</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">QuestionRepository</span> questionRepository<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">testJpa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">        <span class="token class-name">Question</span> q <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>questionRepository<span class="token punctuation">.</span><span class="token function">findBySubject</span><span class="token punctuation">(</span><span class="token string">&quot;sbb가 무엇인가요?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>테스트 코드를 실행해 보면 테스트는 아주 잘 통과된다. 아마 여러분은 다음과 같은 질문과 함께 큰 혼란이 찾아 올지도 모른다. &quot;인터페이스에 <code>findBySubject</code> 라는 메서드를 선언만 하고 구현은 하지 않았는데 도대체 어떻게 실행이 되는 거지?&quot;</p><p>이러한 마법은 JpaRepository를 상속한 <code>QuestionRepository</code> 객체가 생성될때 벌어진다. (DI에 의해 스프링이 자동으로 <code>QuestionRepository</code> 객체를 생성한다. 이 때 프록시 패턴이 사용된다고 한다.) 리포지터리 객체의 메서드가 실행될때 JPA가 해당 메서드명을 분석하여 쿼리를 만들고 실행한다.</p><p>즉, 여러분은 <code>findBy</code> + 엔티티의 속성명(예:<code>findBySubject</code>)과 같은 리포지터리 메서드를 작성하면 해당 속성의 값으로 데이터를 조회할수 있다.</p><p><code>findBySubject</code> 메서드를 호출할때 실제 어떤 쿼리가 실행되는지 살펴보자. 실행되는 쿼리를 로그에서 보려면 <code>application.properties</code> 파일을 다음과 같이 수정해야 한다.</p>`,5),X=n("code",null,"/sbb/src/main/resources/",-1),nn=n("code",null,"application.properties",-1),sn=p(`<div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties" data-title="properties"><pre><code><span class="line"><span class="token comment"># DATABASE</span></span>
<span class="line"><span class="token key attr-name">spring.h2.console.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">true</span></span>
<span class="line"><span class="token key attr-name">spring.h2.console.path</span><span class="token punctuation">=</span><span class="token value attr-value">/h2-console</span></span>
<span class="line"><span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:h2:~/local</span></span>
<span class="line"><span class="token key attr-name">spring.datasource.driverClassName</span><span class="token punctuation">=</span><span class="token value attr-value">org.h2.Driver</span></span>
<span class="line"><span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">sa</span></span>
<span class="line"><span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># JPA</span></span>
<span class="line"><span class="token key attr-name">spring.jpa.properties.hibernate.dialect</span><span class="token punctuation">=</span><span class="token value attr-value">org.hibernate.dialect.H2Dialect</span></span>
<span class="line"><span class="token key attr-name">spring.jpa.hibernate.ddl-auto</span><span class="token punctuation">=</span><span class="token value attr-value">update</span></span>
<span class="line highlighted"><span class="token key attr-name">spring.jpa.properties.hibernate.format_sql</span><span class="token punctuation">=</span><span class="token value attr-value">true</span></span>
<span class="line highlighted"><span class="token key attr-name">spring.jpa.properties.hibernate.show_sql</span><span class="token punctuation">=</span><span class="token value attr-value">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>그리고 다시한번 테스트코드를 실행해 보자. 그러면 다음과 같이 콘솔로그에서 실행된 쿼리를 확인할 수 있다.</p><figure><img src="https://wikidocs.net/images/page/160890/C_2-05_5.png" alt="실행된 쿼리의  조건에 가 포함된 것을 확인할 수 있다." tabindex="0" loading="lazy"><figcaption>실행된 쿼리의 <code>where</code> 조건에 <code>subject</code>가 포함된 것을 확인할 수 있다.</figcaption></figure><h3 id="findbysubjectandcontent" tabindex="-1"><a class="header-anchor" href="#findbysubjectandcontent"><span><code>findBySubjectAndContent</code></span></a></h3><p>이번에는 제목과 내용을 함께 조회해 보자. 두 개의 속성을 And 조건으로 조회할때는 리포지터리에 다음과 같은 메서드를 추가해야 한다.</p>`,5),an=n("code",null,"/sbb/src/main/java/com/mysite/sbb/",-1),tn=n("code",null,"QuestionRepository.java",-1),pn=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mysite<span class="token punctuation">.</span>sbb</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">JpaRepository</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">QuestionRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Question</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Question</span> <span class="token function">findBySubject</span><span class="token punctuation">(</span><span class="token class-name">String</span> subject<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Question</span> <span class="token function">findBySubjectAndContent</span><span class="token punctuation">(</span><span class="token class-name">String</span> subject<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>그리고 테스트코드는 다음과 같이 작성하자.</p>`,2),en=n("code",null,"/sbb/src/test/java/com/mysite/sbb/",-1),on=n("code",null,"SbbApplicationTests.java",-1),cn=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mysite<span class="token punctuation">.</span>sbb</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token static">assertEquals</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@SpringBootTest</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">SbbApplicationTests</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">QuestionRepository</span> questionRepository<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">testJpa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">        <span class="token class-name">Question</span> q <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>questionRepository<span class="token punctuation">.</span><span class="token function">findBySubjectAndContent</span><span class="token punctuation">(</span></span>
<span class="line highlighted">                <span class="token string">&quot;sbb가 무엇인가요?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;sbb에 대해서 알고 싶습니다.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>테스트는 잘 통과될 것이다. 그리고 실제 쿼리는 다음과 같이 실행되는 것을 콘솔 로그에서 확인할 수 있다.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span></span>
<span class="line">    question0_<span class="token punctuation">.</span>id <span class="token keyword">as</span> id1_1_<span class="token punctuation">,</span></span>
<span class="line">    question0_<span class="token punctuation">.</span>content <span class="token keyword">as</span> content2_1_<span class="token punctuation">,</span></span>
<span class="line">    question0_<span class="token punctuation">.</span>create_date <span class="token keyword">as</span> create_d3_1_<span class="token punctuation">,</span></span>
<span class="line">    question0_<span class="token punctuation">.</span>subject <span class="token keyword">as</span> subject4_1_ </span>
<span class="line"><span class="token keyword">from</span></span>
<span class="line">    question question0_ </span>
<span class="line"><span class="token keyword">WHERE</span></span>
<span class="line highlighted">    question0_<span class="token punctuation">.</span>subject<span class="token operator">=</span>? </span>
<span class="line highlighted">    <span class="token operator">AND</span> question0_<span class="token punctuation">.</span>content<span class="token operator">=</span>?</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>subject</code>, <code>content</code> 컬럼이 <code>AND</code> 조건으로 <code>WHERE</code>문에 사용되었다.</p><p>이렇듯 리포지터리의 메서드명은 데이터를 조회하는 쿼리문의 <code>WHERE</code> 조건을 결정하는 역할을 한다. 여기서는 <code>findBySubject</code>, <code>findBySubjectAndContent</code> 두 개만 알아봤지만 상당히 많은 조합을 사용할 수 있다.</p><p>그것들에 대해서 간단하게 표로 정리해 보았다.</p><table><thead><tr><th style="text-align:left;">항목</th><th style="text-align:left;">예제</th><th style="text-align:left;">설명</th></tr></thead><tbody><tr><td style="text-align:left;">And</td><td style="text-align:left;"><code>findBySubjectAndContent(String subject, String content)</code></td><td style="text-align:left;">여러 컬럼을 and 로 검색</td></tr><tr><td style="text-align:left;">Or</td><td style="text-align:left;"><code>findBySubjectOrContent(String subject, String content)</code></td><td style="text-align:left;">여러 컬럼을 or 로 검색</td></tr><tr><td style="text-align:left;">Between</td><td style="text-align:left;"><code>findByCreateDateBetween(LocalDateTime fromDate, LocalDateTime toDate)</code></td><td style="text-align:left;">컬럼을 between으로 검색</td></tr><tr><td style="text-align:left;">LessThan</td><td style="text-align:left;"><code>findByIdLessThan(Integer id)</code></td><td style="text-align:left;">작은 항목 검색</td></tr><tr><td style="text-align:left;">GreaterThanEqual</td><td style="text-align:left;"><code>findByIdGraterThanEqual(Integer id)</code></td><td style="text-align:left;">크거나 같은 항목 검색</td></tr><tr><td style="text-align:left;">Like</td><td style="text-align:left;"><code>findBySubjectLike(String subject)</code></td><td style="text-align:left;"><code>LIKE</code> 검색</td></tr><tr><td style="text-align:left;">In</td><td style="text-align:left;"><code>findBySubjectIn(String[] subjects)</code></td><td style="text-align:left;">여러 값중에 하나인 항목 검색</td></tr><tr><td style="text-align:left;">OrderBy</td><td style="text-align:left;"><code>findBySubjectOrderByCreateDateAsc(String subject)</code></td><td style="text-align:left;">검색 결과를 정렬하여 전달</td></tr></tbody></table><blockquote><p>단, 응답 결과가 여러건인 경우에는 리포지터리 메서드의 리턴 타입을 <code>Question</code>이 아닌 <code>List&lt;Question&gt;</code> 으로 해야 한다.</p></blockquote><p>보다 자세한 내용은 쿼리 생성 규칙에 대한 다음의 공식문서를 참고하자.</p><ul><li><a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation" target="_blank" rel="noopener noreferrer">https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation</a></li></ul><h3 id="findbysubjectlike" tabindex="-1"><a class="header-anchor" href="#findbysubjectlike"><span><code>findBySubjectLike</code></span></a></h3><p>이번에는 제목에 특정 문자열이 포함되어 있는 데이터를 조회해 보자. Question 리포지터리를 다음과 같이 수정하자.</p>`,12),ln=n("code",null,"/sbb/src/main/java/com/mysite/sbb/",-1),un=n("code",null,"QuestionRepository.java",-1),dn=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mysite<span class="token punctuation">.</span>sbb</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">JpaRepository</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">QuestionRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Question</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Question</span> <span class="token function">findBySubject</span><span class="token punctuation">(</span><span class="token class-name">String</span> subject<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Question</span> <span class="token function">findBySubjectAndContent</span><span class="token punctuation">(</span><span class="token class-name">String</span> subject<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Question</span><span class="token punctuation">&gt;</span></span> <span class="token function">findBySubjectLike</span><span class="token punctuation">(</span><span class="token class-name">String</span> subject<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>테스트코드는 다음과 같이 수정하자.</p>`,2),kn=n("code",null,"/sbb/src/test/java/com/mysite/sbb/",-1),rn=n("code",null,"SbbApplicationTests.java",-1),mn=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mysite<span class="token punctuation">.</span>sbb</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token static">assertEquals</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@SpringBootTest</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">SbbApplicationTests</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">QuestionRepository</span> questionRepository<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">testJpa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Question</span><span class="token punctuation">&gt;</span></span> qList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>questionRepository<span class="token punctuation">.</span><span class="token function">findBySubjectLike</span><span class="token punctuation">(</span><span class="token string">&quot;sbb%&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token class-name">Question</span> q <span class="token operator">=</span> qList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;sbb가 무엇인가요?&quot;</span><span class="token punctuation">,</span> q<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>테스트는 잘 통과될 것이다. Like 검색을 위해서는 findBySubjectLike 메서드의 입력 문자열로 &quot;sbb%&quot;와 같이 &quot;%&quot;를 적어주어야 한다. % 표기는 다음과 같은 의미를 갖는다.</p><ul><li><code>sbb%</code>: &quot;sbb&quot;로 시작하는 문자열</li><li><code>%sbb</code>: &quot;sbb&quot;로 끝나는 문자열</li><li><code>%sbb%</code>: &quot;sbb&quot;를 포함하는 문자열</li></ul><hr><h2 id="데이터-수정하기" tabindex="-1"><a class="header-anchor" href="#데이터-수정하기"><span>데이터 수정하기</span></a></h2><p>이번에는 질문 데이터를 수정하는 테스트 코드를 작성해 보자.</p>`,6),vn=n("code",null,"/sbb/src/test/java/com/mysite/sbb/",-1),bn=n("code",null,"SbbApplicationTests.java",-1),gn=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mysite<span class="token punctuation">.</span>sbb</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token static">assertTrue</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@SpringBootTest</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">SbbApplicationTests</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">QuestionRepository</span> questionRepository<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">testJpa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Question</span><span class="token punctuation">&gt;</span></span> oq <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>questionRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token function">assertTrue</span><span class="token punctuation">(</span>oq<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token class-name">Question</span> q <span class="token operator">=</span> oq<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        q<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">&quot;수정된 제목&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token keyword">this</span><span class="token punctuation">.</span>questionRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>assertTrue</code>(값)은 값이 <code>true</code>인지를 테스트한다.</p></blockquote><p>질문 데이터를 조회한 다음 subject를 &quot;수정된 제목&quot; 이라는 값으로 수정했다. 변경된 <code>Question</code> 데이터를 저장하기 위해서는 <code>this.questionRepository.save(q)</code> 처럼 리포지터리의 <code>save</code> 메서드를 사용한다.</p><p>테스트를 수행해 보면 콘솔 로그에서 다음과 같은 <code>UPDATE</code> 문이 실행되었음을 확인할 수 있을 것이다.</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">UPDATE</span></span>
<span class="line">    question </span>
<span class="line"><span class="token keyword">SET</span></span>
<span class="line">    content<span class="token operator">=</span>?<span class="token punctuation">,</span></span>
<span class="line">    create_date<span class="token operator">=</span>?<span class="token punctuation">,</span></span>
<span class="line">    subject<span class="token operator">=</span>? </span>
<span class="line"><span class="token keyword">WHERE</span></span>
<span class="line">    id<span class="token operator">=</span>?</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="데이터-삭제하기" tabindex="-1"><a class="header-anchor" href="#데이터-삭제하기"><span>데이터 삭제하기</span></a></h2><p>이어서 데이터를 삭제하는 것도 실습해 보자. 여기서는 첫 번째 질문을 삭제해 보자.</p>`,8),hn=n("code",null,"/sbb/src/test/java/com/mysite/sbb/",-1),yn=n("code",null,"SbbApplicationTests.java",-1),fn=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mysite<span class="token punctuation">.</span>sbb</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token static">assertEquals</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token static">assertTrue</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@SpringBootTest</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">SbbApplicationTests</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">QuestionRepository</span> questionRepository<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">testJpa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>questionRepository<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Question</span><span class="token punctuation">&gt;</span></span> oq <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>questionRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token function">assertTrue</span><span class="token punctuation">(</span>oq<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token class-name">Question</span> q <span class="token operator">=</span> oq<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token keyword">this</span><span class="token punctuation">.</span>questionRepository<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>questionRepository<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>리포지터리의 <code>count()</code> 메서드는 해당 리포지터리의 총 데이터건수를 리턴한다.</p><p><code>Question</code> 리포지터리의 <code>delete</code> 메서드를 사용하여 데이터를 삭제했다. 삭제하기 전에는 데이터 건수가 2, 삭제한 후에는 데이터 건수가 1인지를 테스트했다. 테스트는 잘 통과될 것이다.</p><hr><h2 id="답변-데이터-생성-후-저장하기" tabindex="-1"><a class="header-anchor" href="#답변-데이터-생성-후-저장하기"><span>답변 데이터 생성 후 저장하기</span></a></h2><p>이번에는 답변(<code>Answer</code>) 데이터를 생성하고 저장해 보자.</p>`,6),wn=n("code",null,"/sbb/src/test/java/com/mysite/sbb/",-1),jn=n("code",null,"SbbApplicationTests.java",-1),qn=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mysite<span class="token punctuation">.</span>sbb</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token static">assertEquals</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token static">assertTrue</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@SpringBootTest</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">SbbApplicationTests</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">QuestionRepository</span> questionRepository<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line highlighted">    <span class="token keyword">private</span> <span class="token class-name">AnswerRepository</span> answerRepository<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">testJpa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Question</span><span class="token punctuation">&gt;</span></span> oq <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>questionRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token function">assertTrue</span><span class="token punctuation">(</span>oq<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token class-name">Question</span> q <span class="token operator">=</span> oq<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted"></span>
<span class="line highlighted">        <span class="token class-name">Answer</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Answer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        a<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">&quot;네 자동으로 생성됩니다.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        a<span class="token punctuation">.</span><span class="token function">setQuestion</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 어떤 질문의 답변인지 알기위해서 Question 객체가 필요하다.</span></span>
<span class="line highlighted">        a<span class="token punctuation">.</span><span class="token function">setCreateDate</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token keyword">this</span><span class="token punctuation">.</span>answerRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>답변 데이터 처리를 위해서는 답변 리포지터리가 필요하므로 <code>AnswerRepository</code> 객체를 <code>@Autowired</code>로 주입했다. 답변 데이터를 생성하려면 질문 데이터가 필요하므로 우선 질문 데이터를 구해야 한다. id가 2인 질문 데이터를 가져온 다음 Answer 엔티티의 <code>question</code> 속성에 방금 가져온 질문 데이터를 대입해(<code>a.setQuestion(q)</code>) 답변 데이터를 생성했다. <code>Answer</code> 엔티티에는 어떤 질문에 해당하는 답변인지 연결할 목적으로 <code>question</code> 속성이 필요하다.</p><p>테스트를 수행해 보자. 답변 데이터가 잘 생성될 것이다.</p><hr><h2 id="답변-조회하기" tabindex="-1"><a class="header-anchor" href="#답변-조회하기"><span>답변 조회하기</span></a></h2><p><code>Answer</code>도 <code>Question</code> 엔티티와 마찬가지로 id 속성이 기본 키이므로 값이 자동으로 생성된다. 다음처럼 id 값을 이용해 데이터를 조회해 보자.</p>`,6),_n=n("code",null,"/sbb/src/test/java/com/mysite/sbb/",-1),An=n("code",null,"SbbApplicationTests.java",-1),Tn=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mysite<span class="token punctuation">.</span>sbb</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token static">assertEquals</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token static">assertTrue</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@SpringBootTest</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">SbbApplicationTests</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">QuestionRepository</span> questionRepository<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">AnswerRepository</span> answerRepository<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">testJpa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Answer</span><span class="token punctuation">&gt;</span></span> oa <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>answerRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token function">assertTrue</span><span class="token punctuation">(</span>oa<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token class-name">Answer</span> a <span class="token operator">=</span> oa<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">getQuestion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>id 값이 1인 답변을 조회했다. 그리고 그 답변의 질문 id가 2인지도 테스트해 보았다.</p><hr><h2 id="답변에-연결된-질문-찾기-vs-질문에-달린-답변-찾기" tabindex="-1"><a class="header-anchor" href="#답변에-연결된-질문-찾기-vs-질문에-달린-답변-찾기"><span>답변에 연결된 질문 찾기 vs 질문에 달린 답변 찾기</span></a></h2><p>앞에서 구성한 <code>Answer</code> 엔티티의 <code>question</code> 속성을 이용하면 &quot;답변에 연결된 질문&quot;을 조회할 수 있다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">a<span class="token punctuation">.</span><span class="token function">getQuestion</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>답변에 연결된 질문 찾기는 <code>Answer</code> 엔티티에 <code>question</code> 속성이 정의되어 있어서 매우 쉽다. 그런데 반대의 경우도 가능할까? 즉, 질문에서 답변을 찾을수 있을까?</p><p>다음과 같이 질문 엔티티에 정의한 <code>answerList</code>를 사용하면 역시 쉽게 구할수 있다.</p>`,8),Sn=n("code",null,"/sbb/src/test/java/com/mysite/sbb/",-1),Rn=n("code",null,"SbbApplicationTests.java",-1),xn=p(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mysite<span class="token punctuation">.</span>sbb</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token static">assertEquals</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token static">assertTrue</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@SpringBootTest</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">SbbApplicationTests</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">QuestionRepository</span> questionRepository<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">testJpa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line highlighted">        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Question</span><span class="token punctuation">&gt;</span></span> oq <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>questionRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token function">assertTrue</span><span class="token punctuation">(</span>oq<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token class-name">Question</span> q <span class="token operator">=</span> oq<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted"></span>
<span class="line highlighted">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Answer</span><span class="token punctuation">&gt;</span></span> answerList <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">getAnswerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted"></span>
<span class="line highlighted">        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> answerList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line highlighted">        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;네 자동으로 생성됩니다.&quot;</span><span class="token punctuation">,</span> answerList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>질문 객체로부터 답변 리스트를 구하는 테스트코드이다. id가 2인 질문에 답변을 한 개 등록했으므로 위와 같이 검증할 수 있다. 하지만 위 코드를 실행하면 다음과 같은 오류가 발생한다.</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">org.hibernate.LazyInitializationException</span><span class="token punctuation">:</span> <span class="token key atrule">failed to lazily initialize a collection of role</span><span class="token punctuation">:</span> com.mysite.sbb.Question.answerList<span class="token punctuation">,</span> could not initialize proxy <span class="token punctuation">-</span> no Session</span>
<span class="line">(<span class="token punctuation">...</span> 생략 <span class="token punctuation">...</span>)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>왜냐하면 <code>Question</code> 리포지터리가 <code>findById를 </code>호출하여 <code>Question</code> 객체를 조회하고 나면 DB세션이 끊어지기 때문이다. 그 이후에 실행되는 <code>q.getAnswerList()</code> 메서드는 세션이 종료되어 오류가 발생한다. 답변 데이터 리스트는 q 객체를 조회할때 가져오지 않고 <code>q.getAnswerList()</code> 메서드를 호출하는 시점에 가져오기 때문이다.</p><blockquote><p>이렇게 필요한 시점에 데이터를 가져오는 방식을 Lazy 방식이라고 한다. 이와 반대로 q 객체를 조회할때 답변 리스트를 모두 가져오는 방식은 Eager 방식이라고 한다. <code>@OneToMany</code>, <code>@ManyToOne</code> 애너테이션의 옵션으로 <code>fetch=FetchType.LAZY</code> 또는 <code>fetch=FetchType.EAGER</code> 처럼 가져오는 방식을 설정할 수 있는데 이 책에서는 따로 지정하지 않고 항상 디폴트 값을 사용할 것이다.</p></blockquote><p>사실 이 문제는 테스트 코드에서만 발생한다. 실제 서버에서 JPA 프로그램들을 실행할 때는 DB 세션이 종료되지 않기 때문에 위와 같은 오류가 발생하지 않는다. 테스트 코드를 수행할 때 위와 같은 오류를 방지할 수 있는 가장 간단한 방법은 다음처럼 <code>@Transactional</code> 애너테이션을 사용하는 것이다. <code>@Transactional</code> 애너테이션을 사용하면 메서드가 종료될 때까지 DB 세션이 유지된다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>mysite<span class="token punctuation">.</span>sbb</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token static">assertEquals</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token static">assertTrue</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Optional</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">SpringBootTest</span></span><span class="token punctuation">;</span></span>
<span class="line highlighted"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Transactional</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@SpringBootTest</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">SbbApplicationTests</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Autowired</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">QuestionRepository</span> questionRepository<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line highlighted">    <span class="token annotation punctuation">@Transactional</span></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">testJpa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Question</span><span class="token punctuation">&gt;</span></span> oq <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>questionRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">assertTrue</span><span class="token punctuation">(</span>oq<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Question</span> q <span class="token operator">=</span> oq<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Answer</span><span class="token punctuation">&gt;</span></span> answerList <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">getAnswerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> answerList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;네 자동으로 생성됩니다.&quot;</span><span class="token punctuation">,</span> answerList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위와 같이 <code>testJpa</code> 메서드에 <code>@Transactional</code> 애너테이션을 추가하면 오류없이 잘 수행될 것이다.</p><hr>`,9);function Bn(i,Qn){const e=c("router-link"),l=c("VPCard"),a=c("FontIcon"),u=c("VidStack");return b(),k("div",null,[n("h1",h,[n("a",y,[n("span",null,r(i.$frontmatter.title)+" 관련",1)])]),n("nav",f,[n("ul",null,[n("li",null,[s(e,{to:"#리포지터리"},{default:o(()=>[t("리포지터리")]),_:1})]),n("li",null,[s(e,{to:"#데이터-저장하기"},{default:o(()=>[t("데이터 저장하기")]),_:1})]),n("li",null,[s(e,{to:"#데이터-조회하기"},{default:o(()=>[t("데이터 조회하기")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#findall"},{default:o(()=>[t("findAll")]),_:1})]),n("li",null,[s(e,{to:"#findbyid"},{default:o(()=>[t("findById")]),_:1})]),n("li",null,[s(e,{to:"#findbysubject"},{default:o(()=>[t("findBySubject")]),_:1})]),n("li",null,[s(e,{to:"#findbysubjectandcontent"},{default:o(()=>[t("findBySubjectAndContent")]),_:1})]),n("li",null,[s(e,{to:"#findbysubjectlike"},{default:o(()=>[t("findBySubjectLike")]),_:1})])])]),n("li",null,[s(e,{to:"#데이터-수정하기"},{default:o(()=>[t("데이터 수정하기")]),_:1})]),n("li",null,[s(e,{to:"#데이터-삭제하기"},{default:o(()=>[t("데이터 삭제하기")]),_:1})]),n("li",null,[s(e,{to:"#답변-데이터-생성-후-저장하기"},{default:o(()=>[t("답변 데이터 생성 후 저장하기")]),_:1})]),n("li",null,[s(e,{to:"#답변-조회하기"},{default:o(()=>[t("답변 조회하기")]),_:1})]),n("li",null,[s(e,{to:"#답변에-연결된-질문-찾기-vs-질문에-달린-답변-찾기"},{default:o(()=>[t("답변에 연결된 질문 찾기 vs 질문에 달린 답변 찾기")]),_:1})])])]),w,s(l,m(v({title:"2-05. 리포지터리",desc:"점프 투 스프링부트 - WikiDocs",link:"https://wikidocs.net/160890",logo:"https://wikidocs.net/static/img/favicon.ico",background:"rgba(255,255,255,0.2)"})),null,16),j,n("blockquote",null,[n("p",null,[n("a",q,[s(a,{icon:"iconfont icon-github"}),t(),_,t(" - "),s(a,{icon:"fas fa-folder-open"}),t(),A])])]),s(u,{src:"youtube/8xI8YhIgYJU"}),T,n("blockquote",null,[n("p",null,[t("파일명: "),s(a,{icon:"fas fa-folder-open"}),S,s(a,{icon:"fa-brands fa-java"}),R])]),x,n("blockquote",null,[n("p",null,[t("파일명: "),s(a,{icon:"fas fa-folder-open"}),B,s(a,{icon:"fa-brands fa-java"}),Q])]),E,n("blockquote",null,[n("p",null,[t("파일명: "),s(a,{icon:"fas fa-folder-open"}),J,s(a,{icon:"fa-brands fa-java"}),L])]),I,n("figure",null,[C,n("figcaption",null,[t("이제 작성한 "),D,t(" 클래스를 실행해 보자. 다음처럼 "),s(a,{icon:"iconfont icon-select"}),O,t("를 선택하면 "),P,t(" 클래스를 실행할수 있다.")])]),z,n("blockquote",null,[n("p",null,[t("파일명: "),s(a,{icon:"fas fa-folder-open"}),U,s(a,{icon:"fa-brands fa-java"}),N])]),V,n("blockquote",null,[n("p",null,[t("파일명: "),s(a,{icon:"fas fa-folder-open"}),K,s(a,{icon:"fa-brands fa-java"}),H])]),F,n("blockquote",null,[n("p",null,[t("파일명: "),s(a,{icon:"fas fa-folder-open"}),W,s(a,{icon:"fa-brands fa-java"}),G])]),M,n("blockquote",null,[n("p",null,[t("파일명: "),s(a,{icon:"fas fa-folder-open"}),Z,s(a,{icon:"fa-brands fa-java"}),Y])]),$,n("blockquote",null,[n("p",null,[t("파일명: "),s(a,{icon:"fas fa-folder-open"}),X,s(a,{icon:"fas fa-file-lines"}),nn])]),sn,n("blockquote",null,[n("p",null,[t("파일명: "),s(a,{icon:"fas fa-folder-open"}),an,s(a,{icon:"fa-brands fa-java"}),tn])]),pn,n("blockquote",null,[n("p",null,[t("파일명: "),s(a,{icon:"fas fa-folder-open"}),en,s(a,{icon:"fa-brands fa-java"}),on])]),cn,n("blockquote",null,[n("p",null,[t("파일명: "),s(a,{icon:"fas fa-folder-open"}),ln,s(a,{icon:"fa-brands fa-java"}),un])]),dn,n("blockquote",null,[n("p",null,[t("파일명: "),s(a,{icon:"fas fa-folder-open"}),kn,s(a,{icon:"fa-brands fa-java"}),rn])]),mn,n("blockquote",null,[n("p",null,[t("파일명: "),s(a,{icon:"fas fa-folder-open"}),vn,s(a,{icon:"fa-brands fa-java"}),bn])]),gn,n("blockquote",null,[n("p",null,[t("파일명: "),s(a,{icon:"fas fa-folder-open"}),hn,s(a,{icon:"fa-brands fa-java"}),yn])]),fn,n("blockquote",null,[n("p",null,[t("파일명: "),s(a,{icon:"fas fa-folder-open"}),wn,s(a,{icon:"fa-brands fa-java"}),jn])]),qn,n("blockquote",null,[n("p",null,[t("파일명: "),s(a,{icon:"fas fa-folder-open"}),_n,s(a,{icon:"fa-brands fa-java"}),An])]),Tn,n("blockquote",null,[n("p",null,[t("파일명: "),s(a,{icon:"fas fa-folder-open"}),Sn,s(a,{icon:"fa-brands fa-java"}),Rn])]),xn])}const Ln=d(g,[["render",Bn],["__file","02E.html.vue"]]),In=JSON.parse('{"path":"/java/jump-to-spring-boot/02E.html","title":"02E. 리포지터리","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"02E. 리포지터리","description":"Jump to Spring Boot > 02E. 리포지터리","category":["Java","Spring","AWS"],"tag":["crashcourse","java","jdk","jdk8","stream","spring","springframework","springboot","aws","aws-ec2"],"head":[[{"meta":null},{"property":"og:title","content":"Jump to Spring Boot > 02E. 리포지터리"},{"property":"og:description","content":"02E. 리포지터리"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/java/jump-to-spring-boot/02E.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/java/jump-to-spring-boot/02E.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"02E. 리포지터리"}],["meta",{"property":"og:description","content":"Jump to Spring Boot > 02E. 리포지터리"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://wikidocs.net/images/page/160890/C_2-05_1.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"jdk"}],["meta",{"property":"article:tag","content":"jdk8"}],["meta",{"property":"article:tag","content":"stream"}],["meta",{"property":"article:tag","content":"spring"}],["meta",{"property":"article:tag","content":"springframework"}],["meta",{"property":"article:tag","content":"springboot"}],["meta",{"property":"article:tag","content":"aws"}],["meta",{"property":"article:tag","content":"aws-ec2"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"02E. 리포지터리\\",\\"image\\":[\\"https://wikidocs.net/images/page/160890/C_2-05_1.png\\",\\"https://wikidocs.net/images/page/160890/C_2-05_2.png\\",\\"https://wikidocs.net/images/page/160890/O_2-05_3.png\\",\\"https://wikidocs.net/images/page/160890/C_2-05_4.png\\",\\"https://wikidocs.net/images/page/160890/C_2-05_5.png\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"리포지터리","slug":"리포지터리","link":"#리포지터리","children":[]},{"level":2,"title":"데이터 저장하기","slug":"데이터-저장하기","link":"#데이터-저장하기","children":[]},{"level":2,"title":"데이터 조회하기","slug":"데이터-조회하기","link":"#데이터-조회하기","children":[{"level":3,"title":"findAll","slug":"findall","link":"#findall","children":[]},{"level":3,"title":"findById","slug":"findbyid","link":"#findbyid","children":[]},{"level":3,"title":"findBySubject","slug":"findbysubject","link":"#findbysubject","children":[]},{"level":3,"title":"findBySubjectAndContent","slug":"findbysubjectandcontent","link":"#findbysubjectandcontent","children":[]},{"level":3,"title":"findBySubjectLike","slug":"findbysubjectlike","link":"#findbysubjectlike","children":[]}]},{"level":2,"title":"데이터 수정하기","slug":"데이터-수정하기","link":"#데이터-수정하기","children":[]},{"level":2,"title":"데이터 삭제하기","slug":"데이터-삭제하기","link":"#데이터-삭제하기","children":[]},{"level":2,"title":"답변 데이터 생성 후 저장하기","slug":"답변-데이터-생성-후-저장하기","link":"#답변-데이터-생성-후-저장하기","children":[]},{"level":2,"title":"답변 조회하기","slug":"답변-조회하기","link":"#답변-조회하기","children":[]},{"level":2,"title":"답변에 연결된 질문 찾기 vs 질문에 달린 답변 찾기","slug":"답변에-연결된-질문-찾기-vs-질문에-달린-답변-찾기","link":"#답변에-연결된-질문-찾기-vs-질문에-달린-답변-찾기","children":[]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":10}]},"readingTime":{"minutes":5.06,"words":1518},"filePathRelative":"java/jump-to-spring-boot/02E.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{Ln as comp,In as data};
