import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as s,t as m,b as a,w as l,n as o,g as r,d as n,e,r as p,o as k}from"./app-U_bew1in.js";const w={},g={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},v={class:"table-of-contents"},f=s("hr",null,null,-1),b=s("h2",{id:"complex-data-types",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#complex-data-types"},[s("span",null,"Complex data types")])],-1),_=s("p",null,"Lynch’s Law says “when the going gets tough, everyone leaves.” Anyone can complete the first day of a course, but it takes diligence to come back for day 02 – well done for sticking with it!",-1),x=s("p",null,[s("strong",null,"Today you have eleven one-minute videos to watch, and you’ll meet things like arrays, dictionaries, and enums"),n(". As before, if you want to dive deeper into each topic there is optional further reading, but you don’t need to read that unless you want to. Regardless, there’s a short test to help make sure you’ve understood what was taught.")],-1),q=s("hr",null,null,-1),S=s("h3",{id:"_1-arrays",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-arrays"},[s("span",null,"1. Arrays")])],-1),D={class:"hint-container details"},T=s("summary",null,"1. Arrays",-1),A=e(`<p>Arrays are collections of values that are stored as a single value. For example, John, Paul, George, and Ringo are names, but arrays let you group them in a single value called The Beatles.</p><p>In code, we write this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> john <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;John Lennon&quot;</span></span></span>
<span class="line"><span class="token keyword">let</span> paul <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Paul McCartney&quot;</span></span></span>
<span class="line"><span class="token keyword">let</span> george <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;George Harrison&quot;</span></span></span>
<span class="line"><span class="token keyword">let</span> ringo <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Ringo Starr&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> beatles <span class="token operator">=</span> <span class="token punctuation">[</span>john<span class="token punctuation">,</span> paul<span class="token punctuation">,</span> george<span class="token punctuation">,</span> ringo<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That last line makes the array: it starts and ends with brackets, with each item in the array separated by a comma.</p><p>You can read values from an array by writing a number inside brackets. Array positions count from 0, so if you want to read “Paul McCartney” you would write this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">beatles<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Be careful: Swift crashes if you read an item that doesn’t exist. For example, trying to read <code>beatles[9]</code> is a bad idea.</p><p>Note: If you’re using type annotations, arrays are written in brackets: <code>[String]</code>, <code>[Int]</code>, <code>[Double]</code>, and <code>[Bool]</code>.</p>`,8),j=e('<div class="hint-container info"><p class="hint-container-title">1. Arrays - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-have-arrays" target="_blank" rel="noopener noreferrer">Why does Swift have arrays?</a></li><li>Test: <a href="https://hackingwithswift.com/review/arrays" target="_blank" rel="noopener noreferrer">Arrays</a></li></ul></div><h3 id="_2-sets" tabindex="-1"><a class="header-anchor" href="#_2-sets"><span>2. Sets</span></a></h3>',2),C={class:"hint-container details"},E=s("summary",null,"2. Sets",-1),I=e(`<p>Sets are collections of values just like arrays, except they have two differences:</p><ol><li>Items aren’t stored in any order; they are stored in what is effectively a random order.</li><li>No item can appear twice in a set; all items must be unique.</li></ol><p>You can create sets directly from arrays, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;red&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;green&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;blue&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>When you look at the value of <code>colors</code> inside the playground output you’ll see it doesn’t match the order we used to create it. It’s not really a random order, it’s just <em>unordered</em> – Swift makes no guarantees about its order. Because they are unordered, you can’t read values from a set using numerical positions like you can with arrays.</p><p>If you try to insert a duplicate item into a set, the duplicates get ignored. For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> colors2 <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;red&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;green&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;blue&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;red&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;blue&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The final <code>colors2</code> set will still only include red, green, and blue once.</p>`,8),P=e('<div class="hint-container info"><p class="hint-container-title">2. Sets - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-are-sets-different-from-arrays-in-swift" target="_blank" rel="noopener noreferrer">Why are sets different from arrays in Swift?</a></li><li>Test: <a href="https://hackingwithswift.com/review/sets" target="_blank" rel="noopener noreferrer">Sets</a></li></ul></div><h3 id="_3-tuples" tabindex="-1"><a class="header-anchor" href="#_3-tuples"><span>3. Tuples</span></a></h3>',2),R={class:"hint-container details"},W=s("summary",null,"3. Tuples",-1),F=e(`<p>Tuples allow you to store several values together in a single value. That might sound like arrays, but tuples are different:</p><ol><li>You can’t add or remove items from a tuple; they are fixed in size.</li><li>You can’t change the type of items in a tuple; they always have the same types they were created with.</li><li>You can access items in a tuple using numerical positions or by naming them, but Swift won’t let you read numbers or names that don’t exist.</li></ol><p>Tuples are created by placing multiple items into parentheses, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token punctuation">(</span>first<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Taylor&quot;</span></span><span class="token punctuation">,</span> last<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Swift&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You then access items using numerical positions starting from 0:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">name<span class="token punctuation">.</span><span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Or you can access items using their names:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">name<span class="token punctuation">.</span>first</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Remember, you can change the values inside a tuple after you create it, but not the types of values. So, if you tried to change <code>name</code> to be <code>(first: &quot;Justin&quot;, age: 25)</code> you would get an error.</p>`,9),O=e('<div class="hint-container info"><p class="hint-container-title">3. Tuples - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/how-are-tuples-different-from-arrays-in-swift" target="_blank" rel="noopener noreferrer">How are tuples different from arrays in Swift?</a></li><li>Test: <a href="https://hackingwithswift.com/review/tuples" target="_blank" rel="noopener noreferrer">Tuples</a></li></ul></div><h3 id="_4-arrays-vs-sets-vs-tuples" tabindex="-1"><a class="header-anchor" href="#_4-arrays-vs-sets-vs-tuples"><span>4. Arrays vs sets vs tuples</span></a></h3>',2),V={class:"hint-container details"},Y=s("summary",null,"4. Arrays vs sets vs tuples",-1),B=e(`<p>Arrays, sets, and tuples can seem similar at first, but they have distinct uses. To help you know which to use, here are some rules.</p><p>If you need a specific, fixed collection of related values where each item has a precise position or name, you should use a tuple:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> address <span class="token operator">=</span> <span class="token punctuation">(</span>house<span class="token punctuation">:</span> <span class="token number">555</span><span class="token punctuation">,</span> street<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Taylor Swift Avenue&quot;</span></span><span class="token punctuation">,</span> city<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Nashville&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you need a collection of values that must be unique or you need to be able to check whether a specific item is in there extremely quickly, you should use a set:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;aardvark&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;astronaut&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;azalea&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you need a collection of values that can contain duplicates, or the order of your items matters, you should use an array:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> pythons <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Eric&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Graham&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;John&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Michael&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Terry&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Terry&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Arrays are by far the most common of the three types.</p>`,8),N=e('<div class="hint-container info"><p class="hint-container-title">4. Arrays vs sets vs tuples - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-should-you-use-an-array-a-set-or-a-tuple-in-swift" target="_blank" rel="noopener noreferrer">When should you use an array, a set, or a tuple in Swift?</a></li><li>Test: <a href="https://hackingwithswift.com/review/arrays-vs-sets-vs-tuples" target="_blank" rel="noopener noreferrer">Arrays vs sets vs tuples</a></li></ul></div><h3 id="_5-dictionaries" tabindex="-1"><a class="header-anchor" href="#_5-dictionaries"><span>5. Dictionaries</span></a></h3>',2),J={class:"hint-container details"},M=s("summary",null,"5. Dictionaries",-1),z=e(`<p>Dictionaries are collections of values just like arrays, but rather than storing things with an integer position you can access them using anything you want.</p><p>The most common way of storing dictionary data is using strings. For example, we could create a dictionary that stores the height of singers using their name:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> heights <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Taylor Swift&quot;</span></span><span class="token punctuation">:</span> <span class="token number">1.78</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Ed Sheeran&quot;</span></span><span class="token punctuation">:</span> <span class="token number">1.73</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Just like arrays, dictionaries start and end with brackets and each item is separated with a comma. However, we also use a colon to separate the value you want to store (e.g. 1.78) from the identifier you want to store it under (e.g. “Taylor Swift”).</p><p>These identifiers are called keys, and you can use them to read data back out of the dictionary:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">heights<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Taylor Swift&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>Note</strong>: When using type annotations, dictionaries are written in brackets with a colon between your identifier and value types. For example, <code>[String: Double]</code> and <code>[String: String]</code>.</p>`,7),K=e('<div class="hint-container info"><p class="hint-container-title">5. Dictionaries - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-have-dictionaries-as-well-as-arrays" target="_blank" rel="noopener noreferrer">Why does Swift have dictionaries as well as arrays?</a></li><li>Test: <a href="https://hackingwithswift.com/review/dictionaries" target="_blank" rel="noopener noreferrer">Dictionaries</a></li></ul></div><h3 id="_6-dictionary-default-values" tabindex="-1"><a class="header-anchor" href="#_6-dictionary-default-values"><span>6. Dictionary default values</span></a></h3>',2),Z={class:"hint-container details"},G=s("summary",null,"6. Dictionary default values",-1),U=e(`<p>If you try to read a value from a dictionary using a key that doesn’t exist, Swift will send you back <code>nil</code> – nothing at all. While this might be what you want, there’s an alternative: we can provide the dictionary with a default value to use if we request a missing key.</p><p>To demonstrate this, let’s create a dictionary of favorite ice creams for two people:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> favoriteIceCream <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Paul&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Chocolate&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Sophie&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Vanilla&quot;</span></span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can read Paul’s favorite ice cream like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">favoriteIceCream<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Paul&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>But if we tried reading the favorite ice cream for Charlotte, we’d get back nil, meaning that Swift doesn’t have a value for that key:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">favoriteIceCream<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Charlotte&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We can fix this by giving the dictionary a default value of “Unknown”, so that when no ice cream is found for Charlotte we get back “Unknown” rather than nil:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">favoriteIceCream<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Charlotte&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Unknown&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,9),L=e('<div class="hint-container info"><p class="hint-container-title">6. Dictionary default values - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-have-default-values-for-dictionaries" target="_blank" rel="noopener noreferrer">Why does Swift have default values for dictionaries?</a></li><li>Test: <a href="https://hackingwithswift.com/review/dictionary-default-values" target="_blank" rel="noopener noreferrer">Dictionary default values</a></li></ul></div><h3 id="_7-creating-empty-collections" tabindex="-1"><a class="header-anchor" href="#_7-creating-empty-collections"><span>7. Creating empty collections</span></a></h3>',2),H={class:"hint-container details"},Q=s("summary",null,"7. Creating empty collections",-1),X=e(`<p>Arrays, sets, and dictionaries are called collections, because they collect values together in one place.</p><p>If you want to create an empty collection just write its type followed by opening and closing parentheses. For example, we can create an empty dictionary with strings for keys and values like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> teams <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We can then add entries later on, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">teams<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Paul&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Red&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Similarly, you can create an empty array to store integers like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The exception is creating an empty set, which is done differently:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> words <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">Int</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>This is because Swift has special syntax only for dictionaries and arrays; other types must use angle bracket syntax like sets.</p><p>If you wanted, you could create arrays and dictionaries with similar syntax:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> scores <span class="token operator">=</span> <span class="token class-name">Dictionary</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Int</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">var</span> results <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token class-name">Int</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,12),$=e('<div class="hint-container info"><p class="hint-container-title">7. Creating empty collections - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-would-you-want-to-create-an-empty-collection" target="_blank" rel="noopener noreferrer">Why would you want to create an empty collection?</a></li><li>Test: <a href="https://hackingwithswift.com/review/creating-empty-collections" target="_blank" rel="noopener noreferrer">Creating empty collections</a></li></ul></div><h3 id="_8-enumerations" tabindex="-1"><a class="header-anchor" href="#_8-enumerations"><span>8. Enumerations</span></a></h3>',2),ss={class:"hint-container details"},as=s("summary",null,"8. Enumerations",-1),es=e(`<p>Enumerations – usually called just enums – are a way of defining groups of related values in a way that makes them easier to use.</p><p>For example, if you wanted to write some code to represent the success or failure of some work you were doing, you could represent that as strings:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;failure&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>But what happens if someone accidentally uses different naming?</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;failed&quot;</span></span></span>
<span class="line"><span class="token keyword">let</span> result3 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;fail&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>All those three are different strings, so they mean different things.</p><p>With enums we can define a <code>Result</code> type that can be either <code>success</code> or <code>failure</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> success</span>
<span class="line">    <span class="token keyword">case</span> failure</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And now when we use it we must choose one of those two values:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> result4 <span class="token operator">=</span> <span class="token class-name">Result</span><span class="token punctuation">.</span>failure</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This stops you from accidentally using different strings each time.</p>`,11),ns=e('<div class="hint-container info"><p class="hint-container-title">8. Enumerations - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-need-enums" target="_blank" rel="noopener noreferrer">Why does Swift need enums?</a></li><li>Test: <a href="https://hackingwithswift.com/review/enumerations" target="_blank" rel="noopener noreferrer">Enumerations</a></li></ul></div><h3 id="_9-enum-associated-values" tabindex="-1"><a class="header-anchor" href="#_9-enum-associated-values"><span>9. Enum associated values</span></a></h3>',2),ts={class:"hint-container details"},is=s("summary",null,"9. Enum associated values",-1),ls=e(`<p>As well as storing a simple value, enums can also store associated values attached to each case. This lets you attach additional information to your enums so they can represent more nuanced data.</p><p>For example, we might define an enum that stores various kinds of activities:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> bored</span>
<span class="line">    <span class="token keyword">case</span> running</span>
<span class="line">    <span class="token keyword">case</span> talking</span>
<span class="line">    <span class="token keyword">case</span> singing</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That lets us say that someone is talking, but we don’t know what they are talking <em>about</em>, or we can know that someone is running, but we don’t know where they are running to.</p><p>Enum associated values let us add those additional details:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">Activity</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> bored</span>
<span class="line">    <span class="token keyword">case</span> <span class="token function">running</span><span class="token punctuation">(</span>destination<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token function">talking</span><span class="token punctuation">(</span>topic<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token function">singing</span><span class="token punctuation">(</span>volume<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we can be more precise – we can say that someone is talking about football:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> talking <span class="token operator">=</span> <span class="token class-name">Activity</span><span class="token punctuation">.</span><span class="token function">talking</span><span class="token punctuation">(</span>topic<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;football&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,8),os=e('<div class="hint-container info"><p class="hint-container-title">9. Enum associated values - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-would-you-want-to-associate-a-value-with-an-enum-case" target="_blank" rel="noopener noreferrer">Why would you want to associate a value with an enum case?</a></li><li>Test: <a href="https://hackingwithswift.com/review/enum-associated-values" target="_blank" rel="noopener noreferrer">Enum associated values</a></li></ul></div><h3 id="_10-enum-raw-values" tabindex="-1"><a class="header-anchor" href="#_10-enum-raw-values"><span>10. Enum raw values</span></a></h3>',2),rs={class:"hint-container details"},cs=s("summary",null,"10. Enum raw values",-1),ps=e(`<p>Sometimes you need to be able to assign values to enums so they have meaning. This lets you create them dynamically, and also use them in different ways.</p><p>For example, you might create a <code>Planet</code> enum that stores integer values for each of its cases:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">Planet</span><span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> mercury</span>
<span class="line">    <span class="token keyword">case</span> venus</span>
<span class="line">    <span class="token keyword">case</span> earth</span>
<span class="line">    <span class="token keyword">case</span> mars</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Swift will automatically assign each of those a number starting from 0, and you can use that number to create an instance of the appropriate enum case. For example, <code>earth</code> will be given the number 2, so you can write this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> earth <span class="token operator">=</span> <span class="token class-name">Planet</span><span class="token punctuation">(</span>rawValue<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you want, you can assign one or more cases a specific value, and Swift will generate the rest. It’s not very natural for us to think of Earth as the second planet, so you could write this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">Planet</span><span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> mercury <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">case</span> venus</span>
<span class="line">    <span class="token keyword">case</span> earth</span>
<span class="line">    <span class="token keyword">case</span> mars</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now Swift will assign 1 to <code>mercury</code> and count upwards from there, meaning that <code>earth</code> is now the third planet.</p>`,8),us=e('<div class="hint-container info"><p class="hint-container-title">10. Enum raw values - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-do-swifts-enums-have-raw-values" target="_blank" rel="noopener noreferrer">Why do Swift’s enums have raw values?</a></li><li>Test: <a href="https://hackingwithswift.com/review/enum-raw-values" target="_blank" rel="noopener noreferrer">Enum raw values</a></li></ul></div><h3 id="_11-complex-types-summary" tabindex="-1"><a class="header-anchor" href="#_11-complex-types-summary"><span>11. Complex types: Summary</span></a></h3>',2),ds={class:"hint-container details"},hs=s("summary",null,"11. Complex types: Summary",-1),ms=s("p",null,"You’ve made it to the end of the second part of this series, so let’s summarize:",-1),ks=s("ol",null,[s("li",null,"Arrays, sets, tuples, and dictionaries let you store a group of items under a single value. They each do this in different ways, so which you use depends on the behavior you want."),s("li",null,"Arrays store items in the order you add them, and you access them using numerical positions."),s("li",null,"Sets store items without any order, so you can’t access them using numerical positions."),s("li",null,"Tuples are fixed in size, and you can attach names to each of their items. You can read items using numerical positions or using your names."),s("li",null,"Dictionaries store items according to a key, and you can read items using those keys."),s("li",null,"Enums are a way of grouping related values so you can use them without spelling mistakes."),s("li",null,"You can attach raw values to enums so they can be created from integers or strings, or you can add associated values to store additional information about each case.")],-1),ws=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"11. Complex types: Summary"),s("ul",null,[s("li",null,[n("Test: "),s("a",{href:"https://hackingwithswift.com/review/complex-types-summary",target:"_blank",rel:"noopener noreferrer"},"Complex types")])])],-1),gs=s("hr",null,null,-1);function ys(u,vs){const t=p("router-link"),i=p("VPCard"),c=p("VidStack");return k(),h("div",null,[s("h1",g,[s("a",y,[s("span",null,m(u.$frontmatter.title)+" 관련",1)])]),s("nav",v,[s("ul",null,[s("li",null,[a(t,{to:"#complex-data-types"},{default:l(()=>[n("Complex data types")]),_:1}),s("ul",null,[s("li",null,[a(t,{to:"#_1-arrays"},{default:l(()=>[n("1. Arrays")]),_:1})]),s("li",null,[a(t,{to:"#_2-sets"},{default:l(()=>[n("2. Sets")]),_:1})]),s("li",null,[a(t,{to:"#_3-tuples"},{default:l(()=>[n("3. Tuples")]),_:1})]),s("li",null,[a(t,{to:"#_4-arrays-vs-sets-vs-tuples"},{default:l(()=>[n("4. Arrays vs sets vs tuples")]),_:1})]),s("li",null,[a(t,{to:"#_5-dictionaries"},{default:l(()=>[n("5. Dictionaries")]),_:1})]),s("li",null,[a(t,{to:"#_6-dictionary-default-values"},{default:l(()=>[n("6. Dictionary default values")]),_:1})]),s("li",null,[a(t,{to:"#_7-creating-empty-collections"},{default:l(()=>[n("7. Creating empty collections")]),_:1})]),s("li",null,[a(t,{to:"#_8-enumerations"},{default:l(()=>[n("8. Enumerations")]),_:1})]),s("li",null,[a(t,{to:"#_9-enum-associated-values"},{default:l(()=>[n("9. Enum associated values")]),_:1})]),s("li",null,[a(t,{to:"#_10-enum-raw-values"},{default:l(()=>[n("10. Enum raw values")]),_:1})]),s("li",null,[a(t,{to:"#_11-complex-types-summary"},{default:l(()=>[n("11. Complex types: Summary")]),_:1})])])])])]),f,a(i,o(r({title:"100 Days of Swift - Day 2",desc:"Complex data types",link:"https://www.hackingwithswift.com/100/2",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),b,_,x,q,S,s("details",D,[T,a(i,o(r({title:"100 Days of Swift - Day 2 - 1. Arrays",desc:"1. Arrays",link:"https://www.hackingwithswift.com/sixty/2/1/arrays",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/iVeFsZhdeCI"}),A]),j,s("details",C,[E,a(i,o(r({title:"100 Days of Swift - Day 2 - 2. Sets",desc:"2. Sets",link:"https://www.hackingwithswift.com/sixty/2/2/sets",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/iotojg2MgGQ"}),I]),P,s("details",R,[W,a(i,o(r({title:"100 Days of Swift - Day 2 - 3. Tuples",desc:"3. Tuples",link:"https://www.hackingwithswift.com/sixty/2/3/tuples",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/NRonCfB4RYg"}),F]),O,s("details",V,[Y,a(i,o(r({title:"100 Days of Swift - Day 2 - 4. Arrays vs sets vs tuples",desc:"4. Arrays vs sets vs tuples",link:"https://www.hackingwithswift.com/sixty/2/4/arrays-vs-sets-vs-tuples",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/yZZ6UTipwkM"}),B]),N,s("details",J,[M,a(i,o(r({title:"100 Days of Swift - Day 2 - 5. Dictionaries",desc:"5. Dictionaries",link:"https://www.hackingwithswift.com/sixty/2/5/dictionaries",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/R0Uto9Wc3dA"}),z]),K,s("details",Z,[G,a(i,o(r({title:"100 Days of Swift - Day 2 - 6. Dictionary default values",desc:"6. Dictionary default values",link:"https://www.hackingwithswift.com/sixty/2/6/dictionary-default-values",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/wGk9sF1BQK0"}),U]),L,s("details",H,[Q,a(i,o(r({title:"100 Days of Swift - Day 2 - 7. Creating empty collections",desc:"7. Creating empty collections",link:"https://www.hackingwithswift.com/sixty/2/7/creating-empty-collections",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/yBJXkieX2R4"}),X]),$,s("details",ss,[as,a(i,o(r({title:"100 Days of Swift - Day 2 - 8. Enumerations",desc:"8. Enumerations",link:"https://www.hackingwithswift.com/sixty/2/8/enumerations",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/Eo-p7oVroVY"}),es]),ns,s("details",ts,[is,a(i,o(r({title:"100 Days of Swift - Day 2 - 9. Enum associated values",desc:"9. Enum associated values",link:"https://www.hackingwithswift.com/sixty/2/9/enum-associated-values",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/E8MuO6ShfKw"}),ls]),os,s("details",rs,[cs,a(i,o(r({title:"100 Days of Swift - Day 2 - 10. Enum raw values",desc:"10. Enum raw values",link:"https://www.hackingwithswift.com/sixty/2/10/enum-raw-values",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/ssLIP4gFrYc"}),ps]),us,s("details",ds,[hs,a(i,o(r({title:"100 Days of Swift - Day 2 - 11. Complex types: Summary",desc:"11. Complex types: Summary",link:"https://www.hackingwithswift.com/sixty/2/11/complex-types-summary",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),a(c,{src:"youtube/4dKDADbQtXY"}),ms,ks]),ws,gs])}const _s=d(w,[["render",ys],["__file","02.html.vue"]]),xs=JSON.parse('{"path":"/swift/100-days-of-swift/02.html","title":"Day 02","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 02","description":"100 Days of Swift > Day 02","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of Swift > Day 02"},{"property":"og:description","content":"Day 02"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swift/02.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swift/02.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 02"}],["meta",{"property":"og:description","content":"100 Days of Swift > Day 02"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 02\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Complex data types","slug":"complex-data-types","link":"#complex-data-types","children":[{"level":3,"title":"1. Arrays","slug":"_1-arrays","link":"#_1-arrays","children":[]},{"level":3,"title":"2. Sets","slug":"_2-sets","link":"#_2-sets","children":[]},{"level":3,"title":"3. Tuples","slug":"_3-tuples","link":"#_3-tuples","children":[]},{"level":3,"title":"4. Arrays vs sets vs tuples","slug":"_4-arrays-vs-sets-vs-tuples","link":"#_4-arrays-vs-sets-vs-tuples","children":[]},{"level":3,"title":"5. Dictionaries","slug":"_5-dictionaries","link":"#_5-dictionaries","children":[]},{"level":3,"title":"6. Dictionary default values","slug":"_6-dictionary-default-values","link":"#_6-dictionary-default-values","children":[]},{"level":3,"title":"7. Creating empty collections","slug":"_7-creating-empty-collections","link":"#_7-creating-empty-collections","children":[]},{"level":3,"title":"8. Enumerations","slug":"_8-enumerations","link":"#_8-enumerations","children":[]},{"level":3,"title":"9. Enum associated values","slug":"_9-enum-associated-values","link":"#_9-enum-associated-values","children":[]},{"level":3,"title":"10. Enum raw values","slug":"_10-enum-raw-values","link":"#_10-enum-raw-values","children":[]},{"level":3,"title":"11. Complex types: Summary","slug":"_11-complex-types-summary","link":"#_11-complex-types-summary","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":9}]},"readingTime":{"minutes":9.86,"words":2957},"filePathRelative":"swift/100-days-of-swift/02.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{_s as comp,xs as data};
