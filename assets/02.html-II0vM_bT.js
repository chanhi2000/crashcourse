import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,a as n,t as b,b as e,w as a,n as h,g as y,d as s,e as i,r as c,o as g}from"./app-U_bew1in.js";const x={},f={id:"frontmatter-title-관련",tabindex:"-1"},_={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"},j=n("hr",null,null,-1),P=i(`<hr><h2 id="_01-주석-comment" tabindex="-1"><a class="header-anchor" href="#_01-주석-comment"><span>01. 주석 (Comment)</span></a></h2><p>앞서 앞으로의 모든 실습은 Colab 또는 주피터 노트북에서 실행한다고 가정한다고 언급한 바 있습니다. 이를 유념해주세요.</p><h3 id="주석이란" tabindex="-1"><a class="header-anchor" href="#주석이란"><span>주석이란?</span></a></h3><p>파이썬에서 앞에 #을 붙여서 작성하는 경우를 주석이라고 합니다. 영어로 comment이구요. 실제 코드가 아니므로 실행되지 않습니다. 일종의 메모를 위한 것이라고 보시면 됩니다. 아래와 같이 코드를 실행해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 이렇게 앞에 #을 붙여서 작성하는 경우를 주석이라고 합니다.</span></span>
<span class="line"><span class="token comment"># 영어로 comment이구요. 실제 코드가 아니므로 실행되지 않습니다.</span></span>
<span class="line"><span class="token comment"># 일종의 메모를 위한 것이라고 보시면 됩니다.</span></span>
<span class="line"></span>
<span class="line"><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">5</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># 7</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>2 + 5</code>의 결과로 <code>7</code>이 나옵니다. #을 붙여서 작성한 코드는 실제 결과에 영향을 주지 않습니다. 여러분들이 작성한 코드라고 하더라도 며칠 뒤에 다시 읽어보면 이 코드가 어떤 의도로 왜 작성되었는지 헷갈리는 경우가 있습니다. 이럴 경우를 위해 코드 작성 시에 사용하는 것이 주석입니다. 저의 경우에는 여러분들에게 파이썬 코드의 설명을 돕기위한 용도로도 사용할 것입니다.</p><h3 id="또-다른-방식-블록-단위-주석" tabindex="-1"><a class="header-anchor" href="#또-다른-방식-블록-단위-주석"><span>또 다른 방식 : 블록 단위 주석</span></a></h3><p>위에서 <code>#</code>을 사용한 주석은 한 줄, 한 줄 주석을 남기고 싶을 때 사용하는 방법입니다. 5개의 줄에 주석을 남기고 싶으면 5개의 줄 모두 맨 앞에 <code>#</code>을 써주어야 합니다. 그런데 여러 줄에 대해서 동시에 주석을 사용하고 싶다면 작은 따옴표(<code>&#39;</code>)를 연달아 세개를 사용할 수도 있습니다. 한 번 아래의 코드를 실행해볼까요?</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token triple-quoted-string string">&#39;&#39;&#39;</span>
<span class="line">이렇게 따옴표 3개로 시작하고 따옴표 3개로 끝나도록 시작과 끝을 정의해주고</span>
<span class="line">그 사이에 주석을 작성할 수도 있습니다.</span>
<span class="line">&#39;&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">5</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># 7</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이전과 동일하게 7이란 결과를 얻습니다. <code>#</code> 으로 주석을 작성하거나 <code>&#39;&#39;&#39;</code>으로 주석을 작성하더라도 어차피 주석은 실행 결과에 영향을 끼치지 못하고 <code>2 + 5</code>만 실행되기 때문입니다. 두 개의 주석 작성 방식 중 어떤 방식의 주석을 사용해야 하는지에 대해서는 따로 정답이 없으므로 여러분들이 판단하기에 적절한 방법을 사용하여 주석을 사용하면 됩니다.</p><h3 id="주석의-용도는-또-뭐가-있을까" tabindex="-1"><a class="header-anchor" href="#주석의-용도는-또-뭐가-있을까"><span>주석의 용도는 또 뭐가 있을까?</span></a></h3><p>주석은 코드를 설명하기 위해서 메모를 남겨놓는 용도로도 사용하지만 상황에 따라서는 기존에 작성했던 코드를 지우고는 싶지 않지만, 임시적으로 배제시키는 용도로도 사용할 수 있습니다. 주석 처리되면 결과에 영향을 미칠 수 없기 때문입니다.</p><p>예를 들어 이런 상황을 가정해봅시다. 어떤 결과를 얻기 위해서 A 방식으로 코드를 작성했습니다. 그런데 갑자기 떠오른 아이디어가 있어서 B 방식으로도 코드를 작성해보려고 합니다. B 방식이 더 효율적일 것 같기 때문입니다. 하지만 A 방식의 코드를 다 지우기에는 아까워서 잠시만 주석 처리를 하려고 합니다. 이런 경우에는 다음과 같이 처리를 할 수 있습니다.</p><p>(상황을 가정한 것이므로 아래의 코드를 실제로 실행하진 마세요! 실제 실행되는 코드는 아닙니다.)</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token triple-quoted-string string">&#39;&#39;&#39;</span>
<span class="line">A 방식의 코드</span>
<span class="line">&#39;&#39;&#39;</span></span>
<span class="line"></span>
<span class="line">B 방식의 코드</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이렇게 코드를 작성하면 A 방식의 코드는 주석 처리되고 B 방식의 코드만 실행되겠죠?</p><hr><h2 id="_02-변수와-숫자-자료형" tabindex="-1"><a class="header-anchor" href="#_02-변수와-숫자-자료형"><span>02. 변수와 숫자 자료형</span></a></h2><p>파이썬에서는 다양한 자료형(데이터 타입)이 존재합니다. 대표적인 자료형으로는 정수와 실수를 나타내는 숫자 자료형, 참과 거짓을 나타내는 불(<code>boolean</code>) 자료형, 문자를 나타내는 문자열 자료형, 여러 자료를 필요에 따라서 다르게 나타내는 리스트, 딕셔너리, 세트, 튜플이 존재합니다.</p><p>우선 변수의 개념과 숫자 자료형에 대해서 정리해봅시다.</p><h3 id="변수와-print" tabindex="-1"><a class="header-anchor" href="#변수와-print"><span>변수와 <code>print()</code></span></a></h3><p>변수(variable)은 비유하자면 자료를 담을 수 있는 이름이 있는 상자입니다. 다르게 비유해보면 일종의 값에 이름을 붙이는 것입니다. 파이썬에서는 <code>변수명 = 자료</code>과 같은 방식으로 변수에 자료를 할당합니다. 여기서 자료는 그냥 간단하게 <code>일종의 값</code>을 의미한다고 생각하면 됩니다. 파이썬에서 값을 출력하는 방법으로는 <code>print()</code>를 사용합니다. 아 이런... 아직 아리송하죠? 실습을 통해 이해해봅시다. 막상해보면 별 내용이 아니라는 것을 아실겁니다. <code>a</code>라는 변수에 3이라는 값을 넣고 값을 출력해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">a <span class="token operator">=</span> <span class="token number">3</span> </span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>a</code>라는 변수에 3이라는 값을 넣은 뒤에 <code>print()</code>를 통해 <code>a</code>를 출력했더니 3이 출력되었습니다. 이해를 돕기위해서 이번에는 각 코드가 의미하는 바를 코드의 바로 위에 주석(comment)을 작성하여 재실행해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># a에 3을 넣는다.</span></span>
<span class="line">a <span class="token operator">=</span> <span class="token number">3</span> </span>
<span class="line"></span>
<span class="line"><span class="token comment"># a를 출력해라</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>주석은 설명을 위한 용도이고 실행 결과에 영향을 끼치진 않으므로 결과가 바뀌진 않습니다. 다시 요약해서 정리해봅시다. 변수에 어떤 값을 넣는 방법은 <code>변수명 = 값</code>이구요. <code>print(변수명)</code>을 사용하면 해당 변수 안에 있는 값이 출력됩니다! 간단하죠?</p><p>변수끼리 연산하는 것도 가능합니다. 파이썬에서는 <code>+</code>는 두 개의 값을 더하라는 의미입니다. 두 개의 변수를 선언한 뒤에 두 개의 변수를 더한 값을 새로운 변수에 할당하고 그 변수의 값을 출력해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">a <span class="token operator">=</span> <span class="token number">3</span></span>
<span class="line">b <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line">c <span class="token operator">=</span> a <span class="token operator">+</span> b</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># 8</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위 코드는 <code>a</code>란 변수에 3이란 값을 할당하고, <code>b</code>란 변수에 5란 값을 할당한 뒤에 두 개의 값을 더한 값을 <code>c</code>라는 변수에 할당한 뒤에 <code>c</code>란 변수를 출력하는 코드입니다. 참고로 <code>print()</code> 내에서 연산을 하는 것도 가능합니다!</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">a <span class="token operator">=</span> <span class="token number">3</span></span>
<span class="line">b <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># 8</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="숫자-자료형-int-float" tabindex="-1"><a class="header-anchor" href="#숫자-자료형-int-float"><span>숫자 자료형(<code>int</code>, <code>float</code>)</span></a></h3><p>파이썬에서는 크게 숫자를 두 가지 자료형(데이터 타입)으로 구분합니다. 소수점이 없는 숫자를 정수형(int), 소수점이 있는 숫자를 실수형(float)입니다. 숫자 3과 소수점이 있는 숫자인 2.5 두 가지 숫자를 각각 변수 a와 b로 선언해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">a <span class="token operator">=</span> <span class="token number">3</span></span>
<span class="line">b <span class="token operator">=</span> <span class="token number">2.5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>파이썬에서는 데이터의 타입. 즉, 자료형을 확인하는 방법으로 <code>type()</code>을 사용합니다. 앞으로 많이 사용하게 될테니 기억해둡시다. 우선 <code>a</code>의 자료형을 확인해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># &lt;class &#39;int&#39;&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&lt;class &#39;int&#39;&gt;</code>라는 내용이 출력되는데요. 이는 해당 변수의 자료형이 정수형이라는 의미입니다. 정수형 자료형은 소수점이 없는 숫자라는 의미입니다. 이번에는 변수 <code>b</code>에 대해서 자료형을 확인해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># &lt;class &#39;float&#39;&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&lt;class &#39;float&#39;&gt;</code>라는 내용이 출력되는데요. 이는 해당 변수의 자료형이 실수형이라는 의미입니다. 실수형이란 소수점이 있는 숫자라는 의미입니다.</p><h3 id="숫자-자료형-int-float-의-연산" tabindex="-1"><a class="header-anchor" href="#숫자-자료형-int-float-의-연산"><span>숫자 자료형(<code>int</code>, <code>float</code>)의 연산</span></a></h3><p>숫자 자료형(int, float)끼리는 사칙연산을 포함한 다양한 연산이 가능합니다.</p><table><thead><tr><th style="text-align:center;">연산 기호</th><th style="text-align:left;">의미</th></tr></thead><tbody><tr><td style="text-align:center;"><code>+</code></td><td style="text-align:left;">덧셈</td></tr><tr><td style="text-align:center;"><code>-</code></td><td style="text-align:left;">뺄셈</td></tr><tr><td style="text-align:center;"><code>*</code></td><td style="text-align:left;">곱하기</td></tr><tr><td style="text-align:center;"><code>**</code></td><td style="text-align:left;">거듭제곱</td></tr><tr><td style="text-align:center;"><code>/</code></td><td style="text-align:left;">나누기</td></tr><tr><td style="text-align:center;"><code>//</code></td><td style="text-align:left;">나누기 연산 후 소수점 이하의 수는 버리고 정수 부분만 남긴다.</td></tr><tr><td style="text-align:center;"><code>%</code></td><td style="text-align:left;">나누기 연산 후에 나머지를 구한다.</td></tr></tbody></table><p>실습을 통해 이해해봅시다. <code>a</code>와 <code>b</code>라는 변수를 선언해두고 덧셈을 수행해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">a <span class="token operator">=</span> <span class="token number">7</span></span>
<span class="line">b <span class="token operator">=</span> <span class="token number">2</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># 9</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>7과 2의 덧셈 결과로 9를 얻습니다. 뺄셈을 해볼까요? 7에서 2를 빼봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># 5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5라는 결과를 얻습니다. 이번에는 <code>%</code> 연산을 해봅시다. 위의 표의 설명에 따르면 <code>%</code> 연산은 나누기를 수행한 후에 나머지를 얻는다고 합니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">%</span> b<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1이란 결과를 얻습니다. 실제로 7을 2로 나누면 몫은 3이고, 나머지는 1이기때문입니다. 나머지 연산들에 대해서도 직접 실습을 진행해보세요. a가 5이고 b가 2일 때, 저자가 실제로 수행해서 얻은 결과들은 다음과 같았습니다.</p><table><thead><tr><th style="text-align:center;">연산 기호</th><th style="text-align:center;">수식</th><th style="text-align:left;">결과</th><th style="text-align:left;">의미</th></tr></thead><tbody><tr><td style="text-align:center;"><code>+</code></td><td style="text-align:center;"><code>a + b</code></td><td style="text-align:left;">7</td><td style="text-align:left;">a와 b를 더한다</td></tr><tr><td style="text-align:center;"><code>-</code></td><td style="text-align:center;"><code>a - b</code></td><td style="text-align:left;">3</td><td style="text-align:left;">a에서 b를 뺀다</td></tr><tr><td style="text-align:center;"><code>*</code></td><td style="text-align:center;"><code>a * b</code></td><td style="text-align:left;">10</td><td style="text-align:left;">a에 b를 곱한다</td></tr><tr><td style="text-align:center;"><code>**</code></td><td style="text-align:center;"><code>a ** b</code></td><td style="text-align:left;">25</td><td style="text-align:left;">a의 b의 거듭제곱</td></tr><tr><td style="text-align:center;"><code>/</code></td><td style="text-align:center;"><code>a / b</code></td><td style="text-align:left;">2.5</td><td style="text-align:left;">a에서 b를 나눈다</td></tr><tr><td style="text-align:center;"><code>//</code></td><td style="text-align:center;"><code>a // b</code></td><td style="text-align:left;">2</td><td style="text-align:left;">a에서 b를 나누고 정수 부분만 남긴다 (나눗셈 연산 후의 몫)</td></tr><tr><td style="text-align:center;"><code>%</code></td><td style="text-align:center;"><code>a % b</code></td><td style="text-align:left;">1</td><td style="text-align:left;">a에서 b를 나누고 나머지 부분만 남긴다 (나눗셈 연산 후의 나머지)</td></tr></tbody></table><h3 id="정리" tabindex="-1"><a class="header-anchor" href="#정리"><span>정리</span></a></h3><ul><li>변수는 어떤 값을 담아두는 상자로 비유할 수 있다. <code>변수 = 어떤 값</code> 과 같이 사용할 수 있다.</li><li>예를 들어 <code>a = 3</code>이라고 변수 a를 선언 후에 <code>print(a)</code>를 실행하면 3이 출력된다.</li><li><code>자료형</code>은 파이썬에서 사용하는 <code>데이터의 타입</code>을 의미한다. 다양한 데이터 타입이 존재하는데 숫자 자료형에 대해서 학습했다.</li><li>숫자 자료형은 크게 소수점이 없는 정수형 자료형 <code>int</code>와 소수점이 있는 실수형 자료형 <code>float</code>로 나뉜다.</li><li>파이썬에서 자료형을 확인하는 방법은 <code>type(변수)</code>이다.</li><li>숫자 자료형은 다양한 연산이 가능하다.</li></ul><hr><h2 id="_03-문자열과-bool-자료형" tabindex="-1"><a class="header-anchor" href="#_03-문자열과-bool-자료형"><span>03. 문자열과 Bool 자료형</span></a></h2><p>파이썬에서는 다양한 자료형(데이터 타입)이 존재합니다. 대표적인 자료형으로는 정수와 실수를 나타내는 <strong>숫자 자료형</strong>, 참과 거짓을 나타내는 <strong>불(boolean) 자료형</strong>, 문자를 나타내는 <strong>문자열 자료형</strong>, 여러 자료를 필요에 따라서 다르게 나타내는 <strong>리스트</strong>, <strong>딕셔너리</strong>, <strong>세트</strong>, <strong>튜플</strong> 이 존재합니다.</p><p>여기서는 문자열 자료형과 불 자료형에 대해서 정리해봅시다.</p><h3 id="문자열-자료형" tabindex="-1"><a class="header-anchor" href="#문자열-자료형"><span>문자열 자료형</span></a></h3><h3 id="불-boolean-자료형" tabindex="-1"><a class="header-anchor" href="#불-boolean-자료형"><span>불(Boolean) 자료형</span></a></h3><p>불(Boolean) 자료형은 참/거짓을 나타냅니다. 다음과 같이 대문자로 시작하는 True나 False를 변수로 선언하고 <code>type()</code>을 통해서 자료형을 확인해보면 <code>bool</code>이라고 출력되는 것을 확인할 수 있습니다. 이는 불 자료형이란 의미입니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">x <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token comment"># 참</span></span>
<span class="line">y <span class="token operator">=</span> <span class="token boolean">False</span> <span class="token comment"># 거짓</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin">type</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># bool</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>대문자로 시작하는 <code>True</code>와 <code>False</code>는 불 자료형이지만 소문자로 시작하는 true와 false는 불 자료형이 아닙니다. 이게 어떤 차이인지 실습을 통해 이해해봅시다. 만약 대문자가 아니라 소문자로 true나 false를 변수의 값으로 선언할 경우에는 에러가 발생합니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">z <span class="token operator">=</span> true</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># NameError: name &#39;true&#39; is not defined</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이는 소문자로 쓰면 불 자료형으로 인식하지 않고 일종의 변수명이라고 인식하기 때문입니다. 지금 나오는 에러를 해석해보면 true라는 변수는 선언된 적이 없는데 호출하고 있어서 발생한 에러입니다. 이번에는 대문자 True를 변수명으로 사용해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token boolean">True</span> <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment">#   File &quot;&lt;ipython-input-16-1598b51f0f76&gt;&quot;, line 1</span></span>
<span class="line"><span class="token comment">#     True = 1</span></span>
<span class="line"><span class="token comment">#             ^</span></span>
<span class="line"><span class="token comment"># SyntaxError: can&#39;t assign to keyword</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이번에도 에러가 발생하는데 해당 에러는 True나 False는 불 자료형을 의미하며 불 자료형은 변수명으로 사용할 수 없기 때문에 발생하는 에러입니다.</p><hr><h2 id="_04-판다스-넘파이-맷플롯립" tabindex="-1"><a class="header-anchor" href="#_04-판다스-넘파이-맷플롯립"><span>04. 판다스, 넘파이, 맷플롯립</span></a></h2><p>데이터 분석을 위한 필수 패키지 삼대장이 있습니다. 바로 Pandas와 Numpy 그리고 Matplotlib입니다. 세 개의 패키지 모두 아나콘다를 설치했다면 추가 설치 없이 사용할 수 있습니다. 이 세 개의 패키지를 간단히 실습해봅시다.</p><h3 id="판다스-pandas" tabindex="-1"><a class="header-anchor" href="#판다스-pandas"><span>판다스(Pandas)</span></a></h3><p>판다스(Pandas)는 파이썬 데이터 처리를 위한 라이브러리입니다. 파이썬을 이용한 데이터 분석과 같은 작업에서 필수 라이브러리로 알려져있습니다. 참고 할 수 있는 Pandas 링크는 다음과 같습니다.</p><blockquote><p>📎링크: <a href="http://pandas.pydata.org/pandas-docs/stable" target="_blank" rel="noopener noreferrer">http://pandas.pydata.org/pandas-docs/stable</a></p></blockquote><p>아나콘다를 설치하지 않았다면 아래의 커맨드로 Pandas를 별도 설치할 수 있습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pip <span class="token function">install</span> pandas</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">ipython</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd</span>
<span class="line">pd<span class="token punctuation">.</span>__version__</span>
<span class="line"><span class="token comment"># Out[2]: &#39;0.25.1&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pandas의 경우 pd라는 명칭으로 임포트하는 것이 관례입니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Pandas는 총 세 가지의 데이터 구조를 사용합니다.</p><ul><li>시리즈(Series)</li><li>데이터프레임(DataFrame)</li><li>패널(Panel)</li></ul><p>이 중 데이터프레임이 가장 많이 사용되며 여기서는 시리즈와 데이터프레임에 대해서 다룹니다.</p><h4 id="시리즈-series" tabindex="-1"><a class="header-anchor" href="#시리즈-series"><span>시리즈(Series)</span></a></h4><p>시리즈 클래스는 1차원 배열의 값(values)에 각 값에 대응되는 인덱스(index)를 부여할 수 있는 구조를 갖고 있습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">sr <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">17000</span><span class="token punctuation">,</span> <span class="token number">18000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">               index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;피자&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;치킨&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;콜라&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;맥주&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;시리즈 출력 :&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token operator">*</span><span class="token number">15</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>sr<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># 시리즈 출력 :</span></span>
<span class="line"><span class="token comment"># ---------------</span></span>
<span class="line"><span class="token comment"># 피자    17000</span></span>
<span class="line"><span class="token comment"># 치킨    18000</span></span>
<span class="line"><span class="token comment"># 콜라     1000</span></span>
<span class="line"><span class="token comment"># 맥주     5000</span></span>
<span class="line"><span class="token comment"># dtype: int64</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>값(<code>values</code>)과 인덱스(<code>index</code>)를 출력합니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;시리즈의 값 : {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sr<span class="token punctuation">.</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;시리즈의 인덱스 : {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sr<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># 시리즈의 값 : [17000 18000  1000  5000]</span></span>
<span class="line"><span class="token comment"># 시리즈의 인덱스 : Index([&#39;피자&#39;, &#39;치킨&#39;, &#39;콜라&#39;, &#39;맥주&#39;], dtype=&#39;object&#39;)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="데이터프레임-dataframe" tabindex="-1"><a class="header-anchor" href="#데이터프레임-dataframe"><span>데이터프레임(DataFrame)</span></a></h4><p>데이터프레임은 2차원 리스트를 매개변수로 전달합니다. 2차원이므로 행방향 인덱스(<code>index</code>)와 열방향 인덱스(<code>column</code>)가 존재합니다. 다시 말해 행과 열을 가지는 자료구조입니다. 시리즈가 인덱스(<code>index</code>)와 값(<code>values</code>)으로 구성된다면, 데이터프레임은 열(<code>columns</code>)까지 추가되어 열(<code>columns</code>), 인덱스(<code>index</code>), 값(<code>values</code>)으로 구성됩니다. 이 세 개의 구성 요소로부터 데이터프레임을 생성해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line">index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;one&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;two&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;three&#39;</span><span class="token punctuation">]</span></span>
<span class="line">columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>values<span class="token punctuation">,</span> index<span class="token operator">=</span>index<span class="token punctuation">,</span> columns<span class="token operator">=</span>columns<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;데이터프레임 출력 :&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token operator">*</span><span class="token number">18</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># 데이터프레임 출력 :</span></span>
<span class="line"><span class="token comment"># ------------------</span></span>
<span class="line"><span class="token comment">#        A  B  C</span></span>
<span class="line"><span class="token comment"># one    1  2  3</span></span>
<span class="line"><span class="token comment"># two    4  5  6</span></span>
<span class="line"><span class="token comment"># three  7  8  9</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>생성된 데이터프레임으로부터 인덱스(<code>index</code>), 값(<code>values</code>), 열(<code>columns</code>)을 각각 출력해보겠습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;데이터프레임의 인덱스 : {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;데이터프레임의 열이름: {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;데이터프레임의 값 :&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token operator">*</span><span class="token number">18</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>values<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># 데이터프레임의 인덱스 : Index([&#39;one&#39;, &#39;two&#39;, &#39;three&#39;], dtype=&#39;object&#39;)</span></span>
<span class="line"><span class="token comment"># 데이터프레임의 열이름: Index([&#39;A&#39;, &#39;B&#39;, &#39;C&#39;], dtype=&#39;object&#39;)</span></span>
<span class="line"><span class="token comment"># 데이터프레임의 값 :</span></span>
<span class="line"><span class="token comment"># ------------------</span></span>
<span class="line"><span class="token comment"># [[1 2 3]</span></span>
<span class="line"><span class="token comment">#  [4 5 6]</span></span>
<span class="line"><span class="token comment">#  [7 8 9]]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="데이터프레임의-생성" tabindex="-1"><a class="header-anchor" href="#데이터프레임의-생성"><span>데이터프레임의 생성</span></a></h4><p>데이터프레임은 리스트(List), 시리즈(Series), 딕셔너리(dict), Numpy의 ndarrays, 또 다른 데이터프레임으로부터 생성할 수 있습니다. 여기서는 리스트와 딕셔너리를 사용하여 데이터프레임을 생성해보겠습니다. 우선 이중 리스트로 생성하는 경우입니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 리스트로 생성하기</span></span>
<span class="line">data <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token string">&#39;1000&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Steve&#39;</span><span class="token punctuation">,</span> <span class="token number">90.72</span><span class="token punctuation">]</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token punctuation">[</span><span class="token string">&#39;1001&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;James&#39;</span><span class="token punctuation">,</span> <span class="token number">78.09</span><span class="token punctuation">]</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token punctuation">[</span><span class="token string">&#39;1002&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Doyeon&#39;</span><span class="token punctuation">,</span> <span class="token number">98.43</span><span class="token punctuation">]</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token punctuation">[</span><span class="token string">&#39;1003&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Jane&#39;</span><span class="token punctuation">,</span> <span class="token number">64.19</span><span class="token punctuation">]</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token punctuation">[</span><span class="token string">&#39;1004&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Pilwoong&#39;</span><span class="token punctuation">,</span> <span class="token number">81.30</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token string">&#39;1005&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tony&#39;</span><span class="token punctuation">,</span> <span class="token number">99.14</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment">#       0         1      2</span></span>
<span class="line"><span class="token comment"># 0  1000     Steve  90.72</span></span>
<span class="line"><span class="token comment"># 1  1001     James  78.09</span></span>
<span class="line"><span class="token comment"># 2  1002    Doyeon  98.43</span></span>
<span class="line"><span class="token comment"># 3  1003      Jane  64.19</span></span>
<span class="line"><span class="token comment"># 4  1004  Pilwoong  81.30</span></span>
<span class="line"><span class="token comment"># 5  1005      Tony  99.14</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>생성된 데이터프레임에 열(columns)을 지정해줄 수 있습니다. 열이름을 지정하고 출력해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;학번&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;이름&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;점수&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment">#      학번        이름     점수</span></span>
<span class="line"><span class="token comment"># 0  1000     Steve  90.72</span></span>
<span class="line"><span class="token comment"># 1  1001     James  78.09</span></span>
<span class="line"><span class="token comment"># 2  1002    Doyeon  98.43</span></span>
<span class="line"><span class="token comment"># 3  1003      Jane  64.19</span></span>
<span class="line"><span class="token comment"># 4  1004  Pilwoong  81.30</span></span>
<span class="line"><span class="token comment"># 5  1005      Tony  99.14</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>파이썬 자료구조 중 하나인 딕셔너리(dictionary)를 통해 데이터프레임을 생성해보겠습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 딕셔너리로 생성하기</span></span>
<span class="line">data <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&#39;학번&#39;</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;1000&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1001&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1002&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1003&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1004&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1005&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;이름&#39;</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">&#39;Steve&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;James&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Doyeon&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Jane&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Pilwoong&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tony&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;점수&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">90.72</span><span class="token punctuation">,</span> <span class="token number">78.09</span><span class="token punctuation">,</span> <span class="token number">98.43</span><span class="token punctuation">,</span> <span class="token number">64.19</span><span class="token punctuation">,</span> <span class="token number">81.30</span><span class="token punctuation">,</span> <span class="token number">99.14</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment">#      학번        이름     점수</span></span>
<span class="line"><span class="token comment"># 0  1000     Steve  90.72</span></span>
<span class="line"><span class="token comment"># 1  1001     James  78.09</span></span>
<span class="line"><span class="token comment"># 2  1002    Doyeon  98.43</span></span>
<span class="line"><span class="token comment"># 3  1003      Jane  64.19</span></span>
<span class="line"><span class="token comment"># 4  1004  Pilwoong  81.30</span></span>
<span class="line"><span class="token comment"># 5  1005      Tony  99.14</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="데이터프레임-조회하기" tabindex="-1"><a class="header-anchor" href="#데이터프레임-조회하기"><span>데이터프레임 조회하기</span></a></h4><p>아래의 명령어는 데이터프레임에서 원하는 구간만 확인하기 위한 명령어로서 유용하게 사용됩니다.</p><ul><li><code>df.head(n)</code> - 앞 부분을 n개만 보기</li><li><code>df.tail(n)</code> - 뒷 부분을 n개만 보기</li><li><code>df[&#39;열이름&#39;]</code> - 해당되는 열을 확인</li></ul><p>위에서 사용한 데이터프레임을 그대로 사용하여 실습해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 앞 부분을 3개만 보기</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment">#      학번      이름     점수</span></span>
<span class="line"><span class="token comment"># 0  1000   Steve  90.72</span></span>
<span class="line"><span class="token comment"># 1  1001   James  78.09</span></span>
<span class="line"><span class="token comment"># 2  1002  Doyeon  98.43</span></span>
<span class="line"><span class="token comment"># 뒷 부분을 3개만 보기</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>tail<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment">#      학번        이름     점수</span></span>
<span class="line"><span class="token comment"># 3  1003      Jane  64.19</span></span>
<span class="line"><span class="token comment"># 4  1004  Pilwoong  81.30</span></span>
<span class="line"><span class="token comment"># 5  1005      Tony  99.14</span></span>
<span class="line"><span class="token comment"># &#39;학번&#39;에 해당되는 열을 보기</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">&#39;학번&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># 0    1000</span></span>
<span class="line"><span class="token comment"># 1    1001</span></span>
<span class="line"><span class="token comment"># 2    1002</span></span>
<span class="line"><span class="token comment"># 3    1003</span></span>
<span class="line"><span class="token comment"># 4    1004</span></span>
<span class="line"><span class="token comment"># 5    1005</span></span>
<span class="line"><span class="token comment"># Name: 학번, dtype: object</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="외부-데이터-읽기" tabindex="-1"><a class="header-anchor" href="#외부-데이터-읽기"><span>외부 데이터 읽기</span></a></h4><p>Pandas는 CSV, 텍스트, Excel, SQL, HTML, JSON 등 다양한 데이터 파일을 읽고 데이터 프레임을 생성할 수 있습니다.</p>`,103),N=n("code",null,"pandas.read_csv()",-1),T=n("code",null,"example.csv",-1),J=i(`<figure><img src="https://wikidocs.net/images/page/32829/sample.PNG" alt="example.csv" tabindex="0" loading="lazy"><figcaption>example.csv</figcaption></figure><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">&#39;example.csv&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment">#    student id      name  score</span></span>
<span class="line"><span class="token comment"># 0        1000     Steve  90.72</span></span>
<span class="line"><span class="token comment"># 1        1001     James  78.09</span></span>
<span class="line"><span class="token comment"># 2        1002    Doyeon  98.43</span></span>
<span class="line"><span class="token comment"># 3        1003      Jane  64.19</span></span>
<span class="line"><span class="token comment"># 4        1004  Pilwoong  81.30</span></span>
<span class="line"><span class="token comment"># 5        1005      Tony  99.14</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이 경우 인덱스가 자동으로 부여됩니다. 인덱스를 출력해보겠습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>index<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># RangeIndex(start=0, stop=6, step=1)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="넘파이-numpy" tabindex="-1"><a class="header-anchor" href="#넘파이-numpy"><span>넘파이(Numpy)</span></a></h3><p>넘파이(Numpy)는 수치 데이터를 다루는 파이썬 패키지입니다. Numpy의 핵심이라고 불리는 다차원 행렬 자료구조인 ndarray를 통해 벡터 및 행렬을 사용하는 선형 대수 계산에서 주로 사용됩니다. Numpy는 편의성뿐만 아니라, 속도면에서도 순수 파이썬에 비해 압도적으로 빠르다는 장점이 있습니다.</p><p>아나콘다를 설치하지 않았다면 아래의 커맨드로 Numpy를 별도 설치할 수 있습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pip <span class="token function">install</span> numpy</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">ipython</span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line">np<span class="token punctuation">.</span>__version__</span>
<span class="line"><span class="token comment"># Out[2]: &#39;1.16.5&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Numpy의 경우 <code>np</code>라는 명칭으로 임포트하는 것이 관례입니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="np-array" tabindex="-1"><a class="header-anchor" href="#np-array"><span><code>np.array()</code></span></a></h4><p>Numpy의 핵심은 <code>ndarray</code>입니다. <code>np.array()</code>는 리스트, 튜플, 배열로 부터 ndarray를 생성합니다. 파이썬 자료구조 중 하나인 리스트를 가지고 1차원 배열을 생성해보겠습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 1차원 배열</span></span>
<span class="line">vec <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># [1 2 3 4 5]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2차원 배열을 만들어보겠습니다. 주의할 점은 array() 안에 하나의 리스트만 들어가므로 리스트의 리스트를 넣어야 합니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 2차원 배열</span></span>
<span class="line">mat <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> </span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>mat<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># [[10 20 30]</span></span>
<span class="line"><span class="token comment">#  [60 70 80]]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>두 배열의 타입을 확인해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;vec의 타입 :&#39;</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;mat의 타입 :&#39;</span><span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">(</span>mat<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># vec의 타입 : &lt;class &#39;numpy.ndarray&#39;&gt;</span></span>
<span class="line"><span class="token comment"># mat의 타입 : &lt;class &#39;numpy.ndarray&#39;&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>동일하게 타입이 <code>numpy.ndarray</code>라고 나오게 됩니다. Numpy 배열에는 축의 개수(<code>ndim</code>)와 크기(<code>shape</code>)라는 개념이 존재하는데, 배열의 크기를 정확히 숙지하는 것은 딥 러닝에서 매우 중요합니다. 축의 개수와 크기가 어떤 의미를 가지는지에 대해서는 머신 러닝 챕터에서 벡터와 행렬 연산을 설명할 때 언급하겠습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;vec의 축의 개수 :&#39;</span><span class="token punctuation">,</span>vec<span class="token punctuation">.</span>ndim<span class="token punctuation">)</span> <span class="token comment"># 축의 개수 출력</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;vec의 크기(shape) :&#39;</span><span class="token punctuation">,</span>vec<span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token comment"># 크기 출력</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># vec의 축의 개수 : 1</span></span>
<span class="line"><span class="token comment"># vec의 크기(shape) : (5,)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;mat의 축의 개수 :&#39;</span><span class="token punctuation">,</span>mat<span class="token punctuation">.</span>ndim<span class="token punctuation">)</span> <span class="token comment"># 축의 개수 출력</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;mat의 크기(shape) :&#39;</span><span class="token punctuation">,</span>mat<span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token comment"># 크기 출력</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># mat의 축의 개수 : 2</span></span>
<span class="line"><span class="token comment"># mat의 크기(shape) : (2, 3)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="ndarray의-초기화" tabindex="-1"><a class="header-anchor" href="#ndarray의-초기화"><span><code>ndarray</code>의 초기화</span></a></h4><p>위에서는 리스트를 가지고 <code>ndarray</code>를 생성했지만 <code>ndarray</code>를 만드는 다양한 다른 방법이 존재합니다. 이 외에도 다양한 방법이 존재하므로 필요에 따라서 다양한 배열을 생성할 수 있습니다.</p>`,22),C=n("p",null,[n("code",null,"np.zeros()"),s("는 배열의 모든 원소에 0을 삽입합니다.")],-1),B=n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"# 모든 값이 0인 2x3 배열 생성.")]),s(`
`),n("span",{class:"line"},[s("zero_mat "),n("span",{class:"token operator"},"="),s(" np"),n("span",{class:"token punctuation"},"."),s("zeros"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("zero_mat"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"#")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# [[0. 0. 0.]")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"#  [0. 0. 0.]]")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=n("p",null,[n("code",null,"np.ones()"),s("는 배열의 모든 원소에 1을 삽입합니다.")],-1),M=n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"# 모든 값이 1인 2x3 배열 생성.")]),s(`
`),n("span",{class:"line"},[s("one_mat "),n("span",{class:"token operator"},"="),s(" np"),n("span",{class:"token punctuation"},"."),s("ones"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("one_mat"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"#")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# [[1. 1. 1.]")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"#  [1. 1. 1.]]")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),F=n("p",null,[n("code",null,"np.full()"),s("은 배열에 사용자가 지정한 값을 삽입합니다.")],-1),U=n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"# 모든 값이 특정 상수인 배열 생성. 이 경우 7.")]),s(`
`),n("span",{class:"line"},[s("same_value_mat "),n("span",{class:"token operator"},"="),s(" np"),n("span",{class:"token punctuation"},"."),s("full"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"7"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("same_value_mat"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"#")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# [[7 7]")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"#  [7 7]]")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Y=n("p",null,[n("code",null,"np.eye()"),s("는 대각선으로는 1이고 나머지는 0인 2차원 배열을 생성합니다.")],-1),D=n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"# 대각선 값이 1이고 나머지 값이 0인 2차원 배열을 생성.")]),s(`
`),n("span",{class:"line"},[s("eye_mat "),n("span",{class:"token operator"},"="),s(" np"),n("span",{class:"token punctuation"},"."),s("eye"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("eye_mat"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# ")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# [[1. 0. 0.]")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"#  [0. 1. 0.]]")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"#  [0. 0. 1.]]")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),S=n("p",null,[n("code",null,"np.random.random()"),s("은 임의의 값을 가지는 배열을 생성합니다.")],-1),L=n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"# 임의의 값으로 채워진 배열 생성")]),s(`
`),n("span",{class:"line"},[s("random_mat "),n("span",{class:"token operator"},"="),s(" np"),n("span",{class:"token punctuation"},"."),s("random"),n("span",{class:"token punctuation"},"."),s("random"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"# 임의의 값으로 채워진 배열 생성")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("random_mat"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"#")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# [[0.3111881  0.72996102]")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"#  [0.65667734 0.40758328]]")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),O=i(`<p>이 외에도 Numpy에는 배열을 만드는 다양한 방법이 존재하므로 필요한 방법을 사용하여 배열을 생성할 수 있습니다.</p><h4 id="np-arange" tabindex="-1"><a class="header-anchor" href="#np-arange"><span><code>np.arange()</code></span></a></h4><p><code>np.arange(n)</code>은 0부터 n-1까지의 값을 가지는 배열을 생성합니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 0부터 9까지</span></span>
<span class="line">range_vec <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>range_vec<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># [0 1 2 3 4 5 6 7 8 9]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>np.arange(i, j, k)</code>는 <code>i</code>부터 <code>j</code>-1까지 <code>k</code>씩 증가하는 배열을 생성합니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 1부터 9까지 +2씩 적용되는 범위</span></span>
<span class="line">n <span class="token operator">=</span> <span class="token number">2</span></span>
<span class="line">range_n_step_vec <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>range_n_step_vec<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment">#[1 3 5 7 9]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="np-reshape" tabindex="-1"><a class="header-anchor" href="#np-reshape"><span><code>np.reshape()</code></span></a></h4><p><code>np.reshape()</code>은 내부 데이터는 변경하지 않으면서 배열의 구조를 바꿉니다. 0부터 29까지의 숫자를 생성하는 arange(30)을 수행한 후, 원소의 개수가 30개이므로 5행 6열의 행렬로 변경해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">reshape_mat <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>reshape_mat<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># [[ 0  1  2  3  4  5]</span></span>
<span class="line"><span class="token comment">#  [ 6  7  8  9 10 11]</span></span>
<span class="line"><span class="token comment">#  [12 13 14 15 16 17]</span></span>
<span class="line"><span class="token comment">#  [18 19 20 21 22 23]</span></span>
<span class="line"><span class="token comment">#  [24 25 26 27 28 29]]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="numpy-슬라이싱" tabindex="-1"><a class="header-anchor" href="#numpy-슬라이싱"><span>Numpy 슬라이싱</span></a></h4><p><code>ndarray</code>를 통해 만든 다차원 배열은 파이썬의 자료구조인 리스트처럼 슬라이싱(slicing) 기능을 지원합니다. 슬라이싱 기능을 사용하여 특정 행이나 열들의 원소들을 접근할 수 있습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">mat <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>mat<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># [[1 2 3]</span></span>
<span class="line"><span class="token comment">#  [4 5 6]]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 첫번째 행 출력</span></span>
<span class="line">slicing_mat <span class="token operator">=</span> mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>slicing_mat<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment">#[1 2 3]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 두번째 열 출력</span></span>
<span class="line">slicing_mat <span class="token operator">=</span> mat<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>slicing_mat<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># [2 5]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="numpy-정수-인덱싱-integer-indexing" tabindex="-1"><a class="header-anchor" href="#numpy-정수-인덱싱-integer-indexing"><span>Numpy 정수 인덱싱(integer indexing)</span></a></h4><p>슬라이싱을 사용하면 배열로부터 부분 배열을 추출할 수 있지만, 연속적이지 않은 원소로 배열을 만들 경우에는 슬라이싱으로는 만들 수 없습니다. 예를 들어서 2행 2열의 원소와 5행 5열의 원소를 뽑아서 하나의 배열로 만들고자 하는 경우가 그렇습니다. 이런 경우에는 인덱싱을 사용하여 배열을 구성할 수 있습니다. 인덱싱은 원하는 위치의 원소들을 뽑을 수 있습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">mat <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>mat<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment">#[[1 2]</span></span>
<span class="line"><span class="token comment"># [4 5]</span></span>
<span class="line"><span class="token comment"># [7 8]]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>특정 위치의 원소만을 가져와봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 1행 0열의 원소</span></span>
<span class="line"><span class="token comment"># =&gt; 0부터 카운트하므로 두번째 행 첫번째 열의 원소.</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>mat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># 4</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>특정 위치의 원소 두 개를 가져와 새로운 배열을 만들어봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># mat[[2행, 1행],[0열, 1열]]</span></span>
<span class="line"><span class="token comment"># 각 행과 열의 쌍을 매칭하면 2행 0열, 1행 1열의 두 개의 원소.</span></span>
<span class="line">indexing_mat <span class="token operator">=</span> mat<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>indexing_mat<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># [7 5]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="numpy-연산" tabindex="-1"><a class="header-anchor" href="#numpy-연산"><span>Numpy 연산</span></a></h4><p>Numpy를 사용하면 배열간 연산을 손쉽게 수행할 수 있습니다. 덧셈, 뺄셈, 곱셈, 나눗셈을 위해서는 연산자 <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>를 사용할 수 있으며 또는 <code>np.add()</code>, <code>np.subtract()</code>, <code>np.multiply()</code>, <code>np.divide()</code>를 사용할 수도 있습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># result = np.add(x, y)와 동일.</span></span>
<span class="line">result <span class="token operator">=</span> x <span class="token operator">+</span> y</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># [5 7 9]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># result = np.subtract(x, y)와 동일.</span></span>
<span class="line">result <span class="token operator">=</span> x <span class="token operator">-</span> y</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># [-3 -3 -3]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># result = np.multiply(result, x)와 동일.</span></span>
<span class="line">result <span class="token operator">=</span> result <span class="token operator">*</span> x</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># [-3 -6 -9]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># result = np.divide(result, x)와 동일.</span></span>
<span class="line">result <span class="token operator">=</span> result <span class="token operator">/</span> x</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># [-3. -3. -3.]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위에서 <code>*</code>를 통해 수행한 것은 요소별 곱입니다. Numpy에서 벡터와 행렬곱 또는 행렬곱을 위해서는 <code>dot()</code>을 사용해야 합니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">mat1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">mat2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">mat3 <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>mat1<span class="token punctuation">,</span> mat2<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>mat3<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># [[19 22]</span></span>
<span class="line"><span class="token comment">#  [43 50]]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="맷플롯립-matplotlib" tabindex="-1"><a class="header-anchor" href="#맷플롯립-matplotlib"><span>맷플롯립(Matplotlib)</span></a></h3><p>맷플롯립(Matplotlib)은 데이터를 차트(<code>chart</code>)나 플롯(<code>plot</code>)으로 시각화하는 패키지입니다. 데이터 분석에서 Matplotlib은 데이터 분석 이전에 데이터 이해를 위한 시각화나, 데이터 분석 후에 결과를 시각화하기 위해서 사용됩니다. 아나콘다를 설치하지 않았다면 아래의 커맨드로 Matplotlib를 별도 설치할 수 있습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">pip <span class="token function">install</span> matplotlib</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">ipython</span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token keyword">import</span> matplotlib <span class="token keyword">as</span> mpl</span>
<span class="line">mpl<span class="token punctuation">.</span>__version__</span>
<span class="line"><span class="token comment"># Out[2]: &#39;2.2.3&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Matplotlib을 다 설치하였다면 Matplotlib의 주요 모듈인 pyplot를 관례상 plt라는 명칭으로 임포트해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="라인-플롯-그리기" tabindex="-1"><a class="header-anchor" href="#라인-플롯-그리기"><span>라인 플롯 그리기</span></a></h4><p>plot()은 라인 플롯을 그리는 기능을 수행합니다. plot()에 x축과 y축의 값을 기재하고 그림을 표시하는 show()를 통해서 시각화해봅시다. 그래프에는 title(&#39;제목&#39;)을 사용하여 제목을 지정할 수 있습니다. 여기서는 그래프에 &#39;test&#39;라는 제목을 넣어봅시다. 주피터 노트북에서는 show()를 사용하지 않더라도 그래프가 자동으로 렌더링 되므로 그래프가 시각화가 되지만 다른 개발 환경에서 사용할 때를 가정하여 show()를 코드에 삽입하였습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,33),q=i(`<h5 id="축-레이블-삽입하기" tabindex="-1"><a class="header-anchor" href="#축-레이블-삽입하기"><span>축 레이블 삽입하기</span></a></h5><p>x축과 y축 각각에 축이름을 삽입하고 싶다면 <code>xlabel(&#39;넣고 싶은 축이름&#39;)</code>과 <code>ylabel(&#39;넣고 싶은 축이름&#39;)</code>을 사용합니다. 위의 그래프에 hours와 score라는 축이름을 각각 추가해봅시다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">&#39;hours&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">&#39;score&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),W=i(`<h5 id="라인-추가와-범례-삽입하기" tabindex="-1"><a class="header-anchor" href="#라인-추가와-범례-삽입하기"><span>라인 추가와 범례 삽입하기</span></a></h5><p>다수의 <code>plot()</code>을 하나의 그래프에 나타낼 수 있습니다. 여러개의 라인 플롯을 동시에 사용할 경우에는 각 선이 어떤 데이터를 나타내는지를 보여주기 위해 범례(legend)를 사용할 수 있습니다.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">&#39;students&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.5</span><span class="token punctuation">,</span><span class="token number">2.5</span><span class="token punctuation">,</span><span class="token number">3.5</span><span class="token punctuation">,</span><span class="token number">4.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 라인 새로 추가</span></span>
<span class="line">plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">&#39;hours&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">&#39;score&#39;</span><span class="token punctuation">)</span></span>
<span class="line">plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;A student&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B student&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 범례 삽입</span></span>
<span class="line">plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),I=n("figure",null,[n("img",{src:"https://wikidocs.net/images/page/32829/matplotlib3.PNG",alt:"matplotlib3",tabindex:"0",loading:"lazy"}),n("figcaption",null,"matplotlib3")],-1),H=n("p",null,"좀 더 다양한 형태의 그래프를 그리는 실습은 딥 러닝 챕터의 인공 신경망 훑어보기 실습에서 확인할 수 있습니다.",-1),K=n("hr",null,null,-1);function z(u,G){const p=c("router-link"),d=c("VPCard"),r=c("FontIcon"),m=c("Tabs"),o=c("ECharts");return g(),v("div",null,[n("h1",f,[n("a",_,[n("span",null,b(u.$frontmatter.title)+" 관련",1)])]),n("nav",w,[n("ul",null,[n("li",null,[e(p,{to:"#_01-주석-comment"},{default:a(()=>[s("01. 주석 (Comment)")]),_:1}),n("ul",null,[n("li",null,[e(p,{to:"#주석이란"},{default:a(()=>[s("주석이란?")]),_:1})]),n("li",null,[e(p,{to:"#또-다른-방식-블록-단위-주석"},{default:a(()=>[s("또 다른 방식 : 블록 단위 주석")]),_:1})]),n("li",null,[e(p,{to:"#주석의-용도는-또-뭐가-있을까"},{default:a(()=>[s("주석의 용도는 또 뭐가 있을까?")]),_:1})])])]),n("li",null,[e(p,{to:"#_02-변수와-숫자-자료형"},{default:a(()=>[s("02. 변수와 숫자 자료형")]),_:1}),n("ul",null,[n("li",null,[e(p,{to:"#변수와-print"},{default:a(()=>[s("변수와 print()")]),_:1})]),n("li",null,[e(p,{to:"#숫자-자료형-int-float"},{default:a(()=>[s("숫자 자료형(int, float)")]),_:1})]),n("li",null,[e(p,{to:"#숫자-자료형-int-float-의-연산"},{default:a(()=>[s("숫자 자료형(int, float)의 연산")]),_:1})]),n("li",null,[e(p,{to:"#정리"},{default:a(()=>[s("정리")]),_:1})])])]),n("li",null,[e(p,{to:"#_03-문자열과-bool-자료형"},{default:a(()=>[s("03. 문자열과 Bool 자료형")]),_:1}),n("ul",null,[n("li",null,[e(p,{to:"#문자열-자료형"},{default:a(()=>[s("문자열 자료형")]),_:1})]),n("li",null,[e(p,{to:"#불-boolean-자료형"},{default:a(()=>[s("불(Boolean) 자료형")]),_:1})])])]),n("li",null,[e(p,{to:"#_04-판다스-넘파이-맷플롯립"},{default:a(()=>[s("04. 판다스, 넘파이, 맷플롯립")]),_:1}),n("ul",null,[n("li",null,[e(p,{to:"#판다스-pandas"},{default:a(()=>[s("판다스(Pandas)")]),_:1})]),n("li",null,[e(p,{to:"#넘파이-numpy"},{default:a(()=>[s("넘파이(Numpy)")]),_:1})]),n("li",null,[e(p,{to:"#맷플롯립-matplotlib"},{default:a(()=>[s("맷플롯립(Matplotlib)")]),_:1})])])])])]),j,e(d,h(y({title:"02. 파이썬 기본 문법",desc:"금융 데이터 분석을 위한 파이썬 - WikiDocs",link:"https://wikidocs.net/173720",logo:"https://wikidocs.net/static/img/favicon.ico",background:"rgba(255,255,255,0.2)"})),null,16),P,n("p",null,[s("예를 들어 csv 파일을 읽을 때는 "),N,s("를 통해 읽을 수 있습니다. 다음과 같은 "),e(r,{icon:"fas fa-file-csv"}),T,s(" 파일이 있다고 합시다.")]),J,e(m,{id:"547",data:[{id:"np.zeros"},{id:"np.onse"},{id:"np.full"},{id:"np.eye"},{id:"np.random.random"}],active:0},{title0:a(({value:t,isActive:l})=>[s("np.zeros")]),title1:a(({value:t,isActive:l})=>[s("np.onse")]),title2:a(({value:t,isActive:l})=>[s("np.full")]),title3:a(({value:t,isActive:l})=>[s("np.eye")]),title4:a(({value:t,isActive:l})=>[s("np.random.random")]),tab0:a(({value:t,isActive:l})=>[C,B]),tab1:a(({value:t,isActive:l})=>[A,M]),tab2:a(({value:t,isActive:l})=>[F,U]),tab3:a(({value:t,isActive:l})=>[Y,D]),tab4:a(({value:t,isActive:l})=>[S,L]),_:1}),O,e(o,{id:"echarts-652",config:"eJylkk1LxDAQhu/5FUMvVSjCdotIwMPiSRAUPC49ZDXbDeajJOnasvS/O0lsjV7tIWTmnXlmMtM3o52Hd+YZ3MOeAFw0U5xCuSkrODM54H2/qaBu5woyuc7kuoIG5UzdZuq2grs/yU0mNxXctjNpCUmtmN4Lo7GZCyZ4Y6QXPY0GmlZ0HbcUCjYKV4SKAOH6YoT2QUhx6NRCsQCicGTS8eiOLcYjcA9mXOLdyXxSpA88IY+c+cFidwtOMfuBVhaYODGZnfnOPSrWhYRfIanqUnTcYafrU6Y+TCJOoUwo10vhn4TOMLH3H8L0b4LjVnBEhE3jPsJSwpf2Unju/PdUF34hEbf6AvN1Ugcj83FB/H9oPNcnt2QmRE0PJ2b9jeP+Oe71Kq33mnwBR/6zJw==",title:"test",type:"js"}),q,e(o,{id:"echarts-663",config:"eJyNksFqwzAMhu9+CtFLNgiDpmGMwA5lp8Fggx1LDm7nJmZOHGylSyh598l2k3pjh12Crf/XJ0XyQbcW4YMjh0fYMYBzyxtRQLJOUjhx1dN5t04hK6cUIjmL5CyFnORI3UTqJoWHX8l5JOcp3JcTKxkLregOpW6pmTMloERFJnekixiQklFYTCjgC6LWCmW3WIysKmEKWPFB2pVzALjjm5YtOiH4KNjKhrtKBRy5ssKHPXLh7vUw+22tvwqi9yIgj4Jjb5bOABpuPukWGQPHJ/OT2Nrnhlcu4YclVJ2LDlvqdGZeRlXr3tgkoGynJL7INsL43q+E8Q+CPWgj/k2wwkhBCPcUaGFua1fWys3+MlWa0di5mCLcEnPM97HZaxWPC/wDK/x3+eWSTYw141PNDd5Zga9+8Tdh/7fsG/LDu+M=",title:"test",type:"js"}),W,e(o,{id:"echarts-674",config:"eJytk89rwyAUx+/5Kx69uIGU9dcYgR26nQaDDXYsObjWpjKjQU2XUvq/76lJmtFCe+gl6vPzvr7vMy61sg506YRW8Az7BMAJJ3kaprjgtUuBWFetuHKWYPBAPaS1dKLsMCPynJsUBqwWduAJAD/91EI5vxE5DCpRMH9aCmsmLQ/hIBk+kudcrVp8xRxLYUHm8BULIBTIS7fI+tV867pNsxv9m2JNFY+FrDlzlek8ARTM/OCqB0adkMy2fG7fCpb7hH9IrLU9tJ6jv1ZTsQJxstGVsSRK2VIK9y5UTyY4PirszijYpTb8agXLjeAosQj8HhoPUWvQta25EGzUrvQbEjW7WDM0vW5WKNYUNMKeb5mscL4YURhnB9qmHKFxDxpTmCJ0wkx6zITC01mhaQ+aUnjMYtMB/F170ycmu9/hZiaHMwqTyzY9Nrto1FNXWPXY6OHULY5ZckiSYve6YcYNLXcf4bHexTd7n/wBbnH9eQ==",title:"students",type:"js"}),I,H,K])}const E=k(x,[["render",z],["__file","02.html.vue"]]),V=JSON.parse('{"path":"/py/finance/02.html","title":"02. 파이썬 기본 문법","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"02. 파이썬 기본 문법","description":"Finance with Python > 02. 파이썬 기본 문법","category":["Python"],"tag":["crashcourse","python","py","google","google-colab","jupyter-notebook","numpy","pandas","ipython"],"head":[[{"meta":null},{"property":"og:title","content":"Finance with Python > 02. 파이썬 기본 문법"},{"property":"og:description","content":"02. 파이썬 기본 문법"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/py/finance/02.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/py/finance/02.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"02. 파이썬 기본 문법"}],["meta",{"property":"og:description","content":"Finance with Python > 02. 파이썬 기본 문법"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://wikidocs.net/images/page/32829/sample.PNG"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"python"}],["meta",{"property":"article:tag","content":"py"}],["meta",{"property":"article:tag","content":"google"}],["meta",{"property":"article:tag","content":"google-colab"}],["meta",{"property":"article:tag","content":"jupyter-notebook"}],["meta",{"property":"article:tag","content":"numpy"}],["meta",{"property":"article:tag","content":"pandas"}],["meta",{"property":"article:tag","content":"ipython"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"02. 파이썬 기본 문법\\",\\"image\\":[\\"https://wikidocs.net/images/page/32829/sample.PNG\\",\\"https://wikidocs.net/images/page/32829/matplotlib1.PNG\\",\\"https://wikidocs.net/images/page/32829/matplotlib2.PNG\\",\\"https://wikidocs.net/images/page/32829/matplotlib3.PNG\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"01. 주석 (Comment)","slug":"_01-주석-comment","link":"#_01-주석-comment","children":[{"level":3,"title":"주석이란?","slug":"주석이란","link":"#주석이란","children":[]},{"level":3,"title":"또 다른 방식 : 블록 단위 주석","slug":"또-다른-방식-블록-단위-주석","link":"#또-다른-방식-블록-단위-주석","children":[]},{"level":3,"title":"주석의 용도는 또 뭐가 있을까?","slug":"주석의-용도는-또-뭐가-있을까","link":"#주석의-용도는-또-뭐가-있을까","children":[]}]},{"level":2,"title":"02. 변수와 숫자 자료형","slug":"_02-변수와-숫자-자료형","link":"#_02-변수와-숫자-자료형","children":[{"level":3,"title":"변수와 print()","slug":"변수와-print","link":"#변수와-print","children":[]},{"level":3,"title":"숫자 자료형(int, float)","slug":"숫자-자료형-int-float","link":"#숫자-자료형-int-float","children":[]},{"level":3,"title":"숫자 자료형(int, float)의 연산","slug":"숫자-자료형-int-float-의-연산","link":"#숫자-자료형-int-float-의-연산","children":[]},{"level":3,"title":"정리","slug":"정리","link":"#정리","children":[]}]},{"level":2,"title":"03. 문자열과 Bool 자료형","slug":"_03-문자열과-bool-자료형","link":"#_03-문자열과-bool-자료형","children":[{"level":3,"title":"문자열 자료형","slug":"문자열-자료형","link":"#문자열-자료형","children":[]},{"level":3,"title":"불(Boolean) 자료형","slug":"불-boolean-자료형","link":"#불-boolean-자료형","children":[]}]},{"level":2,"title":"04. 판다스, 넘파이, 맷플롯립","slug":"_04-판다스-넘파이-맷플롯립","link":"#_04-판다스-넘파이-맷플롯립","children":[{"level":3,"title":"판다스(Pandas)","slug":"판다스-pandas","link":"#판다스-pandas","children":[]},{"level":3,"title":"넘파이(Numpy)","slug":"넘파이-numpy","link":"#넘파이-numpy","children":[]},{"level":3,"title":"맷플롯립(Matplotlib)","slug":"맷플롯립-matplotlib","link":"#맷플롯립-matplotlib","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":6.04,"words":1812},"filePathRelative":"py/finance/02.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{E as comp,V as data};
