import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as e,t as m,b as s,w as a,n as i,g as l,d as n,e as r,r as p,o as w}from"./app-U_bew1in.js";const g={},f={id:"frontmatter-title-관련",tabindex:"-1"},b={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},v=e("hr",null,null,-1),k=e("h2",{id:"first-steps-in-swift",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#first-steps-in-swift"},[e("span",null,"First steps in Swift")])],-1),_=e("p",null,"SwiftUI is a powerful framework for building user-interactive apps for iOS, macOS, tvOS, and even watchOS. But you can’t build software without having a programming language, so behind SwiftUI lies Swift itself: a powerful, flexible, and modern programming language that you’ll use for all your SwiftUI apps.",-1),S=e("p",null,"As Mark Twain once said, “the secret to getting ahead is getting started.” Well, you’re starting now, so we’re going to dive in and learn about variables, constants, and simple data types in Swift.",-1),x=e("p",null,[e("strong",null,"Today you have seven tutorials to complete."),n(" If you want to dive deeper into each topic there is optional further reading, but you don’t need to read that unless you want to and have the time. Regardless, there are a number of short tests to help make sure you’ve understood key concepts.")],-1),q=e("p",null,"I know, I know: the temptation is strong to continue on to watch more videos and take more tests beyond those linked below, but remember: don’t rush ahead! It’s much better to do one hour a day every day than do chunks with large gaps between.",-1),I=e("h3",{id:"_1-introduction-why-swift",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-introduction-why-swift"},[e("span",null,"1. Introduction: Why Swift?")])],-1),T={class:"hint-container details"},j=e("summary",null,"1. Introduction: Why Swift?",-1),D=e("p",null,"There are lots of programming languages out there, but I think you’re going to really enjoy learning Swift. This is partly for practical reasons – you can make a lot of money on the App Store! – but there are lots of technical reasons too.",-1),H=e("p",null,"You see, Swift is a relatively young language, having launched only in 2014. This means it doesn’t have a lot of the language cruft that old languages can suffer from, and usually means there is only one way to solve a particular problem.",-1),A=e("p",null,"At the same time, being such a new programming language means that Swift leverages all sorts of new ideas built upon the successes – and sometimes mistakes – of older languages. For example, it makes it hard to accidentally write unsafe code, it makes it very easy to write code that is clear and understandable, and it supports all the world languages so you’ll never see those strange character errors that plague other languages.",-1),W=e("p",null,"Swift itself is just the language, and isn’t designed to draw anything on the screen. When it comes to building software with Swift, you’ll be using SwiftUI: Apple’s powerful framework that creates text, buttons, images, user interaction, and much more. As the name suggests, SwiftUI was built for Swift – it’s literally designed to leverage the power and safety offered by the language, which makes it remarkably quick to build really powerful apps.",-1),Y=e("p",null,"So, you should learn Swift because you can make a lot of money with it, but also because it does so many things really well. No cruft, no confusion, just lots of power at your fingertips. What’s not to like?",-1),F=e("h3",{id:"_2-introduction-about-this-course",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_2-introduction-about-this-course"},[e("span",null,"2. Introduction: About this course")])],-1),N={class:"hint-container details"},U=e("summary",null,"2. Introduction: About this course",-1),O=e("p",null,"I’ve been teaching folks to write Swift since 2014, the same year Swift launched, and at this point Hacking with Swift is the world’s largest site dedicated to teaching Swift.",-1),C=e("p",null,"Along the way I learned a huge amount about what topics matter the most, how to structure topics into a smooth and consistent flow, and most importantly how to help learners remember topics they’ve learned. This course is the product of all that learning.",-1),P=e("p",null,"Unlike my previous work this does not strive to teach you every aspect of Swift, but instead it spends more time on the subset of features that matter the most – the ones you’ll use in every app you build, time and time again. Yes, there are some advanced language features covered, but I’ve cherrypicked them based on usefulness. When you’ve finished the book you might want to carry on learning some of the more advanced features, but I suspect you’d much rather get busy learning how to use SwiftUI.",-1),B=e("p",null,"Each chapter of this book is available as both text and video, but they cover exactly the same material so you’re welcome to learn whichever way suits you best. If you’re using the videos you’ll notice that I sometimes introduce topics using slides and sometimes demonstrate them in Xcode. It might feel repetitive, but it’s intentional – there’s a lot of things to learn, and if you saw each one only once it just wouldn’t stay in your memory!",-1),M=e("p",null,"There’s one last thing: you might notice how many chapters start with “How to…”, and that’s intentional – this book is here to show you how to do things in a hands-on way, as opposed to delving into theory. Theory is important, and you’ll come across a lot of it as you can continue to learn, but here the focus is relentlessly practical because I believe the best way to learn something new is to try it yourself.",-1),R=e("p",null,"Programming is an art: don't spend all your time sharpening your pencil when you should be drawing.",-1),V=e("h3",{id:"_3-introduction-how-to-follow-along",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_3-introduction-how-to-follow-along"},[e("span",null,"3. Introduction: How to follow along")])],-1),z={class:"hint-container details"},G=e("summary",null,"3. Introduction: How to follow along",-1),L=e("p",null,"There’s a lot of code shown off in this book, and I really want to encourage you to try it all yourself – type the code into your computer, run it and see the output, then experiment a little to make sure you understand it.",-1),K=e("p",null,"To run the code in this book you should have installed Xcode 13.0 or later from the Mac App Store. It’s free, and includes everything you need to follow along.",-1),X=e("p",null,"We’ll be using a Swift Playground for all the code in this book. You can create one by launching Xcode, then going to the File menu and choosing New > Playground. When you’re asked what kind of playground to create, choose Blank from the macOS tab, then save it somewhere you can get to easily.",-1),J=e("p",null,"Playgrounds are like little sandboxes where you can try out Swift code easily, seeing the result of your work side by side with the code. You can use one playground for all the work you’ll be doing, or create new a playground for each chapter – do whatever works best for you.",-1),Z=e("p",null,[e("strong",null,"Tip"),n(": The first time you run code in a playground it might take a few seconds to start, but subsequent runs will be fast.")],-1),E=e("h3",{id:"_4-how-to-create-variables-and-constants",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_4-how-to-create-variables-and-constants"},[e("span",null,"4. How to create variables and constants")])],-1),Q={class:"hint-container details"},$=e("summary",null,"4. How to create variables and constants",-1),ee=r(`<p>Whenever you build programs, you’re going to want to store some data. Maybe it’s the user’s name they just typed in, maybe it’s some news stories you downloaded from the internet, or maybe it’s the result of a complex calculation you just performed.</p><p>Swift gives us two ways of storing data, depending on whether you want the data to change over time. The first option is automatically used when you create a new playground, because it will contain this line:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> greeting <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Hello, playground&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That creates a new variable called <code>greeting</code>, and because it’s a variable its value can vary – it can change as our program runs.</p><p>Tip: The other line in a macOS playground is <code>import Cocoa</code>, which brings in a huge collection of code provided by Apple to make app building easier. This includes lots of important functionality, so please don’t delete it.</p><p>There are really four pieces of syntax in there:</p><ul><li>The <code>var</code> keyword means “create a new variable”; it saves a little typing.</li><li>We’re calling our variable <code>greeting</code>. You can call your variable anything you want, but most of the time you’ll want to make it descriptive.</li><li>The equals sign assigns a value to our variable. You don’t need to have those spaces on either side of the equals sign if you don’t want to, but it’s the most common style.</li><li>The value we’re assigning is the text “Hello, playground”. Notice that text is written inside double quotes, so that Swift can see where the text starts and where it ends.</li></ul><p>If you’ve used other languages, you might have noticed that our code doesn’t need a semicolon at the end of the line. Swift does allow semicolons, but they are very rare – you’ll only ever need them if you want to write two pieces of code on the same line for some reason.</p><p>When you make a variable, you can change it over time:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Ted&quot;</span></span></span>
<span class="line">name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Rebecca&quot;</span></span></span>
<span class="line">name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Keeley&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That creates a new variable called <code>name</code>, and gives it the value “Ted”. It then gets changed twice, first to “Rebecca” and then to “Keeley” – we don’t use <code>var</code> again because we are modifying an existing variable rather than creating a new one. You can change variables as much as you need to, and the old value is discarded each time.</p><p>(You’re welcome to put different text in your variables, but I’m a big fan of the TV show Ted Lasso so I went with Ted. And yes, you can expect other Ted Lasso references and more in the following chapters.)</p><p>If you don’t ever want to change a value, you need to use a constant instead. Creating a constant works almost identically to creating a variable, except we use <code>let</code> rather than <code>var</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> character <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Daphne&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now, when we use <code>let</code> we make a constant, which is a value that can’t change. Swift literally won’t let us, and will show a big error if we try.</p><p>Don’t believe me? Try putting this into Xcode:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> character <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Daphne&quot;</span></span></span>
<span class="line">character <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Eloise&quot;</span></span></span>
<span class="line">character <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Francesca&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Again, there are no <code>let</code> keywords in those second and third lines because we aren’t creating new constants, we’re just trying to change the one we already have. However, like I said that won’t work – you can’t change a constant, otherwise it wouldn’t be constant!</p><p>If you were curious, “let” comes from the mathematics world, where they say things like “let x be equal to 5.”</p><p><strong>Important</strong>: Please delete the two lines of code that are showing errors – you really can’t change constants!</p><p>When you’re learning Swift, you can ask Xcode to print out the value of any variable. You won’t use this much in real apps because users can’t see what’s printed, but it’s really helpful as a simple way of seeing what’s inside your data.</p><p>For example, we could print out the value of a variable each time it’s set – try entering this into your playground:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> playerName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Roy&quot;</span></span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>playerName<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">playerName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Dani&quot;</span></span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>playerName<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">playerName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Sam&quot;</span></span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>playerName<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tip: You can run code in your Xcode playground by clicking the blue play icon to the left of it. If you move up or down along that blue strip, you’ll see the play icon moves too – this lets you run the code up to a certain point if you want, but most of the time here you’ll want to run up to the last line.</p><p>You might have noticed that I named my variable <code>playerName</code>, and not <code>playername</code>, <code>player_name</code>, or some other alternative. This is a choice: Swift doesn’t really care what you name your constants and variables, as long as you refer to them the same way everywhere. So, I can’t use <code>playerName</code> first then <code>playername</code> later – Swift sees those two as being different names.</p><p>Although Swift doesn’t care how we name our data, the naming style I’m using is the standard among Swift developers – what we call a convention. If you’re curious, the style is called “camel case”, because the second and subsequent words in a name start with a little bump for the capital letter:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> managerName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Michael Scott&quot;</span></span></span>
<span class="line"><span class="token keyword">let</span> dogBreed <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Samoyed&quot;</span></span></span>
<span class="line"><span class="token keyword">let</span> meaningOfLife <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;How many roads must a man walk down?&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you can, prefer to use constants rather than variables – not only does it give Swift the chance to optimize your code a little better, but it also allows Swift to make sure you never change a constant’s value by accident.</p>`,28),se=r('<div class="hint-container info"><p class="hint-container-title">4. How to create variables and constants - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-have-variables" target="_blank" rel="noopener noreferrer">Why does Swift have variables?</a></li><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-have-constants-as-well-as-variables" target="_blank" rel="noopener noreferrer">Why does Swift have constants as well as variables?</a></li><li>Test: <a href="https://hackingwithswift.com/review/variables" target="_blank" rel="noopener noreferrer">Variables</a></li><li>Test: <a href="https://hackingwithswift.com/review/constants" target="_blank" rel="noopener noreferrer">Constants</a></li></ul></div><h3 id="_5-how-to-create-strings" tabindex="-1"><a class="header-anchor" href="#_5-how-to-create-strings"><span>5. How to create strings</span></a></h3>',2),ne={class:"hint-container details"},te=e("summary",null,"5. How to create strings",-1),ae=r(`<p>When you assign text to a constant or variable, we call that a string – think of a bunch of Scrabble tiles threaded onto a string to make a word.</p><p>Swift’s strings start and end with double quotes, but what you put inside those quotes is down to you. You can use short pieces of alphabetic text, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> <span class="token keyword">actor</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Denzel Washington&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You can use punctuation, emoji and other characters, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> filename <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;paris.jpg&quot;</span></span></span>
<span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;⭐️ You win! ⭐️&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>And you can even use other double quotes inside your string, as long as you’re careful to put a backslash before them so that Swift understands they are inside the string rather than ending the string:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> quote <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Then he tapped a sign saying \\&quot;Believe\\&quot; and walked away.&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Don’t worry – if you miss off the backslash, Swift will be sure to shout loudly that your code isn’t quite right.</p><p>There is no realistic limit to the length of your strings, meaning that you could use a string to store something very long such as the complete works of Shakespeare. However, what you’ll find is that Swift doesn’t like line breaks in its strings. So, this kind of code isn’t allowed:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> movie <span class="token operator">=</span> &quot;<span class="token class-name">A</span> day <span class="token keyword">in</span></span>
<span class="line">the life of an</span>
<span class="line"><span class="token class-name">Apple</span> engineer&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That doesn’t mean you can’t create strings across multiple lines, just that Swift needs you to treat them specially: rather than one set of quotes on either side of your string, you use three, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> movie <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;&quot;</span>
<span class="line">A day in</span>
<span class="line">the life of an</span>
<span class="line">Apple engineer</span>
<span class="line">&quot;&quot;&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>These multi-line strings aren’t used terribly often, but at least you can see how it’s done: the triple quotes at the start and end are on their own line, with your string in between.</p><p>Once you’ve created your string, you’ll find that Swift gives us some useful functionality to work with its contents. You’ll learn more about this functionality over time, but I want to introduce you to three things here.</p><p>First, you can read the length of a string by writing <code>.count</code> after the name of the variable or constant:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">actor</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Because <code>actor</code> has the text “Denzel Washington”, that will print 17 – one for each letter in the name, plus the space in the middle.</p><p>You don’t need to print the length of a string directly if you don’t want to – you can assign it to another constant, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> nameLength <span class="token operator">=</span> <span class="token keyword">actor</span><span class="token punctuation">.</span>count</span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>nameLength<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>The second useful piece of functionality is <code>uppercased()</code>, which sends back the same string except every one of its letter is uppercased:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">uppercased</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Yes, the open and close parentheses are needed here but aren’t needed with <code>count</code>. The reason for this will become clearer as you learn, but at this early stage in your Swift learning the distinction is best explained like this: if you’re asking Swift to read some data you don’t need the parentheses, but if you’re asking Swift to do some work you do. That’s not wholly true as you’ll learn later, but it’s enough to get you moving forward for now.</p><p>The last piece of helpful string functionality is called <code>hasPrefix()</code>, and lets us know whether a string starts with some letters of our choosing:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span>movie<span class="token punctuation">.</span><span class="token function">hasPrefix</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;A day&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>There’s also a <code>hasSuffix()</code> counterpart, which checks whether a string ends with some text:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span>filename<span class="token punctuation">.</span><span class="token function">hasSuffix</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;.jpg&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>Important</strong>: Strings are case-sensitive in Swift, which means using <code>filename.hasSuffix(&quot;.JPG&quot;)</code> will return false because the letters in the string are lowercase.</p><p>Strings are really powerful in Swift, and we’ve only really scratched the surface of what they can do!</p>`,28),oe=r('<div class="hint-container info"><p class="hint-container-title">5. How to create strings - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-need-multi-line-strings" target="_blank" rel="noopener noreferrer">Why does Swift need multi-line strings?</a></li><li>Test: <a href="https://hackingwithswift.com/review/multi-line-strings" target="_blank" rel="noopener noreferrer">Multi-line strings</a></li></ul></div><h3 id="_6-how-to-store-whole-numbers" tabindex="-1"><a class="header-anchor" href="#_6-how-to-store-whole-numbers"><span>6. How to store whole numbers</span></a></h3>',2),ie={class:"hint-container details"},le=e("summary",null,"6. How to store whole numbers",-1),re=r(`<p>When you’re working with whole numbers such as 3, 5, 50, or 5 million, you’re working with what Swift calls integers, or <code>Int</code> for short – “integer” is originally a Latin word meaning “whole”, if you were curious.</p><p>Making a new integer works just like making a string: use <code>let</code> or <code>var</code> depending on whether you want a constant or variable, provide a name, then give it a value. For example, we could create a <code>score</code> constant like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> score <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Integers can be really big – past billions, past trillions, past quadrillions, and well into quintillions, but they they can be really small too – they can hold negative numbers up to quintillions.</p><p>When you’re writing out numbers by hand, it can be hard to see quite what’s going on. For example, what number is this?</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> reallyBig <span class="token operator">=</span> <span class="token number">100000000</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If we were writing that out by hand we’d probably write “100,000,000” at which point it’s clear that the number is 100 million. Swift has something similar: you can use underscores, <code>_</code>, to break up numbers however you want.</p><p>So, we could change our previous code to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> reallyBig <span class="token operator">=</span> <span class="token number">100_000_000</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Swift doesn’t actually care about the underscores, so if you wanted you could write this instead:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> reallyBig <span class="token operator">=</span> <span class="token number">1_00__00___00____00</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The end result is the same: <code>reallyBig</code> gets set to an integer with the value of 100,000,000.</p><p>Of course, you can also create integers from other integers, using the kinds of arithmetic operators that you learned at school: <code>+</code> for addition, <code>-</code> for subtraction, <code>*</code> for multiplication, and <code>/</code> for division.</p><p>For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> lowerScore <span class="token operator">=</span> score <span class="token operator">-</span> <span class="token number">2</span></span>
<span class="line"><span class="token keyword">let</span> higherScore <span class="token operator">=</span> score <span class="token operator">+</span> <span class="token number">10</span></span>
<span class="line"><span class="token keyword">let</span> doubledScore <span class="token operator">=</span> score <span class="token operator">*</span> <span class="token number">2</span></span>
<span class="line"><span class="token keyword">let</span> squaredScore <span class="token operator">=</span> score <span class="token operator">*</span> score</span>
<span class="line"><span class="token keyword">let</span> halvedScore <span class="token operator">=</span> score <span class="token operator">/</span> <span class="token number">2</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Rather than making new constants each time, Swift has some special operations that adjust an integer somehow and assigns the result back to the original number.</p><p>For example, this creates a <code>counter</code> variable equal to 10, then adds 5 more to it:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line">counter <span class="token operator">=</span> counter <span class="token operator">+</span> <span class="token number">5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Rather than writing <code>counter = counter + 5</code>, you can use the shorthand operator <code>+=</code>, which adds a number directly to the integer in question:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">counter <span class="token operator">+=</span> <span class="token number">5</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>That does exactly the same thing, just with less typing. We call these compound assignment operators, and they come in other forms:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">counter <span class="token operator">*=</span> <span class="token number">2</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line">counter <span class="token operator">-=</span> <span class="token number">10</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line">counter <span class="token operator">/=</span> <span class="token number">2</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Before we’re done with integers, I want to mention one last thing: like strings, integers have some useful functionality attached. For example, you can call <code>isMultiple(of:)</code> on an integer to find out whether it’s a multiple of another integer.</p><p>So, we could ask whether 120 is a multiple of three like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">120</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>number<span class="token punctuation">.</span><span class="token function">isMultiple</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>I’m calling <code>isMultiple(of:)</code> on a constant there, but you can just use the number directly if you want:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">.</span><span class="token function">isMultiple</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,27),ce=r('<div class="hint-container info"><p class="hint-container-title">6. How to store whole numbers - Additional</p><ul><li>Test: <a href="https://hackingwithswift.com/review/strings-and-integers" target="_blank" rel="noopener noreferrer">Strings and integers</a></li></ul></div><h3 id="_7-how-to-store-decimal-numbers" tabindex="-1"><a class="header-anchor" href="#_7-how-to-store-decimal-numbers"><span>7. How to store decimal numbers</span></a></h3>',2),pe={class:"hint-container details"},de=e("summary",null,"7. How to store decimal numbers",-1),ue=r(`<p>When you’re working with decimal numbers such as 3.1, 5.56, or 3.141592654, you’re working with what Swift calls floating-point numbers. The name comes from the surprisingly complex way the numbers are stored by your computer: it tries to store very large numbers such as 123,456,789 in the same amount of space as very small numbers such as 0.0000000001, and the only way it can do that is by moving the decimal point around based on the size of the number.</p><p>This storage method causes decimal numbers to be notoriously problematic for programmers, and you can get a taste of this with just two lines of Swift code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>When that runs it won’t print 0.3. Instead, it will print 0.30000000000000004 – that 0.3, then 15 zeroes, then a 4 because… well, like I said, it’s complex.</p><p>I’ll explain more why it’s complex in a moment, but first let’s focus on what matters.</p><p>First, when you create a floating-point number, Swift considers it to be a <code>Double</code>. That’s short for “double-precision floating-point number”, which I realize is quite a strange name – the way we’ve handled floating-point numbers has changed a lot over the years, and although Swift does a good job of simplifying this you might sometimes meet some older code that is more complex. In this case, it means Swift allocates twice the amount of storage as some older languages would do, meaning a <code>Double</code> can store absolutely massive numbers.</p><p>Second, Swift considers decimals to be a wholly different type of data to integers, which means you can’t mix them together. After all, integers are always 100% accurate, whereas decimals are not, so Swift won’t let you put the two of them together unless you specifically ask for it to happen.</p><p>In practice, this means you can’t do things like adding an integer to a decimal, so this kind of code will produce an error:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2.0</span></span>
<span class="line"><span class="token keyword">let</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Yes, we can see that <code>b</code> is really just the integer 2 masquerading as a decimal, but Swift still won’t allow that code to run. This is called type safety: Swift won’t let us mix different types of data by accident.</p><p>If you want that to happen you need to tell Swift explicitly that it should either treat the <code>Double</code> inside <code>b</code> as an <code>Int</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> c <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token class-name">Int</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Or treat the <code>Int</code> inside <code>a</code> as a <code>Double</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> b</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Third, Swift decides whether you wanted to create a <code>Double</code> or an <code>Int</code> based on the number you provide – if there’s a dot in there, you have a <code>Double</code>, otherwise it’s an <code>Int</code>. Yes, even if the numbers after the dot are 0.</p><p>So:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> double1 <span class="token operator">=</span> <span class="token number">3.1</span></span>
<span class="line"><span class="token keyword">let</span> double2 <span class="token operator">=</span> <span class="token number">3131.3131</span></span>
<span class="line"><span class="token keyword">let</span> double3 <span class="token operator">=</span> <span class="token number">3.0</span></span>
<span class="line"><span class="token keyword">let</span> int1 <span class="token operator">=</span> <span class="token number">3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Combined with type safety, this means that once Swift has decided what data type a constant or variable holds, it must always hold that same data type. That means this code is fine:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Nicolas Cage&quot;</span></span></span>
<span class="line">name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;John Travolta&quot;</span></span></span>
<span class="line"><span class="token class-name">But</span> this kind of code <span class="token keyword">is</span> not<span class="token punctuation">:</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Nicolas Cage&quot;</span></span></span>
<span class="line">name <span class="token operator">=</span> <span class="token number">57</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That tells Swift <code>name</code> will store a string, but then it tries to put an integer in there instead.</p><p>Finally, decimal numbers have the same range of operators and compound assignment operators as integers:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> rating <span class="token operator">=</span> <span class="token number">5.0</span></span>
<span class="line">rating <span class="token operator">*=</span> <span class="token number">2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Many older APIs use a slightly different way of storing decimal numbers, called <code>CGFloat</code>. Fortunately, Swift lets us use regular <code>Double</code> numbers everywhere a <code>CGFloat</code> is expected, so although you will see <code>CGFloat</code> appear from time to time you can just ignore it.</p><p>In case you were curious, the reason floating-point numbers are complex is because computers are trying to use binary to store complicated numbers. For example, if you divide 1 by 3 we know you get 1/3, but that can’t be stored in binary so the system is designed to create very close approximations. It’s extremely efficient, and the error is so small it’s usually irrelevant, but at least you know why Swift doesn’t let us mix <code>Int</code> and <code>Double</code> by accident!</p>`,24),he=r('<div class="hint-container info"><p class="hint-container-title">7. How to store decimal numbers - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-need-both-doubles-and-integers" target="_blank" rel="noopener noreferrer">Why does Swift need both Doubles and Integers?</a></li><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-is-swift-a-type-safe-language" target="_blank" rel="noopener noreferrer">Why is Swift a type-safe language?</a></li></ul></div><p>When you’re finished, don’t forget to tell other people about your progress. Yes, this is only day one, but the more motivation you get now the more you’ll be able to power through when things get tougher!</p><p><strong>Reminder:</strong> I have a free iOS app that helps you practice Swift right on your iPhone and iPad. It contains alternative lessons that might help these new concepts sink in, plus lots more bonus activities. And did I mention it was free? <a href="https://itunes.apple.com/app/id1440611372" target="_blank" rel="noopener noreferrer">Download it here</a>.</p><h3 id="tips" tabindex="-1"><a class="header-anchor" href="#tips"><span>Tips</span></a></h3><ul><li>You can download Xcode from the Mac App Store by <a href="https://apps.apple.com/gb/app/xcode/id497799835?mt=12" target="_blank" rel="noopener noreferrer">clicking here</a>.</li><li>As you progress in these early days you’ll build up lots of code from each day. You can keep it in different playgrounds if you want, or you can delete it – it’s down to you.</li></ul><hr>',6);function me(d,we){const t=p("router-link"),o=p("VPCard"),c=p("VidStack");return w(),h("div",null,[e("h1",f,[e("a",b,[e("span",null,m(d.$frontmatter.title)+" 관련",1)])]),e("nav",y,[e("ul",null,[e("li",null,[s(t,{to:"#first-steps-in-swift"},{default:a(()=>[n("First steps in Swift")]),_:1}),e("ul",null,[e("li",null,[s(t,{to:"#_1-introduction-why-swift"},{default:a(()=>[n("1. Introduction: Why Swift?")]),_:1})]),e("li",null,[s(t,{to:"#_2-introduction-about-this-course"},{default:a(()=>[n("2. Introduction: About this course")]),_:1})]),e("li",null,[s(t,{to:"#_3-introduction-how-to-follow-along"},{default:a(()=>[n("3. Introduction: How to follow along")]),_:1})]),e("li",null,[s(t,{to:"#_4-how-to-create-variables-and-constants"},{default:a(()=>[n("4. How to create variables and constants")]),_:1})]),e("li",null,[s(t,{to:"#_5-how-to-create-strings"},{default:a(()=>[n("5. How to create strings")]),_:1})]),e("li",null,[s(t,{to:"#_6-how-to-store-whole-numbers"},{default:a(()=>[n("6. How to store whole numbers")]),_:1})]),e("li",null,[s(t,{to:"#_7-how-to-store-decimal-numbers"},{default:a(()=>[n("7. How to store decimal numbers")]),_:1})]),e("li",null,[s(t,{to:"#tips"},{default:a(()=>[n("Tips")]),_:1})])])])])]),v,s(o,i(l({title:"100 Days of SwiftUI - Day 1",desc:"First steps in Swift",link:"https://www.hackingwithswift.com/100/swiftui/1",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),k,_,S,x,q,I,e("details",T,[j,s(o,i(l({title:"100 Days of SwiftUI - Day 1 - 1. Introduction: Why Swift?",desc:"1. Introduction: Why Swift?",link:"https://hackingwithswift.com/quick-start/beginners/why-swift",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/ug6T-iFk5OY"}),D,H,A,W,Y]),F,e("details",N,[U,s(o,i(l({title:"100 Days of SwiftUI - Day 1 - 2. Introduction: About this course",desc:"2. Introduction: About this course",link:"https://hackingwithswift.com/quick-start/beginners/about-this-course",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/GG7bu0NRyYM"}),O,C,P,B,M,R]),V,e("details",z,[G,s(o,i(l({title:"100 Days of SwiftUI - Day 1 - 3. Introduction: How to follow along",desc:"3. Introduction: How to follow along",link:"https://hackingwithswift.com/quick-start/beginners/how-to-follow-along",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/S6udZCgHiLA"}),L,K,X,J,Z]),E,e("details",Q,[$,s(o,i(l({title:"100 Days of SwiftUI - Day 1 - 4. How to create variables and constants",desc:"4. How to create variables and constants",link:"https://hackingwithswift.com/quick-start/beginners/how-to-create-variables-and-constants",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/jlkcxTyM8m4"}),ee]),se,e("details",ne,[te,s(o,i(l({title:"100 Days of SwiftUI - Day 1 - 5. How to create strings",desc:"5. How to create strings",link:"https://hackingwithswift.com/quick-start/beginners/how-to-create-strings",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/jfBcryGKf38"}),ae]),oe,e("details",ie,[le,s(o,i(l({title:"100 Days of SwiftUI - Day 1 - 6. How to store whole numbers",desc:"6. How to store whole numbers",link:"https://hackingwithswift.com/quick-start/beginners/how-to-store-whole-numbers",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/kVLntzY4YQg"}),re]),ce,e("details",pe,[de,s(o,i(l({title:"100 Days of SwiftUI - Day 1 - 7. How to store decimal numbers",desc:"7. How to store decimal numbers",link:"https://hackingwithswift.com/quick-start/beginners/how-to-store-decimal-numbers",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/JGslWiKS_CU"}),ue]),he])}const be=u(g,[["render",me],["__file","01.html.vue"]]),ye=JSON.parse('{"path":"/swift/100-days-of-swiftui/01.html","title":"Day 01","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 01","description":"100 Days of SwiftUI > Day 01","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 01"},{"property":"og:description","content":"Day 01"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/01.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/01.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 01"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 01"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 01\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"First steps in Swift","slug":"first-steps-in-swift","link":"#first-steps-in-swift","children":[{"level":3,"title":"1. Introduction: Why Swift?","slug":"_1-introduction-why-swift","link":"#_1-introduction-why-swift","children":[]},{"level":3,"title":"2. Introduction: About this course","slug":"_2-introduction-about-this-course","link":"#_2-introduction-about-this-course","children":[]},{"level":3,"title":"3. Introduction: How to follow along","slug":"_3-introduction-how-to-follow-along","link":"#_3-introduction-how-to-follow-along","children":[]},{"level":3,"title":"4. How to create variables and constants","slug":"_4-how-to-create-variables-and-constants","link":"#_4-how-to-create-variables-and-constants","children":[]},{"level":3,"title":"5. How to create strings","slug":"_5-how-to-create-strings","link":"#_5-how-to-create-strings","children":[]},{"level":3,"title":"6. How to store whole numbers","slug":"_6-how-to-store-whole-numbers","link":"#_6-how-to-store-whole-numbers","children":[]},{"level":3,"title":"7. How to store decimal numbers","slug":"_7-how-to-store-decimal-numbers","link":"#_7-how-to-store-decimal-numbers","children":[]},{"level":3,"title":"Tips","slug":"tips","link":"#tips","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":9}]},"readingTime":{"minutes":15.63,"words":4688},"filePathRelative":"swift/100-days-of-swiftui/01.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{be as comp,ye as data};
