import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as e,t as g,b as s,w as i,n as l,g as r,d as t,e as n,r as c,o as m}from"./app-U_bew1in.js";const k={},w={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},b=e("hr",null,null,-1),v=e("h2",{id:"simple-data-types-part-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#simple-data-types-part-2"},[e("span",null,"Simple data types, part 2")])],-1),_=e("p",null,"Lynch’s Law says “when the going gets tough, everyone leaves.” Anyone can complete the first day of a course, but it takes diligence to come back for day 02 – well done for sticking with it!",-1),q=e("p",null,"Yesterday we began looking at simple data types – things that hold one value, like a single number or a single string of letters. Today we’re continuing that as we explore storing truth with Booleans, and building up strings with interpolation. At various points you might think “do I really need to know this?” And the answer is yes – if it’s here in this course, you absolutely need to know it!",-1),S=e("p",null,"But today something important happens, because you’re also going to have your first checkpoint. This is where we’re going to pause so you can write some code of your own, to make sure you’ve fully understood what was presented. Starting with a blank canvas is going to be hard at first, but you should have lots of time and I’ll be providing hints too.",-1),j=e("p",null,[e("strong",null,"Today you have two new tutorials to follow, plus a summary and a checkpoint to complete."),t(" As before, if you want to dive deeper into each topic there is some optional further reading, but you don’t need to read that unless you want to.")],-1),x=e("h3",{id:"_1-how-to-store-truth-with-booleans",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-how-to-store-truth-with-booleans"},[e("span",null,"1. How to store truth with Booleans")])],-1),I={class:"hint-container details"},T=e("summary",null,"1. How to store truth with Booleans",-1),B=n(`<p>So far we’ve looked at strings, integers, and decimals, but there’s a fourth type of data that snuck in at the same time: a very simple type called a Boolean, which stores either true or false. If you were curious, Booleans were named after George Boole, an English mathematician who spent a great deal of time researching and writing about logic.</p><p>I say that Booleans snuck in because you’ve seen them a couple of times already:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> filename <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;paris.jpg&quot;</span></span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>filename<span class="token punctuation">.</span><span class="token function">hasSuffix</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;.jpg&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">120</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>number<span class="token punctuation">.</span><span class="token function">isMultiple</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Both <code>hasSuffix()</code> and <code>isMultiple(of:)</code> return a new value based on their check: either the string has the suffix or it doesn’t, and either 120 is a multiple of 3 or it isn’t. In both places there’s always a simple true or false answer, which is where Booleans come in – they store just that, and nothing else.</p><p>Making a Boolean is just like making the other data types, except you should assign an initial value of either true or false, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> goodDogs <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token keyword">let</span> gameOver <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also assign a Boolean’s initial value from some other code, as long as ultimately it’s either true or false:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> isMultiple <span class="token operator">=</span> <span class="token number">120</span><span class="token punctuation">.</span><span class="token function">isMultiple</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Unlike the other types of data, Booleans don’t have arithmetic operators such as <code>+</code> and <code>-</code> – after all, what would true + true equal? However, Booleans do have one special operator, <code>!</code>, which means “not”. This flips a Boolean’s value from true to false, or false to true.</p><p>For example, we could flip a Boolean’s value like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> isAuthenticated <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">isAuthenticated <span class="token operator">=</span> <span class="token operator">!</span>isAuthenticated</span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>isAuthenticated<span class="token punctuation">)</span></span>
<span class="line">isAuthenticated <span class="token operator">=</span> <span class="token operator">!</span>isAuthenticated</span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>isAuthenticated<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That will print “true” then “false” when it runs, because <code>isAuthenticated</code> started as false, and we set it to not false, which is true, then flip it again so it’s back to false.</p><p>Booleans do have a little extra functionality that can be useful. In particular, if you call <code>toggle()</code> on a Boolean it will flip a true value to false, and a false value to true. To try this out, try making <code>gameOver</code> a variable and modifying it like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> gameOver <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>gameOver<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">gameOver<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>gameOver<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That will print false first, then after calling <code>toggle()</code> will print true. Yes, that’s the same as using <code>!</code> just in slightly less code, but it’s surprisingly useful when you’re dealing with complex code!</p>`,15),D=n('<div class="hint-container info"><p class="hint-container-title">1. How to store truth with Booleans - Additional</p><ul><li>Test: <a href="https://hackingwithswift.com/review/sixty/doubles-and-booleans" target="_blank" rel="noopener noreferrer">Doubles and Booleans</a></li></ul></div><h3 id="_2-how-to-join-strings-together" tabindex="-1"><a class="header-anchor" href="#_2-how-to-join-strings-together"><span>2. How to join strings together</span></a></h3>',2),A={class:"hint-container details"},H=e("summary",null,"2. How to join strings together",-1),C=n(`<p>Swift gives us two ways to combine strings together: joining them using <code>+</code>, and a special technique called <em>string</em> interpolation that can place variables of any type directly inside strings.</p><p>Let’s start with the easier option first, which is using <code>+</code> to join strings together: when you have two strings, you can join them together into a new string just by using <code>+</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> firstPart <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Hello, &quot;</span></span></span>
<span class="line"><span class="token keyword">let</span> secondPart <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;world!&quot;</span></span></span>
<span class="line"><span class="token keyword">let</span> greeting <span class="token operator">=</span> firstPart <span class="token operator">+</span> secondPart</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can do this many times if you need to:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> people <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Haters&quot;</span></span></span>
<span class="line"><span class="token keyword">let</span> action <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;hate&quot;</span></span></span>
<span class="line"><span class="token keyword">let</span> lyric <span class="token operator">=</span> people <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&quot; gonna &quot;</span></span> <span class="token operator">+</span> action</span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>lyric<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When that runs it will print “Haters gonna hate” – yes, I’m a big fan of Taylor Swift, and I think her lyrics make a natural fit for a tutorial about Swift programming!</p><p>Notice how we’re using <code>+</code> to join two strings, but when we used <code>Int</code> and <code>Double</code> it added numbers together? This is called operator overloading – the ability for one operator such as <code>+</code> to mean different things depending on how it’s used. For strings, it also applies to <code>+=,</code> which adds one string directly to another.</p><p>This technique works great for small things, but you wouldn’t want to do it too much. You see, each time Swift sees two strings being joined together using <code>+</code> it has to make a new string out of them before continuing, and if you have lots of things being joined it’s quite wasteful.</p><p>Think about this for example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> luggageCode <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;1&quot;</span></span> <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&quot;2&quot;</span></span> <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&quot;3&quot;</span></span> <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&quot;4&quot;</span></span> <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&quot;5&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Swift can’t join all those strings in one go. Instead, it will join the first two to make “12”, then join “12” and “3” to make “123”, then join “123” and “4” to make “1234”, and finally join “1234” and “5” to make “12345” – it makes temporary strings to hold “12”, “123”, and “1234” even though they aren’t ultimately used when the code finishes.</p><p>Swift has a better solution called string interpolation, and it lets us efficiently create strings from other strings, but also from integers, decimal numbers, and more.</p><p>If you remember, earlier I said that you can include double quotes inside strings as long as they have a backslash before them so Swift knows to treat them specially:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> quote <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Then he tapped a sign saying \\&quot;Believe\\&quot; and walked away.&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Something very similar is used with string interpolation: you write a backslash inside your string, then place the name of a variable or constant inside parentheses.</p><p>For example, we could create one string constant and one integer constant, then combine them into a new string:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Taylor&quot;</span></span></span>
<span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">26</span></span>
<span class="line"><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Hello, my name is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> and I&#39;m </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">age</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> years old.&quot;</span></span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When that code runs, it will print “Hello, my name is Taylor and I’m 26 years old.”</p><p>String interpolation is much more efficient than using <code>+</code> to join strings one by one, but there’s another important benefit too: you can pull in integers, decimals, and more with no extra work.</p><p>You see, using <code>+</code> lets us add strings to strings, integers to integers, and decimals to decimals, but doesn’t let us add integers to strings. So, this kind of code is not allowed:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> number <span class="token operator">=</span> <span class="token number">11</span></span>
<span class="line"><span class="token keyword">let</span> missionMessage <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Apollo &quot;</span></span> <span class="token operator">+</span> number <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&quot; landed on the moon.&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>You <em>could</em> ask Swift to treat the number like a string if you wanted, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> missionMessage <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Apollo &quot;</span></span> <span class="token operator">+</span> <span class="token class-name">String</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&quot; landed on the moon.&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>It is still both faster and easier to read to use string interpolation:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> missionMessage <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Apollo </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">number</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> landed on the moon.&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>Tip</strong>: You can put calculations inside string interpolation if you want to. For example, this will print “5 x 5 is 25”:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;5 x 5 is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">5</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,27),Y=n('<div class="hint-container info"><p class="hint-container-title">2. How to join strings together - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-have-string-interpolation" target="_blank" rel="noopener noreferrer">Why does Swift have string interpolation?</a></li><li>Test: <a href="https://hackingwithswift.com/review/sixty/string-interpolation" target="_blank" rel="noopener noreferrer">String interpolation</a></li></ul></div><h3 id="_3-summary-simple-data" tabindex="-1"><a class="header-anchor" href="#_3-summary-simple-data"><span>3. Summary: Simple data</span></a></h3>',2),O={class:"hint-container details"},P=e("summary",null,"3. Summary: Simple data",-1),U=n("<p>We’ve covered a lot about the basics of data in the previous chapters, so let’s recap:</p><ul><li>Swift lets us create constants using <code>let</code>, and variables using <code>var</code>.</li><li>If you don’t intend to change a value, make sure you use <code>let</code> so that Swift can help you avoid mistakes.</li><li>Swift’s strings contain text, from short strings up to whole novels. They work great with emoji and any world language, and have helpful functionality such as <code>count</code> and <code>uppercased()</code>.</li><li>You create strings by using double quotes at the start and end, but if you want your string to go over several lines you need to use three double quotes at the start and end.</li><li>Swift calls its whole numbers integers, and they can be positive or negative. They also have helpful functionality, such as <code>isMultiple(of:)</code>.</li><li>In Swift decimal numbers are called <code>Double</code>, short for double-length floating-point number. That means they can hold very large numbers if needed, but they also aren’t 100% accurate – you shouldn’t use them when 100% precision is required, such as when dealing with money.</li><li>There are lots of built-in arithmetic operators, such as <code>+</code>, <code>-</code>, <code>*</code>, and <code>/</code>, along with the special compound assignment operators such as <code>+=</code> that modify variables directly.</li><li>You can represent a simple true or false state using a Boolean, which can be flipped using the <code>!</code> operator or by calling <code>toggle()</code>.</li><li>String interpolation lets us place constants and variables into our strings in a streamlined, efficient way.</li></ul><p>It’s a lot, right? And that’s okay – you’ll be using everything from that list time and time again as you build apps, until eventually you’ll understand it all without needing to refer back here.</p>",3),M=e("p",null,"When you’re ready, please proceed onto the checkpoint:",-1),V=e("h3",{id:"checkpoint-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#checkpoint-1"},[e("span",null,"Checkpoint 1")])],-1),F={class:"hint-container details"},N=e("summary",null,"Checkpoint 1",-1),W=n("<p>You already know enough to start writing your first useful code, albeit fairly simple: we’re going to convert temperatures from Celsius to Fahrenheit.</p><p>Your goal is to write a Swift playground that:</p><ol><li>Creates a constant holding any temperature in Celsius.</li><li>Converts it to Fahrenheit by multiplying by 9, dividing by 5, then adding 32.</li><li>Prints the result for the user, showing both the Celsius and Fahrenheit values.</li></ol><p>You already know everything you need to solve that problem, but if you’d like some hints then I’ll add some below.</p><p><strong>Note</strong>: I really do encourage you to try building this playground before reading any hints or trying my solution. I know it might seem simple, but the course does start to get harder soon and it’s important to be sure you’ve learned all the fundamentals.</p><p>Please go ahead and try building the playground now.</p><p>Still here? Okay, here are some hints:</p><ol><li>Use <code>let</code> to make your constant. You can call it whatever you want, but I think <code>celsius</code> would be an appropriate name.</li><li>Celsius is commonly stored as a decimal, so make sure and create it as one. This might mean adding “.0” to the end – using 25.0 rather than 25, for example.</li><li>We use <code>*</code> for multiplication and <code>/</code> for division.</li><li>Use <code>\\(someVariable)</code> to activate string interpolation.</li><li>If you want to get fancy with <code>print()</code>, you can use <kbd>Option</kbd>+<kbd>Shift</kbd>+<kbd>8</kbd> to get the degrees symbol: °. This means you can write something like 25°F.</li></ol>",8),L=e("hr",null,null,-1);function R(d,G){const a=c("router-link"),o=c("VPCard"),p=c("VidStack");return m(),h("div",null,[e("h1",w,[e("a",f,[e("span",null,g(d.$frontmatter.title)+" 관련",1)])]),e("nav",y,[e("ul",null,[e("li",null,[s(a,{to:"#simple-data-types-part-2"},{default:i(()=>[t("Simple data types, part 2")]),_:1}),e("ul",null,[e("li",null,[s(a,{to:"#_1-how-to-store-truth-with-booleans"},{default:i(()=>[t("1. How to store truth with Booleans")]),_:1})]),e("li",null,[s(a,{to:"#_2-how-to-join-strings-together"},{default:i(()=>[t("2. How to join strings together")]),_:1})]),e("li",null,[s(a,{to:"#_3-summary-simple-data"},{default:i(()=>[t("3. Summary: Simple data")]),_:1})]),e("li",null,[s(a,{to:"#checkpoint-1"},{default:i(()=>[t("Checkpoint 1")]),_:1})])])])])]),b,s(o,l(r({title:"100 Days of SwiftUI - Day 2",desc:"Simple data types, part 2",link:"https://www.hackingwithswift.com/100/swiftui/2",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,_,q,S,j,x,e("details",I,[T,s(o,l(r({title:"100 Days of SwiftUI - Day 2 - 1. How to store truth with Booleans",desc:"1. How to store truth with Booleans",link:"https://hackingwithswift.com/quick-start/beginners/how-to-store-truth-with-booleans",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(p,{src:"youtube/YQPOLBZiGWA"}),B]),D,e("details",A,[H,s(o,l(r({title:"100 Days of SwiftUI - Day 2 - 2. How to join strings together",desc:"2. How to join strings together",link:"https://hackingwithswift.com/quick-start/beginners/how-to-join-strings-together",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(p,{src:"youtube/IpgGhy1QTzw"}),C]),Y,e("details",O,[P,s(o,l(r({title:"100 Days of SwiftUI - Day 2 - 3. Summary: Simple data",desc:"3. Summary: Simple data",link:"https://hackingwithswift.com/quick-start/beginners/summary-simple-data",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(p,{src:"youtube/GUCYgvvxJI0"}),U]),M,V,e("details",F,[N,s(o,l(r({title:"100 Days of SwiftUI - Day 2 - Checkpoint 1",desc:"Checkpoint 1",link:"https://www.hackingwithswift.com/quick-start/beginners/checkpoint-1",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(p,{src:"youtube/clcA92OLgpI"}),W]),L])}const K=u(k,[["render",R],["__file","02.html.vue"]]),E=JSON.parse('{"path":"/swift/100-days-of-swiftui/02.html","title":"Day 02","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 02","description":"100 Days of SwiftUI > Day 02","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 02"},{"property":"og:description","content":"Day 02"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/02.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/02.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 02"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 02"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 02\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Simple data types, part 2","slug":"simple-data-types-part-2","link":"#simple-data-types-part-2","children":[{"level":3,"title":"1. How to store truth with Booleans","slug":"_1-how-to-store-truth-with-booleans","link":"#_1-how-to-store-truth-with-booleans","children":[]},{"level":3,"title":"2. How to join strings together","slug":"_2-how-to-join-strings-together","link":"#_2-how-to-join-strings-together","children":[]},{"level":3,"title":"3. Summary: Simple data","slug":"_3-summary-simple-data","link":"#_3-summary-simple-data","children":[]},{"level":3,"title":"Checkpoint 1","slug":"checkpoint-1","link":"#checkpoint-1","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":10}]},"readingTime":{"minutes":7.28,"words":2184},"filePathRelative":"swift/100-days-of-swiftui/02.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{K as comp,E as data};
