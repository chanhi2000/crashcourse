import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as n,t as l,b as a,w as t,e as i,r as u,o as r,d as e}from"./app-U_bew1in.js";const k={},d={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},v={class:"table-of-contents"},g=i(`<hr><h2 id="_6장-스트림으로-데이터-수집" tabindex="-1"><a class="header-anchor" href="#_6장-스트림으로-데이터-수집"><span>6장 - 스트림으로 데이터 수집</span></a></h2><p>4장과 5장에서는 스트림에서 최종 연산 <code>collect</code>를 사용하는 방법을 확인했다. 하지만 toList로 스트림 요소를 항상 리스트로만 변환했다. 이 장에서는 <code>reduce</code>가 그랬던 것처럼 <code>collect</code> 역시 다양한 요소 누적 방식을 인수로 받아서 스트림을 최종 결과로 도출하는 리듀싱 연산을 수행할 수 있음을 설명한다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// 통화별로 트랜잭션을 그룹화한 코드 - 명령형 버전</span></span>
<span class="line"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Currency</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Transaction</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> transactionByCurrencies <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Transaction</span> transaction <span class="token operator">:</span> transactions<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token class-name">Currency</span> currency <span class="token operator">=</span> transaction<span class="token punctuation">.</span><span class="token function">getCurrency</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Transaction</span><span class="token punctuation">&gt;</span></span> transactionForCurrency <span class="token operator">=</span> transactionByCurrencies<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>currency<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>transactionForCurrency <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		transactionForCurrency <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		transactionByCurrencies<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>currency<span class="token punctuation">,</span> transactionForCurrency<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	transactionForCurrency<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>통화별로 트랜잭션 리스트를 그룹화하기 위해 위와 같은 방법도 있지만 자바8에서는 더 간결한 구현이 가능하다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Currency</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Transaction</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> transactionByCurrencies <span class="token operator">=</span> </span>
<span class="line">  transactions<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Transaction</span><span class="token operator">::</span><span class="token function">getCurrency</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="컬렉터란-무엇인가" tabindex="-1"><a class="header-anchor" href="#컬렉터란-무엇인가"><span>컬렉터란 무엇인가?</span></a></h3><p>Collector 인터페이스 구현은 스트림의 요소를 어떤 식으로 도출할지 지정한다. 5장에서는 &#39;각 요소를 리스트로 만들어라&#39;를 의미하는 <code>toList</code>를 <code>Collector</code> 인터페이스의 구현으로 사용했다. 여기서는 <code>groupingBy</code>를 이용해서 &#39;각 키(통화) 버킷 그리고 각 키 버킷에 대응하는 요소 리스트를 값으로 포함하는 맵을 만들라&#39;는 동작을 수행한다.</p><p><code>collect()</code> 메서드로 <code>Collector</code> 인터페이스 구현을 전달한다. 스트림에 <code>collect</code>를 호출하면 스트림의 요소에 내부적으로 리듀싱 연산이 수행된다. 통화 예제에서 보여주는 것처럼 <code>Collector</code> 인터페이스의 메서드를 어떻게 구현하느냐에 따라 스트림에 어떤 리듀싱 연산을 수행할지 결정된다. <code>Collectors</code> 유틸리티 클래스는 자주 사용하는 컬렉터 인스턴스를 손쉽게 생성할 수 있는 정적 팩토리 메서드를 제공한다. ex) <code>toList()</code>, <code>counting()</code></p><h4 id="리듀싱과-요약" tabindex="-1"><a class="header-anchor" href="#리듀싱과-요약"><span>리듀싱과 요약</span></a></h4><p>첫 번째 예제로 <code>counting()</code>이라는 팩토리 메서드가 반환하는 컬렉터로 메뉴에서 요리 수를 계산한다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">long</span> howMayDishes <span class="token operator">=</span> menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>두 번째는 메뉴에서 칼로리가 가장 높은 요리를 찾는다고 해보자. <code>Collectors.maxBy</code>, <code>Collectors.minBy</code> 두 개의 메서드를 이용해서 스트림의 최댓값과 최솟값을 계산할 수 있다. 두 컬렉터는 스트림의 요소를 비교하는데 사용할 <code>Comparator</code>를 인수로 받는다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dish</span><span class="token punctuation">&gt;</span></span> dishCaloriesComparator </span>
<span class="line">	<span class="token operator">=</span> <span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getCalories</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dish</span><span class="token punctuation">&gt;</span></span> mostCalorieDish </span>
<span class="line">	<span class="token operator">=</span> menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">maxBy</span><span class="token punctuation">(</span>dishCaloriesComparator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>또한 스트림에 있는 객체의 숫자 필드의 합계나 평균 등을 반환하는 연산에도 리듀싱 기능이 자주 사용된다. 이러한 연산을 요약 연산이라 부른다.</p><p>다음은 메뉴 리스트의 총 칼로리를 계산하는 코드다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> totalCalories </span>
<span class="line">	<span class="token operator">=</span> menu<span class="token punctuation">.</span>stream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">summingInt</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getCalories</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>summingInt</code> 뿐만 아니라 <code>summingLong</code>, <code>summingDouble</code>, <code>averagingInt</code>, <code>averagingLong</code>, <code>averagingDouble</code> 등 다양한 형식이 존재한다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">double</span> avgCalories </span>
<span class="line">	<span class="token operator">=</span> menu<span class="token punctuation">.</span>stream<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">averagingInt</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getCalories</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>두 개 이상의 연산을 한 번에 수행해야 할 때도 있다. 이런 상황에서는 팩토리 메서드 <code>summarizingInt</code>가 반환하는 컬렉터를 사용할 수 있다. 예를 들어 다음은 하나의 요약 연산으로 메뉴에 있는 요소수, 합계, 평균, min, max 등을 계산하는 코드다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">IntSummaryStatistics</span> menuStatistics </span>
<span class="line">	<span class="token operator">=</span> menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">summarizingInt</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getCalories</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// IntSummaryStatistics { count=9, sum=4300, min=120, average=477.777778, max=800 }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위 코드를 실행하면 <code>IntSummaryStatistics</code> 클래스로 모든 정보가 수집된다.</p><p>마찬가지로 <code>int</code>뿐 아니라 <code>long</code>이나 <code>double</code>에 대응하는 <code>summarizingLong</code>, <code>summarizingDouble</code> 메서드와 관련된 <code>LongSummaryStatistics</code>, <code>DoubleSummaryStatistics</code> 클래스도 있다.</p><h4 id="문자열-연결" tabindex="-1"><a class="header-anchor" href="#문자열-연결"><span>문자열 연결</span></a></h4><p>문자열 연결을 위해 <code>joining</code>메서드는 내부적으로 <code>StringBuilder</code>를 이용해서 문자열을 하나로 만든다. 추가적으로 연결된 문자열들 사이에 구분 문자열을 넣을 수 있도록 오버로드된 <code>joining</code> 팩토리 메서드도 있다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> shortMenu </span>
<span class="line">	<span class="token operator">=</span> menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 코드 실행 결과</span></span>
<span class="line"><span class="token comment">// pork, beef, chicken, french fries, rice, season fruit, pizza, prawns, salmon</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="범용-리듀싱-요약-연산" tabindex="-1"><a class="header-anchor" href="#범용-리듀싱-요약-연산"><span>범용 리듀싱 요약 연산</span></a></h4><p>지금까지 살펴본 모든 컬렉터는 <code>reducing</code> 팩토리 메서드로도 정의할 수 있다. 즉 범용 <code>Collectors.reducing</code>으로도 구현할 수 있다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> totalCalories </span>
<span class="line">	<span class="token operator">=</span> menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">reducing</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getCalories</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> </span>
<span class="line">		i<span class="token operator">+</span>j</span>
<span class="line">	<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>reducing</code>은 세 개의 인수를 받는다. 첫 번째 인수는 리듀싱 연산의 시작값이거나 스트림에 인수가 없을 때는 반환값이다. 두 번째 인수는 변환 함수다. 세 번째 인수는 같은 종류의 두 항목을 하나의 값으로 더하는 <code>BinaryOperator</code>다.</p><p>다음처럼 한 개의 인수를 가진 <code>reducing</code> 버전을 이용해서 가장 칼로리가 높은 요리를 찾는 방법도 있다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dish</span><span class="token punctuation">&gt;</span></span> mostCalorieDish </span>
<span class="line">	<span class="token operator">=</span> menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">reducing</span><span class="token punctuation">(</span><span class="token punctuation">(</span>d1<span class="token punctuation">,</span> d2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> </span>
<span class="line">		d1<span class="token punctuation">.</span><span class="token function">getCaloriees</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> d2<span class="token punctuation">.</span><span class="token function">getCalories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> d1 <span class="token operator">:</span> d2</span>
<span class="line">	<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="컬렉션-프레임워크-유연성-같은-연산도-다양한-방식으로-수행할-수-있다" tabindex="-1"><a class="header-anchor" href="#컬렉션-프레임워크-유연성-같은-연산도-다양한-방식으로-수행할-수-있다"><span>컬렉션 프레임워크 유연성: 같은 연산도 다양한 방식으로 수행할 수 있다.</span></a></h4><p>이전 예제의 람다표현식 대신 <code>Integer</code> 클래스의 <code>sum</code> 메서드 레퍼런스를 이용하면 코드를 좀 더 단순화할 수 있다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> totalCalories </span>
<span class="line">	<span class="token operator">=</span> menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">reducing</span><span class="token punctuation">(</span></span>
<span class="line">		<span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// 초기값</span></span>
<span class="line">		<span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getCalories</span><span class="token punctuation">,</span> <span class="token comment">//변환 함수</span></span>
<span class="line">		<span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span></span>
<span class="line">	<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 합계 함수</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>또 컬렉터를 이용하지 않는 방법도 있다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">int</span> totalCalories </span>
<span class="line">	<span class="token operator">=</span> menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getCalories</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>reduce(Integer::sum)</code>도 빈 스트림과 관련한 널 문제를 피할 수 있도록 <code>int</code>가 아닌 <code>Optional&lt;Integer&gt;</code>를 반환한다. 그리고 <code>get</code>으로 <code>Optional</code> 객체 내부의 값을 추출했다. 요리 스트림은 비어있지 않다는 사실을 알고 있으므로 get을 자유롭게 사용할 수 있다. 마지막으로 스트림을 <code>IntStream</code>으로 매핑한 다음에 <code>sum</code> 메서드를 호출하는 방법으로도 결과를 얻을 수 있다.</p><h3 id="그룹화" tabindex="-1"><a class="header-anchor" href="#그룹화"><span>그룹화</span></a></h3><p>메뉴를 그룹화한다고 가정하자. 예를 들어 고기를 포함하는 그룹, 생선을 포함하는 그룹, 나머지 그룹으로 메뉴를 그룹화할 수 있다. 다음처럼 팩토리 메서드 <code>Collectors.groupingBy</code>를 이용해서 쉽게 메뉴를 그룹화할 수 있다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dish<span class="token punctuation">.</span>Type</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Dish</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> dishesByType </span>
<span class="line">	<span class="token operator">=</span> menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getType</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 다음은 \`Map\`에 포함된 결과다.</span></span>
<span class="line"><span class="token comment">// {Fish=[prawns, salmon], OTHER=[french fries, rice], MEAT=[pork, beef, chicken]}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>스트림의 각 요리에서 <code>Dish.Type</code>과 일치하는 모든 요리를 추출하는 함수를 <code>groupingBy</code> 메서드로 전달했다. 이 함수를 기준으로 스트림이 그룹화되므로 이를 분류 함수라고 부른다.</p><p>그런데 위와 같이 단순한 분류 기준이 아닌 복잡한 분류 기준이 필요한 상황에서는 메서드 레퍼런스를 분류 함수로 사용할 수 없다. 예를 들어 400칼로리 이하를 &#39;<code>diet</code>&#39;로, 400~700칼로리를 &#39;<code>normal</code>&#39;로, 700칼로리 초과를 &#39;<code>fat</code>&#39; 요리로 분류한다고 가정하자. Dish 클래스에는 이러한 연산에 필요한 메서드가 없으므로 메서드 레퍼런스를 분류 함수로 사용할 수 없다. 따라서 다음 예제처럼 람다 표현식으로 필요한 로직을 구현해야 한다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">CaloricLevel</span> <span class="token punctuation">{</span> <span class="token constant">DIET</span><span class="token punctuation">,</span> <span class="token constant">NORMAL</span><span class="token punctuation">,</span> <span class="token constant">FAT</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CaloricLevel</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Dish</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> dishesByCaloricLevel <span class="token operator">=</span> menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token function">groupingBy</span><span class="token punctuation">(</span>dish <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>dish<span class="token punctuation">.</span><span class="token function">getCalories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">400</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token class-name">CaloricLevel</span><span class="token punctuation">.</span><span class="token constant">DIET</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dish<span class="token punctuation">.</span><span class="token function">getCalories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">700</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token class-name">CaloricLevel</span><span class="token punctuation">.</span><span class="token constant">NORMAL</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token class-name">CaloricLevel</span><span class="token punctuation">.</span><span class="token constant">FAT</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="다수준-그룹화" tabindex="-1"><a class="header-anchor" href="#다수준-그룹화"><span>다수준 그룹화</span></a></h4><p>지금까지 메뉴의 요리를 종류 또는 칼로리로 그룹화하는 방법을 살펴봤다. 그러면 요리 종류와 칼로리 두 가지 기준으로 동시에 그룹화할 수 있을까?</p><p>두 인수를 받는 팩토리 메서드 <code>Collections.groupingBy</code>를 이용해서 항목을 다수준으로 그룹화할 수 있다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dish<span class="token punctuation">.</span>Type</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">CaloricLevel</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Dish</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> dishesByTypeCaloricLevel <span class="token operator">=</span> </span>
<span class="line">    menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">getType</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token function">groupingBy</span><span class="token punctuation">(</span>dish <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>dish<span class="token punctuation">.</span><span class="token function">getCalories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">400</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">return</span> <span class="token class-name">CaloricLevel</span><span class="token punctuation">.</span><span class="token constant">DIET</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dish<span class="token punctuation">.</span><span class="token function">getCalories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">700</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">return</span> <span class="token class-name">CaloricLevel</span><span class="token punctuation">.</span><span class="token constant">NORMAL</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">else</span></span>
<span class="line">                    <span class="token keyword">return</span> <span class="token class-name">CaloricLevel</span><span class="token punctuation">.</span><span class="token constant">FAT</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="분할" tabindex="-1"><a class="header-anchor" href="#분할"><span>분할</span></a></h3><p>분할은 분할 함수라 불리는 프레디케이트를 분류 함수로 사용하는 특수한 그룹화 기능이다. 분할 함수는 불린을 반환하므로 맵의 키 형식은 <code>Boolean</code>이다. 결과적으로 그룹화 맵은 최대 두 개(T/F)의 그룹으로 분류된다. 예를 들어 채식주의자 친구를 저녁에 초대했다고 가정하자. 그러면 이제 모든 요리를 채식 요리와 채식이 아닌 요리로 분류 해야 한다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Dish</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> partitionedMenu <span class="token operator">=</span> </span>
<span class="line">    menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">partitioningBy</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">isVegetarian</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 위 코드를 실행하면 다음과 같은 맵이 반환된다.</span></span>
<span class="line"><span class="token comment">// {false=[pork, beef, chicken, prawns, salmon],</span></span>
<span class="line"><span class="token comment">// true=[french fries, rice, season fruit, pizza]}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>이제 참값의 키로 맵에서 모든 채식 요리를 얻을 수 있다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dish</span><span class="token punctuation">&gt;</span></span> vegetarianDishes <span class="token operator">=</span> partitionedMenu<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>물론 이전 예제에서 사용한 프레디케이트로 필터링한 다음에 별도의 리스트에 결과를 수집해도 같은 결과를 얻을 수 있다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dish</span><span class="token punctuation">&gt;</span></span> vegetarianDishes <span class="token operator">=</span> menu<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token operator">::</span><span class="token function">isVegetarian</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr>`,56);function h(p,b){const s=u("router-link");return r(),o("div",null,[n("h1",d,[n("a",m,[n("span",null,l(p.$frontmatter.title)+" 관련",1)])]),n("nav",v,[n("ul",null,[n("li",null,[a(s,{to:"#_6장-스트림으로-데이터-수집"},{default:t(()=>[e("6장 - 스트림으로 데이터 수집")]),_:1}),n("ul",null,[n("li",null,[a(s,{to:"#컬렉터란-무엇인가"},{default:t(()=>[e("컬렉터란 무엇인가?")]),_:1})]),n("li",null,[a(s,{to:"#그룹화"},{default:t(()=>[e("그룹화")]),_:1})]),n("li",null,[a(s,{to:"#분할"},{default:t(()=>[e("분할")]),_:1})])])])])]),g])}const j=c(k,[["render",h],["__file","2-2.html.vue"]]),C=JSON.parse('{"path":"/java/java-8-in-action/2-2.html","title":"Part 2-2 함수형 데이터 처리","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Part 2-2 함수형 데이터 처리","description":"Java 8 in Action > Part 2-2 함수형 데이터 처리","category":["Java"],"tag":["crashcourse","java","jdk","jdk8"],"head":[[{"meta":null},{"property":"og:title","content":"Java 8 in Action > Part 2-2 함수형 데이터 처리"},{"property":"og:description","content":"Part 2-2 함수형 데이터 처리"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/java/java-8-in-action/2-2.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/java/java-8-in-action/2-2.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Part 2-2 함수형 데이터 처리"}],["meta",{"property":"og:description","content":"Java 8 in Action > Part 2-2 함수형 데이터 처리"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"jdk"}],["meta",{"property":"article:tag","content":"jdk8"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Part 2-2 함수형 데이터 처리\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"6장 - 스트림으로 데이터 수집","slug":"_6장-스트림으로-데이터-수집","link":"#_6장-스트림으로-데이터-수집","children":[{"level":3,"title":"컬렉터란 무엇인가?","slug":"컬렉터란-무엇인가","link":"#컬렉터란-무엇인가","children":[]},{"level":3,"title":"그룹화","slug":"그룹화","link":"#그룹화","children":[]},{"level":3,"title":"분할","slug":"분할","link":"#분할","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":5}]},"readingTime":{"minutes":1.63,"words":488},"filePathRelative":"java/java-8-in-action/2-2.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n<h2>6장 - 스트림으로 데이터 수집</h2>\\n<p>4장과 5장에서는 스트림에서 최종 연산 <code>collect</code>를 사용하는 방법을 확인했다. 하지만 toList로 스트림 요소를 항상 리스트로만 변환했다. 이 장에서는 <code>reduce</code>가 그랬던 것처럼 <code>collect</code> 역시 다양한 요소 누적 방식을 인수로 받아서 스트림을 최종 결과로 도출하는 리듀싱 연산을 수행할 수 있음을 설명한다.</p>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"java\\" data-title=\\"java\\"><pre><code><span class=\\"line\\"><span class=\\"token comment\\">// 통화별로 트랜잭션을 그룹화한 코드 - 명령형 버전</span></span>\\n<span class=\\"line\\"><span class=\\"token class-name\\">Map</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Currency</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">List</span><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Transaction</span><span class=\\"token punctuation\\">&gt;</span><span class=\\"token punctuation\\">&gt;</span></span> transactionByCurrencies <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">HashMap</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Transaction</span> transaction <span class=\\"token operator\\">:</span> transactions<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token class-name\\">Currency</span> currency <span class=\\"token operator\\">=</span> transaction<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getCurrency</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token class-name\\">List</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Transaction</span><span class=\\"token punctuation\\">&gt;</span></span> transactionForCurrency <span class=\\"token operator\\">=</span> transactionByCurrencies<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>currency<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">\\t<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>transactionForCurrency <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">\\t\\ttransactionForCurrency <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ArrayList</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">\\t\\ttransactionByCurrencies<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">put</span><span class=\\"token punctuation\\">(</span>currency<span class=\\"token punctuation\\">,</span> transactionForCurrency<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">\\t<span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">\\ttransactionForCurrency<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">add</span><span class=\\"token punctuation\\">(</span>transaction<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{j as comp,C as data};
