import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c,a as s,t as r,b as n,w as e,n as u,g as d,e as k,r as p,o as m,d as t}from"./app-U_bew1in.js";const v={},h={id:"frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-·ÑÄ·Ö™·Ü´·ÑÖ·Öß·Ü´"},b={class:"table-of-contents"},f=s("hr",null,null,-1),y=k(`<h2 id="üèù-what-is-resize-observer-api" tabindex="-1"><a class="header-anchor" href="#üèù-what-is-resize-observer-api"><span>üèù What is Resize Observer API</span></a></h2><p>The <a href="https://developer.mozilla.org/en-US/docs/Web/API/Resize_Observer_API" target="_blank" rel="noopener noreferrer">Resize Observer API</a> can help us listen to the change in element size and perform some actions when the size changes. For example, we can use Resize Observer API to dynamically adjust UI layout, load or unload images, etc.</p><hr><h2 id="üé®-how-to-use-the-resize-observer-api" tabindex="-1"><a class="header-anchor" href="#üé®-how-to-use-the-resize-observer-api"><span>üé® How to use the Resize Observer API</span></a></h2><p>Using the Resize Observer API is very simple. I‚Äôll walk you through 3 usage examples to familiarize you with the Resize Observer API.</p><h3 id="_1-listening-for-changes-in-element-size" tabindex="-1"><a class="header-anchor" href="#_1-listening-for-changes-in-element-size"><span>1. Listening for changes in element size</span></a></h3><p>In development projects, we usually need to <strong>listen for changes in element size</strong> and perform some actions when the size changes. For example, we may need to dynamically adjust the UI layout to fit a different size screen or device. The following is an example of listening for element size changes:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Create a ResizeObserver instance</span></span>
<span class="line"><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResizeObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> entry <span class="token keyword">of</span> entries<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>target<span class="token punctuation">,</span> entry<span class="token punctuation">.</span>contentRect<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// dynamically adjust the UI layout</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> width<span class="token punctuation">,</span> height <span class="token punctuation">}</span> <span class="token operator">=</span> entry<span class="token punctuation">.</span>contentRect</span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// Listening for an element</span></span>
<span class="line"><span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;my-element&quot;</span><span class="token punctuation">)</span></span>
<span class="line">observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, we use the Resize Observer API to listen for changes in the size of the element with ID ‚Äúmy-element‚Äù. In the callback function, we can get information about the size of the element and use this information to dynamically adjust the UI layout.</p><h3 id="_2-listening-for-size-changes-inside-elements" tabindex="-1"><a class="header-anchor" href="#_2-listening-for-size-changes-inside-elements"><span>2. Listening for size changes inside elements</span></a></h3><p>In addition to listening for changes in the size of the element itself, we can also listen for changes in the size of the inside of the element. For example, when the text or image inside an element changes, we may need to recalculate the size of the element and adjust the UI layout accordingly. The following is an example of listening for changes in the size of the element‚Äôs internals:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// Create a ResizeObserver instance</span></span>
<span class="line"><span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResizeObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> entry <span class="token keyword">of</span> entries<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>target<span class="token punctuation">,</span> entry<span class="token punctuation">.</span>contentRect<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">// dynamically adjust the UI layout</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> width<span class="token punctuation">,</span> height <span class="token punctuation">}</span> <span class="token operator">=</span> entry<span class="token punctuation">.</span>contentRect</span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// listen to the internal size change of an element</span></span>
<span class="line"><span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;my-element&quot;</span><span class="token punctuation">)</span></span>
<span class="line">observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">box</span><span class="token operator">:</span> <span class="token string">&quot;content-box&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, we use the Resize Observer API to listen for size changes inside the element with ID ‚Äúmy-element‚Äù. We pass an optional object with the <code>box</code> property set to <code>content-box</code>, indicating that we want to listen for size changes inside the element.</p><h3 id="_3-using-the-resize-observer-api-in-react" tabindex="-1"><a class="header-anchor" href="#_3-using-the-resize-observer-api-in-react"><span>3. Using the Resize Observer API in React</span></a></h3><p>Of course, we can also use it in React or Vue, and we can also use third-party libraries to simplify the use of the Resize Observer API. For example, in React, you can use the <code>react-resize-observer</code> library to listen for changes in the size of elements. Here is an example of using the <code>react-resize-observer</code> library:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> ResizeObserver <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@juggle/resize-observer&quot;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useResizeObserver <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react-resize-observer&quot;</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>width<span class="token punctuation">,</span> setWidth<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>height<span class="token punctuation">,</span> setHeight<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">onResize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">entry</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> width<span class="token punctuation">,</span> height <span class="token punctuation">}</span> <span class="token operator">=</span> entry<span class="token punctuation">.</span>contentRect<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">setWidth</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">setHeight</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useResizeObserver</span><span class="token punctuation">(</span><span class="token punctuation">{</span> onResize<span class="token punctuation">,</span> <span class="token literal-property property">polyfill</span><span class="token operator">:</span> ResizeObserver <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span><span class="token operator">&gt;</span>My content goes here<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, we use <a href="https://github.com/bootstarted/react-resize-observer" target="_blank" rel="noopener noreferrer">react-resize-observer</a> and <a href="https://github.com/juggle/resize-observer" target="_blank" rel="noopener noreferrer">@juggle/resize-observer</a> libraries to listen for changes in the size of elements. We use the <code>useResizeObserver()</code> hook to create a ResizeObserver instance and update the state of the component in the callback function.</p><hr><h2 id="üëç-where-to-use-the-resize-observer-api" tabindex="-1"><a class="header-anchor" href="#üëç-where-to-use-the-resize-observer-api"><span>üëç Where to use the Resize Observer API</span></a></h2><p>The Resize Observer API can be used in many work scenarios. For example:</p><h3 id="_1-responsive-layout" tabindex="-1"><a class="header-anchor" href="#_1-responsive-layout"><span>1. Responsive Layout</span></a></h3><p>Responsive layout** can be easily implemented using the Resize Observer API. For example, when the screen size changes, we can listen to the size change of the root element and adjust the UI layout accordingly. The following is a sample code implemented using the Resize Observer API:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token comment">&lt;!-- Responsive layout sample code --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>container<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>responsive-container<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>row<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-sm-4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>First column content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-sm-4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Second column content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>col-sm-4<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Third column content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;responsive-container&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> resizeObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResizeObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> entry <span class="token keyword">of</span> entries<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> <span class="token punctuation">{</span> width <span class="token punctuation">}</span> <span class="token operator">=</span> entry<span class="token punctuation">.</span>contentRect<span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>width <span class="token operator">&gt;=</span> <span class="token number">768</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        container<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;large-device&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        container<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&quot;large-device&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  resizeObserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css"></span>
<span class="line">  <span class="token selector">.large-device .col-sm-4</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">width</span><span class="token punctuation">:</span> 33.33%<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-image-lazy-loading" tabindex="-1"><a class="header-anchor" href="#_2-image-lazy-loading"><span>2. Image lazy loading</span></a></h3><p>Using Resize Observer API you can implement <strong>image lazy loading</strong>. For example, when an image element enters the visible area, we can listen to its size change and display the image after the element is fully loaded. The following is a sample code for lazy loading of images using the Resize Observer API:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token comment">&lt;!-- HTML --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://example.com/image.jpg<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>My image<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token comment">// JavaScript</span></span>
<span class="line">  <span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResizeObserver</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> entry <span class="token keyword">of</span> entries<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span>isIntersecting<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> img <span class="token operator">=</span> entry<span class="token punctuation">.</span>target<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">const</span> src <span class="token operator">=</span> img<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;data-src&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          img<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;src&quot;</span><span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          img<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;data-src&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> images <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&quot;img[data-src]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  images<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">img</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the above code, we use the Resize Observer API to listen for changes in the size of the image element. When the image element enters the viewable area, we assign the URL in its <code>data-src</code> property to its <code>src</code> property to achieve the effect of lazy loading of the image. Also, we use the Intersection Observer API to listen to whether the image element enters the visible area.</p><p>Note that in this sample code, we also need to set a <code>data-src</code> attribute for the image element, which contains the URL of the image to be loaded, so as to avoid loading all the images immediately on page load and thus improve page performance.</p><h3 id="_3-adaptive-ui-components" tabindex="-1"><a class="header-anchor" href="#_3-adaptive-ui-components"><span>3. Adaptive UI components</span></a></h3><p>Adaptive UI components can be easily implemented using the Resize Observer API. For example, when the number or size of elements inside a UI component changes, we can listen for the size change and adjust the UI layout accordingly.</p><hr><h2 id="üß≠-resize-observer-api-compatibility" tabindex="-1"><a class="header-anchor" href="#üß≠-resize-observer-api-compatibility"><span>üß≠ Resize Observer API Compatibility</span></a></h2><p>The Resize Observer API is a relatively new Web API and is currently only supported in modern browsers. Here is the compatibility of the Resize Observer API:</p><ul><li>Chrome 64+ ‚úÖ</li><li>Firefox 69+ ‚úÖ</li><li>Safari 14.1+ ‚úÖ</li><li>Edge 79+ ‚úÖ</li><li>Opera 51+ ‚úÖ</li></ul><figure><img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*aoGGrs8HYIRN2o7-onQqkw.png" alt="photo by Can I Use." tabindex="0" loading="lazy"><figcaption>photo by Can I Use.</figcaption></figure><p>Details of compatibility can be viewed at <a href="https://caniuse.com/?search=Resize%20Observer%20API" target="_blank" rel="noopener noreferrer">Can I Use</a>.</p><hr><h2 id="üìã-resize-observer-api-pros-and-cons" tabindex="-1"><a class="header-anchor" href="#üìã-resize-observer-api-pros-and-cons"><span>üìã Resize Observer API Pros and Cons</span></a></h2><p>The following are the advantages and disadvantages of the Resize Observer API:</p><h3 id="_1-advantages" tabindex="-1"><a class="header-anchor" href="#_1-advantages"><span>1. Advantages</span></a></h3><ul><li>Can be used to detect changes in element size without polling or using other detection techniques.</li><li>It can listen to <strong>multiple elements</strong> for size changes and only trigger the callback function when the element size changes.</li><li>Size changes can be detected for <strong>any element</strong>, not limited to visible elements.</li><li>Compared to other detection techniques (such as the <code>window.resize</code> event), the Resize Observer API is more stable, as it avoids performance problems due to the frequent triggering of events.</li></ul><h3 id="_2-disadvantages" tabindex="-1"><a class="header-anchor" href="#_2-disadvantages"><span>2. Disadvantages</span></a></h3><ul><li>Not supported by all browsers, especially older browsers.</li><li>Because the Resize Observer API‚Äôs callback function is executed asynchronously, it is not guaranteed to execute immediately after an element size change.</li><li>The Resize Observer API does not provide the exact size value of the element, only the size change information. If you need to get the specific size value of an element, developers need to calculate it themselves.</li></ul><hr><h2 id="üéØ-summary" tabindex="-1"><a class="header-anchor" href="#üéØ-summary"><span>üéØ Summary</span></a></h2><p>In this article, we introduced the basic usage of Resize Observer API and provided some sample code to help you better understand and use the API. hope this article can help you better understand and use Resize Observer API. If you want to know more information, please refer to the following references:</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver" target="_blank" rel="noopener noreferrer">MDN Web Docs: Resize Observer API</a></li><li><a href="https://www.w3.org/TR/resize-observer" target="_blank" rel="noopener noreferrer">W3C: Resize Observer</a></li></ul><hr>`,48);function z(o,w){const a=p("router-link"),i=p("VPCard");return m(),c("div",null,[s("h1",h,[s("a",g,[s("span",null,r(o.$frontmatter.title)+" Í¥ÄÎ†®",1)])]),s("nav",b,[s("ul",null,[s("li",null,[n(a,{to:"#üèù-what-is-resize-observer-api"},{default:e(()=>[t("üèù What is Resize Observer API")]),_:1})]),s("li",null,[n(a,{to:"#üé®-how-to-use-the-resize-observer-api"},{default:e(()=>[t("üé® How to use the Resize Observer API")]),_:1}),s("ul",null,[s("li",null,[n(a,{to:"#_1-listening-for-changes-in-element-size"},{default:e(()=>[t("1. Listening for changes in element size")]),_:1})]),s("li",null,[n(a,{to:"#_2-listening-for-size-changes-inside-elements"},{default:e(()=>[t("2. Listening for size changes inside elements")]),_:1})]),s("li",null,[n(a,{to:"#_3-using-the-resize-observer-api-in-react"},{default:e(()=>[t("3. Using the Resize Observer API in React")]),_:1})])])]),s("li",null,[n(a,{to:"#üëç-where-to-use-the-resize-observer-api"},{default:e(()=>[t("üëç Where to use the Resize Observer API")]),_:1}),s("ul",null,[s("li",null,[n(a,{to:"#_1-responsive-layout"},{default:e(()=>[t("1. Responsive Layout")]),_:1})]),s("li",null,[n(a,{to:"#_2-image-lazy-loading"},{default:e(()=>[t("2. Image lazy loading")]),_:1})]),s("li",null,[n(a,{to:"#_3-adaptive-ui-components"},{default:e(()=>[t("3. Adaptive UI components")]),_:1})])])]),s("li",null,[n(a,{to:"#üß≠-resize-observer-api-compatibility"},{default:e(()=>[t("üß≠ Resize Observer API Compatibility")]),_:1})]),s("li",null,[n(a,{to:"#üìã-resize-observer-api-pros-and-cons"},{default:e(()=>[t("üìã Resize Observer API Pros and Cons")]),_:1}),s("ul",null,[s("li",null,[n(a,{to:"#_1-advantages"},{default:e(()=>[t("1. Advantages")]),_:1})]),s("li",null,[n(a,{to:"#_2-disadvantages"},{default:e(()=>[t("2. Disadvantages")]),_:1})])])]),s("li",null,[n(a,{to:"#üéØ-summary"},{default:e(()=>[t("üéØ Summary")]),_:1})])])]),f,n(i,u(d({title:"(by Chris1993) Must Know JavaScript API ‚Äî Resize Observer API",desc:"Resize Observer API",link:"https://javascript.plainenglish.io/must-know-javascript-api-resize-observer-api-9420aab1a74",logo:"https://miro.medium.com/v2/resize:fill:59:59/1*H8epNyccEIEHWl9YYJhO2w.png",background:"rgb(222,200,50,0.2)"})),null,16),y])}const _=l(v,[["render",z],["__file","resize-observer.html.vue"]]),A=JSON.parse('{"path":"/js/must-know-javascript-api/resize-observer.html","title":"Resize Observer API","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Resize Observer API","description":"Must Know JavaScript API > Resize Observer API","categroy":["JavaScript"],"tag":["blog","js","api","broadcast"],"head":[[{"meta":null},{"property":"og:title","content":"Must Know JavaScript API > Resize Observer API"},{"property":"og:description","content":"Resize Observer API"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/js/must-know-javascript-api/resize-observer.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/js/must-know-javascript-api/resize-observer.html"}],["meta",{"property":"og:site_name","content":"ü•ÅCrashcourse"}],["meta",{"property":"og:title","content":"Resize Observer API"}],["meta",{"property":"og:description","content":"Must Know JavaScript API > Resize Observer API"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*aoGGrs8HYIRN2o7-onQqkw.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"blog"}],["meta",{"property":"article:tag","content":"js"}],["meta",{"property":"article:tag","content":"api"}],["meta",{"property":"article:tag","content":"broadcast"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Resize Observer API\\",\\"image\\":[\\"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*aoGGrs8HYIRN2o7-onQqkw.png\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"üèù What is Resize Observer API","slug":"üèù-what-is-resize-observer-api","link":"#üèù-what-is-resize-observer-api","children":[]},{"level":2,"title":"üé® How to use the Resize Observer API","slug":"üé®-how-to-use-the-resize-observer-api","link":"#üé®-how-to-use-the-resize-observer-api","children":[{"level":3,"title":"1. Listening for changes in element size","slug":"_1-listening-for-changes-in-element-size","link":"#_1-listening-for-changes-in-element-size","children":[]},{"level":3,"title":"2. Listening for size changes inside elements","slug":"_2-listening-for-size-changes-inside-elements","link":"#_2-listening-for-size-changes-inside-elements","children":[]},{"level":3,"title":"3. Using the Resize Observer API in React","slug":"_3-using-the-resize-observer-api-in-react","link":"#_3-using-the-resize-observer-api-in-react","children":[]}]},{"level":2,"title":"üëç Where to use the Resize Observer API","slug":"üëç-where-to-use-the-resize-observer-api","link":"#üëç-where-to-use-the-resize-observer-api","children":[{"level":3,"title":"1. Responsive Layout","slug":"_1-responsive-layout","link":"#_1-responsive-layout","children":[]},{"level":3,"title":"2. Image lazy loading","slug":"_2-image-lazy-loading","link":"#_2-image-lazy-loading","children":[]},{"level":3,"title":"3. Adaptive UI components","slug":"_3-adaptive-ui-components","link":"#_3-adaptive-ui-components","children":[]}]},{"level":2,"title":"üß≠ Resize Observer API Compatibility","slug":"üß≠-resize-observer-api-compatibility","link":"#üß≠-resize-observer-api-compatibility","children":[]},{"level":2,"title":"üìã Resize Observer API Pros and Cons","slug":"üìã-resize-observer-api-pros-and-cons","link":"#üìã-resize-observer-api-pros-and-cons","children":[{"level":3,"title":"1. Advantages","slug":"_1-advantages","link":"#_1-advantages","children":[]},{"level":3,"title":"2. Disadvantages","slug":"_2-disadvantages","link":"#_2-disadvantages","children":[]}]},{"level":2,"title":"üéØ Summary","slug":"üéØ-summary","link":"#üéØ-summary","children":[]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":5}]},"readingTime":{"minutes":4.68,"words":1405},"filePathRelative":"js/must-know-javascript-api/resize-observer.md","localizedDate":"2023ÎÖÑ 12Ïõî 27Ïùº","excerpt":"\\n\\n<hr>\\n"}');export{_ as comp,A as data};
