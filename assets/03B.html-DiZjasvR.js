import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as n,t as r,b as e,n as d,g as m,d as s,e as t,r as l,o as u}from"./app-U_bew1in.js";const h={},g={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"},b=n("nav",{class:"table-of-contents"},[n("ul")],-1),k=n("hr",null,null,-1),_=t(`<p>MiniKube 클러스터를 생성했으니 이제 간단한 명령으로 Nginx 웹 서버를 실행해보겠습니다.</p><p>다음 명령을 입력하여 Nginx 디플로이먼트를 생성합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl create deployment hello-nginx <span class="token parameter variable">--image</span><span class="token operator">=</span>nginx:latest</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># deployment.apps/hello-nginx created</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),E=n("code",null,"kubectl create deployment <DEPLOYMENT_NAME> --image=<IMAGE_NAME>:<TAG>",-1),y=n("code",null,"kubectl get all",-1),f=t(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl get all</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># NAME                               READY   STATUS    RESTARTS   AGE</span></span>
<span class="line"><span class="token comment"># pod/hello-nginx-59b74ddd97-qf88t   1/1     Running   0          2m8s</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE</span></span>
<span class="line"><span class="token comment"># service/kubernetes   ClusterIP   10.96.0.1    &lt;none&gt;        443/TCP   21h</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># NAME                          READY   UP-TO-DATE   AVAILABLE   AGE</span></span>
<span class="line"><span class="token comment"># deployment.apps/hello-nginx   1/1     1            1           2m8s</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># NAME                                     DESIRED   CURRENT   READY   AGE</span></span>
<span class="line"><span class="token comment"># replicaset.apps/hello-nginx-59b74ddd97   1         1         1       2m8s</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>디플로이먼트 <code>deployment.apps/hello-nginx</code>와 이 디플로이먼트가 생성한 레플리카셋 <code>replicaset.apps/hello-nginx-59b74ddd97</code> 그리고 이 레플리카셋이 생성한 파드 <code>pod/hello-nginx-59b74ddd97-qf88t</code>가 표시됩니다. 즉, 디플로이먼트를 생성하면 디플로이먼트, 레플리카셋, 파드 이렇게 3개의 오브젝트가 생성됩니다.</p><ul><li><strong>디플로이먼트</strong>: 파드를 실행할 때 사용하는 리소스입니다. 상태가 없는 배포 단위이며 레플리카셋을 포함하고 있습니다.</li><li><strong>레플리카셋</strong>: 파드를 몇 개 생성(복제)하여 유지할지 결정하는 리소스입니다.</li><li><strong>파드</strong>: 컨테이너를 생성하는 리소스입니다. 파드 안에는 여러 개의 컨테이너가 들어갈 수도 있습니다.</li></ul><figure><img src="https://pyrasis.com/assets/images/jHLsAlwaysUpToDateKubernetes/Unit03/2.png" alt="디플로이먼트, 레플리카셋, 파드, 컨테이너" tabindex="0" loading="lazy"><figcaption>디플로이먼트, 레플리카셋, 파드, 컨테이너</figcaption></figure><div class="hint-container info"><p class="hint-container-title">리소스와 오브젝트</p><p>쿠버네티스에는 리소스와 오브젝트라는 개념이 있습니다. 프로그래밍 언어로 비유하자면 리소스는 클래스, 오브젝트는 인스턴스와 흡사합니다.</p></div><p>그다음에는 파드를 쿠버네티스 네트워크에 노출할 수 있도록 서비스를 생성해보겠습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl create <span class="token function">service</span> clusterip hello-nginx <span class="token parameter variable">--tcp</span><span class="token operator">=</span><span class="token number">80</span>:80</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># service/hello-nginx created</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),A=n("code",null,"kubectl create service <SERVICE_TYPE> <SERVICE_NAME> --tcp=<PORT>:<TARGET_PORT>",-1),x=n("code",null,"clusterip",-1),T=n("code",null,"kubectl get all",-1),R=t(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl get all</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># NAME                               READY   STATUS    RESTARTS   AGE</span></span>
<span class="line"><span class="token comment"># pod/hello-nginx-59b74ddd97-qf88t   1/1     Running   0          14m</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># NAME                  TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span></span>
<span class="line"><span class="token comment"># service/hello-nginx   ClusterIP   10.109.191.40   &lt;none&gt;        80:31206/TCP   2m14s</span></span>
<span class="line"><span class="token comment"># service/kubernetes    ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP        21h</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># NAME                          READY   UP-TO-DATE   AVAILABLE   AGE</span></span>
<span class="line"><span class="token comment"># deployment.apps/hello-nginx   1/1     1            1           14m</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># NAME                                     DESIRED   CURRENT   READY   AGE</span></span>
<span class="line"><span class="token comment"># replicaset.apps/hello-nginx-59b74ddd97   1         1         1       14m</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>서비스에 <code>service/hello-nginx</code>가 생성된 것을 볼 수 있습니다.</p><ul><li><strong>서비스</strong>: 쿠버네티스 클러스터 내부에 있는 파드 등의 오브젝트를 쿠버네티스 네트워크나 외부에 노출시킬 때 사용하는 리소스입니다.</li></ul><p>하지만 아직 로컬호스트에서는 MiniKube의 서비스에 접근할 수는 없습니다. 완전한 쿠버네티스식 사용법은 좀더 복잡하므로 여기서는 <code>kubectl</code>의 <code>port-forward</code> 기능을 사용해서 접근해보겠습니다. 완전한 쿠버네티스식 사용법은 뒤에서 다시 설명하겠습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl port-forward service/hello-nginx <span class="token number">8000</span>:80</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># Forwarding from 127.0.0.1:8000 -&gt; 80</span></span>
<span class="line"><span class="token comment"># Forwarding from [::1]:8000 -&gt; 80</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),N=n("code",null,"kubectl port-forward <RESOURCE_TYPE/RESOURCE_NAME> <LOCAL_PORT>:<REMOTE_PORT>",-1),P=n("img",{src:"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateKubernetes/Unit03/3.png",alt:'<FontIcon icon="iconfont icon-shell"/>',tabindex:"0",loading:"lazy"},null,-1),w=n("code",null,"kubectl port-forward",-1),U=n("code",null,"http://127.0.0.1:8000",-1),D=n("strong",null,"Welcome to nginx!",-1),S={class:"hint-container info"},M=t(`<p class="hint-container-title">파드 포트 포워딩</p><p>앞에서는 서비스의 포트 80번을 포트 포워딩했지만 파드를 그대로 포트 포워딩하는 것도 가능힙니다. 다음과 같이 <code>pod/&lt;POD_NAME&gt;</code>을 지정해주면 파드의 포트를 포워딩할 수 있습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl port-forward pod/hello-nginx-59b74ddd97-qf88t <span class="token number">8000</span>:80</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># Forwarding from 127.0.0.1:8000 -&gt; 80</span></span>
<span class="line"><span class="token comment"># Forwarding from [::1]:8000 -&gt; 80</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),B=n("code",null,"http://127.0.0.1:8000",-1),C=n("strong",null,"Welcome to nginx!",-1),I={class:"hint-container info"},L=n("p",{class:"hint-container-title"},"port-forward를 쓰는 이유",-1),O=n("code",null,"EXTERNAL-IP",-1),K=n("code",null,"kubectl port-forward",-1),j=n("code",null,"EXTERNAL-IP",-1),G={class:"hint-container info"},Y=t(`<p class="hint-container-title">디플로이먼트와 서비스 삭제</p><p>앞에서 생성한 디플로이먼트와 서비스를 삭제하고 싶다면 다음과 같은 명령을 사용하면 됩니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl delete <span class="token function">service</span> hello-nginx</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># service &quot;hello-nginx&quot; deleted</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl delete deployment hello-nginx</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># deployment.apps &quot;hello-nginx&quot; deleted</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),V=n("code",null,"kubectl delete <RESOURCE_NAME> <OBJECT_NAME>",-1),q=n("hr",null,null,-1);function F(i,H){const o=l("VPCard"),a=l("FontIcon");return u(),p("div",null,[n("h1",g,[n("a",v,[n("span",null,r(i.$frontmatter.title)+" 관련",1)])]),b,k,e(o,d(m({title:"Unit 3.2 Nginx 웹서버 실행하기",desc:"언제나 최신 Kubernetes",link:"https://pyrasis.com/jHLsAlwaysUpToDateKubernetes/Unit03/02",logo:"https://pyrasis.com/assets/images/pyrasis.png",background:"rgba(31,41,55,0.2)"})),null,16),_,e(a,{icon:"iconfont icon-shell"}),E,s(" 형식입니다. 이미지는 "),e(a,{icon:"fa-brands fa-docker"}),s("Docker 이미지를 사용합니다."),e(a,{icon:"iconfont icon-shell"}),y,s(" 명령을 실행해봅니다."),f,e(a,{icon:"iconfont icon-shell"}),A,s(" 형식입니다. 서비스 종류(type)는 여러 가지가 있지만 여기서는 "),x,s("로 설정했습니다."),n("p",null,[s("다시 "),e(a,{icon:"iconfont icon-shell"}),T,s(" 명령을 실행해봅니다.")]),R,e(a,{icon:"iconfont icon-shell"}),N,s(" 형식입니다. 즉, 쿠버네티스 클러스터 안의 서비스 포트를 로컬 포트로 포워딩 하는 기능입니다."),n("figure",null,[P,n("figcaption",null,[e(a,{icon:"iconfont icon-shell"}),w])]),n("p",null,[s("웹 브라우저를 열고 "),e(a,{icon:"fas fa-globe"}),U,s("에 접속하면 "),D,s(" 가 표시될 것입니다.")]),n("div",S,[M,n("p",null,[s("마찬가지로 웹 브라우저를 열고 "),e(a,{icon:"fas fa-globe"}),B,s("에 접속하면 "),C,s(" 가 표시될 것입니다.")])]),n("div",I,[L,n("p",null,[s("쿠버네티스의 파드와 서비스는 쿠버네티스 클러스터 내부 네트워크의 IP 주소를 할당받아 사용하고 있습니다. 그런데, 이 IP 주소는 클러스터 바깥에서 접근할 수 없도록 되어 있습니다. 실제 서비스에서는 외부에서 접근할 수 있도록 클라우드의 로드밸런서(예: AWS의 ELB)를 통해 "),O,s("를 할당받습니다. 하지만, 지금처럼 Minikube를 사용하는 실습에서는 클라우드의 로드밸런서를 사용할 수 없으므로 "),e(a,{icon:"iconfont icon-shell"}),K,s(" 명령을 사용하여 임시로 서비스에 접근하는 것입니다. port-forward는 테스트용이며 실제 서비스에서는 사용하지 않습니다. 로드밸런서를 통해 "),j,s("를 받고 외부에서 접속하는 방법은 뒤에서 자세히 설명하겠습니다.")])]),n("div",G,[Y,e(a,{icon:"iconfont icon-shell"}),V,s(" 형식입니다. 참고로 파드는 삭제하면 레플리카셋에 의해 계속 복구되고, 레플리카셋은 삭제하면 디플로이먼트에 의해 계속 복구됩니다. 파드, 레플리카셋, 디플로이먼트를 모두 삭제하려면 디플로이먼트만 삭제하면 됩니다.")]),q])}const W=c(h,[["render",F],["__file","03B.html.vue"]]),Z=JSON.parse('{"path":"/k8s/always-up-to-date-kubernetes/03B.html","title":"03B. Nginx 웹서버 실행하기","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"03B. Nginx 웹서버 실행하기","description":"언제나 최신 Kubernetes > 03B. Nginx 웹서버 실행하기","category":["Kubernetes"],"tag":["crashcourse","digitalocean","kubernetes","minkube","kubctl"],"head":[[{"meta":null},{"property":"og:title","content":"언제나 최신 Kubernetes > 03B. Nginx 웹서버 실행하기"},{"property":"og:description","content":"03B. Nginx 웹서버 실행하기"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/k8s/always-up-to-date-kubernetes/03B.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/k8s/always-up-to-date-kubernetes/03B.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"03B. Nginx 웹서버 실행하기"}],["meta",{"property":"og:description","content":"언제나 최신 Kubernetes > 03B. Nginx 웹서버 실행하기"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateKubernetes/Unit03/2.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"digitalocean"}],["meta",{"property":"article:tag","content":"kubernetes"}],["meta",{"property":"article:tag","content":"minkube"}],["meta",{"property":"article:tag","content":"kubctl"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"03B. Nginx 웹서버 실행하기\\",\\"image\\":[\\"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateKubernetes/Unit03/2.png\\",\\"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateKubernetes/Unit03/3.png\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]],"next":"/k8s/always-up-to-date-kubernetes/04.md"},"headers":[],"git":{"createdTime":1712118043000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":2}]},"readingTime":{"minutes":1.59,"words":477},"filePathRelative":"k8s/always-up-to-date-kubernetes/03B.md","localizedDate":"2024년 4월 3일","excerpt":"\\n\\n<hr>\\n"}');export{W as comp,Z as data};
