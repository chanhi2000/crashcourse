import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as s,t as m,b as n,w as o,n as p,g as r,e as a,d as e,r as c,o as k}from"./app-U_bew1in.js";const g={},v={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},w=s("hr",null,null,-1),b=a('<h2 id="structs-part-one" tabindex="-1"><a class="header-anchor" href="#structs-part-one"><span>Structs, part one</span></a></h2><p>I know some of you might be keen to charge on with today’s new Swift learning, but hold up: you just finished learning about closures, which are a difficult topic. And you came back for more. Seriously, that deserves a lot of respect.</p><p>And I have some good news for you. First, not only will we be covering closures again in a consolidation day next week, but soon enough we’ll also start putting them into practice in real iOS projects. So, even if you aren’t 100% sure of how they work or why they are needed, it will all become clear – stick with it!</p><p>Anyway, today’s topic is <em>structs</em>. Structs let us create our own data types out of several small types. For example, you might put three strings and a boolean together and say that represents a user in your app.</p><p>These custom types – users, games, documents, and more – form the real core of the software we build. If you get those right then often your code will follow.</p><p>As Fred Brooks, the author of the hugely influential book <em>The Mythical Man-Month</em>, once said, “the programmer at wit’s end... can often do best by disentangling themself from their code, rearing back, and contemplating their data. Representation is the essence of programming.”</p><p><strong>Today you have seven one-minute videos to watch</strong>, and you’ll learn how to create your own types, adding properties, methods, and more. Once you’ve completed each video, there is a short piece of optional extra reading if you’re looking to get some more details, and there’s also a short test to help make sure you’ve understood what was taught.</p><h3 id="_1-creating-your-own-structs" tabindex="-1"><a class="header-anchor" href="#_1-creating-your-own-structs"><span>1. Creating your own structs</span></a></h3>',8),_={class:"hint-container details"},S=s("summary",null,"1. Creating your own structs",-1),x=a(`<p>Swift lets you design your own types in two ways, of which the most common are called structures, or just structs. Structs can be given their own variables and constants, and their own functions, then created and used however you want.</p><p>Let’s start with a simple example: we’re going to create a <code>Sport</code> struct that stores its name as a string. Variables inside structs are called properties, so this is a struct with one property:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Sport</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That defines the type, so now we can create and use an instance of it:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> tennis <span class="token operator">=</span> <span class="token class-name">Sport</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Tennis&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>tennis<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>We made both <code>name</code> and <code>tennis</code> variable, so we can change them just like regular variables:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">tennis<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Lawn tennis&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Properties can have default values just like regular variables, and you can usually rely on Swift’s type inference.</p>`,8),q=a('<div class="hint-container info"><p class="hint-container-title">1. Creating your own structs - Additional</p><ul><li>Optional: <a href="quick-start/understanding-swift/whats-the-difference-between-a-struct-and-a-tuple">What’s the difference between a struct and a tuple?</a></li><li>Test: <a href="review/creating-your-own-structs">Creating your own structs</a></li></ul></div><h3 id="_2-computed-properties" tabindex="-1"><a class="header-anchor" href="#_2-computed-properties"><span>2. Computed properties</span></a></h3>',2),P={class:"hint-container details"},j=s("summary",null,"2. Computed properties",-1),D=a(`<p>We just created a <code>Sport</code> struct like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Sport</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That has a name property that stores a <code>String</code>. These are called stored properties, because Swift has a different kind of property called a computed property – a property that runs code to figure out its value.</p><p>We’re going to add another stored property to the <code>Sport</code> struct, then a computed property. Here’s how that looks:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Sport</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> isOlympicSport<span class="token punctuation">:</span> <span class="token class-name">Bool</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> olympicStatus<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> isOlympicSport <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is an Olympic sport&quot;</span></span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is not an Olympic sport&quot;</span></span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, <code>olympicStatus</code> looks like a regular <code>String</code>, but it returns different values depending on the other properties.</p><p>We can try it out by creating a new instance of <code>Sport</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> chessBoxing <span class="token operator">=</span> <span class="token class-name">Sport</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Chessboxing&quot;</span></span><span class="token punctuation">,</span> isOlympicSport<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>chessBoxing<span class="token punctuation">.</span>olympicStatus<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,8),T=a('<div class="hint-container info"><p class="hint-container-title">2. Computed properties - Additional</p><ul><li>Optional: <a href="quick-start/understanding-swift/when-should-you-use-a-computed-property-or-a-stored-property">When should you use a computed property or a stored property?</a></li><li>Test: <a href="review/computed-properties">Computed properties</a></li></ul></div><h3 id="_3-property-observers" tabindex="-1"><a class="header-anchor" href="#_3-property-observers"><span>3. Property observers</span></a></h3>',2),C={class:"hint-container details"},M=s("summary",null,"3. Property observers",-1),A=a(`<p>Property observers let you run code before or after any property changes. To demonstrate this, we’ll write a <code>Progress</code> struct that tracks a task and a completion percentage:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Progress</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> task<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> amount<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can now create an instance of that struct and adjust its progress over time:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> progress <span class="token operator">=</span> <span class="token class-name">Progress</span><span class="token punctuation">(</span>task<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Loading data&quot;</span></span><span class="token punctuation">,</span> amount<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">progress<span class="token punctuation">.</span>amount <span class="token operator">=</span> <span class="token number">30</span></span>
<span class="line">progress<span class="token punctuation">.</span>amount <span class="token operator">=</span> <span class="token number">80</span></span>
<span class="line">progress<span class="token punctuation">.</span>amount <span class="token operator">=</span> <span class="token number">100</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>What we want to happen is for Swift to print a message every time <code>amount</code> changes, and we can use a <code>didSet</code> property observer for that. This will run some code every time <code>amount</code> changes:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Progress</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> task<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> amount<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">didSet</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">task</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is now </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">amount</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">% complete&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also use <code>willSet</code> to take action before a property changes, but that is rarely used.</p>`,7),W=a('<div class="hint-container info"><p class="hint-container-title">3. Property observers - Additional</p><ul><li>Optional: <a href="quick-start/understanding-swift/when-should-you-use-property-observers">When should you use property observers?</a></li><li>Optional: <a href="quick-start/understanding-swift/when-should-you-use-willset-rather-than-didset">When should you use willSet rather than didSet?</a></li><li>Test: <a href="review/property-observers">Property observers</a></li></ul></div><h3 id="_4-methods" tabindex="-1"><a class="header-anchor" href="#_4-methods"><span>4. Methods</span></a></h3>',2),O={class:"hint-container details"},I=s("summary",null,"4. Methods",-1),B=a(`<p>Structs can have functions inside them, and those functions can use the properties of the struct as they need to. Functions inside structs are called methods, but they still use the same <code>func</code> keyword.</p><p>We can demonstrate this with a <code>City</code> struct. This will have a <code>population</code> property that stores how many people are in the city, plus a <code>collectTaxes()</code> method that returns the population count multiplied by 1000. Because the method belongs to <code>City</code> it can read the current city’s <code>population</code> property.</p><p>Here’s the code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">City</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> population<span class="token punctuation">:</span> <span class="token class-name">Int</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">collectTaxes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> population <span class="token operator">*</span> <span class="token number">1000</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That method belongs to the struct, so we call it on instances of the struct like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> london <span class="token operator">=</span> <span class="token class-name">City</span><span class="token punctuation">(</span>population<span class="token punctuation">:</span> <span class="token number">9_000_000</span><span class="token punctuation">)</span></span>
<span class="line">london<span class="token punctuation">.</span><span class="token function">collectTaxes</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,6),V=a('<div class="hint-container info"><p class="hint-container-title">4. Methods - Additional</p><ul><li>Optional: <a href="quick-start/understanding-swift/whats-the-difference-between-a-function-and-a-method">What’s the difference between a function and a method?</a></li><li>Test: <a href="review/methods">Methods</a></li></ul></div><h3 id="_5-mutating-methods" tabindex="-1"><a class="header-anchor" href="#_5-mutating-methods"><span>5. Mutating methods</span></a></h3>',2),F={class:"hint-container details"},z=s("summary",null,"5. Mutating methods",-1),R=a(`<p>If a struct has a variable property but the instance of the struct was created as a constant, that property can’t be changed – the struct is constant, so all its properties are also constant regardless of how they were created.</p><p>The problem is that when you create the struct Swift has no idea whether you will use it with constants or variables, so by default it takes the safe approach: Swift won’t let you write methods that change properties unless you specifically request it.</p><p>When you <em>want</em> to change a property inside a method, you need to mark it using the <code>mutating</code> keyword, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">mutating</span> <span class="token keyword">func</span> <span class="token function-definition function">makeAnonymous</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Anonymous&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Because it changes the property, Swift will only allow that method to be called on <code>Person</code> instances that are variables:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Ed&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">person<span class="token punctuation">.</span><span class="token function">makeAnonymous</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,6),Y=a('<div class="hint-container info"><p class="hint-container-title">5. Mutating methods - Additional</p><ul><li>Optional: <a href="quick-start/understanding-swift/why-do-we-need-to-mark-some-methods-as-mutating">Why do we need to mark some methods as mutating?</a></li><li>Test: <a href="review/mutating-methods">Mutating methods</a></li></ul></div><h3 id="_6-properties-and-methods-of-strings" tabindex="-1"><a class="header-anchor" href="#_6-properties-and-methods-of-strings"><span>6. Properties and methods of strings</span></a></h3>',2),N={class:"hint-container details"},Q=s("summary",null,"6. Properties and methods of strings",-1),E=a(`<p>We’ve used lots of strings so far, and it turns out they are structs – they have their own methods and properties we can use to query and manipulate the string.</p><p>First, let’s create a test string:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Do or do not, there is no try.&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You can read the number of characters in a string using its <code>count</code> property:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span>count<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>They have a <code>hasPrefix()</code> method that returns true if the string starts with specific letters:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">hasPrefix</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Do&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You can uppercase a string by calling its <code>uppercased()</code> method:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">uppercased</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And you can even have Swift sort the letters of the string into an array:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Strings have lots more properties and methods – try typing <code>string</code>. to bring up Xcode’s code completion options.</p>`,12),H=a('<div class="hint-container info"><p class="hint-container-title">6. Properties and methods of strings - Additional</p><ul><li>Optional: <a href="quick-start/understanding-swift/why-are-strings-structs-in-swift">Why are strings structs in Swift?</a></li><li>Test: <a href="review/properties-and-methods-of-strings">Properties and methods of strings</a></li></ul></div><h3 id="_7-properties-and-methods-of-arrays" tabindex="-1"><a class="header-anchor" href="#_7-properties-and-methods-of-arrays"><span>7. Properties and methods of arrays</span></a></h3>',2),L={class:"hint-container details"},X=s("summary",null,"7. Properties and methods of arrays",-1),J=a(`<p>Arrays are also structs, which means they too have their own methods and properties we can use to query and manipulate the array.</p><p>Here’s a simple array to get us started:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> toys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Woody&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You can read the number of items in an array using its <code>count</code> property:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span>toys<span class="token punctuation">.</span>count<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you want to add a new item, use the <code>append()</code> method like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">toys<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Buzz&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You can locate any item inside an array using its <code>firstIndex()</code> method, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">toys<span class="token punctuation">.</span><span class="token function">firstIndex</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Buzz&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That will return 1 because arrays count from 0.</p><p>Just like with strings, you can have Swift sort the items of the array alphabetically:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span>toys<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Finally, if you want to remove an item, use the <code>remove()</code> method like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">toys<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Arrays have lots more properties and methods – try typing toys. to bring up Xcode’s code completion options.</p>`,15),K=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"7. Properties and methods of arrays - Additional"),s("ul",null,[s("li",null,[e("Optional: "),s("a",{href:"quick-start/understanding-swift/why-do-strings-behave-differently-from-arrays-in-swift"},"Why do strings behave differently from arrays in Swift?")]),s("li",null,[e("Test: "),s("a",{href:"review/properties-and-methods-of-arrays"},"Properties and methods of arrays")])])],-1),Z=s("hr",null,null,-1);function G(d,$){const t=c("router-link"),i=c("VPCard"),l=c("VidStack");return k(),h("div",null,[s("h1",v,[s("a",f,[s("span",null,m(d.$frontmatter.title)+" 관련",1)])]),s("nav",y,[s("ul",null,[s("li",null,[n(t,{to:"#structs-part-one"},{default:o(()=>[e("Structs, part one")]),_:1}),s("ul",null,[s("li",null,[n(t,{to:"#_1-creating-your-own-structs"},{default:o(()=>[e("1. Creating your own structs")]),_:1})]),s("li",null,[n(t,{to:"#_2-computed-properties"},{default:o(()=>[e("2. Computed properties")]),_:1})]),s("li",null,[n(t,{to:"#_3-property-observers"},{default:o(()=>[e("3. Property observers")]),_:1})]),s("li",null,[n(t,{to:"#_4-methods"},{default:o(()=>[e("4. Methods")]),_:1})]),s("li",null,[n(t,{to:"#_5-mutating-methods"},{default:o(()=>[e("5. Mutating methods")]),_:1})]),s("li",null,[n(t,{to:"#_6-properties-and-methods-of-strings"},{default:o(()=>[e("6. Properties and methods of strings")]),_:1})]),s("li",null,[n(t,{to:"#_7-properties-and-methods-of-arrays"},{default:o(()=>[e("7. Properties and methods of arrays")]),_:1})])])])])]),w,n(i,p(r({title:"100 Days of Swift - Day 8",desc:"Structs, part one",link:"https://www.hackingwithswift.com/100/8",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),b,s("details",_,[S,n(i,p(r({title:"100 Days of Swift - Day 8 - 1. Creating your own structs",desc:" 1. Creating your own structs",link:"https://hackingwithswift.com/sixty/7/1/creating-your-own-structs",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(l,{src:"youtube/6Acs8xFLED0"}),x]),q,s("details",P,[j,n(i,p(r({title:"100 Days of Swift - Day 8 - 2. Computed properties",desc:" 2. Computed properties",link:"https://hackingwithswift.com/sixty/7/2/computed-properties",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(l,{src:"youtube/IQ-81kahQts"}),D]),T,s("details",C,[M,n(i,p(r({title:"100 Days of Swift - Day 8 - 3. Property observers",desc:" 3. Property observers",link:"https://hackingwithswift.com/sixty/7/3/property-observers",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(l,{src:"youtube/qdXf12Q0qDo"}),A]),W,s("details",O,[I,n(i,p(r({title:"100 Days of Swift - Day 8 - 4. Methods",desc:" 4. Methods",link:"https://hackingwithswift.com/sixty/7/4/methods",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(l,{src:"youtube/y5TjjwOMQwY"}),B]),V,s("details",F,[z,n(i,p(r({title:"100 Days of Swift - Day 8 - 5. Mutating methods",desc:" 5. Mutating methods",link:"https://hackingwithswift.com/sixty/7/5/mutating-methods",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(l,{src:"youtube/8T5vQnMspko"}),R]),Y,s("details",N,[Q,n(i,p(r({title:"100 Days of Swift - Day 8 - 6. Properties and methods of strings",desc:" 6. Properties and methods of strings",link:"https://hackingwithswift.com/sixty/7/6/properties-and-methods-of-strings",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(l,{src:"youtube/ldGno_JrHEA"}),E]),H,s("details",L,[X,n(i,p(r({title:"100 Days of Swift - Day 8 - 7. Properties and methods of arrays",desc:" 7. Properties and methods of arrays",link:"https://hackingwithswift.com/sixty/7/7/properties-and-methods-of-arrays",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(l,{src:"youtube/Vy_Xn86wga4"}),J]),K,Z])}const ns=u(g,[["render",G],["__file","08.html.vue"]]),as=JSON.parse('{"path":"/swift/100-days-of-swift/08.html","title":"Day 08","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 08","description":"100 Days of Swift > Day 08","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of Swift > Day 08"},{"property":"og:description","content":"Day 08"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swift/08.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swift/08.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 08"}],["meta",{"property":"og:description","content":"100 Days of Swift > Day 08"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 08\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Structs, part one","slug":"structs-part-one","link":"#structs-part-one","children":[{"level":3,"title":"1. Creating your own structs","slug":"_1-creating-your-own-structs","link":"#_1-creating-your-own-structs","children":[]},{"level":3,"title":"2. Computed properties","slug":"_2-computed-properties","link":"#_2-computed-properties","children":[]},{"level":3,"title":"3. Property observers","slug":"_3-property-observers","link":"#_3-property-observers","children":[]},{"level":3,"title":"4. Methods","slug":"_4-methods","link":"#_4-methods","children":[]},{"level":3,"title":"5. Mutating methods","slug":"_5-mutating-methods","link":"#_5-mutating-methods","children":[]},{"level":3,"title":"6. Properties and methods of strings","slug":"_6-properties-and-methods-of-strings","link":"#_6-properties-and-methods-of-strings","children":[]},{"level":3,"title":"7. Properties and methods of arrays","slug":"_7-properties-and-methods-of-arrays","link":"#_7-properties-and-methods-of-arrays","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":8}]},"readingTime":{"minutes":7.01,"words":2104},"filePathRelative":"swift/100-days-of-swift/08.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{ns as comp,as as data};
