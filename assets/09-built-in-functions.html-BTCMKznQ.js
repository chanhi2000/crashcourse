import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as b,a as s,t as v,b as t,w as n,n as g,g as k,d as e,e as r,r as d,o as f}from"./app-U_bew1in.js";const _={},x={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"},A=s("hr",null,null,-1),C=s("hr",null,null,-1),E=s("p",null,[e("You've already seen some built-in functions in detail, such as the "),s("code",null,"sub"),e(", "),s("code",null,"gsub"),e(" and "),s("code",null,"gensub"),e(" functions. This chapter will discuss many more built-ins that are often used in one-liners. You'll also see more examples with arrays.")],-1),j={class:"hint-container info"},$=s("p",{class:"hint-container-title"},"Info",-1),T=s("p",null,[e("See "),s("a",{href:"https://www.gnu.org/software/gawk/manual/gawk.html#Functions",target:"_blank",rel:"noopener noreferrer"},"gawk manual: Functions"),e(" for details about all the built-in functions as well as how to define your own functions.")],-1),N={href:"https://github.com/learnbyexample/learn_gnuawk/tree/master/example_files",target:"_blank",rel:"noopener noreferrer"},I=s("hr",null,null,-1),S=s("h2",{id:"length",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#length"},[s("span",null,[s("code",null,"length")])])],-1),F=s("p",null,[e("The "),s("code",null,"length"),e(" function returns the number of characters for the given string argument. By default, it acts on the "),s("code",null,"$0"),e(" variable. Numeric arguments will be automatically converted to strings.")],-1),R=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{print length("road"); print length(123456)}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 4")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 6")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),B=s("p",null,[e("recall that the record separator isn't part of "),s("code",null,"$0"),e(" so, line ending won't be counted here")],-1),G=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'fox\\ntiger\\n'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'{print length()}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 5")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),O=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'length($1) < 6'"),e(" table.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# brown bread mat hair 42")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# blue cake mug shirt -7")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),z=s("p",null,[e("The "),s("code",null,"-b"),e(" command line option is handy if you need the number of bytes, instead of the number of characters. Locale also plays a role.")],-1),Q=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'αλεπού'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'{print length()}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 6")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),q=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'αλεπού'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-b"),e(),s("span",{class:"token string"},"'{print length()}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 12")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),P=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'αλεπού'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token assign-left variable"},[s("span",{class:"token environment constant"},"LC_ALL")]),s("span",{class:"token operator"},"="),e("C "),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'{print length()}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 12")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),H={class:"hint-container info"},L=s("p",{class:"hint-container-title"},"Info",-1),M=s("code",null,"match($0, /$/)-1",-1),D=s("code",null,"-b",-1),V={href:"https://github.com/learnbyexample/learn_gnuawk/issues/5",target:"_blank",rel:"noopener noreferrer"},U=s("hr",null,null,-1),W=s("h2",{id:"array-sorting",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#array-sorting"},[s("span",null,"Array sorting")])],-1),J=s("p",null,[e("By default, array looping with the "),s("code",null,"for(key in array)"),e(" format gives you elements in random order. By setting a special value to "),s("code",null,'PROCINFO["sorted_in"]'),e(", you can control the order in which you wish to retrieve the elements. See "),s("a",{href:"https://www.gnu.org/software/gawk/manual/gawk.html#Controlling-Scanning",target:"_blank",rel:"noopener noreferrer"},"gawk manual: Using Predefined Array Scanning Orders"),e(" for other options and details.")],-1),Y=s("p",null,"by default, array is traversed in random order",-1),K=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{a["z"]=1; a["x"]=12; a["b"]=42; for(i in a) print i, a[i]}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# x 12")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# z 1")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# b 42")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Z=s("p",null,[e("index ("),s("em",null,"i.e."),e(" keys) sorted in ascending order as strings")],-1),X=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{PROCINFO["sorted_in"] = "@ind_str_asc";`),e(`
`),s("span",{class:"line"},`     a["z"]=1; a["x"]=12; a["b"]=42; for(i in a) print i, a[i]}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# b 42")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# x 12")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# z 1")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ss=s("p",null,"value sorted in ascending order as numbers",-1),es=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{PROCINFO["sorted_in"] = "@val_num_asc";`),e(`
`),s("span",{class:"line"},`     a["z"]=1; a["x"]=12; a["b"]=42; for(i in a) print i, a[i]}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# z 1")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# x 12")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# b 42")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ns=s("p",null,"Here's an example of sorting input lines in ascending order based on the second column, treating the data as strings.",-1),as=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{PROCINFO["sorted_in"] = "@ind_str_asc"}`),e(`
`),s("span",{class:"line"},"     {a[$2]=$0} END{for(k in a) print a[k]}'"),e(" table.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# yellow banana window shoes 3.14")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# brown bread mat hair 42")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# blue cake mug shirt -7")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ls=r('<hr><h2 id="split" tabindex="-1"><a class="header-anchor" href="#split"><span><code>split</code></span></a></h2><p>The <code>split</code> function provides the same features as the record splitting done using <code>FS</code>. This is helpful when you need the results as an array for some reason, for example to use array sorting features. Or, when you need to further split a field content. <code>split</code> accepts four arguments, the last two being optional:</p><ul><li>First argument is the string to be split</li><li>Second argument is the array variable that saves the results</li><li>Third argument is the separator, whose default is <code>FS</code></li></ul><p>The return value of the <code>split</code> function is number of fields, similar to the <code>NF</code> variable. The array gets indexed starting from <code>1</code> for the first element, <code>2</code> for the second element and so on. If the array already had some value, it gets overwritten with the new result.</p>',5),ts=s("blockquote",null,[s("p",null,[e("same as: "),s("code",null,"awk '{print $2}'")])],-1),is=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'     one \\t two\\t\\t\\tthree  '"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'{split($0, a); print a[2]}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# two")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),cs=s("p",null,[e("example with both "),s("code",null,"FS"),e(" and "),s("code",null,"split"),e(" in action")],-1),os=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'Joe,1996-10-25,64,78'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F, "),s("span",{class:"token string"},`'{split($2, d, "-"); print $1 " was born in " d[1]}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Joe was born in 1996")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),rs=s("p",null,"single row to multiple rows based on splitting the last field",-1),ds=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'air,water,12:42:3'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F, "),s("span",{class:"token string"},`'{n=split($NF, a, ":");`),e(`
`),s("span",{class:"line"},"                     for(i=1; i<=n; i++) print $1, $2, a[i]}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# air water 12")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# air water 42")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# air water 3")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),us=s("p",null,[e("Similar to "),s("code",null,"FS"),e(", you can use a regular expression as the separator.")],-1),ps=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'Sample123string42with777numbers'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'{split($0, s, /[0-9]+/); print s[2], s[4]}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# string numbers")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ms=s("p",null,[e("The fourth argument provides a feature not present with "),s("code",null,"FS"),e(" splitting. It allows you to save the portions matched by the separator in an array.")],-1),hs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'Sample123string42with777numbers'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'{n=split($0, s, /[0-9]+/, seps);"),e(`
`),s("span",{class:"line"},"                 for(i=1; i<n; i++) print seps[i]}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 123")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 42")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 777")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),bs=r('<div class="hint-container info"><p class="hint-container-title">Info</p><p>Quoting from <a href="https://www.gnu.org/software/gawk/manual/gawk.html#index-split_0028_0029-function-1" target="_blank" rel="noopener noreferrer">gawk manual: split()</a>:</p><blockquote><p>If <code>fieldsep</code> is a single space, then any leading whitespace goes into <code>seps[0]</code> and any trailing whitespace goes into <code>seps[n]</code>, where <code>n</code> is the return value of <code>split()</code> <em>(i.e.</em>, the number of elements in <code>array</code>).</p></blockquote></div><hr><p>Here&#39;s an example where <code>split</code> helps to initialize an array using an empty separator. Unlike <code>$N</code> syntax where an expression resulting in a floating-point number is acceptable, array index has to be an integer only. Hence, the <code>int</code> function is used to convert the floating-point result to an integer in the example below.</p>',3),vs=s("p",null,"adds a new grade column based on marks in the third column",-1),gs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"cat"),e(" marks.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Dept    Name    Marks")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ECE     Raj     53")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ECE     Joel    72")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# EEE     Moi     68")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# CSE     Surya   81")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# EEE     Tia     59")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ECE     Om      92")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# CSE     Amy     67")]),e(`
`),s("span",{class:"line"}),e(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{OFS="\\t"; split("DCBAS", g, //)}`),e(`
`),s("span",{class:"line"},`     {$(NF+1) = NR==1 ? "Grade" : g[int($NF/10)-4]} 1'`),e(" marks.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Dept    Name    Marks   Grade")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ECE     Raj     53      D")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ECE     Joel    72      B")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# EEE     Moi     68      C")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# CSE     Surya   81      A")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# EEE     Tia     59      D")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ECE     Om      92      S")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# CSE     Amy     67      C")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ks=r('<hr><h2 id="patsplit" tabindex="-1"><a class="header-anchor" href="#patsplit"><span><code>patsplit</code></span></a></h2><p>The <code>patsplit</code> function will give you the features provided by <code>FPAT</code>. The argument order and optional arguments is same as the <code>split</code> function, with <code>FPAT</code> as the default separator. The return value is number of fields obtained from the split.</p>',3),fs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},`'eagle,"fox,42",bee,frog'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{patsplit($0, a, /"[^"]*"|[^,]*/); print a[2]}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},'# "fox,42"')]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),_s=r('<hr><h2 id="substr" tabindex="-1"><a class="header-anchor" href="#substr"><span><code>substr</code></span></a></h2><p>The <code>substr</code> function helps to extract a specified number of characters from an input string based on indexing. The argument order is:</p><ul><li>First argument is the input string</li><li>Second argument is the starting position</li><li>Third argument is the number of characters to extract</li></ul><p>The index starts from <code>1</code>. If the third argument is not specified, by default all characters until the end of the string is extracted. If the second argument is greater than the length of the string or if the third argument is less than or equal to <code>0</code>, then an empty string is returned. The second argument will be converted <code>1</code> if a number less than one is specified.</p>',5),xs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'abcdefghij'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'{print substr($0, 1, 5)}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# abcde")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'abcdefghij'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'{print substr($0, 4, 3)}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# def")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ys=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'abcdefghij'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'{print substr($0, 6)}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# fghij")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ws=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'abcdefghij'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"OFS"),s("span",{class:"token operator"},"="),e(": "),s("span",{class:"token string"},"'{print substr($0, 2, 3), substr($0, 6, 3)}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# bcd:fgh")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),As=s("p",null,[e("If only a few characters are needed from the input record, you can also use empty "),s("code",null,"FS"),e(".")],-1),Cs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'abcdefghij'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"FS"),s("span",{class:"token operator"},"="),e(),s("span",{class:"token string"},"'{print $3}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# c")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'abcdefghij'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"FS"),s("span",{class:"token operator"},"="),e(),s("span",{class:"token string"},"'{print $3, $5}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# c e")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Es=r(`<hr><h2 id="match" tabindex="-1"><a class="header-anchor" href="#match"><span><code>match</code></span></a></h2><p>The <code>match</code> function is useful to extract portion of an input string matched by a regexp. There are two ways to get the matched portion:</p><ul><li>by using the <code>substr</code> function along with special variables <code>RSTART</code> (starting position of the match) and <code>RLENGTH</code> (length of the match)</li><li>by passing a third argument to <code>match</code> so that the results are available from an array</li></ul><p>The first argument to <code>match</code> is the input string and the second one is the regexp. If the match fails, then <code>RSTART</code> gets <code>0</code> and <code>RLENGTH</code> gets <code>-1</code>. Return value is same as <code>RSTART</code>.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token string">&#39;051 035 154 12 26 98234 3&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,6),js=s("p",null,[e("using "),s("code",null,"substr"),e(" and "),s("code",null,"RSTART"),e("/"),s("code",null,"RLENGTH"),e(" match a number with "),s("code",null,">= 4"),e(" digits")],-1),$s=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'match($0, /[0-9]{4,}/){print substr($0, RSTART, RLENGTH)}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 98234")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ts=s("p",null,[e("using array, note that index "),s("code",null,"0"),e(" is used here, not "),s("code",null,"1"),e(" match a "),s("code",null,"number >= 100"),e(" (with optional leading zeros)")],-1),Ns=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'match($0, /0*[1-9][0-9]{2,}/, m){print m[0]}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 154")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Is=s("p",null,[e("Both the above examples can also be easily solved using "),s("code",null,"FPAT"),e(" or "),s("code",null,"patsplit"),e(". match has an advantage when it comes to getting portions matched only within capture groups. The first element of the array will still have the entire match. The second element will contain the portion matched by the first group, the third one will contain the portion matched by the second group and so on. See also "),s("a",{href:"https://stackoverflow.com/q/62241101/4082052",target:"_blank",rel:"noopener noreferrer"},"stackoverflow: arithmetic replacement in a text file"),e(".")],-1),Ss=s("p",null,"entire matched portion",-1),Fs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'apple=42, fig=314'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'match($0, /fig=([0-9]+)/, m){print m[0]}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# fig=314")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Rs=s("p",null,"matched portion of the first capture group",-1),Bs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'apple=42, fig=314'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'match($0, /fig=([0-9]+)/, m){print m[1]}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 314")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Gs=s("p",null,"If you need to get matching portions for all the matches instead of just the first match, you can use a loop and adjust the input string every iteration.",-1),Os=s("p",null,"extract numbers only if it is followed by a comma",-1),zs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'42 apple-5, fig3; x-83, y-20: f12'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'{ while( match($0, /([0-9]+),/, m) ){print m[1];"),e(`
`),s("span",{class:"line"},"                 $0=substr($0, RSTART+RLENGTH)} }'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 5")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 83")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Qs=r(`<hr><h2 id="index" tabindex="-1"><a class="header-anchor" href="#index"><span>index</span></a></h2><p>The <code>index</code> function is useful when you need to match a string literally. This is similar to the <code>grep -F</code> functionality of matching fixed strings. The first argument to this function is the input string and the second one is the string to be matched literally. The return value is the index of the matching location and <code>0</code> if there is no match.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> eqns.txt</span>
<span class="line"><span class="token comment"># a=b,a-b=c,c*d</span></span>
<span class="line"><span class="token comment"># a+b,pi=3.14,5e12</span></span>
<span class="line"><span class="token comment"># i*(t+9-g)/8,4-a+b</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),qs=s("p",null,"no output because the metacharacters aren't escaped",-1),Ps=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/i*(t+9-g)/'"),e(" eqns.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"#")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Hs=s("blockquote",null,[s("p",null,[e("same as: "),s("code",null,"grep -F 'i*(t+9-g)' eqns.txt")])],-1),Ls=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'index($0, "i*(t+9-g)")'`),e(" eqns.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# i*(t+9-g)/8,4-a+b")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ms=s("p",null,"check only the last field",-1),Ds=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(" -F, "),s("span",{class:"token string"},`'index($NF, "a+b")'`),e(" eqns.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# i*(t+9-g)/8,4-a+b")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Vs=s("p",null,"index not needed if the entire field/line is being compared",-1),Us=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[e("$ "),s("span",{class:"token function"},"awk"),e(" -F, "),s("span",{class:"token string"},`'$1=="a+b"'`),e(" eqns.txt")]),e(`
`),s("span",{class:"line"},[e("a+b,pi"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"3.14"),e(",5e12")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ws=s("p",null,"The return value is useful to ensure that the match is found at specific positions only. For example, the start or end of the string.",-1),Js=s("p",null,"start of string",-1),Ys=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'index($0, "a+b")==1'`),e(" eqns.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# a+b,pi=3.14,5e12")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ks=s("p",null,"end of string",-1),Zs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},'"a+b"'),e(),s("span",{class:"token string"},"'index($0, s)==length()-length(s)+1'"),e(" eqns.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# i*(t+9-g)/8,4-a+b")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Xs=s("p",null,[e("Recall that the "),s("code",null,"-v"),e(" option gets parsed by "),s("code",null,"awk"),e("'s string processing rules. So, if you need to pass a literal string without falling in backslash hell, use "),s("code",null,"ENVIRON"),e(" instead.")],-1),se=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'a\\b\\c\\d'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'a\\b'"),e(),s("span",{class:"token string"},"'index($0, s)'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'a\\b\\c\\d'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'a\\\\b'"),e(),s("span",{class:"token string"},"'index($0, s)'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# a\\b\\c\\d")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ee=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'a\\b\\c\\d'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'a\\b'"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'index($0, ENVIRON["s"])'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# a\\b\\c\\d")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ne=s("hr",null,null,-1),ae=s("h2",{id:"system",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#system"},[s("span",null,[s("code",null,"system")])])],-1),le=s("p",null,[e("External commands can be issued using the "),s("code",null,"system"),e(" function. Any output generated by the external command would be as usual on "),s("code",null,"stdout"),e(" unless redirected while calling the command.")],-1),te=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{system("echo Hello World")}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Hello World")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ie=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"wc"),e(" table.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3 15 79 table.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{system("wc table.txt")}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3 15 79 table.txt")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ce=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{system("seq 10 | paste -sd, > out.txt")}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"cat"),e(" out.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1,2,3,4,5,6,7,8,9,10")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),oe=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"cat"),e(" t2.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# I bought two balls and 3 bats")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'f1,t2,f3'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(" -F, "),s("span",{class:"token string"},`'{system("cat " $2 ".txt")}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# I bought two balls and 3 bats")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),re=s("p",null,[e("The return value of "),s("code",null,"system"),e(" depends on the exit status of the executed command. See "),s("a",{href:"https://www.gnu.org/software/gawk/manual/html_node/I_002fO-Functions.html",target:"_blank",rel:"noopener noreferrer"},"gawk manual: Input/Output Functions"),e(" for details.")],-1),de=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"ls"),e(" xyz.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ls: cannot access 'xyz.txt': No such file or directory")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token variable"},"$?")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 2")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ue=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{s=system("ls xyz.txt"); print "Exit status: " s}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ls: cannot access 'xyz.txt': No such file or directory")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Exit status: 2")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),pe=r('<hr><h2 id="printf-and-sprintf" tabindex="-1"><a class="header-anchor" href="#printf-and-sprintf"><span><code>printf</code> and <code>sprintf</code></span></a></h2><p>The <code>printf</code> function is useful over the print function when you need to format the data before printing. Another difference is that <code>OFS</code> and <code>ORS</code> do not affect the <code>printf</code> function. The formatting features are similar to those found in the <code>C</code> programming language and the <code>printf</code> shell built-in command.</p>',3),me=s("p",null,"OFMT controls the formatting for numbers displayed with the print function",-1),he=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'BEGIN{print OFMT}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# %.6g")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'BEGIN{sum = 3.1428 + 100; print sum}'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 103.143")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{OFMT="%.5f"; sum = 3.1428 + 100; print sum}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 103.14280")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),be=s("p",null,[e("using "),s("code",null,"printf"),e(" function note the use of "),s("code",null,"\\n"),e(" as "),s("code",null,"ORS"),e(" isn't appended unlike print")],-1),ve=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{sum = 3.1428 + 10; printf "%f\\n", sum}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 13.142800")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{sum = 3.1428 + 10; printf "%.3f\\n", sum}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 13.143")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ge=s("p",null,"Here are some more formatting examples for floating-point numbers.",-1),ke=s("p",null,[e("total length is 10, filled with space if needed "),s("code",null,"["),e(" and "),s("code",null,"]"),e(" are used here for visualization purposes")],-1),fe=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{pi = 3.14159; printf "[%10.3f]\\n", pi}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [     3.142]")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{pi = 3.14159; printf "[%-10.3f]\\n", pi}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [3.142     ]")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),_e=s("p",null,"zero filled",-1),xe=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{pi = 3.14159; printf "%010.3f\\n", pi}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 000003.142")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ye=s("p",null,"scientific notation",-1),we=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{pi = 3.14159; printf "%e\\n", pi}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3.141590e+00")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ae=s("p",null,"Here are some formatting examples for integers.",-1),Ce=s("p",null,"note that there is no rounding",-1),Ee=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{printf "%d\\n", 1.99}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),je=s("p",null,"ensure there's always a sign prefixed for integers",-1),$e=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{printf "%+d\\n", 100}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# +100")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{printf "%+d\\n", -100}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# -100")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Te=s("p",null,"Here are some formatting examples for strings.",-1),Ne=s("p",null,"prefix remaining width with spaces",-1),Ie=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{printf "|%10s|\\n", "mango"}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# |     mango|")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Se=s("p",null,"suffix remaining width with spaces",-1),Fe=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{printf "|%-10s|\\n", "mango"}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# |mango     |")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Re=s("p",null,"truncate",-1),Be=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{printf "%.4s\\n", $0}'`),e(" table.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# brow")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# blue")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# yell")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ge=s("p",null,[e("You can also refer to an argument using "),s("code",null,"N$"),e(" format, where N` is the positional number of argument. One advantage with this method is that you can reuse an argument any number of times. You cannot mix this format with the normal way.")],-1),Oe=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{printf "%1$d + %2$d * %1$d = %3$d\\n", 3, 4, 15}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3 + 4 * 3 = 15")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ze=s("p",null,[e("remove "),s("code",null,"#"),e(" if you do not need the prefix")],-1),Qe=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{printf "hex=%1$#x\\noct=%1$#o\\ndec=%1$d\\n", 15}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# hex=0xf")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# oct=017")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# dec=15")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),qe=s("p",null,[e("You can pass variables by specifying a "),s("code",null,"*"),e(" instead of a number in the formatting string.")],-1),Pe=s("blockquote",null,[s("p",null,[e("same as: "),s("code",null,`awk 'BEGIN{pi = 3.14159; printf "%010.3f\\n", pi}'`)])],-1),He=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{d=10; p=3; pi = 3.14159; printf "%0*.*f\\n", d, p, pi}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 000003.142")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Le=s("div",{class:"hint-container warning"},[s("p",{class:"hint-container-title"},"Warning"),s("p",null,[e("Passing a variable directly to "),s("code",null,"printf"),e(" without using a format specifier can result in an error depending upon the contents of the variable.")]),s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{s="solve: 5 % x = 1"; printf s}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# awk: cmd. line:1: fatal: not enough arguments to satisfy format string")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"#         `solve: 5 % x = 1'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"#                    ^ ran out for this one")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])])],-1),Me=s("p",null,[e("So, as a good practice, always use variables with an appropriate format instead of passing it directly to "),s("code",null,"printf"),e(".")],-1),De=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{s="solve: 5 % x = 1"; printf "%s\\n", s}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# solve: 5 % x = 1")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ve=s("p",null,[e("If "),s("code",null,"%"),e(" has to be used literally inside the format specifier, use "),s("code",null,"%%"),e(". This is similar to using "),s("code",null,"\\\\"),e(" in regexps to represent "),s("code",null,"\\"),e(" literally.")],-1),Ue=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{printf "n%%d gives the remainder\\n"}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# n%d gives the remainder")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),We=s("p",null,[e("To save the results of the formatting in a variable instead of printing, use the "),s("code",null,"sprintf"),e(" function. Unlike "),s("code",null,"printf"),e(", parentheses are always required to use this function.")],-1),Je=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{pi = 3.14159; s = sprintf("%010.3f", pi); print s}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 000003.142")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ye=r('<div class="hint-container info"><p class="hint-container-title">Info</p><p>See <a href="https://www.gnu.org/software/gawk/manual/html_node/Printf.html" target="_blank" rel="noopener noreferrer">gawk manual: printf</a> for complete list of formatting options and other details.</p></div><hr><h2 id="redirecting-print-output" tabindex="-1"><a class="header-anchor" href="#redirecting-print-output"><span>Redirecting print output</span></a></h2><p>The results from the <code>print</code> and <code>printf</code> functions can be redirected to a shell command or a file instead of <code>stdout</code>. There&#39;s nothing special about it, you could have done it using shell redirections as well. The use case arises when you need to redirect only a specific portion or if you need multiple redirections within the same <code>awk</code> command. Here are some examples of redirecting to multiple files.</p>',4),Ke=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"seq"),e(),s("span",{class:"token number"},"6"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'NR%2{print > "odd.txt"; next} {print > "even.txt"}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"cat"),e(" odd.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 5")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ze=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"cat"),e(" even.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 2")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 4")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 6")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Xe=s("p",null,"dynamically creating filenames",-1),sn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"OFS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'\\t'"),e(),s("span",{class:"token string"},`'NR>1{print $2, $3 > $1".txt"}'`),e(" marks.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"cat"),e(" ECE.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Raj     53")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Joel    72")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Om      92")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),en=s("p",null,[e("Note that the use of "),s("code",null,">"),e(" doesn't mean that the file will get overwritten everytime. That happens only once if the file already existed prior to executing the "),s("code",null,"awk"),e(" command. Use "),s("code",null,">>"),e(" if you wish to append to already existing files.")],-1),nn=s("p",null,[e("As seen in the above examples, the filenames are passed as string expressions. To redirect to a shell command, again you need to pass a string expression after the "),s("code",null,"|"),e(" pipe symbol. Here's an example:")],-1),an=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{print $2 | "paste -sd,"}'`),e(" table.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# bread,cake,banana")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ln=s("p",null,"And here are some examples with multiple redirections.",-1),tn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{print $2 | "sort | paste -sd,"}'`),e(" table.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# banana,bread,cake")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),cn=s("p",null,"sort the output before writing to files",-1),on=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"OFS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'\\t'"),e(),s("span",{class:"token string"},`'NR>1{print $2, $3 | "sort > "$1".txt"}'`),e(" marks.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"cat"),e(" ECE.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Joel    72")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Om      92")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Raj     53")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),rn=r('<div class="hint-container info"><p class="hint-container-title">Info</p><p>See g<a href="https://www.gnu.org/software/gawk/manual/gawk.html#Redirection" target="_blank" rel="noopener noreferrer">awk manual: Redirecting Output of <code>print</code> and <code>printf</code></a> for more details and operators on redirections. And see <a href="https://www.gnu.org/software/gawk/manual/gawk.html#Close-Files-And-Pipes" target="_blank" rel="noopener noreferrer">gawk manual: Closing Input and Output Redirections</a> if you have too many redirections.</p></div><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>This chapter covered some of the built-in functions provided by <code>awk</code>. Do check the manual for more of them, for example math and time related functions.</p><p>Next chapter will cover features related to processing multiple files passed as input to <code>awk</code>.</p><hr><h2 id="exercises" tabindex="-1"><a class="header-anchor" href="#exercises"><span>Exercises</span></a></h2>',7),dn={class:"hint-container info"},un=s("p",{class:"hint-container-title"},"Info",-1),pn={href:"https://github.com/learnbyexample/learn_gnuawk/tree/master/exercises",target:"_blank",rel:"noopener noreferrer"},mn=s("p",null,[e("Exercises will also include functions and features not discussed in this chapter. Refer to "),s("a",{href:"https://www.gnu.org/software/gawk/manual/gawk.html#Functions",target:"_blank",rel:"noopener noreferrer"},"gawk manual: Functions"),e(" for details.")],-1),hn=s("h3",{id:"exercise-1",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-1"},[s("span",null,"Exercise 1")])],-1),bn=s("code",null,"scores.csv",-1),vn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Name,Maths,Physics,Chemistry")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Ith,100,100,100")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Cy,97,98,95")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Lin,78,83,80")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Er,56,79,92")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Ort,68,72,66")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Blue,67,46,99")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),gn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(" -F, "),s("span",{class:"token string"},`'NR==1{PROCINFO["sorted_in"] = "@ind_num_desc"; print; next}`),e(`
`),s("span",{class:"line"},"        {a[$3]=$0} END{for(k in a) print a[k]}'"),e(" scores.csv")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Name,Maths,Physics,Chemistry")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Ith,100,100,100")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Cy,97,98,95")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Lin,78,83,80")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Er,56,79,92")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Ort,68,72,66")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Blue,67,46,99")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),kn=s("h3",{id:"exercise-2",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-2"},[s("span",null,"Exercise 2")])],-1),fn=s("code",null,"nums3.txt",-1),_n=r(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> nums3.txt </span>
<span class="line"><span class="token comment"># 3.14</span></span>
<span class="line"><span class="token comment"># 4201</span></span>
<span class="line"><span class="token comment"># 777</span></span>
<span class="line"><span class="token comment"># 0323012</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),xn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1.7720")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 64.8151")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 27.8747")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 568.3414")]),e(`
`),s("span",{class:"line"}),e(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1.7720e+00")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 6.4815e+01")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 2.7875e+01")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 5.6834e+02")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),yn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{printf "%.4f\\n", sqrt($0)}'`),e(" nums3.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1.7720")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 64.8151")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 27.8747")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 568.3414")]),e(`
`),s("span",{class:"line"}),e(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{printf "%.4e\\n", sqrt($0)}'`),e(" nums3.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1.7720e+00")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 6.4815e+01")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 2.7875e+01")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 5.6834e+02")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),wn=r(`<h3 id="exercise-3" tabindex="-1"><a class="header-anchor" href="#exercise-3"><span>Exercise 3</span></a></h3><p>For the input file <code>items.txt</code>, assume space as the field separator. From the second field, remove the second <code>:</code> character and the number that follows. Modify the last field by multiplying it by the number that was deleted from the second field.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> items.txt</span>
<span class="line"><span class="token comment"># apple rxg:12:-425 og 6.2</span></span>
<span class="line"><span class="token comment"># fig zwt:3.64:12.89e2 ljg 5</span></span>
<span class="line"><span class="token comment"># banana ysl:42:3.14 vle 45</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),An=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# apple rxg:12 og -2635")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# fig zwt:3.64 ljg 6445")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# banana ysl:42 vle 141.3")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Cn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{split($2, a, /:/); $2=a[1] ":" a[2]; $NF *= a[3]} 1'`),e(" items.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# apple rxg:12 og -2635")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# fig zwt:3.64 ljg 6445")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# banana ysl:42 vle 141.3")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),En=r(`<h3 id="exercise-4" tabindex="-1"><a class="header-anchor" href="#exercise-4"><span>Exercise 4</span></a></h3><p>For the input file <code>sum.txt</code>, assume space as the field separator. Replace the second field with the sum of the two numbers embedded in it. The numbers can be positive/negative integers or floating-point numbers but not scientific notation.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> sum.txt</span>
<span class="line"><span class="token comment"># f2:z3 kt//-42\\\\3.14//tw 5y6</span></span>
<span class="line"><span class="token comment"># t5:x7 qr;wq&lt;=&gt;+10{-8764.124}yb u9</span></span>
<span class="line"><span class="token comment"># apple:fig 100:32 9j4</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),jn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# f2:z3 -38.86 5y6")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# t5:x7 -8754.12 u9")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# apple:fig 132 9j4")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),$n=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'{patsplit($2, a, /-?[0-9]+(\\.[0-9]+)?/); $2=a[1] + a[2]} 1'"),e(" sum.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# f2:z3 -38.86 5y6")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# t5:x7 -8754.12 u9")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# apple:fig 132 9j4")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Tn=s("h3",{id:"exercise-5",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-5"},[s("span",null,"Exercise 5")])],-1),Nn=s("p",null,"For the given input strings, extract portion of the line starting from the matching location specified by the shell variable s till the end of the line. If there is no match, do not print that line. The contents of s should be matched literally.",-1),In=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'(a^b)'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'3*f + (a^b) - 45'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# (a^b) - 45")]),e(`
`),s("span",{class:"line"}),e(`
`),s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'\\&/'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'f\\&z\\&2.14'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'f\\&z\\&/2.14'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# \\&/2.14")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Sn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'(a^b)'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'3*f + (a^b) - 45'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'n=index($0, ENVIRON["s"]){print substr($0, n)}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# (a^b) - 45")]),e(`
`),s("span",{class:"line"}),e(`
`),s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'\\&/'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'f\\&z\\&2.14'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'n=index($0, ENVIRON["s"]){print substr($0, n)}'`),e(),s("span",{class:"token comment"},"# should be no output for this input")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'f\\&z\\&/2.14'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'n=index($0, ENVIRON["s"]){print substr($0, n)}'`),e(),s("span",{class:"token comment"},"# but this one has a match")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# \\&/2.14")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Fn=s("h3",{id:"exercise-6",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-6"},[s("span",null,"Exercise 6")])],-1),Rn=s("p",null,[e("Extract all positive integers preceded by "),s("code",null,"-"),e(" and followed by "),s("code",null,":"),e(" or "),s("code",null,";"),e(". Display the matching portions separated by a newline character.")],-1),Bn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'42 apple-5; fig3; x-83, y-20:-34; f12'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 5")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 20")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 34")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Gn=s("blockquote",null,[s("p",null,[e("can also use: "),s("code",null,"awk -v RS='-[0-9]+[;:]' 'RT{print substr(RT, 2, length(RT)-2)}'")])],-1),On=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'{ while( match($0, /-([0-9]+)[;:]/, m) ){print m[1];"),e(`
`),s("span",{class:"line"},"                $0=substr($0, RSTART+RLENGTH)} }'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 5")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 20")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 34")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),zn=s("h3",{id:"exercise-7",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-7"},[s("span",null,"Exercise 7")])],-1),Qn=s("code",null,"scores.csv",-1),qn=s("code",null,"80",-1),Pn=s("code",null,"pass.csv",-1),Hn=s("code",null,"fail.csv",-1),Ln=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"}),e(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"cat"),e(" fail.csv")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Blue    70.67")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Er      75.67")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Ort     68.67")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"cat"),e(" pass.csv")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Lin     80.33")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Cy      96.67")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Ith     100.00")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Mn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(" -F, "),s("span",{class:"token string"},`'NR>1{t = ($2+$3+$4)/3; op = sprintf("%s\\t%.2f", $1, t);`),e(`
`),s("span",{class:"line"},`         if(+t>=80) print op > "pass.csv"; else print op > "fail.csv"}'`),e(" scores.csv")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"cat"),e(" fail.csv")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Blue    70.67")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Er      75.67")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Ort     68.67")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"cat"),e(" pass.csv")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Lin     80.33")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Cy      96.67")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Ith     100.00")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Dn=s("h3",{id:"exercise-8",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-8"},[s("span",null,"Exercise 8")])],-1),Vn=s("code",null,"files.txt",-1),Un=r(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> files.txt</span>
<span class="line"><span class="token comment"># sed -n &#39;2p&#39; addr.txt</span></span>
<span class="line"><span class="token comment"># -----------</span></span>
<span class="line"><span class="token comment">#  wc -w sample.txt</span></span>
<span class="line"><span class="token comment"># ===========</span></span>
<span class="line"><span class="token comment">#  awk &#39;{print $1}&#39; table.txt</span></span>
<span class="line"><span class="token comment"># -----------</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Wn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# How are you")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# -----------")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 31 sample.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ===========")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# brown")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# blue")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# yellow")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# -----------")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Jn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/^ /{system($0); next} 1'"),e(" files.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# How are you")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# -----------")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 31 sample.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ===========")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# brown")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# blue")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# yellow")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# -----------")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Yn=s("h3",{id:"exercise-9",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-9"},[s("span",null,"Exercise 9")])],-1),Kn=s("code",null,"fw.txt",-1),Zn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1.3  rs   90  1.35e-01")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3.8           6.00e+00")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 5.2  ye       8.24e+00")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 4.2  kt   32  4.51e+01")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Xn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"FIELDWIDTHS"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'14 *'"),e(),s("span",{class:"token string"},`'{printf "%s%.2e\\n", $1, $2}'`),e(" fw.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1.3  rs   90  1.35e-01")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3.8           6.00e+00")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 5.2  ye       8.24e+00")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 4.2  kt   32  4.51e+01")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),sa=s("h3",{id:"exercise-10",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-10"},[s("span",null,"Exercise 10")])],-1),ea=s("code",null,"addr.txt",-1),na=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Info"),s("p",null,[e("Hint — "),s("a",{href:"https://www.gnu.org/software/gawk/manual/gawk.html#Bitwise-Functions",target:"_blank",rel:"noopener noreferrer"},"gawk manual: Bit-Manipulation Functions"),e(".")])],-1),aa=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Hello World")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# This game is good")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Today is sunny")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),la=s("blockquote",null,[s("p",null,[e("can also use: "),s("code",null,"awk '(/e/ && !/u/) || (!/e/ && /u/)'")])],-1),ta=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'xor(/e/, /u/)'"),e(" addr.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Hello World")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# This game is good")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Today is sunny")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ia=s("h3",{id:"exercise-11",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-11"},[s("span",null,"Exercise 11")])],-1),ca=s("code",null,"patterns.txt",-1),oa=s("code",null,"[5]",-1),ra=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [5]*3")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),da=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'index($0, "[5]")==1'`),e(" patterns.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [5]*3")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ua=s("h3",{id:"exercise-12",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-12"},[s("span",null,"Exercise 12")])],-1),pa=s("code",null,"table.txt",-1),ma=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# brown bread MAT hair 42")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# blue cake MUG shirt -7")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# yellow banana WINDOW shoes 3.14")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ha=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'{$3 = toupper($3)} 1'"),e(" table.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# brown bread MAT hair 42")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# blue cake MUG shirt -7")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# yellow banana WINDOW shoes 3.14")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ba=s("h3",{id:"exercise-13",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-13"},[s("span",null,"Exercise 13")])],-1),va=s("code",null,"patterns.txt",-1),ga=s("code",null,"sum.txt",-1),ka=s("code",null,"s",-1),fa=s("code",null,"s",-1),_a=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'[5]'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# (9-2)*[5]")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [5]*3")]),e(`
`),s("span",{class:"line"}),e(`
`),s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'\\\\'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# f2:z3 kt//-42\\\\3.14//tw 5y6")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),xa=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'[5]'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'index($0, ENVIRON["s"])'`),e(" patterns.txt sum.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# (9-2)*[5]")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [5]*3")]),e(`
`),s("span",{class:"line"}),e(`
`),s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'\\\\'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'index($0, ENVIRON["s"])'`),e(" patterns.txt sum.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# f2:z3 kt//-42\\\\3.14//tw 5y6")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ya=s("hr",null,null,-1);function wa(u,Aa){const c=d("router-link"),p=d("VPCard"),o=d("FontIcon"),i=d("Tabs"),m=d("TagLinks");return f(),b("div",null,[s("h1",x,[s("a",y,[s("span",null,v(u.$frontmatter.title)+" 관련",1)])]),s("nav",w,[s("ul",null,[s("li",null,[t(c,{to:"#length"},{default:n(()=>[e("length")]),_:1})]),s("li",null,[t(c,{to:"#array-sorting"},{default:n(()=>[e("Array sorting")]),_:1})]),s("li",null,[t(c,{to:"#split"},{default:n(()=>[e("split")]),_:1})]),s("li",null,[t(c,{to:"#patsplit"},{default:n(()=>[e("patsplit")]),_:1})]),s("li",null,[t(c,{to:"#substr"},{default:n(()=>[e("substr")]),_:1})]),s("li",null,[t(c,{to:"#match"},{default:n(()=>[e("match")]),_:1})]),s("li",null,[t(c,{to:"#index"},{default:n(()=>[e("index")]),_:1})]),s("li",null,[t(c,{to:"#system"},{default:n(()=>[e("system")]),_:1})]),s("li",null,[t(c,{to:"#printf-and-sprintf"},{default:n(()=>[e("printf and sprintf")]),_:1})]),s("li",null,[t(c,{to:"#redirecting-print-output"},{default:n(()=>[e("Redirecting print output")]),_:1})]),s("li",null,[t(c,{to:"#summary"},{default:n(()=>[e("Summary")]),_:1})]),s("li",null,[t(c,{to:"#exercises"},{default:n(()=>[e("Exercises")]),_:1}),s("ul",null,[s("li",null,[t(c,{to:"#exercise-1"},{default:n(()=>[e("Exercise 1")]),_:1})]),s("li",null,[t(c,{to:"#exercise-2"},{default:n(()=>[e("Exercise 2")]),_:1})]),s("li",null,[t(c,{to:"#exercise-3"},{default:n(()=>[e("Exercise 3")]),_:1})]),s("li",null,[t(c,{to:"#exercise-4"},{default:n(()=>[e("Exercise 4")]),_:1})]),s("li",null,[t(c,{to:"#exercise-5"},{default:n(()=>[e("Exercise 5")]),_:1})]),s("li",null,[t(c,{to:"#exercise-6"},{default:n(()=>[e("Exercise 6")]),_:1})]),s("li",null,[t(c,{to:"#exercise-7"},{default:n(()=>[e("Exercise 7")]),_:1})]),s("li",null,[t(c,{to:"#exercise-8"},{default:n(()=>[e("Exercise 8")]),_:1})]),s("li",null,[t(c,{to:"#exercise-9"},{default:n(()=>[e("Exercise 9")]),_:1})]),s("li",null,[t(c,{to:"#exercise-10"},{default:n(()=>[e("Exercise 10")]),_:1})]),s("li",null,[t(c,{to:"#exercise-11"},{default:n(()=>[e("Exercise 11")]),_:1})]),s("li",null,[t(c,{to:"#exercise-12"},{default:n(()=>[e("Exercise 12")]),_:1})]),s("li",null,[t(c,{to:"#exercise-13"},{default:n(()=>[e("Exercise 13")]),_:1})])])])])]),A,t(p,g(k({title:"9. Built-in functions",desc:"CLI Text Processing with GNU awk",link:"https://learnbyexample.github.io/learn_gnuawk/built-in-functions.html",logo:"https://learnbyexample.github.io/favicon.svg",background:"rgba(22, 25, 35, 0.2)"})),null,16),C,E,s("div",j,[$,T,s("p",null,[e("The "),s("a",N,[t(o,{icon:"iconfont icon-github"}),e(" example_files")]),e(" directory has all the files used in the examples.")])]),I,S,F,t(i,{id:"27",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),title2:n(({value:a,isActive:l})=>[e("Case 3")]),tab0:n(({value:a,isActive:l})=>[R]),tab1:n(({value:a,isActive:l})=>[B,G]),tab2:n(({value:a,isActive:l})=>[O]),_:1}),z,t(i,{id:"44",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),title2:n(({value:a,isActive:l})=>[e("Case 3")]),tab0:n(({value:a,isActive:l})=>[Q]),tab1:n(({value:a,isActive:l})=>[q]),tab2:n(({value:a,isActive:l})=>[P]),_:1}),s("div",H,[L,s("p",null,[e("For the above illustration, you can also use "),M,e(" to get the byte count, irrespective of the locale or the use of the "),D,e(" option. This solution was suggested in "),s("a",V,[t(o,{icon:"iconfont icon-github"}),e(" this issue")]),e(".")])]),U,W,J,t(i,{id:"67",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),title2:n(({value:a,isActive:l})=>[e("Case 3")]),tab0:n(({value:a,isActive:l})=>[Y,K]),tab1:n(({value:a,isActive:l})=>[Z,X]),tab2:n(({value:a,isActive:l})=>[ss,es]),_:1}),ns,t(i,{id:"90",data:[{id:"Case 1"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),tab0:n(({value:a,isActive:l})=>[as]),_:1}),ls,t(i,{id:"122",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),title2:n(({value:a,isActive:l})=>[e("Case 3")]),tab0:n(({value:a,isActive:l})=>[ts,is]),tab1:n(({value:a,isActive:l})=>[cs,os]),tab2:n(({value:a,isActive:l})=>[rs,ds]),_:1}),us,t(i,{id:"147",data:[{id:"Case 1"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),tab0:n(({value:a,isActive:l})=>[ps]),_:1}),ms,t(i,{id:"155",data:[{id:"Case 1"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),tab0:n(({value:a,isActive:l})=>[hs]),_:1}),bs,t(i,{id:"174",data:[{id:"Case 1"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),tab0:n(({value:a,isActive:l})=>[vs,gs]),_:1}),ks,t(i,{id:"189",data:[{id:"Case 1"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),tab0:n(({value:a,isActive:l})=>[fs]),_:1}),_s,t(i,{id:"221",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),title2:n(({value:a,isActive:l})=>[e("Case 3")]),tab0:n(({value:a,isActive:l})=>[xs]),tab1:n(({value:a,isActive:l})=>[ys]),tab2:n(({value:a,isActive:l})=>[ws]),_:1}),As,t(i,{id:"235",data:[{id:"Case 1"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),tab0:n(({value:a,isActive:l})=>[Cs]),_:1}),Es,t(i,{id:"263",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),tab0:n(({value:a,isActive:l})=>[js,$s]),tab1:n(({value:a,isActive:l})=>[Ts,Ns]),_:1}),Is,t(i,{id:"280",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),tab0:n(({value:a,isActive:l})=>[Ss,Fs]),tab1:n(({value:a,isActive:l})=>[Rs,Bs]),_:1}),Gs,t(i,{id:"297",data:[{id:"Case 1"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),tab0:n(({value:a,isActive:l})=>[Os,zs]),_:1}),Qs,t(i,{id:"313",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"},{id:"Case 4"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),title2:n(({value:a,isActive:l})=>[e("Case 3")]),title3:n(({value:a,isActive:l})=>[e("Case 4")]),tab0:n(({value:a,isActive:l})=>[qs,Ps]),tab1:n(({value:a,isActive:l})=>[Hs,Ls]),tab2:n(({value:a,isActive:l})=>[Ms,Ds]),tab3:n(({value:a,isActive:l})=>[Vs,Us]),_:1}),Ws,t(i,{id:"344",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),tab0:n(({value:a,isActive:l})=>[Js,Ys]),tab1:n(({value:a,isActive:l})=>[Ks,Zs]),_:1}),Xs,t(i,{id:"361",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),tab0:n(({value:a,isActive:l})=>[se]),tab1:n(({value:a,isActive:l})=>[ee]),_:1}),ne,ae,le,t(i,{id:"376",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"},{id:"Case 4"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),title2:n(({value:a,isActive:l})=>[e("Case 3")]),title3:n(({value:a,isActive:l})=>[e("Case 4")]),tab0:n(({value:a,isActive:l})=>[te]),tab1:n(({value:a,isActive:l})=>[ie]),tab2:n(({value:a,isActive:l})=>[ce]),tab3:n(({value:a,isActive:l})=>[oe]),_:1}),re,t(i,{id:"393",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),tab0:n(({value:a,isActive:l})=>[de]),tab1:n(({value:a,isActive:l})=>[ue]),_:1}),pe,t(i,{id:"408",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),tab0:n(({value:a,isActive:l})=>[me,he]),tab1:n(({value:a,isActive:l})=>[be,ve]),_:1}),ge,t(i,{id:"425",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),title2:n(({value:a,isActive:l})=>[e("Case 3")]),tab0:n(({value:a,isActive:l})=>[ke,fe]),tab1:n(({value:a,isActive:l})=>[_e,xe]),tab2:n(({value:a,isActive:l})=>[ye,we]),_:1}),Ae,t(i,{id:"448",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),tab0:n(({value:a,isActive:l})=>[Ce,Ee]),tab1:n(({value:a,isActive:l})=>[je,$e]),_:1}),Te,t(i,{id:"465",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),title2:n(({value:a,isActive:l})=>[e("Case 3")]),tab0:n(({value:a,isActive:l})=>[Ne,Ie]),tab1:n(({value:a,isActive:l})=>[Se,Fe]),tab2:n(({value:a,isActive:l})=>[Re,Be]),_:1}),Ge,t(i,{id:"488",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),tab0:n(({value:a,isActive:l})=>[Oe]),tab1:n(({value:a,isActive:l})=>[ze,Qe]),_:1}),qe,t(i,{id:"502",data:[{id:"Case 1"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),tab0:n(({value:a,isActive:l})=>[Pe,He,Le]),_:1}),Me,t(i,{id:"521",data:[{id:"Case 1"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),tab0:n(({value:a,isActive:l})=>[De]),_:1}),Ve,t(i,{id:"529",data:[{id:"Case 1"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),tab0:n(({value:a,isActive:l})=>[Ue]),_:1}),We,t(i,{id:"537",data:[{id:"Case 1"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),tab0:n(({value:a,isActive:l})=>[Je]),_:1}),Ye,t(i,{id:"554",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),title2:n(({value:a,isActive:l})=>[e("Case 3")]),tab0:n(({value:a,isActive:l})=>[Ke]),tab1:n(({value:a,isActive:l})=>[Ze]),tab2:n(({value:a,isActive:l})=>[Xe,sn]),_:1}),en,nn,t(i,{id:"574",data:[{id:"Case 1"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),tab0:n(({value:a,isActive:l})=>[an]),_:1}),ln,t(i,{id:"582",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Case 1")]),title1:n(({value:a,isActive:l})=>[e("Case 2")]),tab0:n(({value:a,isActive:l})=>[tn]),tab1:n(({value:a,isActive:l})=>[cn,on]),_:1}),rn,s("div",dn,[un,s("p",null,[e("The "),s("a",pn,[t(o,{icon:"iconfont icon-github"}),e(" exercises")]),e(" directory has all the files used in this section.")]),mn]),hn,s("p",null,[e("For the input file "),t(o,{icon:"fas fa-file-csv"}),e(),bn,e(", sort the rows in descending order based on the values in the Physics column. Header should be retained as the first line in the output.")]),t(i,{id:"626",data:[{id:"Question"},{id:"Solution"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Solution")]),tab0:n(({value:a,isActive:l})=>[vn]),tab1:n(({value:a,isActive:l})=>[gn]),_:1}),kn,s("p",null,[e("For the input file "),t(o,{icon:"fas fa-file-lines"}),e(),fn,e(", calculate the square root of numbers and display the results in two different formats as shown below. First, with four digits after the fractional point and then in the scientific notation, again with four digits after the fractional point. Assume that the input has only a single column of positive numbers.")]),_n,t(i,{id:"641",data:[{id:"Question"},{id:"Solution"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Solution")]),tab0:n(({value:a,isActive:l})=>[xn]),tab1:n(({value:a,isActive:l})=>[yn]),_:1}),wn,t(i,{id:"656",data:[{id:"Question"},{id:"Solution"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Solution")]),tab0:n(({value:a,isActive:l})=>[An]),tab1:n(({value:a,isActive:l})=>[Cn]),_:1}),En,t(i,{id:"671",data:[{id:"Question"},{id:"Solution"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Solution")]),tab0:n(({value:a,isActive:l})=>[jn]),tab1:n(({value:a,isActive:l})=>[$n]),_:1}),Tn,Nn,t(i,{id:"685",data:[{id:"Question"},{id:"Solution"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Solution")]),tab0:n(({value:a,isActive:l})=>[In]),tab1:n(({value:a,isActive:l})=>[Sn]),_:1}),Fn,Rn,t(i,{id:"699",data:[{id:"Question"},{id:"Solution"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Solution")]),tab0:n(({value:a,isActive:l})=>[Bn]),tab1:n(({value:a,isActive:l})=>[Gn,On]),_:1}),zn,s("p",null,[e("For the input file "),t(o,{icon:"fas fa-file-csv"}),e(),Qn,e(", calculate the average score for each row. Those with average greater than or equal to "),qn,e(" should be saved in "),t(o,{icon:"fas fa-file-csv"}),e(),Pn,e(" and the rest in "),t(o,{icon:"fas fa-file-csv"}),e(),Hn,e(". The output files should have the names followed by a tab character, and finally the average score (two decimal points).")]),t(i,{id:"718",data:[{id:"Question"},{id:"Solution"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Solution")]),tab0:n(({value:a,isActive:l})=>[Ln]),tab1:n(({value:a,isActive:l})=>[Mn]),_:1}),Dn,s("p",null,[e("For the input file "),t(o,{icon:"fas fa-file-lines"}),e(),Vn,e(", replace lines starting with a space with the output of that line executed as a shell command.")]),Un,t(i,{id:"733",data:[{id:"Question"},{id:"Solution"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Solution")]),tab0:n(({value:a,isActive:l})=>[Wn]),tab1:n(({value:a,isActive:l})=>[Jn]),_:1}),Yn,s("p",null,[e("For the input file "),t(o,{icon:"fas fa-file-lines"}),e(),Kn,e(", format the last column in scientific notation with two digits after the decimal point.")]),t(i,{id:"747",data:[{id:"Question"},{id:"Solution"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Solution")]),tab0:n(({value:a,isActive:l})=>[Zn]),tab1:n(({value:a,isActive:l})=>[Xn]),_:1}),sa,s("p",null,[e("For the input file "),t(o,{icon:"fas fa-file-lines"}),e(),ea,e(", display all lines containing e or u but not both.")]),na,t(i,{id:"766",data:[{id:"Question"},{id:"Solution"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Solution")]),tab0:n(({value:a,isActive:l})=>[aa]),tab1:n(({value:a,isActive:l})=>[la,ta]),_:1}),ia,s("p",null,[e("For the input file "),t(o,{icon:"fas fa-file-lines"}),e(),ca,e(", filter lines containing "),oa,e(" at the start of a line. The search term should be matched literally.")]),t(i,{id:"785",data:[{id:"Question"},{id:"Solution"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Solution")]),tab0:n(({value:a,isActive:l})=>[ra]),tab1:n(({value:a,isActive:l})=>[da]),_:1}),ua,s("p",null,[e("For the input file "),t(o,{icon:"fas fa-file-lines"}),e(),pa,e(", uppercase the third field.")]),t(i,{id:"799",data:[{id:"Question"},{id:"Solution"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Solution")]),tab0:n(({value:a,isActive:l})=>[ma]),tab1:n(({value:a,isActive:l})=>[ha]),_:1}),ba,s("p",null,[e("For the input files "),t(o,{icon:"fas fa-file-lines"}),e(),va,e(" and "),t(o,{icon:"fas fa-file-lines"}),e(),ga,e(", match lines containing the literal value stored in the "),ka,e(" variable. Assume that the "),fa,e(" variable has regexp metacharacters.")]),t(i,{id:"813",data:[{id:"Question"},{id:"Solution"}],active:0},{title0:n(({value:a,isActive:l})=>[e("Question")]),title1:n(({value:a,isActive:l})=>[e("Solution")]),tab0:n(({value:a,isActive:l})=>[_a]),tab1:n(({value:a,isActive:l})=>[xa]),_:1}),ya,t(m)])}const ja=h(_,[["render",wa],["__file","09-built-in-functions.html.vue"]]),$a=JSON.parse('{"path":"/cli/text-processing-w-gnu-awk/09-built-in-functions.html","title":"9. Built-in functions","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"9. Built-in functions","description":"Text Processing with GNU awk > 9. Built-in functions","category":["CLI","Linux"],"tags":["crashcourse","cli","sh","shell","gnu","linux","awk"],"head":[[{"meta":null},{"property":"og:title","content":"Text Processing with GNU awk > 9. Built-in functions"},{"property":"og:description","content":"9. Built-in functions"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/cli/text-processing-w-gnu-awk/09-built-in-functions.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/cli/text-processing-w-gnu-awk/09-built-in-functions.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"9. Built-in functions"}],["meta",{"property":"og:description","content":"Text Processing with GNU awk > 9. Built-in functions"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-04-24T07:16:44.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"cli"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:tag","content":"shell"}],["meta",{"property":"article:tag","content":"gnu"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:tag","content":"awk"}],["meta",{"property":"article:modified_time","content":"2024-04-24T07:16:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"9. Built-in functions\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-24T07:16:44.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"length","slug":"length","link":"#length","children":[]},{"level":2,"title":"Array sorting","slug":"array-sorting","link":"#array-sorting","children":[]},{"level":2,"title":"split","slug":"split","link":"#split","children":[]},{"level":2,"title":"patsplit","slug":"patsplit","link":"#patsplit","children":[]},{"level":2,"title":"substr","slug":"substr","link":"#substr","children":[]},{"level":2,"title":"match","slug":"match","link":"#match","children":[]},{"level":2,"title":"index","slug":"index","link":"#index","children":[]},{"level":2,"title":"system","slug":"system","link":"#system","children":[]},{"level":2,"title":"printf and sprintf","slug":"printf-and-sprintf","link":"#printf-and-sprintf","children":[]},{"level":2,"title":"Redirecting print output","slug":"redirecting-print-output","link":"#redirecting-print-output","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]},{"level":2,"title":"Exercises","slug":"exercises","link":"#exercises","children":[{"level":3,"title":"Exercise 1","slug":"exercise-1","link":"#exercise-1","children":[]},{"level":3,"title":"Exercise 2","slug":"exercise-2","link":"#exercise-2","children":[]},{"level":3,"title":"Exercise 3","slug":"exercise-3","link":"#exercise-3","children":[]},{"level":3,"title":"Exercise 4","slug":"exercise-4","link":"#exercise-4","children":[]},{"level":3,"title":"Exercise 5","slug":"exercise-5","link":"#exercise-5","children":[]},{"level":3,"title":"Exercise 6","slug":"exercise-6","link":"#exercise-6","children":[]},{"level":3,"title":"Exercise 7","slug":"exercise-7","link":"#exercise-7","children":[]},{"level":3,"title":"Exercise 8","slug":"exercise-8","link":"#exercise-8","children":[]},{"level":3,"title":"Exercise 9","slug":"exercise-9","link":"#exercise-9","children":[]},{"level":3,"title":"Exercise 10","slug":"exercise-10","link":"#exercise-10","children":[]},{"level":3,"title":"Exercise 11","slug":"exercise-11","link":"#exercise-11","children":[]},{"level":3,"title":"Exercise 12","slug":"exercise-12","link":"#exercise-12","children":[]},{"level":3,"title":"Exercise 13","slug":"exercise-13","link":"#exercise-13","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1713943004000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":7}]},"readingTime":{"minutes":16.02,"words":4806},"filePathRelative":"cli/text-processing-w-gnu-awk/09-built-in-functions.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{ja as comp,$a as data};
