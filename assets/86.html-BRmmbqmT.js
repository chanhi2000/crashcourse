import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,a as n,t as h,b as s,w as t,n as o,g as p,e as c,r as i,o as m,d as l}from"./app-U_bew1in.js";const v={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},g={class:"table-of-contents"},b=n("hr",null,null,-1),f=c('<h2 id="project-26-part-two" tabindex="-1"><a class="header-anchor" href="#project-26-part-two"><span>Project 26, part two</span></a></h2><p>Back when the original iPad launched Apple showed off one of those “Jony Ive in an infinitely white room” videos, where Jony had this to say: “it’s true: when something exceeds your ability to understand how it works, it sort of becomes magical – and that’s exactly what the iPad is.”</p><p>When our apps run, they usually take up the full amount of screen space – they literally take over the iPad, as if the user were holding a device specifically crafted for our app and nothing else. If iOS forced us to display system elements around our app, or if iPads had lots of buttons scattered around the front of its display, that illusion would be broken.</p><p>Today you’re going to see just how important this is: we’ll use Core Motion to let the user tip their iPad to control the game. And because our code takes over the full iPad screen, the end result just feels amazing – one huge piece of glass that the player can bounce around as if it were an old wooden toy.</p><p><strong>Today you have two topics to work through, and you’ll learn about reading the accelerometer using Core Motion and combining bitmasks using <code>|</code>, while also getting more practice with <code>SKAction</code> sequences, and more.</strong></p><h3 id="tilt-to-move-cmmotionmanager" tabindex="-1"><a class="header-anchor" href="#tilt-to-move-cmmotionmanager"><span>Tilt to move: <code>CMMotionManager</code></span></a></h3>',6),x={class:"hint-container details"},T=n("summary",null,"Tilt to move: CMMotionManager",-1),_=c(`<p>We&#39;re going to control this game using the accelerometer that comes as standard on all iPads, but it has a problem: it doesn&#39;t come as standard on any Macs, which means we either resign ourselves to testing only on devices or we put in a little hack. This course isn&#39;t calling Giving Up with Swift, so we&#39;re going to add a hack – in the simulator you&#39;ll be able to use touch, and on devices you&#39;ll have to use tilting.</p><p>To get started, add this property so we can reference the player throughout the game:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> player<span class="token punctuation">:</span> <span class="token class-name">SKSpriteNode</span><span class="token operator">!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We&#39;re going to add a dedicated <code>createPlayer()</code> method that loads the sprite, gives it circle physics, and adds it to the scene, but it&#39;s going to do three other things that are important.</p><p>First, it&#39;s going to set the physics body&#39;s <code>allowsRotation</code> property to be false. We haven&#39;t changed that so far, but it does what you might expect – when false, the body no longer rotates. This is useful here because the ball looks like a marble: it&#39;s shiny, and those reflections wouldn&#39;t rotate in real life.</p><p>Second, we&#39;re going to give the ball a <code>linearDamping</code> value of 0.5, which applies a lot of friction to its movement. The game will still be hard, but this does help a little by slowing the ball down naturally.</p><p>Finally, we&#39;ll be combining three values together to get the ball&#39;s <code>contactTestBitMask</code>: the star, the vortex and the finish.</p><p>Here&#39;s the code for <code>createPlayer()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">createPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    player <span class="token operator">=</span> <span class="token class-name">SKSpriteNode</span><span class="token punctuation">(</span>imageNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;player&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    player<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">96</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">672</span><span class="token punctuation">)</span></span>
<span class="line">    player<span class="token punctuation">.</span>zPosition <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">    player<span class="token punctuation">.</span>physicsBody <span class="token operator">=</span> <span class="token class-name">SKPhysicsBody</span><span class="token punctuation">(</span>circleOfRadius<span class="token punctuation">:</span> player<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">    player<span class="token punctuation">.</span>physicsBody<span class="token operator">?</span><span class="token punctuation">.</span>allowsRotation <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">    player<span class="token punctuation">.</span>physicsBody<span class="token operator">?</span><span class="token punctuation">.</span>linearDamping <span class="token operator">=</span> <span class="token number">0.5</span></span>
<span class="line"></span>
<span class="line">    player<span class="token punctuation">.</span>physicsBody<span class="token operator">?</span><span class="token punctuation">.</span>categoryBitMask <span class="token operator">=</span> <span class="token class-name">CollisionTypes</span><span class="token punctuation">.</span>player<span class="token punctuation">.</span>rawValue</span>
<span class="line">    player<span class="token punctuation">.</span>physicsBody<span class="token operator">?</span><span class="token punctuation">.</span>contactTestBitMask <span class="token operator">=</span> <span class="token class-name">CollisionTypes</span><span class="token punctuation">.</span>star<span class="token punctuation">.</span>rawValue <span class="token operator">|</span> <span class="token class-name">CollisionTypes</span><span class="token punctuation">.</span>vortex<span class="token punctuation">.</span>rawValue <span class="token operator">|</span> <span class="token class-name">CollisionTypes</span><span class="token punctuation">.</span>finish<span class="token punctuation">.</span>rawValue</span>
<span class="line">    player<span class="token punctuation">.</span>physicsBody<span class="token operator">?</span><span class="token punctuation">.</span>collisionBitMask <span class="token operator">=</span> <span class="token class-name">CollisionTypes</span><span class="token punctuation">.</span>wall<span class="token punctuation">.</span>rawValue</span>
<span class="line">    <span class="token function">addChild</span><span class="token punctuation">(</span>player<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can go ahead and add a call to <code>createPlayer()</code> directly after the call to <code>loadLevel()</code> inside <code>didMove(to:)</code>. Note: you must create the player after the level, otherwise it will appear below vortexes and other level objects.</p><p>If you try running the game now, you&#39;ll see the ball drop straight down until it hits a wall, then it bounces briefly and stops. This game has players looking down on their iPad, so by default there ought to be no movement – it&#39;s only if the player tilts their iPad down that the ball should move downwards.</p><p>The ball is moving because the scene&#39;s physics world has a default gravity roughly equivalent to Earth&#39;s. We don&#39;t want that, so in <code>didMove(to:)</code> add this somewhere:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">physicsWorld<span class="token punctuation">.</span>gravity <span class="token operator">=</span> <span class="token punctuation">.</span>zero</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Playing the game <em>now</em> hasn&#39;t really solved much: sure, the ball isn&#39;t moving now, but… the ball isn&#39;t moving now! This would make for a pretty terrible game on the App Store.</p><p>Before we get onto how to work with the accelerometer, we&#39;re going to put together a hack that lets you simulate the experience of moving the ball using touch. What we&#39;re going to do is catch <code>touchesBegan()</code>, <code>touchesMoved()</code>, and <code>touchesEnded()</code>, and use them to set or unset a new property called <code>lastTouchPosition</code>. Then in the <code>update()</code> method we&#39;ll subtract that touch position from the player&#39;s position, and use it set the world&#39;s gravity.</p><p>It&#39;s a hack. And if you&#39;re happy to test on a device, you don&#39;t really need it. But if you&#39;re stuck with the iOS Simulator or are just curious, let&#39;s put in the hack. First, declare the new property:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> lastTouchPosition<span class="token punctuation">:</span> <span class="token class-name">CGPoint</span><span class="token operator">?</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now use <code>touchesBegan()</code> and <code>touchesMoved()</code> to set the value of that property using the same three lines of code, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">touchesBegan</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> touches<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">UITouch</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> with event<span class="token punctuation">:</span> <span class="token class-name">UIEvent</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">guard</span> <span class="token keyword">let</span> touch <span class="token operator">=</span> touches<span class="token punctuation">.</span>first <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">let</span> location <span class="token operator">=</span> touch<span class="token punctuation">.</span><span class="token function">location</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line">    lastTouchPosition <span class="token operator">=</span> location</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">touchesMoved</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> touches<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">UITouch</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> with event<span class="token punctuation">:</span> <span class="token class-name">UIEvent</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">guard</span> <span class="token keyword">let</span> touch <span class="token operator">=</span> touches<span class="token punctuation">.</span>first <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">let</span> location <span class="token operator">=</span> touch<span class="token punctuation">.</span><span class="token function">location</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">)</span></span>
<span class="line">    lastTouchPosition <span class="token operator">=</span> location</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When <code>touchesEnded()</code> is called, we need to set the property to be <code>nil</code> – it is optional, after all:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">touchesEnded</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> touches<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">UITouch</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> with event<span class="token punctuation">:</span> <span class="token class-name">UIEvent</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    lastTouchPosition <span class="token operator">=</span> <span class="token nil constant">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Easy, I know, but it gets (only a little!) trickier in the <code>update()</code> method. This needs to unwrap our optional property, calculate the difference between the current touch and the player&#39;s position, then use that to change the <code>gravity</code> value of the physics world. Here it is:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">update</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> currentTime<span class="token punctuation">:</span> <span class="token class-name">TimeInterval</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> currentTouch <span class="token operator">=</span> lastTouchPosition <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> diff <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> currentTouch<span class="token punctuation">.</span>x <span class="token operator">-</span> player<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> currentTouch<span class="token punctuation">.</span>y <span class="token operator">-</span> player<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y<span class="token punctuation">)</span></span>
<span class="line">        physicsWorld<span class="token punctuation">.</span>gravity <span class="token operator">=</span> <span class="token class-name">CGVector</span><span class="token punctuation">(</span>dx<span class="token punctuation">:</span> diff<span class="token punctuation">.</span>x <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">,</span> dy<span class="token punctuation">:</span> diff<span class="token punctuation">.</span>y <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is clearly not a permanent solution, but it&#39;s good enough that you can run the app now and test it out.</p><p>Now for the new bit: working with the accelerometer. This is easy to do, which is remarkable when you think how much is happening behind the scenes.</p><p>All motion detection is done with an Apple framework called Core Motion, and most of the work is done by a class called <code>CMMotionManager</code>. Using it here won&#39;t require any special user permissions, so all we need to do is create an instance of the class and ask it to start collecting information. We can then read from that information whenever and wherever we need to, and in this project the best place is <code>update()</code>.</p><p>Add <code>import CoreMotion</code> just above the <code>import SpriteKit</code> line at the top of your game scene, then add this property:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> motionManager<span class="token punctuation">:</span> <span class="token class-name">CMMotionManager</span><span class="token operator">!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now it&#39;s just a matter of creating the object and asking it start collecting accelerometer data. This is done using the <code>startAccelerometerUpdates()</code> method, which instructs Core Motion to start collecting accelerometer information we can read later. Put this this into <code>didMove(to:)</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">motionManager <span class="token operator">=</span> <span class="token class-name">CMMotionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">motionManager<span class="token punctuation">.</span><span class="token function">startAccelerometerUpdates</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>The last thing to do is to poll the motion manager inside our <code>update()</code> method, checking to see what the current tilt data is. But there&#39;s a complication: we already have a hack in there that lets us test in the simulator, so we want one set of code for the simulator and one set of code for devices.</p><p>Swift solves this problem by adding special compiler instructions. If the instruction evaluates to true it will compile one set of code, otherwise it will compile the other. This is particularly helpful once you realize that any code wrapped in compiler instructions that evaluate to false never get seen – it&#39;s like they never existed. So, this is a great way to include debug information or activity in the simulator that never sees the light on devices.</p><p>The compiler directives we care about are: <code>#if targetEnvironment(simulator)</code>, <code>#else</code> and <code>#endif</code>. As you can see, this is mostly the same as a standard Swift if/else block, although here you don&#39;t need braces because everything until the <code>#else</code> or <code>#endif</code> will execute.</p><p>The code to read from the accelerometer and apply its tilt data to the world gravity look like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> accelerometerData <span class="token operator">=</span> motionManager<span class="token punctuation">.</span>accelerometerData <span class="token punctuation">{</span></span>
<span class="line">    physicsWorld<span class="token punctuation">.</span>gravity <span class="token operator">=</span> <span class="token class-name">CGVector</span><span class="token punctuation">(</span>dx<span class="token punctuation">:</span> accelerometerData<span class="token punctuation">.</span>acceleration<span class="token punctuation">.</span>y <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">,</span> dy<span class="token punctuation">:</span> accelerometerData<span class="token punctuation">.</span>acceleration<span class="token punctuation">.</span>x <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The first line safely unwraps the optional accelerometer data, because there might not be any available. The second line changes the gravity of our game world so that it reflects the accelerometer data. You&#39;re welcome to adjust the speed multipliers as you please; I found a value of 50 worked well.</p><p>Note that I passed accelerometer Y to <code>CGVector</code>&#39;s X and accelerometer X to <code>CGVector</code>&#39;s Y. This is not a typo! Remember, your device is rotated to landscape right now, which means you also need to flip your coordinates around.</p><p>We need to put that code inside the current <code>update()</code> method, wrapped inside the new compiler directives. Here&#39;s how the method should look now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">update</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> currentTime<span class="token punctuation">:</span> <span class="token class-name">TimeInterval</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token directive property"><span class="token directive-name">#if</span> targetEnvironment<span class="token punctuation">(</span>simulator<span class="token punctuation">)</span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> currentTouch <span class="token operator">=</span> lastTouchPosition <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> diff <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> currentTouch<span class="token punctuation">.</span>x <span class="token operator">-</span> player<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> currentTouch<span class="token punctuation">.</span>y <span class="token operator">-</span> player<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y<span class="token punctuation">)</span></span>
<span class="line">        physicsWorld<span class="token punctuation">.</span>gravity <span class="token operator">=</span> <span class="token class-name">CGVector</span><span class="token punctuation">(</span>dx<span class="token punctuation">:</span> diff<span class="token punctuation">.</span>x <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">,</span> dy<span class="token punctuation">:</span> diff<span class="token punctuation">.</span>y <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token directive property"><span class="token directive-name">#else</span></span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> accelerometerData <span class="token operator">=</span> motionManager<span class="token punctuation">.</span>accelerometerData <span class="token punctuation">{</span></span>
<span class="line">        physicsWorld<span class="token punctuation">.</span>gravity <span class="token operator">=</span> <span class="token class-name">CGVector</span><span class="token punctuation">(</span>dx<span class="token punctuation">:</span> accelerometerData<span class="token punctuation">.</span>acceleration<span class="token punctuation">.</span>y <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">,</span> dy<span class="token punctuation">:</span> accelerometerData<span class="token punctuation">.</span>acceleration<span class="token punctuation">.</span>x <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token directive property"><span class="token directive-name">#endif</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you can test on a device, please do. It took only a few lines of code, but the game is now adapting beautifully to device tilting!</p>`,40),M=n("h3",{id:"contacting-but-not-colliding",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#contacting-but-not-colliding"},[n("span",null,"Contacting but not colliding")])],-1),C={class:"hint-container details"},P=n("summary",null,"Contacting but not colliding",-1),S=c(`<p>All the game is missing now is some challenge, and that&#39;s where our star and vortex level elements come in. Players will get one point for every star they collect, and lose one point every time they fall into a vortex. To track scores, we need a property to hold the score and a label to show it, so add these now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> scoreLabel<span class="token punctuation">:</span> <span class="token class-name">SKLabelNode</span><span class="token operator">!</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">didSet</span> <span class="token punctuation">{</span></span>
<span class="line">        scoreLabel<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Score: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">score</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We&#39;re going to show the label in the top-left corner of the screen, so add this to <code>didMove(to:)</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">scoreLabel <span class="token operator">=</span> <span class="token class-name">SKLabelNode</span><span class="token punctuation">(</span>fontNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Chalkduster&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">scoreLabel<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Score: 0&quot;</span></span></span>
<span class="line">scoreLabel<span class="token punctuation">.</span>horizontalAlignmentMode <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token keyword">left</span></span>
<span class="line">scoreLabel<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">)</span></span>
<span class="line">scoreLabel<span class="token punctuation">.</span>zPosition <span class="token operator">=</span> <span class="token number">2</span></span>
<span class="line"><span class="token function">addChild</span><span class="token punctuation">(</span>scoreLabel<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When a collision happens, we need to figure out whether it was the player colliding with a star, or the star colliding with a player – the same semi-philosophical problem we had in project 11. And our solution is identical too: figure out which is which, then call another method.</p><p>First, we need to make ourselves the contact delegate for the physics world, so make your class conform to <code>SKPhysicsContactDelegate</code> then add this line in <code>didMove(to:)</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">physicsWorld<span class="token punctuation">.</span>contactDelegate <span class="token operator">=</span> <span class="token keyword">self</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We already know which node is our player, which means we know which node <em>isn&#39;t</em> our player. This means our <code>didBegin()</code> method is easy:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">didBegin</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> contact<span class="token punctuation">:</span> <span class="token class-name">SKPhysicsContact</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">guard</span> <span class="token keyword">let</span> nodeA <span class="token operator">=</span> contact<span class="token punctuation">.</span>bodyA<span class="token punctuation">.</span>node <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">guard</span> <span class="token keyword">let</span> nodeB <span class="token operator">=</span> contact<span class="token punctuation">.</span>bodyB<span class="token punctuation">.</span>node <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> nodeA <span class="token operator">==</span> player <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">playerCollided</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> nodeB<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> nodeB <span class="token operator">==</span> player <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">playerCollided</span><span class="token punctuation">(</span>with<span class="token punctuation">:</span> nodeA<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are three types of collision we care about: when the player hits a vortex they should be penalized, when the player hits a star they should score a point, and when the player hits the finish flag the next level should be loaded. I&#39;ll deal with the first two here, and you can think about the third one yourself!</p><p>When a player hits a vortex, a few things need to happen. Chief among them is that we need to stop the player controlling the ball, which will be done using a single boolean property called <code>isGameOver</code>. Add this property now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> isGameOver <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You&#39;ll need to modify your <code>update()</code> method so that it works only when <code>isGameOver</code> is false, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">update</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> currentTime<span class="token punctuation">:</span> <span class="token class-name">TimeInterval</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">guard</span> isGameOver <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token directive property"><span class="token directive-name">#if</span> targetEnvironment<span class="token punctuation">(</span>simulator<span class="token punctuation">)</span></span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">let</span> currentTouch <span class="token operator">=</span> lastTouchPosition <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> diff <span class="token operator">=</span> <span class="token class-name">CGPoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> currentTouch<span class="token punctuation">.</span>x <span class="token operator">-</span> player<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> currentTouch<span class="token punctuation">.</span>y <span class="token operator">-</span> player<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y<span class="token punctuation">)</span></span>
<span class="line">            physicsWorld<span class="token punctuation">.</span>gravity <span class="token operator">=</span> <span class="token class-name">CGVector</span><span class="token punctuation">(</span>dx<span class="token punctuation">:</span> diff<span class="token punctuation">.</span>x <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">,</span> dy<span class="token punctuation">:</span> diff<span class="token punctuation">.</span>y <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token directive property"><span class="token directive-name">#else</span></span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">let</span> accelerometerData <span class="token operator">=</span> motionManager<span class="token punctuation">.</span>accelerometerData <span class="token punctuation">{</span></span>
<span class="line">            physicsWorld<span class="token punctuation">.</span>gravity <span class="token operator">=</span> <span class="token class-name">CGVector</span><span class="token punctuation">(</span>dx<span class="token punctuation">:</span> accelerometerData<span class="token punctuation">.</span>acceleration<span class="token punctuation">.</span>y <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">,</span> dy<span class="token punctuation">:</span> accelerometerData<span class="token punctuation">.</span>acceleration<span class="token punctuation">.</span>x <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token directive property"><span class="token directive-name">#endif</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Of course, a number of other things need to be done when a player collides with a vortex:</p><ul><li>We need to stop the ball from being a dynamic physics body so that it stops moving once it&#39;s sucked in.</li><li>We need to move the ball over the vortex, to simulate it being sucked in. It will also be scaled down at the same time.</li><li>Once the move and scale has completed, we need to remove the ball from the game.</li><li>After all the actions complete, we need to create the player ball again and re-enable control.</li></ul><p>We&#39;ll put that together using an <code>SKAction</code> sequence, followed by a trailing closure that will execute when the actions finish. When colliding with a star, we just remove the star node from the scene and add one to the score.</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">playerCollided</span><span class="token punctuation">(</span>with node<span class="token punctuation">:</span> <span class="token class-name">SKNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> node<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;vortex&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        player<span class="token punctuation">.</span>physicsBody<span class="token operator">?</span><span class="token punctuation">.</span>isDynamic <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">        isGameOver <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">        score <span class="token operator">-=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">let</span> move <span class="token operator">=</span> <span class="token class-name">SKAction</span><span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> node<span class="token punctuation">.</span>position<span class="token punctuation">,</span> duration<span class="token punctuation">:</span> <span class="token number">0.25</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">let</span> scale <span class="token operator">=</span> <span class="token class-name">SKAction</span><span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token number">0.0001</span><span class="token punctuation">,</span> duration<span class="token punctuation">:</span> <span class="token number">0.25</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">let</span> remove <span class="token operator">=</span> <span class="token class-name">SKAction</span><span class="token punctuation">.</span><span class="token function">removeFromParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">let</span> sequence <span class="token operator">=</span> <span class="token class-name">SKAction</span><span class="token punctuation">.</span><span class="token function">sequence</span><span class="token punctuation">(</span><span class="token punctuation">[</span>move<span class="token punctuation">,</span> scale<span class="token punctuation">,</span> remove<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        player<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>sequence<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token keyword">weak</span> <span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token keyword">in</span></span>
<span class="line">            <span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">createPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span>isGameOver <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> node<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;star&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        node<span class="token punctuation">.</span><span class="token function">removeFromParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        score <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> node<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;finish&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// next level?</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That method finishes the game, so it&#39;s down to you now to try and play the whole level without falling into a vortex. What happens when you hit the finish flag? Nothing… <em>yet</em>.</p>`,19),j=n("hr",null,null,-1);function D(u,B){const a=i("router-link"),e=i("VPCard"),r=i("VidStack");return m(),k("div",null,[n("h1",y,[n("a",w,[n("span",null,h(u.$frontmatter.title)+" 관련",1)])]),n("nav",g,[n("ul",null,[n("li",null,[s(a,{to:"#project-26-part-two"},{default:t(()=>[l("Project 26, part two")]),_:1}),n("ul",null,[n("li",null,[s(a,{to:"#tilt-to-move-cmmotionmanager"},{default:t(()=>[l("Tilt to move: CMMotionManager")]),_:1})]),n("li",null,[s(a,{to:"#contacting-but-not-colliding"},{default:t(()=>[l("Contacting but not colliding")]),_:1})])])])])]),b,s(e,o(p({title:"100 Days of Swift - Day 86",desc:"Project 26, part two",link:"https://www.hackingwithswift.com/100/86",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),f,n("details",x,[T,s(e,o(p({title:"100 Days of Swift - Day 86 - Tilt to move: CMMotionManager",desc:"Tilt to move: CMMotionManager",link:"https://www.hackingwithswift.com/read/26/3/tilt-to-move-cmmotionmanager",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(r,{src:"youtube/dbDIQt4oxxA"}),_]),M,n("details",C,[P,s(e,o(p({title:"100 Days of Swift - Day 86 - Contacting but not colliding",desc:"Contacting but not colliding",link:"https://www.hackingwithswift.com/read/26/4/contacting-but-not-colliding",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(r,{src:"youtube/9T0sJKNM2Tc"}),S]),j])}const I=d(v,[["render",D],["__file","86.html.vue"]]),q=JSON.parse('{"path":"/swift/100-days-of-swift/86.html","title":"Day 86","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 86","description":"100 Days of Swift > Day 86","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of Swift > Day 86"},{"property":"og:description","content":"Day 86"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swift/86.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swift/86.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 86"}],["meta",{"property":"og:description","content":"100 Days of Swift > Day 86"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 86\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 26, part two","slug":"project-26-part-two","link":"#project-26-part-two","children":[{"level":3,"title":"Tilt to move: CMMotionManager","slug":"tilt-to-move-cmmotionmanager","link":"#tilt-to-move-cmmotionmanager","children":[]},{"level":3,"title":"Contacting but not colliding","slug":"contacting-but-not-colliding","link":"#contacting-but-not-colliding","children":[]}]}],"git":{"createdTime":1704338818000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":11}]},"readingTime":{"minutes":8.12,"words":2436},"filePathRelative":"swift/100-days-of-swift/86.md","localizedDate":"2024년 1월 4일","excerpt":"\\n\\n<hr>\\n"}');export{I as comp,q as data};
