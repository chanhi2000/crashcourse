import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,a as e,t as h,b as n,w as t,n as o,g as i,e as c,r,o as m,d as l}from"./app-U_bew1in.js";const f={},g={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},k={class:"table-of-contents"},y=e("hr",null,null,-1),v=c('<h2 id="milestone-projects-16-18" tabindex="-1"><a class="header-anchor" href="#milestone-projects-16-18"><span>Milestone: Projects 16-18</span></a></h2><p>With two huge projects and another technique project complete, it’s time to pause and reflect on what you learned, inspect a couple of key topics more closely, then take on a fresh challenge. This is your final challenge in these 100 days, so I’ve picked out something nice and flexible – you can get it done in 30 minutes if you want, but you can also complete optional extra tasks based on whatever interests you.</p><p>The nice thing about this challenge is that it gives you all sorts of scope to develop the app however you want, implementing the features you find most interesting or useful to you. The point is that you have a blank canvas to work with, and it’s down to you to make that into something real – <em>you</em> need to pick the things you want to work on, design your UI, fix your own bugs, and get it ready.</p><p>As always, don’t be afraid of making mistakes, because it’s normal. As Roger Crawford once said, “being challenged in life is inevitable, but being defeated is optional.”</p><p><strong>Today you have three topics to work through, one of which of is your challenge.</strong></p><h3 id="what-you-learned" tabindex="-1"><a class="header-anchor" href="#what-you-learned"><span>What you learned</span></a></h3>',6),b={class:"hint-container details"},_=e("summary",null,"What you learned",-1),x=c("<p>We’ve had some really long projects recently, but that’s mainly a result of your SwiftUI skills really growing – you’re way past the basics now, so you’re able to tackle bigger projects that solve bigger problems. I realize it can feel tiring working on these larger projects, but I hope you’re able to look back on what you built and feel good – you’ve come such a long way!</p><p>While completing these projects, you also learned:</p><ul><li>Reading environment values using <code>@EnvironmentObject</code>.</li><li>Creating tabs with <code>TabView</code>.</li><li>Using Swift’s <code>Result</code> type to send back success or failure.</li><li>Manually publishing <code>ObservableObject</code> changes using <code>objectWillChange.send()</code>.</li><li>Controlling image interpolation.</li><li>Adding swipe actions to list rows,.</li><li>Placing buttons in a <code>ContextMenu</code>.</li><li>Creating local notifications with the UserNotifications framework.</li><li>Using third-party code with Swift package dependencies.</li><li>Using <code>map()</code> and <code>filter()</code> to create new arrays based on an existing one.</li><li>How to create dynamic QR codes.</li><li>Attaching custom gestures to a SwiftUI view.</li><li>Using <code>UINotificationFeedbackGenerator</code> to make iPhones vibrate.</li><li>Disabling user interactivity using <code>allowsHitTesting()</code>.</li><li>Triggering events repeatedly using <code>Timer</code>.</li><li>Tracking scene state changes as our app moves between the background and foreground.</li><li>Supporting color blindness, reduced motion, and more.</li><li>SwiftUI’s three step layout system.</li><li>Alignment, alignment guides, and custom alignment guides.</li><li>Absolutely positioning views using the <code>position()</code> modifier.</li><li>Using <code>GeometryReader</code> and <code>GeometryProxy</code> to make special effects.</li></ul><p>…and you also built some real apps to put those skills into action – it’s been really busy, and I hope you feel proud of what you accomplished!</p>",4),R=e("h3",{id:"key-points",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#key-points"},[e("span",null,"Key points")])],-1),S={class:"hint-container details"},j=e("summary",null,"Key points",-1),T=c(`<p>Before we get on to the challenges for this project, there are two points I want to explore in more depth to make sure you’ve understood them thoroughly: how <code>map()</code> and <code>filter()</code> fit into the larger world of functional programming, and Swift’s Result type.</p><h4 id="functional-programming" tabindex="-1"><a class="header-anchor" href="#functional-programming"><span>Functional programming</span></a></h4><p>Although I cover functional programming a lot in my book <a href="https://www.hackingwithswift.com/store/pro-swift" target="_blank" rel="noopener noreferrer">Pro Swift</a>, I want to touch on it here too because we used it twice in project 16: once with <code>map()</code> and once with <code>filter()</code>. Both those methods are designed to let us specify what we want rather than how we get there, and both are part of a wider programming approach called <em>functional programming</em>.</p><p>To demonstrate how this approach differs from a common alternative, called <em>imperative programming</em>, take a look at this code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">var</span> evens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> number <span class="token keyword">in</span> numbers <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> number<span class="token punctuation">.</span><span class="token function">isMultiple</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        evens<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That creates an array of integers, loops over them one by one, and adds those that are multiples of two to a new array called <code>evens</code> – we need to spell out exactly how we want the process to happen. That code is easy to read, easy to write, and works great, but if we were to rewrite it using <code>filter()</code> we’d get this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">let</span> evens <span class="token operator">=</span> numbers<span class="token punctuation">.</span>filter <span class="token punctuation">{</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span><span class="token function">isMultiple</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we <em>don’t</em> need to spell out how things should happen, and instead focus on <em>what</em> we want to happen: we provide <code>filter()</code> with a test it can perform, and it does the rest. This means our code is shorter, which is awesome, but it’s also improved in three other ways:</p><ol><li>It’s no longer possible to put a surprise <code>break</code> inside the loop – <code>filter()</code> will always process every element in the array, and this extra simplicity means we can focus on the test itself.</li><li>Rather than providing a closure we can call a shared function instead, which is great for code reuse.</li><li>The resulting <code>evens</code> array is now constant, so we can’t modify it by accident afterwards.</li></ol><p>Writing less code is always nice, but writing code that is simpler, more reusable, and less variable is even better!</p><p>Functions that accept a function as a parameter, or send back a function as their return value, are called <em>higher-order</em> functions, and both <code>map()</code> and <code>filter()</code> are examples of them. Swift has many more like them, but one of the most useful is <code>compactMap()</code>, which:</p><ol><li>Runs a transformation function over every item in an array, just like <code>map()</code>.</li><li>Unwraps any optionals returned by that transformation function, and puts the result into a new array to be returned.</li><li>Any optionals that are <code>nil</code> get discarded.</li></ol><p>So, while <code>map()</code> will create a new array containing the same number of items as the array it took in, <code>compactMap()</code> might return the same amount, fewer items, or even none at all!</p><p>To see the difference between <code>map()</code> and <code>compactMap()</code> in action, try this example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;2&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;fish&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;3&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">let</span> evensMap <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> evensCompactMap <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">compactMap</span><span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That creates an array of strings, then converts it to an array of integers using <code>map()</code> then <code>compactMap()</code>. When that code runs, <code>evensMap</code> will contain two optional integers, then nil, then another optional integer, whereas <code>evensCompactMap</code> will contain three real integers – no optionality, and no <code>nil</code>. Much better!</p><h4 id="result" tabindex="-1"><a class="header-anchor" href="#result"><span>Result</span></a></h4><p>We used Swift’s <code>Result</code> type as a simple way of returning a single value that either succeeded or failed, but there are a few important features I think you’ll find useful in your own code.</p><p>First, if you think about it, <code>Result</code> is like a slightly more advanced form of optionals. Optionals either contain some sort of value – an integer, a string, etc – or they contain nothing at all, and Result also contains some sort of value, but now rather than nothing at all for the alternative case it must contain some sort of error.</p><p>Behind the scenes, optionals and <code>Result</code> are both implemented as a Swift enum with two cases. For optionals the enum is called <code>Optional</code> and the cases are <code>.none</code> for <code>nil</code> and <code>.some</code> with an associated value of your integer/string/etc, and for <code>Result</code> they are <code>.success</code> with an associated value or <code>.failure</code> with another associated value.</p><p>The only <em>real</em> difference between the two is that Swift has syntactic sugar in place for optionals – special syntax designed to make our life easier, because optionals are so common. So, things like <code>if let</code> and optional chaining exist for optionals, whereas <code>Result</code> doesn’t have any special code around it.</p><p>Second, as you’ve seen a <code>Result</code> contains some sort of success value or some sort of error value, but if you ever need it there are ways of using <code>Result</code> and throwing functions interchangeably.</p><p>If you have a <code>Result</code> and want to get back to <code>do</code>/<code>catch</code> territory, just call the <code>get()</code> method of your <code>Result</code> – this will return the successful value if it exists, or throws its error otherwise.</p><p>As an example, consider code like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">NetworkError</span><span class="token punctuation">:</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> badURL</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">createResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">NetworkError</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">.</span><span class="token function">failure</span><span class="token punctuation">(</span><span class="token punctuation">.</span>badURL<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">createResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That defines some sort of error, creates a function that returns either a string or an error (but in practice always returns an error), then calls that function and puts its return value into <code>result</code>. If you wanted to use <code>do</code>/<code>catch</code> with that value, you could use <code>get()</code> like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> successString <span class="token operator">=</span> <span class="token keyword">try</span> result<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>successString<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Oops! There was an error.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To go the <em>other</em> way – to create a <code>Result</code> value from throwing code – you’ll find that <code>Result</code> has an initializer that accepts a throwing closure. If the closure returns a value successfully that gets used for the success case, otherwise the thrown error is placed into the failure case.</p><p>For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token class-name">Result</span> <span class="token punctuation">{</span> <span class="token keyword">try</span> <span class="token class-name">String</span><span class="token punctuation">(</span>contentsOf<span class="token punctuation">:</span> someURL<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>In that code, <code>result</code> will be a <code>Result&lt;String, Error&gt;</code> – it doesn’t have a specific kind of <code>Error</code> because <code>String(contentsOf:)</code> doesn’t send one back.</p><p>The last thing you should know about <code>Result</code> is that it has functional methods you’re already used to, including <code>map()</code> and <code>mapError()</code>. For example, the <code>map()</code> method looks inside the <code>Result</code>, and transforms the success value into a different kind of value using a closure you specify – for example, it might transform a string into an integer. However, if it finds failure instead, it just uses that directly and ignores your transformation. Alternatively, <code>mapError()</code> transforms the <em>error</em> from one type to another, which can be helpful if you want to homogenize error types in one place.</p><p>This is one of the many things to love about functional programming: once you understand the “takes a closure and uses it to transform stuff” nature of <code>map()</code>, you’ll find it exists on arrays, <code>Result</code>, and even <code>Optional</code>!</p>`,33),I=e("h3",{id:"challenge",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#challenge"},[e("span",null,"Challenge")])],-1),D={class:"hint-container details"},U=e("summary",null,"Challenge",-1),C=c("<p>Your challenge this time can be easy or hard depending on how far you want to take it, but at its core the project is simple: you need to build an app that helps users roll dice then store the results they had.</p><p>At the very least you should lets users roll dice, and also let them see results from previous rolls. However, if you want to push yourself further you can try one or more of the following:</p><ol><li>Let the user customize the dice that are rolled: how many of them, and what type: 4-sided, 6-sided, 8-sided, 10-sided, 12-sided, 20-sided, and even 100-sided.</li><li>Show the total rolled on the dice.</li><li>Store the results using JSON or Core Data – anywhere they are persistent.</li><li>Add haptic feedback when dice are rolled.</li><li>For a real challenge, make the value rolled by the dice flick through various possible values before settling on the final figure.</li></ol><p>When I say “roll dice” you don’t need to create fancy 3D effects – just showing the numbers that were “rolled” is fine.</p><p>The only thing that might cause you some work is step 5: making the results flick through various values before settling on the final figure. The easiest way to tackle this is through a <code>Timer</code> that gets cancelled after a certain number of calls.</p><p>While you’re working, please take a moment to remember the accessibility of your code – try using it with VoiceOver and make sure it works as well as you can make it.</p>",6),M=e("div",{class:"hint-container tip"},[e("p",{class:"hint-container-title"},"Note"),e("p",null,"Don’t worry if you don’t complete challenges in the day they were assigned – in future days you’ll find you have some time to spare here and there, so challenges are something you can return back to in the future.")],-1),W=e("hr",null,null,-1);function A(p,P){const s=r("router-link"),a=r("VPCard");return m(),d("div",null,[e("h1",g,[e("a",w,[e("span",null,h(p.$frontmatter.title)+" 관련",1)])]),e("nav",k,[e("ul",null,[e("li",null,[n(s,{to:"#milestone-projects-16-18"},{default:t(()=>[l("Milestone: Projects 16-18")]),_:1}),e("ul",null,[e("li",null,[n(s,{to:"#what-you-learned"},{default:t(()=>[l("What you learned")]),_:1})]),e("li",null,[n(s,{to:"#key-points"},{default:t(()=>[l("Key points")]),_:1})]),e("li",null,[n(s,{to:"#challenge"},{default:t(()=>[l("Challenge")]),_:1})])])])])]),y,n(a,o(i({title:"100 Days of SwiftUI - Day 95",desc:"Milestone: Projects 16-18",link:"https://www.hackingwithswift.com/100/swiftui/95",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),v,e("details",b,[_,n(a,o(i({title:"100 Days of SwiftUI - Day 95 - What you learned",desc:"What you learned",link:"https://www.hackingwithswift.com/guide/ios-swiftui/7/1/what-you-learned",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),x]),R,e("details",S,[j,n(a,o(i({title:"100 Days of SwiftUI - Day 95 - Key points",desc:"Key points",link:"https://www.hackingwithswift.com/guide/ios-swiftui/7/2/key-points",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),T]),I,e("details",D,[U,n(a,o(i({title:"100 Days of SwiftUI - Day 95 - Challenge",desc:"Challenge",link:"https://www.hackingwithswift.com/guide/ios-swiftui/7/3/challenge",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),C]),M,W])}const q=u(f,[["render",A],["__file","95.html.vue"]]),E=JSON.parse('{"path":"/swift/100-days-of-swiftui/95.html","title":"Day 95","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 95","description":"100 Days of SwiftUI > Day 95","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 95"},{"property":"og:description","content":"Day 95"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/95.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/95.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 95"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 95"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 95\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Milestone: Projects 16-18","slug":"milestone-projects-16-18","link":"#milestone-projects-16-18","children":[{"level":3,"title":"What you learned","slug":"what-you-learned","link":"#what-you-learned","children":[]},{"level":3,"title":"Key points","slug":"key-points","link":"#key-points","children":[]},{"level":3,"title":"Challenge","slug":"challenge","link":"#challenge","children":[]}]}],"git":{"createdTime":1709862683000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":6}]},"readingTime":{"minutes":7.07,"words":2121},"filePathRelative":"swift/100-days-of-swiftui/95.md","localizedDate":"2024년 3월 8일","excerpt":"\\n\\n<hr>\\n"}');export{q as comp,E as data};
