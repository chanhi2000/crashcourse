import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,a as s,t as h,b as n,w as i,n as p,g as l,d as a,e as t,r as c,o as m}from"./app-U_bew1in.js";const g={},y={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},w={class:"table-of-contents"},v=s("hr",null,null,-1),b=s("h2",{id:"complex-data-types-part-1",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#complex-data-types-part-1"},[s("span",null,"Complex data types, part 1")])],-1),q=s("p",null,"Today we’re going to look at some more complex data types that group data together. Understanding the differences between them, and especially knowing which to use and when, can sometimes trip folks up when they are learning – as Joseph Campbell once said, “computers are like Old Testament gods: lots of rules and no mercy.”",-1),x=s("p",null,"Don’t worry, though: you’ll find that the three types we’re learning today cover the overwhelming majority of requirements you’ll need for grouping data, and if you choose the wrong one when you’re learning then nothing bad is going to happen.",-1),_=s("p",null,"In fact, a common mistake folks make while learning is they have a fear of running their code. Trust me on this: while you’re following all the code here, none of the code you write can somehow break your computer. So, make a change and run it. Make another change and run that. Just try changing your values until you feel comfortable with what’s happening – it all helps.",-1),S=s("p",null,[s("strong",null,"Today you have four tutorials to follow, and you’ll meet things like arrays, dictionaries, sets, and more."),a(" After watching each video you’re welcome to go through some optional extra reading if you want extra clarification on a topic, and there are some short tests to help make sure you’ve understood what was taught.")],-1),j=s("h3",{id:"_1-how-to-store-ordered-data-in-arrays",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-how-to-store-ordered-data-in-arrays"},[s("span",null,"1. How to store ordered data in arrays")])],-1),T={class:"hint-container details"},A=s("summary",null,"1. How to store ordered data in arrays",-1),D=t(`<p>It’s extremely common to want to have lots of data in a single place, whether that’s the days of the week, a list of students in a class, a city’s population for the last 100 years, or any of countless other examples.</p><p>In Swift, we do this grouping using an <em>array</em>. Arrays are their own data type just like <code>String</code>, <code>Int</code>, and <code>Double</code>, but rather than hold just one string they can hold zero strings, one string, two strings, three, fifty, fifty million, or even more strings – they can automatically adapt to hold as many as you need, and always hold data in the order you add it.</p><p>Let’s start with some simple examples of creating arrays:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> beatles <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;John&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Paul&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;George&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Ringo&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">let</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">var</span> temperatures <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">25.3</span><span class="token punctuation">,</span> <span class="token number">28.2</span><span class="token punctuation">,</span> <span class="token number">26.4</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That creates three different arrays: one holding strings of people’s names, one holding integers of important numbers, and one holding decimals of temperatures in Celsius. Notice how we start and end arrays using square brackets, with commas between every item.</p><p>When it comes to reading values <em>out</em> from an array, we ask for values by the position they appear in the array. The position of an item in an array is commonly called its index.</p><p>This confuses beginners a bit, but Swift actually counts an item’s index from zero rather than one – <code>beatles[0]</code> is the first element, and <code>beatles[1]</code> is the second, for example.</p><p>So, we could read some values out from our arrays like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span>beatles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>temperatures<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Tip</strong>: Make sure an item exists at the index you’re asking for, otherwise your code will crash – your app will just stop working.</p><p>If your array is variable, you can modify it after creating it. For example, you can use <code>append()</code> to add new items:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">beatles<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Adrian&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>And there’s nothing stopping you from adding items more than once:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">beatles<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Allen&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">beatles<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Adrian&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">beatles<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Novall&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">beatles<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Vivian&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, Swift does watch the kind of data you’re trying to add, and will make sure your array only ever contains one type of data at a time. So, this kind of code <a href="https://twitter.com/MuseumShuffle/status/1444267345103532032?s=20" target="_blank" rel="noopener noreferrer">isn’t allowed</a>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">temperatures<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Chris&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This also applies to reading data out of the array – Swift knows that the <code>beatles</code> array contains strings, so when you read one value out you’ll always get a string. If you try to do the same with <code>numbers</code>, you’ll always get an integer. Swift won’t let you mix these two different types together, so this kind of code isn’t allowed:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> firstBeatle <span class="token operator">=</span> beatles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">let</span> firstNumber <span class="token operator">=</span> numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">let</span> notAllowed <span class="token operator">=</span> firstBeatle <span class="token operator">+</span> firstNumber</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is type safety, just like how Swift won’t let us mix integers and decimals, except it’s taken to a deeper level. Yes, all <code>beatles</code> and <code>numbers</code> are both arrays, but they are specialized types of arrays: one is an array of strings, and one is an array of integers.</p><p>You can see this more clearly when you want to start with an empty array and add items to it one by one. This is done with very precise syntax:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> scores <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token class-name">Int</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">scores<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">scores<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span></span>
<span class="line">scores<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">85</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We’ve covered the last four lines already, but that first line shows how we have a specialized array type – this isn’t just any array, it’s an array that holds integers. This is what allows Swift to know for sure that <code>beatles[0]</code> must always be a string, and also what stops us from adding integers to a string array.</p><p>The open and closing parentheses after <code>Array&lt;Int&gt;</code> are there because it’s possible to customize the way the array is created if you need to. For example, you might want to fill the array with lots of temporary data before adding the real stuff later on.</p><p>You can make other kinds of array by specializing it in different ways, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> albums <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">albums<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Folklore&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">albums<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Fearless&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">albums<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Red&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Again, we’ve said that must always contain strings, so we can’t try to put an integer in there.</p><p>Arrays are so common in Swift that there’s a special way to create them: rather than writing <code>Array&lt;String&gt;</code>, you can instead write <code>[String]</code>. So, this kind of code is exactly the same as before:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> albums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">albums<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Folklore&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">albums<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Fearless&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">albums<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Red&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Swift’s type safety means that it must always know what type of data an array is storing. That might mean being explicit by saying <code>albums</code> is an <code>Array&lt;String&gt;</code>, but if you provide some initial values Swift can figure it out for itself:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> albums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Folklore&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line">albums<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Fearless&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">albums<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Red&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Before we’re done, I want to mention some useful functionality that comes with arrays.</p><p>First, you can use <code>.count</code> to read how many items are in an array, just like you did with strings:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span>albums<span class="token punctuation">.</span>count<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Second, you can remove items from an array by using either <code>remove(at:)</code> to remove one item at a specific index, or <code>removeAll()</code> to remove everything:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> characters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Lana&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Pam&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Ray&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Sterling&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>characters<span class="token punctuation">.</span>count<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">characters<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>characters<span class="token punctuation">.</span>count<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">characters<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>characters<span class="token punctuation">.</span>count<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That will print 4, then 3, then 0 as characters are removed.</p><p>Third, you can check whether an array contains a particular item by using <code>contains()</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> bondMovies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Casino Royale&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Spectre&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;No Time To Die&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>bondMovies<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Frozen&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Fourth, you can sort an array using <code>sorted()</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> cities <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;London&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Tokyo&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Rome&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Budapest&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>cities<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>That returns a new array with its items sorted in ascending order, which means alphabetically for strings but numerically for numbers – the original array remains unchanged.</p><p>Finally, you can reverse an array by calling <code>reversed()</code> on it:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> presidents <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Bush&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Obama&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Trump&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Biden&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">let</span> reversedPresidents <span class="token operator">=</span> presidents<span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>reversedPresidents<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tip: When you reverse an array, Swift is very clever – it doesn’t actually do the work of rearranging all the items, but instead just remembers to itself that you want the items to be reversed. So, when you print out <code>reversedPresidents</code>, don’t be surprised to see it’s not just a simple array any more!</p><p>Arrays are extremely common in Swift, and you’ll have lots of opportunity to learn more about them as you progress. Even better <code>sorted()</code>, <code>reversed()</code>, and lots of other array functionality also exists for strings – using <code>sorted()</code> there puts the string’s letters in alphabetical order, making something like “swift” into “fistw”.</p>`,45),H=t('<div class="hint-container info"><p class="hint-container-title">1. How to store ordered data in arrays - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-have-arrays" target="_blank" rel="noopener noreferrer">Why does Swift have arrays?</a></li><li>Test: <a href="https://hackingwithswift.com/review/sixty/arrays" target="_blank" rel="noopener noreferrer">Arrays</a></li></ul></div><h3 id="_2-how-to-store-and-find-data-in-dictionaries" tabindex="-1"><a class="header-anchor" href="#_2-how-to-store-and-find-data-in-dictionaries"><span>2. How to store and find data in dictionaries</span></a></h3>',2),F={class:"hint-container details"},I=s("summary",null,"2. How to store and find data in dictionaries",-1),W=t(`<p>You’ve seen how arrays are a great way to store data that has a particular order, such as days of the week or temperatures for a city. Arrays are a great choice when items should be stored in the order you add them, or when you might have duplicate items in there, but very often accessing data by its position in the array can be annoying or even dangerous.</p><p>For example, here’s an array containing an employee’s details:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> employee <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Taylor Swift&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Singer&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Nashville&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>I’ve told you that the data is about an employee, so you might be able to guess what various parts do:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Name: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">employee<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Job title: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">employee<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Location: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">employee<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But that has a couple of problems. First, you can’t really be sure that <code>employee[2]</code> is their location – maybe that’s their password. Second, there’s no guarantee that item 2 is even there, particularly because we made the array a variable. This kind of code would cause serious problems:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Name: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">employee<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">employee<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Job title: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">employee<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Location: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">employee<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That now prints Nashville as the job title, which is wrong, and will cause our code to crash when it reads <code>employee[2]</code>, which is just bad.</p><p>Swift has a solution for both these problems, called dictionaries. Dictionaries don’t store items according to their position like arrays do, but instead let us decide where items should be stored.</p><p>For example, we could rewrite our previous example to be more explicit about what each item is:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> employee2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Taylor Swift&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;job&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Singer&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;location&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Nashville&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If we split that up into individual lines you’ll get a better idea of what the code does:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> employee2 <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Taylor Swift&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;job&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Singer&quot;</span></span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;location&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Nashville&quot;</span></span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, we’re now being really clear: the name is Taylor Swift, the job is Singer, and the location is Nashville. Swift calls the strings on the left – name, job, and location – the <em>keys</em> to the dictionary, and the strings on the right are the <em>values</em>.</p><p>When it comes to reading data out from the dictionary, you use the same keys you used when creating it:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span>employee2<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>employee2<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;job&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>employee2<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;location&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you try that in a playground, you’ll see Xcode throws up various warnings along the lines of “Expression implicitly coerced from &#39;String?&#39; to &#39;Any’”. Worse, if you look at the output from your playground you’ll see it prints <code>Optional(&quot;Taylor Swift&quot;)</code> rather than just <code>Taylor Swift</code> – what gives?</p><p>Well, think about this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span>employee2<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;password&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>employee2<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;status&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>employee2<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;manager&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>All of that is valid Swift code, but we’re trying to read dictionary keys that don’t have a value attached to them. Sure, Swift could just crash here just like it will crash if you read an array index that doesn’t exist, but that would make it very hard to work with – at least if you have an array with 10 items you know it’s safe to read indices 0 through 9. (“Indices” is just the plural form of “index”, in case you weren’t sure.)</p><p>So, Swift provides an alternative: when you access data inside a dictionary, it will tell us “you might get a value back, but you might get back nothing at all.” Swift calls these optionals because the existence of data is <em>optional</em> - it might be there or it might not.</p><p>Swift will even warn you when you write the code, albeit in a rather obscure way – it will say “Expression implicitly coerced from &#39;String?&#39; to &#39;Any’”, but it will really mean “this data might not actually be there – are you sure you want to print it?”</p><p>Optionals are a pretty complex issue that we’ll be covering in detail later on, but for now I’ll show you a simpler approach: when reading from a dictionary, you can provide a <em>default</em> value to use if the key doesn’t exist.</p><p>Here’s how that looks:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span>employee2<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Unknown&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>employee2<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;job&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Unknown&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>employee2<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;location&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Unknown&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>All the examples have used strings for both the keys and values, but you can use other data types for either of them. For example, we could track which students have graduated from school using strings for names and Booleans for their graduation status:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> hasGraduated <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Eric&quot;</span></span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Maeve&quot;</span></span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string-literal"><span class="token string">&quot;Otis&quot;</span></span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or we could track years when Olympics took place along with their locations:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> olympics <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token number">2012</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;London&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">2016</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Rio de Janeiro&quot;</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token number">2021</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Tokyo&quot;</span></span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>olympics<span class="token punctuation">[</span><span class="token number">2012</span><span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Unknown&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can also create an empty dictionary using whatever explicit types you want to store, then set keys one by one:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> heights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">heights<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Yao Ming&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">229</span></span>
<span class="line">heights<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Shaquille O&#39;Neal&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">216</span></span>
<span class="line">heights<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;LeBron James&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">206</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice how we need to write <code>[String: Int]</code> now, to mean a dictionary with strings for its keys and integers for its values.</p><p>Because each dictionary item must exist at one specific key, dictionaries don’t allow duplicate keys to exist. Instead, if you set a value for a key that already exists, Swift will overwrite whatever was the previous value.</p><p>For example, if you were chatting with a friend about superheroes and supervillains, you might store them in a dictionary like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> archEnemies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">archEnemies<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Batman&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;The Joker&quot;</span></span></span>
<span class="line">archEnemies<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Superman&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Lex Luthor&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If your friend disagrees that The Joker is Batman’s arch-enemy, you can just rewrite that value by using the same key:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">archEnemies<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Batman&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Penguin&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Finally, just like arrays and the other data types we’ve seen so far, dictionaries come with some useful functionality that you’ll want to use in the future – <code>count</code> and <code>removeAll()</code> both exists for dictionaries, and work just like they do for arrays.</p>`,38),N=t('<div class="hint-container info"><p class="hint-container-title">2. How to store and find data in dictionaries - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-have-dictionaries-as-well-as-arrays" target="_blank" rel="noopener noreferrer">Why does Swift have dictionaries as well as arrays?</a></li><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-have-default-values-for-dictionaries" target="_blank" rel="noopener noreferrer">Why does Swift have default values for dictionaries?</a></li><li>Test: <a href="https://hackingwithswift.com/review/sixty/dictionaries" target="_blank" rel="noopener noreferrer">Dictionaries</a></li><li>Test: <a href="https://hackingwithswift.com/review/sixty/dictionary-default-values" target="_blank" rel="noopener noreferrer">Dictionary default values</a></li></ul></div><h3 id="_3-how-to-use-sets-for-fast-data-lookup" tabindex="-1"><a class="header-anchor" href="#_3-how-to-use-sets-for-fast-data-lookup"><span>3. How to use sets for fast data lookup</span></a></h3>',2),B={class:"hint-container details"},C=s("summary",null,"3. How to use sets for fast data lookup",-1),M=t(`<p>So far you’ve learned about two ways of collecting data in Swift: arrays and dictionaries. There is a third very common way to group data, called a set – they are similar to arrays, except you can’t add duplicate items, and they don’t store their items in a particular order.</p><p>Creating a set works much like creating an array: tell Swift what kind of data it will store, then go ahead and add things. There are two important differences, though, and they are best demonstrated using some code.</p><p>First, here’s how you would make a set of actor names:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> people <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Denzel Washington&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Tom Cruise&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Nicolas Cage&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Samuel L Jackson&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Notice how that actually creates an array first, then puts that array into the set? That’s intentional, and it’s the standard way of creating a set from fixed data. Remember, the set will automatically remove any duplicate values, and it won’t remember the exact order that was used in the array.</p><p>If you’re curious how the set has ordered the data, just try printing it out:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You might see the names in the original order, but you might also get a completely different order – the set just doesn’t care what order its items come in.</p><p>The second important difference when adding items to a set is visible when you add items individually. Here’s the code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> people <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">people<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Denzel Washington&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">people<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Tom Cruise&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">people<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Nicolas Cage&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">people<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Samuel L Jackson&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice how we’re using <code>insert()</code>? When we had an array of strings, we added items by calling <code>append()</code>, but that name doesn’t make sense here – we aren’t adding an item to the end of the set, because the set will store the items in whatever order it wants.</p><p>Now, you might think sets just sound like simplified arrays – after all, if you can’t have duplicates and you lose the order of your items, why not just use arrays? Well, both of those restrictions actually get turned into an advantage.</p><p>First, not storing duplicates is sometimes exactly what you want. There’s a reason I chose actors in the previous example: the Screen Actors Guild requires that all its members have a unique stage name to avoid confusion, which means that duplicates must never be allowed. For example, the actor Michael Keaton (Spider-Man Homecoming, Toy Story 3, Batman, and more) is actually named Michael Douglas, but because there was already a Michael Douglas in the guild (Avengers, Falling Down, Romancing the Stone, and more), he had to have a unique name.</p><p>Second, instead of storing your items in the exact order you specify, sets instead store them in a highly optimized order that makes it very fast to locate items. And the difference isn’t small: if you have an array of 1000 movie names and use something like <code>contains()</code> to check whether it contains “The Dark Knight” Swift needs to go through every item until it finds one that matches – that might mean checking all 1000 movie names before returning false, because The Dark Knight wasn’t in the array.</p><p>In comparison, calling <code>contains()</code> on a set runs so fast you’d struggle to measure it meaningfully. Heck, even if you had a million items in the set, or even 10 million items, it would still run instantly, whereas an array might take minutes or longer to do the same work.</p><p>Most of the time you’ll find yourself using arrays rather than sets, but sometimes – just sometimes – you’ll find that a set is exactly the right choice to solve a particular problem, and it will make otherwise slow code run in no time at all.</p><p><strong>Tip</strong>: Alongside <code>contains()</code>, you’ll also find <code>count</code> to read the number of items in a set, and <code>sorted()</code> to return a sorted array containing the the set’s items.</p>`,17),R=t('<div class="hint-container info"><p class="hint-container-title">3. How to use sets for fast data lookup - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-are-sets-different-from-arrays-in-swift" target="_blank" rel="noopener noreferrer">Why are sets different from arrays in Swift?</a></li><li>Test: <a href="https://hackingwithswift.com/review/sixty/sets" target="_blank" rel="noopener noreferrer">Sets</a></li></ul></div><h3 id="_4-how-to-create-and-use-enums" tabindex="-1"><a class="header-anchor" href="#_4-how-to-create-and-use-enums"><span>4. How to create and use enums</span></a></h3>',2),O={class:"hint-container details"},U=s("summary",null,"4. How to create and use enums",-1),z=t(`<p>An enum – short for <em>enumeration</em> – is a set of named values we can create and use in our code. They don’t have any special meaning to Swift, but they are more efficient and safer, so you’ll use them a lot in your code.</p><p>To demonstrate the problem, let’s say you wanted to write some code to let the user select a day of the week. You might start out like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> selected <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Monday&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Later on in your code you change it, like so:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">selected <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Tuesday&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That might work well in very simple programs, but take a look at this code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">selected <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;January&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Oops! You accidentally typed in a month rather than a day – what will your code do? Well, you might be lucky enough to have a colleague spot the error as they review your code, but how about this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">selected <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Friday &quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That has a space at the end of Friday, and “Friday ” with a space is different from “Friday” without a space in Swift’s eyes. Again, what would your code do?</p><p>Using strings for this kind of thing takes some very careful programming, but it’s also pretty inefficient – do we really need to store all the letters of “Friday” to track one single day?</p><p>This is where enums come in: they let us define a new data type with a handful of specific values that it can have. Think of a Boolean, that can only have true or false – you can’t set it to “maybe” or “probably”, because that isn’t in the range of values it understands. Enums are the same: we get to list up front the range of values it can have, and Swift will make sure you never make a mistake using them.</p><p>So, we could rewrite our weekdays into a new enum like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">Weekday</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> monday</span>
<span class="line">    <span class="token keyword">case</span> tuesday</span>
<span class="line">    <span class="token keyword">case</span> wednesday</span>
<span class="line">    <span class="token keyword">case</span> thursday</span>
<span class="line">    <span class="token keyword">case</span> friday</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That calls the new enum <code>Weekday</code>, and provides five cases to handle the five weekdays.</p><p>Now rather than using strings, we would use the enum. Try this in your playground:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> day <span class="token operator">=</span> <span class="token class-name">Weekday</span><span class="token punctuation">.</span>monday</span>
<span class="line">day <span class="token operator">=</span> <span class="token class-name">Weekday</span><span class="token punctuation">.</span>tuesday</span>
<span class="line">day <span class="token operator">=</span> <span class="token class-name">Weekday</span><span class="token punctuation">.</span>friday</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With that change you can’t accidentally use “Friday ” with an extra space in there, or put a month name instead – you must always choose one of the possible days listed in the enum. You’ll even see Swift offer up all possible options when you’ve typed <code>Weekday.</code>, because it knows you’re going to select one of the cases.</p><p>Swift does two things that make enums a little easier to use. First, when you have many cases in an enum you can just write <code>case</code> once, then separate each case with a comma:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">Weekday</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> monday<span class="token punctuation">,</span> tuesday<span class="token punctuation">,</span> wednesday<span class="token punctuation">,</span> thursday<span class="token punctuation">,</span> friday</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Second, remember that once you assign a value to a variable or constant, its data type becomes fixed – you can’t set a variable to a string at first, then an integer later on. Well, for enums this means you can skip the enum name after the first assignment, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> day <span class="token operator">=</span> <span class="token class-name">Weekday</span><span class="token punctuation">.</span>monday</span>
<span class="line">day <span class="token operator">=</span> <span class="token punctuation">.</span>tuesday</span>
<span class="line">day <span class="token operator">=</span> <span class="token punctuation">.</span>friday</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Swift knows that <code>.tuesday</code> must refer to <code>Weekday.tuesday</code> because day must always be some kind of <code>Weekday</code>.</p><p>Although it isn’t visible here, one major benefit of enums is that Swift stores them in an optimized form – when we say <code>Weekday.monday</code> Swift is likely to store that using a single integer such as 0, which is much more efficient to store and check than the letters M, o, n, d, a, y.</p>`,24),E=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"4. How to create and use enums - Additional"),s("ul",null,[s("li",null,[a("Optional: "),s("a",{href:"https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-need-enums",target:"_blank",rel:"noopener noreferrer"},"Why does Swift need enums?")]),s("li",null,[a("Test: "),s("a",{href:"https://hackingwithswift.com/review/sixty/enumerations",target:"_blank",rel:"noopener noreferrer"},"Enumerations")])])],-1),J=s("p",null,"You’ve finished day three now, and you’re starting to write useful Swift code – make sure to tell the world about your progress!",-1),L=s("hr",null,null,-1);function Y(u,P){const e=c("router-link"),o=c("VPCard"),r=c("VidStack");return m(),k("div",null,[s("h1",y,[s("a",f,[s("span",null,h(u.$frontmatter.title)+" 관련",1)])]),s("nav",w,[s("ul",null,[s("li",null,[n(e,{to:"#complex-data-types-part-1"},{default:i(()=>[a("Complex data types, part 1")]),_:1}),s("ul",null,[s("li",null,[n(e,{to:"#_1-how-to-store-ordered-data-in-arrays"},{default:i(()=>[a("1. How to store ordered data in arrays")]),_:1})]),s("li",null,[n(e,{to:"#_2-how-to-store-and-find-data-in-dictionaries"},{default:i(()=>[a("2. How to store and find data in dictionaries")]),_:1})]),s("li",null,[n(e,{to:"#_3-how-to-use-sets-for-fast-data-lookup"},{default:i(()=>[a("3. How to use sets for fast data lookup")]),_:1})]),s("li",null,[n(e,{to:"#_4-how-to-create-and-use-enums"},{default:i(()=>[a("4. How to create and use enums")]),_:1})])])])])]),v,n(o,p(l({title:"100 Days of SwiftUI - Day 3",desc:"Complex data types, part 1",link:"https://www.hackingwithswift.com/100/swiftui/3",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,q,x,_,S,j,s("details",T,[A,n(o,p(l({title:"100 Days of SwiftUI - Day 3 - 1. How to store ordered data in arrays",desc:"1. How to store ordered data in arrays",link:"https://hackingwithswift.com/quick-start/beginners/how-to-store-ordered-data-in-arrays",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(r,{src:"youtube/K1jEskrHcyY"}),D]),H,s("details",F,[I,n(o,p(l({title:"100 Days of SwiftUI - Day 3 - 2. How to store and find data in dictionaries",desc:"2. How to store and find data in dictionaries",link:"https://hackingwithswift.com/quick-start/beginners/how-to-store-and-find-data-in-dictionaries",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(r,{src:"youtube/iM2lMBAckKg"}),W]),N,s("details",B,[C,n(o,p(l({title:"100 Days of SwiftUI - Day 3 - 3. How to use sets for fast data lookup",desc:"3. How to use sets for fast data lookup",link:"https://hackingwithswift.com/quick-start/beginners/how-to-use-sets-for-fast-data-lookup",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(r,{src:"youtube/9GjGRqK8LSw"}),M]),R,s("details",O,[U,n(o,p(l({title:"100 Days of SwiftUI - Day 3 - 4. How to create and use enums",desc:"4. How to create and use enums",link:"https://hackingwithswift.com/quick-start/beginners/how-to-create-and-use-enums",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(r,{src:"youtube/bwqbf-1_7gE"}),z]),E,J,L])}const G=d(g,[["render",Y],["__file","03.html.vue"]]),Z=JSON.parse('{"path":"/swift/100-days-of-swiftui/03.html","title":"Day 03","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 03","description":"100 Days of SwiftUI > Day 03","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 03"},{"property":"og:description","content":"Day 03"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/03.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/03.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 03"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 03"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 03\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Complex data types, part 1","slug":"complex-data-types-part-1","link":"#complex-data-types-part-1","children":[{"level":3,"title":"1. How to store ordered data in arrays","slug":"_1-how-to-store-ordered-data-in-arrays","link":"#_1-how-to-store-ordered-data-in-arrays","children":[]},{"level":3,"title":"2. How to store and find data in dictionaries","slug":"_2-how-to-store-and-find-data-in-dictionaries","link":"#_2-how-to-store-and-find-data-in-dictionaries","children":[]},{"level":3,"title":"3. How to use sets for fast data lookup","slug":"_3-how-to-use-sets-for-fast-data-lookup","link":"#_3-how-to-use-sets-for-fast-data-lookup","children":[]},{"level":3,"title":"4. How to create and use enums","slug":"_4-how-to-create-and-use-enums","link":"#_4-how-to-create-and-use-enums","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":9}]},"readingTime":{"minutes":14.06,"words":4217},"filePathRelative":"swift/100-days-of-swiftui/03.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{G as comp,Z as data};
