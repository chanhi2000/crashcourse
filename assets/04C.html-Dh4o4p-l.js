import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,a as e,t as p,b as t,n as m,g as u,d as s,e as o,r as n,o as h}from"./app-U_bew1in.js";const g={},b={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},_=e("nav",{class:"table-of-contents"},[e("ul")],-1),f=e("hr",null,null,-1),v=e("code",null,"Dockerfile",-1),y=e("code",null,"Dockerfile",-1),C=e("code",null,"example",-1),D=o(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> build <span class="token parameter variable">--tag</span> hello:0.1 <span class="token builtin class-name">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>docker build &lt;옵션&gt; &lt;Dockerfile 경로&gt;</code> 형식입니다. <code>--tag</code> 옵션으로 이미지 이름과 태그를 설정할 수 있습니다. 이미지 이름만 설정하면 태그는 <code>latest</code>로 설정됩니다.</p><p>잠시 기다리면 이미지 파일이 생성됩니다. 이미지 목록을 출력합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> images</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span></span>
<span class="line"><span class="token comment"># hello        0.1       8307ff628ec8   9 seconds ago   170MB</span></span>
<span class="line"><span class="token comment"># ubuntu       22.04     2dc39ba059dc   7 days ago      77.8MB</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>hello:0.1</code> 이미지가 생성되었습니다. 이제 실행을 해봅니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">--name</span> hello-nginx <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">-v</span> /root/data:/data hello:0.1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,6),T=o("<li><code>-d</code> 옵션은 컨테이너를 백그라운드로 실행합니다.</li><li><code>-p 80:80</code> 옵션으로 <strong>호스트의 80번 포트</strong>와 <strong>컨테이너의 80번 포트</strong>를 연결하고 외부에 노출합니다. 이렇게 설정한 뒤 <code>http://&lt;호스트 IP&gt;:80</code>에 접속하면 컨테이너의 <code>80</code>번 포트로 접속됩니다.</li>",2),x=e("code",null,"-v /root/data:/data",-1),w=e("code",null,"/root/data",-1),E=e("code",null,"/data",-1),I=e("code",null,"/root/data",-1),A=o(`<p>실행된 컨테이너 목록을 출력합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token function">ps</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># CONTAINER ID   IMAGE       COMMAND   CREATED          STATUS          PORTS                                        NAMES</span></span>
<span class="line"><span class="token comment"># 9f4bb4c4a3d8   hello:0.1   &quot;nginx&quot;   11 seconds ago   Up 10 seconds   0.0.0.0:80-&gt;80/tcp, :::80-&gt;80/tcp, 443/tcp   hello-nginx</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>hello-nginx</code> 컨테이너가 실행되었습니다.</p><p>웹 브라우저를 실행하고, <code>http://&lt;호스트 IP&gt;:80</code>으로 접속합니다. <strong>Welcome to nginx!</strong> 페이지가 표시될 것입니다.</p>`,4),R={class:"hint-container info"},S={class:"hint-container-title"},P=e("p",null,[s("웹 브라우저를 실행하고, "),e("code",null,"http://127.0.0.1"),s("로 접속합니다. "),e("strong",null,"Welcome to nginx!"),s(" 페이지가 표시될 것입니다.")],-1),M=e("hr",null,null,-1);function N(c,O){const i=n("VPCard"),l=n("SiteInfo"),a=n("FontIcon");return h(),d("div",null,[e("h1",b,[e("a",k,[e("span",null,p(c.$frontmatter.title)+" 관련",1)])]),t(i,m(u({title:"목차",desc:"언제나 최신 Docker",link:"/docker/always-up-to-date-docker/README.md",logo:"https://pyrasis.com/assets/images/pyrasis.png",background:"rgba(31,41,55,0.2)"})),null,16),_,f,t(l,{name:"4장 - 3. build 명령으로 이미지 생성하기",desc:"언제나 최신 Docker",url:"https://pyrasis.com/jHLsAlwaysUpToDateDocker/Unit04/03",logo:"https://pyrasis.com/assets/images/pyrasis.png",preview:"https://pyrasis.com/assets/images/profile1.png"}),e("p",null,[s("."),t(a,{icon:"fa-brands fa-docker"}),v,s("을 작성하였으면 이미지를 생성합니다. "),t(a,{icon:"fa-brands fa-docker"}),y,s("이 저장된 "),t(a,{icon:"fas fa-folder-open"}),C,s(" 디렉터리에서 다음 명령을 실행합니다.")]),D,e("ul",null,[T,e("li",null,[x,s(" 옵션으로 호스트의 "),t(a,{icon:"fas fa-folder-open"}),w,s(" 디렉터리를 컨테이너의 "),t(a,{icon:"fas fa-folder-open"}),E,s(" 디렉터리에 연결합니다. "),t(a,{icon:"fas fa-folder-open"}),I,s(" 디렉터리에 파일을 넣으면 컨테이너에서 해당 파일을 읽을 수 있습니다.")])]),A,e("div",R,[e("p",S,[t(a,{icon:"iconfont icon-macos"}),s("macOS, "),t(a,{icon:"fa-brands fa-windows"}),s("Windows에서 Docker Desktop을 사용한다면?")]),P]),M])}const V=r(g,[["render",N],["__file","04C.html.vue"]]),B=JSON.parse('{"path":"/docker/always-up-to-date-docker/04C.html","title":"04C. build 명령으로 이미지 생성하기","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"04C. build 명령으로 이미지 생성하기","description":"언제나 최신 Docker > 04C. build 명령으로 이미지 생성하기","category":["DevOps","Docker"],"tag":["crashcourse","pyrasis.com","docker","devops"],"head":[[{"meta":null},{"property":"og:title","content":"언제나 최신 Docker > 04C. build 명령으로 이미지 생성하기"},{"property":"og:description","content":"04C. build 명령으로 이미지 생성하기"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/docker/always-up-to-date-docker/04C.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/docker/always-up-to-date-docker/04C.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"04C. build 명령으로 이미지 생성하기"}],["meta",{"property":"og:description","content":"언제나 최신 Docker > 04C. build 명령으로 이미지 생성하기"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pyrasis.com/assets/images/profile1.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://pyrasis.com/assets/images/profile1.png"}],["meta",{"name":"twitter:image:alt","content":"04C. build 명령으로 이미지 생성하기"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"pyrasis.com"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:published_time","content":"2022-10-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"04C. build 명령으로 이미지 생성하기\\",\\"image\\":[\\"https://pyrasis.com/assets/images/profile1.png\\"],\\"datePublished\\":\\"2022-10-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]],"next":"/docker/always-up-to-date-docker/05.md","date":"2022-10-03T00:00:00.000Z","isOriginal":false,"cover":"https://pyrasis.com/assets/images/profile1.png"},"headers":[],"git":{"createdTime":1716977950000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":3}]},"readingTime":{"minutes":0.99,"words":297},"filePathRelative":"docker/always-up-to-date-docker/04C.md","localizedDate":"2022년 10월 3일","excerpt":"\\n"}');export{V as comp,B as data};
