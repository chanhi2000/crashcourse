import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,a as n,t as r,b as s,w as t,e as o,d as a,r as l,o as d}from"./app-U_bew1in.js";const k={},v={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},g={class:"table-of-contents"},h=o(`<hr><h2 id="_9장-디폴트-메서드" tabindex="-1"><a class="header-anchor" href="#_9장-디폴트-메서드"><span>9장 디폴트 메서드</span></a></h2><div class="hint-container info"><p class="hint-container-title">스터디에서 나온 내용</p><p>인터페이스를 구현한 클래스에서 바로 사용하기 위해 default 메서드를 사용하면 안된다. 인터페이스를 직접 사용하는 클라이언트가 쉽게 쓰기 위해 사용돼야 한다.</p><blockquote><p>e.g. <code>list.sort(Compator&lt;? super E&gt; c)</code></p></blockquote></div><p>그리고 만약 한 인터페이스를 구현한 클래스가 10개 있는데 그 중 2개는 인터페이스의 추상 메서드를 잘 안쓰고 빈 구현만 해놨다면 2개의 구현체가 그 인터페이스를 바라보고 있는게 올바른지 의심해볼 필요가 있다.(디폴트 메서드로 만들어서 빈 구현체를 없애는 게 아니라)</p><figure><img src="https://1371820085-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-Lej4tgjCgS0Wyj6JGe2%2F-Lf3aFiJ5iI8PxEdUh03%2F-Lf3aIeHCn7j3b1zbNOa%2Fjava8inaction_part3-1_1.jpg?generation=1558076576679077&amp;alt=media" alt="part3-1_1" tabindex="0" loading="lazy"><figcaption>part3-1_1</figcaption></figure><p>자바 8 이전에는 만약 인터페이스에 새로운 메서드를 정의하면</p><figure><img src="https://1371820085-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-Lej4tgjCgS0Wyj6JGe2%2F-Lf3aFiJ5iI8PxEdUh03%2F-Lf3aIeKDG0AS2_PXQtI%2Fjava8inaction_part3-1_2.jpg?generation=1558076576655807&amp;alt=media" alt="part3-1_2" tabindex="0" loading="lazy"><figcaption>part3-1_2</figcaption></figure><p>구현 클래스를 수정해줘야 했다.</p><p>그부분이 라이브러리 설계자 입장에서는 큰 제약이었다.</p><figure><img src="https://1371820085-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-Lej4tgjCgS0Wyj6JGe2%2F-Lf3aFiJ5iI8PxEdUh03%2F-Lf3aIeMe3iy4EySgIPY%2Fjava8inaction_part3-1_3.jpg?generation=1558076577125217&amp;alt=media" alt="part3-1_3" tabindex="0" loading="lazy"><figcaption>part3-1_3</figcaption></figure><p>특히 모두에게 공개된 API 경우, 사용자가 직접 구현한 클래스까지 설계자가 커버할 수 없다.</p><figure><img src="https://1371820085-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-Lej4tgjCgS0Wyj6JGe2%2F-Lf3aFiJ5iI8PxEdUh03%2F-Lf3aIeObdiHwR_CAwnC%2Fjava8inaction_part3-1_4.jpg?generation=1558076575880140&amp;alt=media" alt="part3-1_4" tabindex="0" loading="lazy"><figcaption>part3-1_4</figcaption></figure><p>그래서 새롭게 나온게 자바8 디폴트 메서드이다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">default</span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">StreamSupport</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">default</span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">StreamSupport</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Override</span></span>
<span class="line"><span class="token keyword">default</span> <span class="token class-name">Spliterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">Spliterators</span><span class="token punctuation">.</span><span class="token function">spliterator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://1371820085-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-Lej4tgjCgS0Wyj6JGe2%2F-Lf3aFiJ5iI8PxEdUh03%2F-Lf3aIeQ177FSEQBOdBi%2Fjava8inaction_part3-1_5.jpg?generation=1558076577975812&amp;alt=media" alt="part3-1_5" tabindex="0" loading="lazy"><figcaption>part3-1_5</figcaption></figure><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rawtypes&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">)</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> i <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> e <span class="token operator">:</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        i<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Effective Java 규칙 24</p><p>제거할 수 없는 경고 메세지는 형 안전성이 확실할 때만 <code>@SuppressWarings(“unchecked”)</code>를 사용해 억제해라. <code>Rawtypes</code>는 제너릭을 사용하는 클래스 매개 변수가 불특정일 때의 경고다. 3장에서 소개한 <code>Predicate</code>, <code>Function</code> 등 많은 함수형 인터페이스도 다양한 디폴트 메서드를 포함한다.</p></div><figure><img src="https://1371820085-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-Lej4tgjCgS0Wyj6JGe2%2F-Lf3aFiJ5iI8PxEdUh03%2F-Lf3aIeSklsIo53ZDPk5%2Fjava8inaction_part3-1_6.jpg?generation=1558076559806977&amp;alt=media" alt="part3-1_6" tabindex="0" loading="lazy"><figcaption>part3-1_6</figcaption></figure><figure><img src="https://1371820085-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-Lej4tgjCgS0Wyj6JGe2%2F-Lf3aFiJ5iI8PxEdUh03%2F-Lf3aIeUHBjdeE3ZPCaw%2Fjava8inaction_part3-1_7.jpg?generation=1558076585123050&amp;alt=media" alt="part3-1_7" tabindex="0" loading="lazy"><figcaption>part3-1_7</figcaption></figure><p><strong>함수형 인터페이스는 오직 하나의 추상 메서드를 포함한다. 디폴트 메서드는 추상 메서드에 해당하지 않는다는 점을 기억하자.</strong></p><h4 id="디폴트-메서드가-생기면서-들었던-의문" tabindex="-1"><a class="header-anchor" href="#디폴트-메서드가-생기면서-들었던-의문"><span>디폴트 메서드가 생기면서 들었던 의문</span></a></h4><ol><li>이렇게 되면 추상 클래스와 다른게 뭐지?</li><li>자바는 다중 상속을 허용안하는데 여러 디폴트 메서드를 상속받을 수 있게 되면서 다중 상속이 가능해진건가?</li></ol><h4 id="책에서-말하는-추상-클래스와-인터페이스의-차이점" tabindex="-1"><a class="header-anchor" href="#책에서-말하는-추상-클래스와-인터페이스의-차이점"><span>책에서 말하는 추상 클래스와 인터페이스의 차이점</span></a></h4><blockquote><p>문법적 차이만 설명함</p></blockquote><ol><li>클래스는 하나의 추상 클래스만 상속받을 수 있지만 인터페이스는 여러 개 구현할 수 있다.</li><li>추상 클래스는 인스턴스 변수로 공통 상태를 가질 수 있지만 인터페이스는 인스턴스 변수를 가질 수 없다.</li></ol><h4 id="_1-추상클래스-vs-인터페이스" tabindex="-1"><a class="header-anchor" href="#_1-추상클래스-vs-인터페이스"><span>1. 추상클래스 vs 인터페이스</span></a></h4><p>클린코더스 : 추상 클래스 대신 인터페이스를 써라. Extends는 비싸니까(한번밖에 사용불가능)</p><div class="hint-container info"><p class="hint-container-title">Effective Java 규칙 18</p><p>추상 클래스 대신 인터페이스를 사용하라.</p></div><h4 id="_2-다중-상속" tabindex="-1"><a class="header-anchor" href="#_2-다중-상속"><span>2. 다중 상속</span></a></h4><p>책에서는 다중 상속으로 프로그램에 유연성을 제공한다고 말한다.</p><h3 id="디폴트-메서드에-대해서-좀-더-자세히-알아보자" tabindex="-1"><a class="header-anchor" href="#디폴트-메서드에-대해서-좀-더-자세히-알아보자"><span>디폴트 메서드에 대해서 좀 더 자세히 알아보자.</span></a></h3><figure><img src="https://1371820085-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-Lej4tgjCgS0Wyj6JGe2%2F-Lf3aFiJ5iI8PxEdUh03%2F-Lf3aIeW1NEvkbHfCD8C%2Fjava8inaction_part3-1_8.jpg?generation=1558076574412611&amp;alt=media" alt="part3-1_8" tabindex="0" loading="lazy"><figcaption>part3-1_8</figcaption></figure><p>API버전 1(p291 ~ 292)에서 <code>Resizable</code> 인터페이스에 새로운 메서드가 추가되었다고 해보자.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Resizable</span> <span class="token keyword">extends</span> <span class="token class-name">Drawable</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">setAbsoluteSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//새롭게 추가</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">setRelativeSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> wFactor<span class="token punctuation">,</span> <span class="token keyword">int</span> hFactor<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="재컴파일-하면-에러가-발생한다" tabindex="-1"><a class="header-anchor" href="#재컴파일-하면-에러가-발생한다"><span>재컴파일 하면 에러가 발생한다.</span></a></h3><p>공개된 API를 고치면 기존 버전과의 호환성 문제가 발생한다.</p><div class="hint-container info"><p class="hint-container-title">Info</p><p>공개된 API란 거창한것이 아니라 <code>public</code>으로 만든 것들을 의미한다.</p></div><p>인터페이스에 메서드를 추가했을 때는 바이너리 호환성을 유지하지만 인터페이스를 구현하는 클래스를 재컴파일 하면 에러가 발생한다. 즉, <strong>다양한 호환성이 있다는 사실을 이해</strong> 해야 한다.</p><h4 id="바이너리-호환성" tabindex="-1"><a class="header-anchor" href="#바이너리-호환성"><span>바이너리 호환성</span></a></h4><p>뭔가를 바꾼 이후에도 에러 없이 기존 바이너리가 실행될 수 있는 상황.</p><blockquote><p>ex) 인터페이스에 메서드를 추가했을 때 추가된 메서드를 호출하지 않는 한 문제가 일어나지 않는데 이를 바이너리 호환성이라고 한다.</p></blockquote><h4 id="소스-호환성" tabindex="-1"><a class="header-anchor" href="#소스-호환성"><span>소스 호환성</span></a></h4><p>코드를 고쳐도 기존 프로그램을 성공적으로 재컴파일 할 수 있음.</p><blockquote><p>ex) 인터페이스에 메서드를 추가하면 소스 호환성이 아니다. 추가한 메서드를 구현하도록 클래스를 고쳐야 하기 때문이다. 디폴트 메서드로 만들면 소스 호환성이 유지된다.</p></blockquote><h4 id="동작-호환성" tabindex="-1"><a class="header-anchor" href="#동작-호환성"><span>동작 호환성</span></a></h4><p>코드를 바꾼 다음에도 같은 입력값이 주어지면 프로그램이 같은 동작을 실행한다는 의미.</p><blockquote><p>ex) 인터페이스에 메서드를 추가하더라도 프로그램에서 추가된 메서드를 호출할 일은 없으므로 동작 호환성은 유지된다.</p></blockquote><h3 id="디폴트-메서드-활용-패턴" tabindex="-1"><a class="header-anchor" href="#디폴트-메서드-활용-패턴"><span>디폴트 메서드 활용 패턴</span></a></h3><p><strong>선택형 메서드(optional method)</strong>: <code>Iterator</code>는 <code>hasNext</code>와 <code>next</code>뿐 아니라 <code>remove</code> 메서드도 정의하지만 사용자들이 <code>remove</code>는 잘 사용하지 않으므로 자바8 이전에는 <code>Iterator</code>를 구현하는 많은 클래스에서 <code>remove</code>에 빈 구현을 제공했다. 하지만 이제 디폴트 메서드를 이용하면 구현 클래스에서 빈 구현을 제공할 필요가 없어진다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"> 	<span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token class-name">E</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">&quot;remove&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="동작-다중-상속-multiple-inheritance-of-behavior" tabindex="-1"><a class="header-anchor" href="#동작-다중-상속-multiple-inheritance-of-behavior"><span>동작 다중 상속(multiple inheritance of behavior)</span></a></h3>`,51),b=o('<p>자바8에서는 인터페이스가 구현을 포함할 수 있으므로 클래스는 여러 인터페이스에서 동작을 상속받을 수 있다.</p><p><strong>옳지 못한 상속</strong> 상속으로 코드 재사용 문제를 모두 해결할 수 있는 것은 아니다.</p><p>예를 들어 한 개의 메서드를 재사용하려고 100개의 메서드와 필드가 정의되어 있는 클래스를 상속받는 것은 좋은 생각이 아니다. 이럴 때는 delegation(위임), 즉 멤버 변수를 이용해서 클래스에서 필요한 메서드를 직접 호출하는 메서드를 작성하는 것이 좋다.</p><p>종종 <code>final</code>로 선언된 클래스를 볼 수 있는데 (ex <code>String</code>) 다른 클래스가 상속다지 못하게 함으로써 원래 동작이 바뀌지않길 원할 때 쓴다. 이렇게 하면 다른 누군가가 그 클래스의 핵심 기능을 바꾸지 못하도록 제한할 수 있다.</p><h3 id="해석-규칙-같은-디폴트-메서드-시그너처가-있을-때-p302" tabindex="-1"><a class="header-anchor" href="#해석-규칙-같은-디폴트-메서드-시그너처가-있을-때-p302"><span>해석 규칙(같은 디폴트 메서드 시그너처가 있을 때) p302</span></a></h3><p>[해석규칙]</p><ol><li>클래스가 항상 이긴다. 클래스나 슈퍼클래스에서 정의한 메서드가 디폴트 메서드보다 우선권을 갖는다.</li><li>1번 규칙 이외의 상황에서는 서브 인터페이스가 이긴다. 상속관계를 갖는 인터페이스에서 같은 시그너처를 갖는 메서드를 정의할때는 서브인터페이스가 이긴다.</li><li>여전히 디폴트 메서드의 우선순위가 결정되지 않았다면 여러 인터페이스를 상속받는 클래스가 명시적으로 디폴트 메서드를 오버라이드하고 호출해야 한다.</li></ol><h4 id="q-컴파일러는-누구의-hello-메서드-정의를-사용할까" tabindex="-1"><a class="header-anchor" href="#q-컴파일러는-누구의-hello-메서드-정의를-사용할까"><span>Q) 컴파일러는 누구의 <code>hello</code> 메서드 정의를 사용할까?</span></a></h4>',8),f=n("blockquote",null,[n("p",null,"A) 정답은 B(2번 규칙에 의해서)")],-1),y=n("h4",{id:"q-컴파일러는-누구의-hello-메서드-정의를-사용할까-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#q-컴파일러는-누구의-hello-메서드-정의를-사용할까-1"},[n("span",null,[a("Q) 컴파일러는 누구의 "),n("code",null,"hello"),a(" 메서드 정의를 사용할까?")])])],-1),j=n("blockquote",null,[n("p",null,"A) 이것도 정답은 B(2번 규칙에 의해서)")],-1),w=n("h4",{id:"q-컴파일러는-누구의-hello-메서드-정의를-사용할까-2",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#q-컴파일러는-누구의-hello-메서드-정의를-사용할까-2"},[n("span",null,[a("Q) 컴파일러는 누구의 "),n("code",null,"hello"),a(" 메서드 정의를 사용할까?")])])],-1),_=n("blockquote",null,[n("p",null,"A) 정답은 D (1번 규칙, 클래스가 항상 이긴다)")],-1),x=n("h4",{id:"q-컴파일러는-누구의-hello-메서드-정의를-사용할까-3",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#q-컴파일러는-누구의-hello-메서드-정의를-사용할까-3"},[n("span",null,[a("Q) 컴파일러는 누구의 "),n("code",null,"hello"),a(" 메서드 정의를 사용할까?")])])],-1),F=o(`<blockquote><p>A) 이번에는 인터페이스 간에 상속관계가 없으므로 2번 규칙을 적용할 수 없다. 충돌을 해결하기 위해선 개발자가 직접 클래스 C에서 <code>s</code> 메서드를 오버라이드한 다음에 호출하려는 메서드를 <strong>명시적으로 선택해야 한다</strong>.</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">B</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">B</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="다이아몬드-문제" tabindex="-1"><a class="header-anchor" href="#다이아몬드-문제"><span>다이아몬드 문제</span></a></h3>`,3),C=o(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token keyword">implements</span> <span class="token class-name">B</span><span class="token punctuation">,</span><span class="token class-name">C</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">new</span> <span class="token class-name">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>A</code>만 디폴트 메서드를 정의하고 있다. 따라서 결국 프로그램 출력 결과는 <em>“Hello from A</em>”가 된다.</p>`,2),I=o(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token keyword">implements</span> <span class="token class-name">B</span><span class="token punctuation">,</span><span class="token class-name">C</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">new</span> <span class="token class-name">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="b에도-같은-시그너처의-디폴트-메서드가-있다면" tabindex="-1"><a class="header-anchor" href="#b에도-같은-시그너처의-디폴트-메서드가-있다면"><span>B에도 같은 시그너처의 디폴트 메서드가 있다면?</span></a></h4><p><code>B</code>는 <code>A</code>를 상속받으므로 2번 규칙에 따라 <code>B</code>가 선택된다.</p>`,3),S=o(`<p><code>B</code>와 <code>C</code>가 모두 디폴트 메서드 <code>hello</code> 메서드를 정의한다면 충돌이 발생하므로 이전에 설명한 것 처럼 둘 중 하나의 메서드를 명시적으로 호출해야 한다.</p><hr><h2 id="_10장-null-대신-optional" tabindex="-1"><a class="header-anchor" href="#_10장-null-대신-optional"><span>10장 null 대신 Optional</span></a></h2><p>값이 없는 상황에서 어떻게 처리할까?</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">// Person/Car/Insurance 데이터 모델 </span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">private</span> <span class="token class-name">Car</span> car<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> car<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">private</span> <span class="token class-name">Insurance</span> insurance<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token class-name">Insurance</span> <span class="token function">getInsurance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> insurance<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Insurance</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>첫 번째 방법으로는 deep doubt(깊은 의심)이 있다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCarInsuranceName</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>persion <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">Car</span> car <span class="token operator">=</span> persion<span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">if</span> <span class="token punctuation">(</span>car <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">			<span class="token class-name">Insurance</span> insurance <span class="token operator">=</span> car<span class="token punctuation">.</span><span class="token function">getInsurance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token keyword">if</span> <span class="token punctuation">(</span>insurance <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">				<span class="token keyword">return</span> insurance<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">			<span class="token punctuation">}</span></span>
<span class="line">		<span class="token punctuation">}</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token string">&quot;Unknown&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>두 번째 방법으로는 다양한 출구를 만드는 것이다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCarInsuranceName</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>person <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token string">&quot;Unknown&quot;</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token class-name">Car</span> car <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>car <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token string">&quot;Unknown&quot;</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token class-name">Insurance</span> insurance <span class="token operator">=</span> car<span class="token punctuation">.</span><span class="token function">getInsurance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>insurance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token string">&quot;Unknown&quot;</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line">	<span class="token keyword">return</span> insurance<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위 코드는 중첩 <code>if</code> 블록을 없앴지만 네 개의 출구가 생겼기 때문에 유지보수하기 힘들어진다.</p><p>그래서 자바8은 <code>java.util.Optional&lt;T&gt;</code>를 제공한다. <code>Optional</code>은 선택형값을 캡슐화하는 클래스다. <strong>값이 있으면 <code>Optional</code> 클래스는 값을 감싼다. 반면 값이 없으면 <code>Optional.empty</code> 메서드로 <code>Optional</code>을 반환한다.</strong> 즉, <code>Optional</code> 타입은 값이 없을 수 있음을 명시적으로 보여준다.</p><h4 id="빈-optional" tabindex="-1"><a class="header-anchor" href="#빈-optional"><span>빈 Optional</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">&gt;</span></span> optCar <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="null이-아닌-값으로-optional-만들기" tabindex="-1"><a class="header-anchor" href="#null이-아닌-값으로-optional-만들기"><span><code>null</code>이 아닌 값으로 <code>Optional</code> 만들기</span></a></h4><p><code>car</code>가 <code>null</code>이라면 즉시 NPE가 발생한다(<code>Optional</code>을 사용하지 않았다면 car의 프로퍼티에 접근하려 할 때 에러가 발생했을 것이다).</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">&gt;</span></span> optCar <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="null값으로-optional만들기" tabindex="-1"><a class="header-anchor" href="#null값으로-optional만들기"><span><code>null</code>값으로 <code>Optional</code>만들기</span></a></h4><p><code>null</code>값을 저장할 수 있는 <code>Optional</code>을 만들 수 있다. 만약 <code>car</code>가 <code>null</code>이면 빈 <code>Optional</code> 객체가 반환된다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">&gt;</span></span> optCar <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="flatmap으로-optional-객체-연결" tabindex="-1"><a class="header-anchor" href="#flatmap으로-optional-객체-연결"><span><code>flatMap</code>으로 <code>Optional</code> 객체 연결</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> optPerson <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> name </span>
<span class="line">	<span class="token operator">=</span> optPerson<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getCar</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Car</span><span class="token operator">::</span><span class="token function">getInsurance</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Insurance</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>위 코드는 컴파일 되지 않는다. 그 이유는 <code>optPerson.map(Person::getCar)</code>코드가 <code>Optional&lt;Optional&lt;Car&gt;&gt;</code>를 리턴하기 때문이다. 그래서 이 문제를 해결하기 위해서는 <code>flatMap</code>을 써야한다. 스트림의 <code>flatMap</code>은 함수를 인수로 받아서 다른 스트림을 반환하는 메서드다. 보통 인수로 받은 함수를 스트림의 각 요소에 적용하면 스트림의 스트림이 만들어진다. 하지만 <code>flatMap</code>은 인수로 받은 함수를 적용해서 생성된 각각의 스트림에서 콘텐츠만 남긴다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> optPerson <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> s <span class="token operator">=</span> optPerson</span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getCar</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">Car</span><span class="token operator">::</span><span class="token function">getInsurance</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Insurance</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>만약 <code>flatMap</code>을 빈 Optional에 호출하면 아무 일도 일어나지 않고 그대로 반환된다. 반면 <code>Optional</code>이 <code>Person</code>을 감싸고 있다면 <code>flatMap</code>에 전달된 <code>Function</code>이 <code>Person</code>에 적용된다. <code>Function</code>을 적용한 결과가 이미 <code>Optional</code>이므로 <code>flatMap</code> 메서드는 결과를 그대로 반환할 수 있다.</p><h4 id="도메인-모델에-optional을-사용했을-때-데이터를-직렬화-할-수-없는-이유" tabindex="-1"><a class="header-anchor" href="#도메인-모델에-optional을-사용했을-때-데이터를-직렬화-할-수-없는-이유"><span>도메인 모델에 <code>Optional</code>을 사용했을 때 데이터를 직렬화 할 수 없는 이유</span></a></h4><p><code>Optional</code> 클래스는 필드 형식으로 사용할 것을 가정하지 않았으므로 <code>Serializable</code> 인터페이스를 구현하지 않는다. 따라서 직렬화 모델이 필요하다면 Optional로 값을 반환받을 수 있는 메서드를 추가하는 방식을 권장한다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">private</span> <span class="token class-name">Car</span> car<span class="token punctuation">;</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Car</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCarAsOptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> <span class="token class-name">Optioanl</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="optional-인스턴스에서-값을-읽을-수-있는-다양한-인스턴스-메서드" tabindex="-1"><a class="header-anchor" href="#optional-인스턴스에서-값을-읽을-수-있는-다양한-인스턴스-메서드"><span><code>Optional</code> 인스턴스에서 값을 읽을 수 있는 다양한 인스턴스 메서드</span></a></h4><p><code>get()</code>은 값을 읽는 가장 간단한 메서드면서 동시에 가장 안전하지 않은 메서드다. 값이 있으면 해당 값을 반환하고 없으면 <code>NoSuchElementException</code>을 발생시킨다.</p><p><code>orElse(T other)</code>는 <code>Optional</code>이 값을 포함하지 않을 때 디폴트값을 제공할 수 있다.</p><p><code>orElseGet(Supplier&lt;? extends T&gt; other)</code>은 <code>Optional</code>에 값이 없을 때만 <code>Supplier</code>가 실행된다. 디폴트 메서드를 만드는데 시간이 오래걸리거나 <code>Optional</code>이 비어있을 때만 디폴트값을 생성하고 싶을 때 사용한다.</p><p><code>orElseThrow(Supplier&lt;? extends X&gt; exceptionSupplier)</code>는 <code>Optional</code>이 비어있을 때 예외를 발생시키는 점에서 <code>get</code> 메서드와 비슷하지만 이 메서드는 발생시킬 예외의 종류를 선택할 수 있다.</p><p><code>ifPresent(Consumer&lt;? super T&gt; consumer)</code>는 값이 존재할 때 인수로 넘겨준 동작을 실행할 수 있다. 값이 없으면 아무 일도 일어나지 않는다. 추가적으로 값이 존재하면 <code>true</code>를 반환하고 값이 없으면 <code>false</code>를 반환하는 <code>isPresent()</code>메서드도 있다.</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> consumer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">		consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filter로-특정값-거르기" tabindex="-1"><a class="header-anchor" href="#filter로-특정값-거르기"><span><code>filter</code>로 특정값 거르기</span></a></h3><p><code>Optional</code> 객체가 값을 가지며 프레디케이트와 일치하면 <code>filter</code> 메서드는 그 값을 반환하고 그렇지 않으면 빈 <code>Optional</code> 객체를 반환한다. <code>Optional</code>이 비어있다면 <code>filter</code> 연산은 아무 동작도 하지 않는다.</p><hr>`,37);function L(c,O){const e=l("router-link"),p=l("Mermaid");return d(),u("div",null,[n("h1",v,[n("a",m,[n("span",null,r(c.$frontmatter.title)+" 관련",1)])]),n("nav",g,[n("ul",null,[n("li",null,[s(e,{to:"#_9장-디폴트-메서드"},{default:t(()=>[a("9장 디폴트 메서드")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#디폴트-메서드에-대해서-좀-더-자세히-알아보자"},{default:t(()=>[a("디폴트 메서드에 대해서 좀 더 자세히 알아보자.")]),_:1})]),n("li",null,[s(e,{to:"#재컴파일-하면-에러가-발생한다"},{default:t(()=>[a("재컴파일 하면 에러가 발생한다.")]),_:1})]),n("li",null,[s(e,{to:"#디폴트-메서드-활용-패턴"},{default:t(()=>[a("디폴트 메서드 활용 패턴")]),_:1})]),n("li",null,[s(e,{to:"#동작-다중-상속-multiple-inheritance-of-behavior"},{default:t(()=>[a("동작 다중 상속(multiple inheritance of behavior)")]),_:1})]),n("li",null,[s(e,{to:"#해석-규칙-같은-디폴트-메서드-시그너처가-있을-때-p302"},{default:t(()=>[a("해석 규칙(같은 디폴트 메서드 시그너처가 있을 때) p302")]),_:1})]),n("li",null,[s(e,{to:"#다이아몬드-문제"},{default:t(()=>[a("다이아몬드 문제")]),_:1})])])]),n("li",null,[s(e,{to:"#_10장-null-대신-optional"},{default:t(()=>[a("10장 null 대신 Optional")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#flatmap으로-optional-객체-연결"},{default:t(()=>[a("flatMap으로 Optional 객체 연결")]),_:1})]),n("li",null,[s(e,{to:"#filter로-특정값-거르기"},{default:t(()=>[a("filter로 특정값 거르기")]),_:1})])])])])]),h,s(p,{id:"mermaid-191",code:"eJzFUssKAjEMvPsVOSqIXyALigcvXhR8HOsa10BtoY2CK/677bqtXRVBPXjMzHQySZNLYe2IRGHEvgUw0coyGuj1MpiipVKsJT7gE33EF/BUs+Aanx3UozRAqaxqHk3ODgEokJftDpDiUK6S0nrWFZ1Qre6Vky5ow7vm6zFSseOmxU2W2tSqFBqsrZYHxhmV6Imud4hsNQZpNVCFrOiYocmEvpc4rl/Er6P+FCD+ax2j33cKNFuRY5b9YZMoXdzjM3tPHM7oXeAvN7l31mNtqNSKhZSnJjNHw5SneLLGcMjvUn36SwDG4zhMGl4Bgu8bzQ=="}),b,s(p,{id:"mermaid-230",code:"eJxLzkksLnbJTEwvSszlUlBwVtDTs1NwArKcFHR17RQc4WIgFlixgqNCNZCtoGBjk5lXklqUlpicamcHFslIzcnJ19AEsmvhqp1IUu0MVZ2bmJmnEVxSlJmXHh0LUQIAch0sIw=="}),f,y,s(p,{id:"mermaid-239",code:"eJxLzkksLnbJTEwvSszlUlBwVtDTs1NwArKcFHR17RQc4WIQFkjMBchygYuBDVBwVKgGshUUbGwy80pSi9ISk1Pt7MAiGak5OfkamkB2LVy1E0mqnaGqcxMz8zSCS4oy89KjY1GVuChwAQAbvzJZ"}),j,w,s(p,{id:"mermaid-248",code:"eJxLzkksLnbJTEwvSszlUlBwVtDTs1NwArKcFHR17RQc4WIQFkjMBchygYuBDVBwVKgGshUUbGwy80pSi9ISk1Pt7MAiGak5OfkamkB2LVy1E0mqnaGqcxMz8zSCS4oy89KjY1GVuECVIGsHAJyINoo="}),_,x,s(p,{id:"mermaid-257",code:"eJxLzkksLnbJTEwvSszlUlBwVtDTs1NwgrMcgSywEgVHhWogW0HBxiYzryS1KC0xOdXODiySkZqTk6+hCWTXwlU7kaTaGao6NzEzTyO4pCgzLz06FqIEAEaoKn4="}),F,s(p,{id:"mermaid-267",code:"eJxLzkksLnbJTEwvSszlUlBwUdDTs1NwhrOcgCxnBV1dOwVHIMsJzgJrU3BUqAayFRRsbDLzSlKL0hKTU+3swCIZqTk5+RqaQHYtXLUTDtUIFc4EVbhAVeQmZuZpBJcUZeal6+npQewBACnANAU="}),C,s(p,{id:"mermaid-272",code:"eJxLzkksLnbJTEwvSszlUlBwUdDTs1NwhrOcgCxnBV1dOwVHIMsJzgJrU3BUqAayFRRsbDLzSlKL0hKTU+3swCIZqTk5+RqaQHYtXLUTSaqdcahGqHCBqshNzMzTCC4pysxL19PTg5gCAJiPNvQ="}),I,s(p,{id:"mermaid-280",code:"eJyVy0EKgCAUhOF9p5hlLXonCCH1Bp3gEVaCGai76O6JhXt3H8M/q+MYteU98NkBGkQCqkpmKYyjwJwlq8oNM+5sYJqsTyZsvBohynIY565+yH5qLZtq1VTrvz7Z+n5JwfqdiL7mBTbTOeM="}),S])}const E=i(k,[["render",L],["__file","3-1.html.vue"]]),P=JSON.parse('{"path":"/java/java-8-in-action/3-1.html","title":"Part 3-1 효과적인 자바8 프로그래밍","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Part 3-1 효과적인 자바8 프로그래밍","description":"Java 8 in Action > Part 3-1 효과적인 자바8 프로그래밍","category":["Java"],"tag":["crashcourse","java","jdk","jdk8"],"head":[[{"meta":null},{"property":"og:title","content":"Java 8 in Action > Part 3-1 효과적인 자바8 프로그래밍"},{"property":"og:description","content":"Part 3-1 효과적인 자바8 프로그래밍"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/java/java-8-in-action/3-1.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/java/java-8-in-action/3-1.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Part 3-1 효과적인 자바8 프로그래밍"}],["meta",{"property":"og:description","content":"Java 8 in Action > Part 3-1 효과적인 자바8 프로그래밍"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://1371820085-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-Lej4tgjCgS0Wyj6JGe2%2F-Lf3aFiJ5iI8PxEdUh03%2F-Lf3aIeHCn7j3b1zbNOa%2Fjava8inaction_part3-1_1.jpg?generation=1558076576679077&alt=media"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"jdk"}],["meta",{"property":"article:tag","content":"jdk8"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Part 3-1 효과적인 자바8 프로그래밍\\",\\"image\\":[\\"https://1371820085-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-Lej4tgjCgS0Wyj6JGe2%2F-Lf3aFiJ5iI8PxEdUh03%2F-Lf3aIeHCn7j3b1zbNOa%2Fjava8inaction_part3-1_1.jpg?generation=1558076576679077&alt=media\\",\\"https://1371820085-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-Lej4tgjCgS0Wyj6JGe2%2F-Lf3aFiJ5iI8PxEdUh03%2F-Lf3aIeKDG0AS2_PXQtI%2Fjava8inaction_part3-1_2.jpg?generation=1558076576655807&alt=media\\",\\"https://1371820085-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-Lej4tgjCgS0Wyj6JGe2%2F-Lf3aFiJ5iI8PxEdUh03%2F-Lf3aIeMe3iy4EySgIPY%2Fjava8inaction_part3-1_3.jpg?generation=1558076577125217&alt=media\\",\\"https://1371820085-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-Lej4tgjCgS0Wyj6JGe2%2F-Lf3aFiJ5iI8PxEdUh03%2F-Lf3aIeObdiHwR_CAwnC%2Fjava8inaction_part3-1_4.jpg?generation=1558076575880140&alt=media\\",\\"https://1371820085-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-Lej4tgjCgS0Wyj6JGe2%2F-Lf3aFiJ5iI8PxEdUh03%2F-Lf3aIeQ177FSEQBOdBi%2Fjava8inaction_part3-1_5.jpg?generation=1558076577975812&alt=media\\",\\"https://1371820085-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-Lej4tgjCgS0Wyj6JGe2%2F-Lf3aFiJ5iI8PxEdUh03%2F-Lf3aIeSklsIo53ZDPk5%2Fjava8inaction_part3-1_6.jpg?generation=1558076559806977&alt=media\\",\\"https://1371820085-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-Lej4tgjCgS0Wyj6JGe2%2F-Lf3aFiJ5iI8PxEdUh03%2F-Lf3aIeUHBjdeE3ZPCaw%2Fjava8inaction_part3-1_7.jpg?generation=1558076585123050&alt=media\\",\\"https://1371820085-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-Lej4tgjCgS0Wyj6JGe2%2F-Lf3aFiJ5iI8PxEdUh03%2F-Lf3aIeW1NEvkbHfCD8C%2Fjava8inaction_part3-1_8.jpg?generation=1558076574412611&alt=media\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"9장 디폴트 메서드","slug":"_9장-디폴트-메서드","link":"#_9장-디폴트-메서드","children":[{"level":3,"title":"디폴트 메서드에 대해서 좀 더 자세히 알아보자.","slug":"디폴트-메서드에-대해서-좀-더-자세히-알아보자","link":"#디폴트-메서드에-대해서-좀-더-자세히-알아보자","children":[]},{"level":3,"title":"재컴파일 하면 에러가 발생한다.","slug":"재컴파일-하면-에러가-발생한다","link":"#재컴파일-하면-에러가-발생한다","children":[]},{"level":3,"title":"디폴트 메서드 활용 패턴","slug":"디폴트-메서드-활용-패턴","link":"#디폴트-메서드-활용-패턴","children":[]},{"level":3,"title":"동작 다중 상속(multiple inheritance of behavior)","slug":"동작-다중-상속-multiple-inheritance-of-behavior","link":"#동작-다중-상속-multiple-inheritance-of-behavior","children":[]},{"level":3,"title":"해석 규칙(같은 디폴트 메서드 시그너처가 있을 때) p302","slug":"해석-규칙-같은-디폴트-메서드-시그너처가-있을-때-p302","link":"#해석-규칙-같은-디폴트-메서드-시그너처가-있을-때-p302","children":[]},{"level":3,"title":"다이아몬드 문제","slug":"다이아몬드-문제","link":"#다이아몬드-문제","children":[]}]},{"level":2,"title":"10장 null 대신 Optional","slug":"_10장-null-대신-optional","link":"#_10장-null-대신-optional","children":[{"level":3,"title":"flatMap으로 Optional 객체 연결","slug":"flatmap으로-optional-객체-연결","link":"#flatmap으로-optional-객체-연결","children":[]},{"level":3,"title":"filter로 특정값 거르기","slug":"filter로-특정값-거르기","link":"#filter로-특정값-거르기","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":5}]},"readingTime":{"minutes":3.71,"words":1113},"filePathRelative":"java/java-8-in-action/3-1.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n<!-- https://yangbongsoo.gitbook.io/study/java8-in-action/part3-1_effective_java8_programming -->\\n<h2>9장 디폴트 메서드</h2>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">스터디에서 나온 내용</p>\\n<p>인터페이스를 구현한 클래스에서 바로 사용하기 위해 default 메서드를 사용하면 안된다. 인터페이스를 직접 사용하는 클라이언트가 쉽게 쓰기 위해 사용돼야 한다.</p>\\n<blockquote>\\n<p>e.g. <code>list.sort(Compator&lt;? super E&gt; c)</code></p>\\n</blockquote>\\n</div>"}');export{E as comp,P as data};
