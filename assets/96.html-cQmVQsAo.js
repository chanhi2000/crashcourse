import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as s,t as k,b as n,w as i,n as o,g as l,e as p,d as a,r,o as w}from"./app-U_bew1in.js";const v={},m={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},b={class:"table-of-contents"},y=s("hr",null,null,-1),f=p('<h2 id="project-19-part-1" tabindex="-1"><a class="header-anchor" href="#project-19-part-1"><span>Project 19, part 1</span></a></h2><p>Although all our projects so far <em>work</em> on iPads, we haven’t really taken the time to stop and focus on it in any depth. Well, that changes in our new project because we’re going to be building an app that takes advantage of all the extra space iPads offer, and even takes advantage of the space offered by Max-sized iPhones in landscape orientation.</p><p>Even though Apple forked iOS into iPadOS in 2019, iPads and iPhones are almost identical in terms of their software. This means we can write code that works on both platforms at the same time, making only a handful of changes to really make the most of each environment.</p><p>When Steve Jobs launched the first iPad back in 2010 he said, “because we already shipped over 75 million iPhones, there are already 75 million users who know how to use the iPad.” This means users benefit from the similarity of the two platforms as well, because they instantly know how to use our apps on iPad thanks to existing usage on iPhone.</p><p>Although a custom user interface can look and feel great, never under-estimated the power of this built-in knowledge!</p><p><strong>Today you have four topics to work through, in which you’ll learn about split view controllers, binding an alert to an optional, and using groups for flexible layout.</strong></p><h3 id="snowseeker-introduction" tabindex="-1"><a class="header-anchor" href="#snowseeker-introduction"><span>SnowSeeker: Introduction</span></a></h3>',7),S={class:"hint-container details"},x=s("summary",null,"SnowSeeker: Introduction",-1),_=s("p",null,"In this project we’re going to create SnowSeeker: an app to let users browse ski resorts around the world, to help them find one suitable for their next holiday.",-1),U=s("p",null,"This will be the first app where we specifically aim to make something that works great on iPad by showing two views side by side, but you’ll also get deep into solving problematic layouts, learn a new way to show sheets and alerts, and more.",-1),T=s("p",null,"As always we have some techniques to cover before getting into the main project, so please create a new iOS project using the App template, calling it SnowSeeker.",-1),q=s("p",null,"Let’s go!",-1),V=s("h3",{id:"working-with-two-side-by-side-views-in-swiftui",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#working-with-two-side-by-side-views-in-swiftui"},[s("span",null,"Working with two side by side views in SwiftUI")])],-1),I={class:"hint-container details"},P=s("summary",null,"Working with two side by side views in SwiftUI",-1),j=p(`<p>You might not have realized it, but one of the smartest, simplest ways that our apps adapt to varying screen sizes is actually baked right in to <code>NavigationView</code>.</p><p>You’re already familiar with the basic usage of <code>NavigationView</code>, which allows us to create views like this one:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">NavigationView</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, world!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Primary&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, what you see when that runs depends on several factors. If you’re using an iPhone in portrait then you’ll see the layout you’ve come to expect: a large “Primary” title at the top, then a small “Hello, world!” centered in the space below.</p><p>If you rotate that same phone to landscape, then you’ll see one of two things: on the majority of iPhones the navigation title will shrink away to small text so that it takes up less space, but on max-sized iPhones, such as the iPhone 13 Pro Max, you’ll see that our title becomes a blue button in the top-left corner, leaving the whole rest of the screen clear. <em>Tapping</em> that button makes the “Hello, world!” text slide in from the leading edge, where you’ll also see the “Primary” title at the top.</p><p>On iPad things get even cleverer, because the system will select from three different layouts depending on the device’s size and the available screen space. For example, if we were using a 12.9-inch iPad Pro in landscape, then:</p><ol><li>If our app has the whole screen to itself, you’ll see the “Hello, world!” view visible on the left, with nothing on the right.</li><li>If the app has very little space, it will look just like a long iPhone in portrait.</li><li>For other sizes, you’re likely to see the “Primary” button visible, which causes the “Hello, world!” text to slide in when pressed.</li></ol><p>What you’re seeing here is called <em>adaptive layout</em>, and it’s used in many of Apple’s apps such as Notes, Mail, and more. It allows iOS to make best use of available screen space without us needing to get involved.</p><p>What’s actually happening here is that iOS is giving us a primary/secondary layout: a primary view to act as navigation, such as selecting from a list of books we’ve read or a list of Apollo missions, and a secondary view to act as further information, such as more details about a book or Apollo mission selected in the primary view.</p><p>In our trivial code example, SwiftUI interprets the single view inside our <code>NavigationView</code> as being the primary view in this primary/secondary layout. However, if we <em>do</em> provide two views then we get some really useful behavior out of the box. Try changing your view to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">NavigationView</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, world!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Primary&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Secondary&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When you launch the app what you see once again depends on your device and orientation, but on Max-sized phones and iPads you’ll see “Secondary”, with the Primary toolbar button bringing up the “Hello, world!” view.</p><p>SwiftUI automatically links the primary and secondary views, which means if you have a <code>NavigationLink</code> in the primary view it will automatically load its content in the secondary view:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">NavigationView</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">NavigationLink</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;New secondary&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> label<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, World!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Primary&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Secondary&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, right now at least, all this magic has a few drawbacks that I hope will be fixed in a future SwiftUI update:</p><ol><li>Detail views <em>always</em> get a navigation bar whether you want it or not, so you need to use <code>navigationBarHidden(true)</code> to hide it.</li><li>There’s no way of making the primary view stay visible even when there is more than enough space.</li><li>You can’t make the primary view shown in landscape by default; SwiftUI always chooses the detail.</li></ol><p><strong>Tip</strong>: You can even add a third view to <code>NavigationView</code>, which lets you create a sidebar. You’ll see these in apps such as Notes, where you can navigate up from from the list of notes to browse note folders. So, navigation links in the first view control the second view, and navigation links in the second view control the third view – it’s an extra level of organization for times when you need it.</p>`,17),z=s("h3",{id:"using-alert-and-sheet-with-optionals",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#using-alert-and-sheet-with-optionals"},[s("span",null,[a("Using "),s("code",null,"alert()"),a(" and "),s("code",null,"sheet()"),a(" with optionals")])])],-1),N={class:"hint-container details"},D=s("summary",null,"Using alert() and sheet() with optionals",-1),W=p(`<p>SwiftUI has two ways of creating alerts and sheets, and so far we’ve mostly only used one: a binding to a Boolean that shows the alert or sheet when the Boolean becomes true.</p><p>The <em>second</em> option allows us to bind an optional to the alert or sheet, and we used it briefly when presenting map pins. If you remember, the key is that we use an optional <code>Identifiable</code> object as the condition for showing the sheet, and the closure hands you the non-optional value that was used for the condition, so you can use it safely.</p><p>To demonstrate this, we could create a trivial <code>User</code> struct that conforms to the <code>Identifiable</code> protocol:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">User</span><span class="token punctuation">:</span> <span class="token class-name">Identifiable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Taylor Swift&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We could then create a property inside <code>ContentView</code> that tracks which user is selected, set to <code>nil</code> by default:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> selectedUser<span class="token punctuation">:</span> <span class="token class-name">User</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now we can change the <code>body</code> of <code>ContentView</code> so that it sets <code>selectedUser</code> to a value when its text view is tapped, then displays a sheet when <code>selectedUser</code> is given a value:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, World!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">{</span></span>
<span class="line">        selectedUser <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> $selectedUser<span class="token punctuation">)</span> <span class="token punctuation">{</span> user <span class="token keyword">in</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>id<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With that simple code, whenever you tap “Hello, World!” a sheet saying “Taylor Swift” appears. As soon as the sheet is dismissed, SwiftUI sets <code>selectedUser</code> back to <code>nil</code>.</p><p>This might seem like a simple piece of functionality, but it’s simpler and safer than the alternative. If we were to rewrite the above code using the old <code>.sheet(isPresented:)</code> modifier it would look like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> selectedUser<span class="token punctuation">:</span> <span class="token class-name">User</span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token nil constant">nil</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> isShowingUser <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, World!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">{</span></span>
<span class="line">                selectedUser <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                isShowingUser <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span>isPresented<span class="token punctuation">:</span> $isShowingUser<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span>selectedUser<span class="token operator">?</span><span class="token punctuation">.</span>id <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;Unknown&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That’s another property, another value to set in the <code>onTapGesture()</code>, and extra code to hand the optional in the <code>sheet()</code> modifier – if you can avoid those things you should.</p><p>Alerts have similar functionality, although you need to pass both the Boolean and optional <code>Identifiable</code> value at the same time. This allows you to show the alert when needed, but also benefit from the same optional unwrapping behavior we have with sheets:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Welcome&quot;</span></span><span class="token punctuation">,</span> isPresented<span class="token punctuation">:</span> $isShowingUser<span class="token punctuation">,</span> presenting<span class="token punctuation">:</span> selectedUser<span class="token punctuation">)</span> <span class="token punctuation">{</span> user <span class="token keyword">in</span></span>
<span class="line">    <span class="token class-name">Button</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With that covered, you now know practically all there is to know about sheets and alerts, but there is one last thing I want to sneak in to round out your knowledge.</p><p>You see, so far we’ve written lots of alerts like this one:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Welcome&quot;</span></span><span class="token punctuation">,</span> isPresented<span class="token punctuation">:</span> $isShowingUser<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;OK&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That OK button works because all actions dismiss the alert they belong to when they are tapped, and we’ve been using this approach so far because it gives you practice creating alerts and buttons.</p><p>However, I want to show you a neat shortcut. Try this code out:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Welcome&quot;</span></span><span class="token punctuation">,</span> isPresented<span class="token punctuation">:</span> $isShowingUser<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>When that runs you’ll see something interesting: <em>exactly the same result as before</em>, despite not having a dedicated OK button. SwiftUI spots that we don’t have any actions in the alert, so it adds a default one for us that has the title “OK” and will dismiss the alert when tapped.</p><p>Obviously this doesn’t work in situations where you need other buttons alongside OK, but for simple alerts it’s perfect.</p>`,22),C=s("h3",{id:"using-groups-as-transparent-layout-containers",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#using-groups-as-transparent-layout-containers"},[s("span",null,"Using groups as transparent layout containers")])],-1),H={class:"hint-container details"},O=s("summary",null,"Using groups as transparent layout containers",-1),M=p(`<p>SwiftUI’s <code>Group</code> view is commonly used to work around the 10-child view limit, but it also has another important behavior: it acts as a transparent layout container. This means the group doesn’t actually affect our layout at all, but still gives us the ability to add SwiftUI modifiers as needed, or send back multiple views without using <code>@ViewBuilder</code>.</p><p>For example, this <code>UserView</code> has a <code>Group</code> containing three text views:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">UserView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Group</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Name: Paul&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Country: England&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Pets: Luna and Arya&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That group contains no layout information, so we don’t know whether the three text fields will be stacked vertically, horizontally, or by depth. This is where the transparent layout behavior of <code>Group</code> becomes important: whatever parent places a <code>UserView</code> gets to decide how its text views get arranged.</p><p>For example, we could create a <code>ContentView</code> like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> layoutVertically <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Group</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> layoutVertically <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">UserView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">HStack</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">UserView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">{</span></span>
<span class="line">            layoutVertically<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That flips between vertical and horizontal layout every time the group is tapped, and again you see that using <code>Group</code> lets us attach the tap gesture to everything at once.</p><p>You might wonder how often you need to have alternative layouts like this, but the answer might surprise you: it’s really common! You see, this is exactly what you want to happen when trying to write code that works across multiple device sizes – if we want layout to happen vertically when horizontal space is constrained, but horizontally otherwise. Apple provides a very simple solution called <em>size classes</em>, which is a thoroughly vague way of telling us how much space we have for our views.</p><p>When I say “thoroughly vague” I mean it: we have only two size classes horizontally and vertically, called “compact” and “regular”. That’s it – that covers all screen sizes from the largest iPad Pro in landscape down to the smallest iPhone in portrait. That doesn’t mean it’s useless – far from it! – just that it only lets us reason about our user interfaces in the broadest terms.</p><p>To demonstrate size classes in action, we could create a view that has a property to track the current size class so we can switch between <code>VStack</code> and <code>HStack</code> automatically:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>horizontalSizeClass<span class="token punctuation">)</span> <span class="token keyword">var</span> sizeClass</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> sizeClass <span class="token operator">==</span> <span class="token punctuation">.</span>compact <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">UserView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">HStack</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">UserView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Tip</strong>: In situations like this, where you have only one view inside a stack and it doesn’t take any parameters, you can pass the view’s initializer directly to the <code>VStack</code> to make your code shorter:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> sizeClass <span class="token operator">==</span> <span class="token punctuation">.</span>compact <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">VStack</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token class-name">UserView</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">HStack</span><span class="token punctuation">(</span>content<span class="token punctuation">:</span> <span class="token class-name">UserView</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I know short code isn’t everything, but this technique is pleasingly concise when you’re using this approach to grouped view layout.</p><p>What you see when that code runs depends on the device you’re using. For example, an iPhone 13 Pro will have a compact horizontal size class in both portrait and landscape, whereas an iPhone 13 Pro Max will have a <em>regular</em> horizontal size class when in landscape.</p><p>Regardless of whether we’re toggling our layout using size classes or tap gestures, the point is that <code>UserView</code> just doesn’t care – its <code>Group</code> simply groups the text views together without affecting their layout at all, so the layout arrangement <code>UserView</code> is given depends entirely on how it’s used.</p>`,16),A=s("h3",{id:"making-a-swiftui-view-searchable",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#making-a-swiftui-view-searchable"},[s("span",null,"Making a SwiftUI view searchable")])],-1),B={class:"hint-container details"},G=s("summary",null,"Making a SwiftUI view searchable",-1),K=p(`<p>iOS can add a search bar to our views using the <code>searchable()</code> modifier, and we can bind a string property to it to filter our data as the user types.</p><p>To see how this works, try this simple example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> searchText <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">NavigationView</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Searching for </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">searchText</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">searchable</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> $searchText<span class="token punctuation">,</span> prompt<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Look for something&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Searching&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Important: You need to make sure your view is inside a <code>NavigationView</code>, otherwise iOS won’t have anywhere to put the search box.</p><p>When you run that code example, you should see a search bar you can type into, and whatever you type will be shown in the view below.</p><p>In practice, <code>searchable()</code> is best used with some kind of data filtering. Remember, SwiftUI will reinvoke your body property when an <code>@State</code> property changes, so you could use a computed property to handle the actual filtering:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> searchText <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line">    <span class="token keyword">let</span> allNames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Subh&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Vina&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Melvin&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Stefanie&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">NavigationView</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">List</span><span class="token punctuation">(</span>filteredNames<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> name <span class="token keyword">in</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">searchable</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> $searchText<span class="token punctuation">,</span> prompt<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Look for something&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Searching&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> filteredNames<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> searchText<span class="token punctuation">.</span>isEmpty <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> allNames</span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> allNames<span class="token punctuation">.</span>filter <span class="token punctuation">{</span> <span class="token short-argument">$0</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>searchText<span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When you run that, iOS will automatically hide the search bar at the very top of the list – you’ll need to pull down gently to reveal it, which matches the way other iOS apps work. iOS doesn’t <em>require</em> that we make our lists searchable, but it really makes a huge difference to users!</p><p>Tip: Rather than using <code>contains()</code> here, you probably want to use another method with a much longer name: <code>localizedCaseInsensitiveContains()</code>. That lets us check any part of the search strings, without worrying about uppercase or lowercase letters.</p>`,9),R=s("hr",null,null,-1);function Y(u,$){const e=r("router-link"),t=r("VPCard"),c=r("VidStack");return w(),h("div",null,[s("h1",m,[s("a",g,[s("span",null,k(u.$frontmatter.title)+" 관련",1)])]),s("nav",b,[s("ul",null,[s("li",null,[n(e,{to:"#project-19-part-1"},{default:i(()=>[a("Project 19, part 1")]),_:1}),s("ul",null,[s("li",null,[n(e,{to:"#snowseeker-introduction"},{default:i(()=>[a("SnowSeeker: Introduction")]),_:1})]),s("li",null,[n(e,{to:"#working-with-two-side-by-side-views-in-swiftui"},{default:i(()=>[a("Working with two side by side views in SwiftUI")]),_:1})]),s("li",null,[n(e,{to:"#using-alert-and-sheet-with-optionals"},{default:i(()=>[a("Using alert() and sheet() with optionals")]),_:1})]),s("li",null,[n(e,{to:"#using-groups-as-transparent-layout-containers"},{default:i(()=>[a("Using groups as transparent layout containers")]),_:1})]),s("li",null,[n(e,{to:"#making-a-swiftui-view-searchable"},{default:i(()=>[a("Making a SwiftUI view searchable")]),_:1})])])])])]),y,n(t,o(l({title:"100 Days of SwiftUI - Day 96",desc:"Project 19, part 1",link:"https://www.hackingwithswift.com/100/swiftui/96",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),f,s("details",S,[x,n(t,o(l({title:"100 Days of SwiftUI - Day 96 - SnowSeeker: Introduction",desc:"SnowSeeker: Introduction",link:"https://www.hackingwithswift.com/books/ios-swiftui/snowseeker-introduction",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),_,U,T,q]),V,s("details",I,[P,n(t,o(l({title:"100 Days of SwiftUI - Day 96 - Working with two side by side views in SwiftUI",desc:"Working with two side by side views in SwiftUI",link:"https://www.hackingwithswift.com/books/ios-swiftui/working-with-two-side-by-side-views-in-swiftui",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(c,{src:"youtube/jmT9XaJyEqM"}),j]),z,s("details",N,[D,n(t,o(l({title:"100 Days of SwiftUI - Day 96 - Using alert() and sheet() with optionals",desc:"Using alert() and sheet() with optionals",link:"https://www.hackingwithswift.com/books/ios-swiftui/using-alert-and-sheet-with-optionals",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(c,{src:"youtube/6RS8hbgptJQ"}),W]),C,s("details",H,[O,n(t,o(l({title:"100 Days of SwiftUI - Day 96 - Using groups as transparent layout containers",desc:"Using groups as transparent layout containers",link:"https://www.hackingwithswift.com/books/ios-swiftui/using-groups-as-transparent-layout-containers",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(c,{src:"youtube/IxjnKNpBl4s"}),M]),A,s("details",B,[G,n(t,o(l({title:"100 Days of SwiftUI - Day 96 - Making a SwiftUI view searchable",desc:"Making a SwiftUI view searchable",link:"https://www.hackingwithswift.com/books/ios-swiftui/making-a-swiftui-view-searchable",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(c,{src:"youtube/yOp1_d1QzLg"}),K]),R])}const F=d(v,[["render",Y],["__file","96.html.vue"]]),J=JSON.parse('{"path":"/swift/100-days-of-swiftui/96.html","title":"Day 96","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 96","description":"100 Days of SwiftUI > Day 96","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 96"},{"property":"og:description","content":"Day 96"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/96.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/96.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 96"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 96"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 96\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 19, part 1","slug":"project-19-part-1","link":"#project-19-part-1","children":[{"level":3,"title":"SnowSeeker: Introduction","slug":"snowseeker-introduction","link":"#snowseeker-introduction","children":[]},{"level":3,"title":"Working with two side by side views in SwiftUI","slug":"working-with-two-side-by-side-views-in-swiftui","link":"#working-with-two-side-by-side-views-in-swiftui","children":[]},{"level":3,"title":"Using alert() and sheet() with optionals","slug":"using-alert-and-sheet-with-optionals","link":"#using-alert-and-sheet-with-optionals","children":[]},{"level":3,"title":"Using groups as transparent layout containers","slug":"using-groups-as-transparent-layout-containers","link":"#using-groups-as-transparent-layout-containers","children":[]},{"level":3,"title":"Making a SwiftUI view searchable","slug":"making-a-swiftui-view-searchable","link":"#making-a-swiftui-view-searchable","children":[]}]}],"git":{"createdTime":1710143569000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":6}]},"readingTime":{"minutes":9.44,"words":2831},"filePathRelative":"swift/100-days-of-swiftui/96.md","localizedDate":"2024년 3월 11일","excerpt":"\\n\\n<hr>\\n"}');export{F as comp,J as data};
