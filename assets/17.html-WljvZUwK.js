import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as e,t as m,b as n,w as t,n as o,g as i,e as l,r,o as k,d as p}from"./app-U_bew1in.js";const w={},g={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},v={class:"table-of-contents"},b=e("hr",null,null,-1),y=l('<h2 id="project-1-part-two" tabindex="-1"><a class="header-anchor" href="#project-1-part-two"><span>Project 1, part two</span></a></h2><p>As Immanuel Kant said, “experience without theory is blind, but theory without experience is mere intellectual play.” Yesterday we covered almost all the techniques required to build this app, so now it’s time to turn all that head knowledge into a real, practical app.</p><p>One of the things I love about SwiftUI is how easily this transition from theory to practice is – there are no surprises lurking around the corner and no epic extra new things to learn along the way.</p><p>Sure, I’ll sneak in a couple of tiny things just to keep you on your toes, but for the most part you already know everything you need to build this project, so now it’s just a matter of seeing how things fit together.</p><p><strong>Today you have four topics to work through, in which you’ll apply your knowledge of <code>Form</code>, <code>@State</code>, <code>Picker</code>, and more.</strong></p><h3 id="reading-text-from-the-user-with-textfield" tabindex="-1"><a class="header-anchor" href="#reading-text-from-the-user-with-textfield"><span>Reading text from the user with <code>TextField</code></span></a></h3>',6),x={class:"hint-container details"},T=e("summary",null,"Reading text from the user with TextField",-1),S=l(`<p>We’re building a check-splitting app, which means users need to be able to enter the cost of their check, how many people are sharing the cost, and how much tip they want to leave.</p><p>Hopefully already you can see that means we need to add three <code>@State</code> properties, because there are three pieces of data we’re expecting users to enter into our app.</p><p>So, start by adding these three properties to our <code>ContentView</code> struct:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> checkAmount <span class="token operator">=</span> <span class="token number">0.0</span></span>
<span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> numberOfPeople <span class="token operator">=</span> <span class="token number">2</span></span>
<span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> tipPercentage <span class="token operator">=</span> <span class="token number">20</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, that gives us a default of 0.0 for the check amount, a default value of 2 for the number of people, and a default value of 20 for the tip percentage. Each of these properties have a sensible default: we don’t know how much the check will come to, but assuming two people and a 20% tip both seem like good starting points for the app.</p><p>Of course, some people prefer to leave a different percentage of tip, so we’re going to let them select values from a predetermined array of tip sizes. We need to store the list of possible tip sizes somewhere, so please add this fourth property beneath the previous three:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> tipPercentages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We’re going to build up the form step by step, starting with a text field where users can enter the value of their check. We’ll start with what you know already, but as you’ll see that won’t quite work right.</p><p>Modify the <code>body</code> property to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Form</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Section</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Amount&quot;</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> $checkAmount<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That isn’t going to work, and that’s okay. The problem is that SwiftUI likes <code>TextField</code> to be used for entering text – strings, that is. We <em>could</em> allow that here, but it would mean users could enter any kind of text, and we’d need to carefully convert that string to a number we can work with.</p><p>Fortunately, we can do better: we can pass our <code>Double</code> to <code>TextField</code> and ask it to treat the input as a currency, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Amount&quot;</span></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> $checkAmount<span class="token punctuation">,</span> format<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">currency</span><span class="token punctuation">(</span>code<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;USD&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That’s an improvement, but we can do even better. You see, that tells SwiftUI we want the currency formatted as US dollars, or USD for short, but given that over 95% of the world’s population don’t use US dollars as their currency we should probably not force “USD” on them.</p><p>A better solution is to ask iOS if it can give us the currency code for the current user, if there is one. This might be USD, but it might also be CAD (Canadian dollars), AUD (Australian dollars), JPY (Japanese Yen) and more – or it might not currently have a value, if the user hasn’t set one.</p><p>So, a better format to use is this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">currency</span><span class="token punctuation">(</span>code<span class="token punctuation">:</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>currencyCode <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;USD&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>Locale</code> is a massive struct built into iOS that is responsible for storing all the user’s region settings – what calendar they use, how they separate thousands digits in numbers, whether they use the metric system, and more. In our case, we’re asking whether the user has a preferred currency code, and if they don’t we’ll fall back to “USD” so at least we have <em>something</em>.</p><p>So far our code creates a scrolling entry form of one section, which in turn contains one row: our text field. When you create text fields in forms, the first parameter is a string that gets used as the <em>placeholder</em> – gray text shown in side the text field, giving users an idea of what should be in there. The second parameter is the two-way binding to our <code>checkAmount</code> property, which means as the user types that property will be updated. The third parameter here is the one that controls the way the text is formatted, making it a currency.</p><p>One of the great things about the <code>@State</code> property wrapper is that it automatically watches for changes, and when something happens it will automatically re-invoke the <code>body</code> property. That’s a fancy way of saying it will reload your UI to reflect the changed state, and it’s a fundamental feature of the way SwiftUI works.</p><p>To demonstrate this, we could add a second section with a text view showing the value of <code>checkAmount</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Form</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Section</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Amount&quot;</span></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> $checkAmount<span class="token punctuation">,</span> format<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">currency</span><span class="token punctuation">(</span>code<span class="token punctuation">:</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>currencyCode <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;USD&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Section</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span>checkAmount<span class="token punctuation">,</span> format<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">currency</span><span class="token punctuation">(</span>code<span class="token punctuation">:</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>currencyCode <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;USD&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That does almost exactly the same thing as our <code>TextField</code>: it asks SwiftUI to format the number as a currency, using either the system default or USD if nothing else is available. Later on in this project we’ll be using a different format style to show percentages – these text formatters are really helpful!</p><p>We’ll be making that show something else later on, but for now please run the app in the simulator so you can try it yourself.</p><p>Tap on the check amount text field, then enter an example amount such as 50. What you’ll see is that as you type the text view in the second section automatically and immediately reflects your actions.</p><p>This synchronization happens because:</p><ol><li>Our text field has a two-way binding to the <code>checkAmount</code> property.</li><li>The <code>checkAmount</code> property is marked with <code>@State</code>, which automatically watches for changes in the value.</li><li>When an <code>@State</code> property changes SwiftUI will re-invoke the <code>body</code> property (i.e., reload our UI)</li><li>Therefore the text view will get the updated value of <code>checkAmount</code>.</li></ol><p>The final project won’t show <code>checkAmount</code> in that text view, but it’s good enough for now. Before we move on, though, I want to address one important problem: when you tap to enter text into our text field, users see a regular alphabetical keyboard. Sure, they can tap a button on the keyboard to get to the numbers screen, but it’s annoying and and not really necessary.</p><p>Fortunately, text fields have a modifier that lets us force a different kind of keyboard: <code>keyboardType()</code>. We can give this a parameter specifying the kind of keyboard we want, and in this instance either <code>.numberPad</code> or <code>.decimalPad</code> are good choices. Both of those keyboards will show the digits 0 through 9 for users to tap on, but <code>.decimalPad</code> also shows a decimal point so users can enter check amount like $32.50 rather than just whole numbers.</p><p>So, modify your text field to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Amount&quot;</span></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> $checkAmount<span class="token punctuation">,</span> format<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">currency</span><span class="token punctuation">(</span>code<span class="token punctuation">:</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>currencyCode <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;USD&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">keyboardType</span><span class="token punctuation">(</span><span class="token punctuation">.</span>decimalPad<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>You’ll notice I added a line break before <code>.keyboardType</code> and also indented it one level deeper than <code>TextField</code> – that isn’t required, but it can help you keep track of which modifiers apply to which views.</p><p>Go ahead and run the app now and you should find you can now only type numbers into the text field.</p><p><strong>Tip</strong>: The <code>.numberPad</code> and <code>.decimalPad</code> keyboard types tell SwiftUI to show the digits 0 through 9 and optionally also the decimal point, but that doesn’t stop users from <em>entering</em> other values. For example, if they have a hardware keyboard they can type what they like, and if they copy some text from elsewhere they’ll be able to paste that into the text field no matter what is inside that text. That’s OK, though – the text field will automatically filter out bad values when they hit Return.</p>`,34),_=e("h3",{id:"creating-pickers-in-a-form",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#creating-pickers-in-a-form"},[e("span",null,"Creating pickers in a form")])],-1),P={class:"hint-container details"},I=e("summary",null,"Creating pickers in a form",-1),q=l(`<p>SwiftUI’s pickers serve multiple purposes, and exactly how they look depends on which device you’re using and the context where the picker is used.</p><p>In our project we have a form asking users to enter how much their check came to, and we want to add a picker to that so they can select how many people will share the check.</p><p>Pickers, like text fields, need a two-way binding to a property so they can track their value. We already made an <code>@State</code> property for this purpose, called <code>numberOfPeople</code>, so our next job is to loop over all the numbers from 2 through to 99 and show them inside a picker.</p><p>Modify the first section in your form to include a picker, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Section</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Amount&quot;</span></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> $checkAmount<span class="token punctuation">,</span> format<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">currency</span><span class="token punctuation">(</span>code<span class="token punctuation">:</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>currencyCode <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;USD&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">keyboardType</span><span class="token punctuation">(</span><span class="token punctuation">.</span>decimalPad<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Number of people&quot;</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $numberOfPeople<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">..&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token short-argument">$0</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> people&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now run the program in the simulator and try it out – what do you notice?</p><p>Hopefully you spot several things:</p><ol><li>There’s a new row that says “Number of people” on the left and “4 people” on the right.</li><li>There’s a gray disclosure indicator on the right edge, which is the iOS way of signaling that tapping the row shows another screen.</li><li>Tapping the row <em>doesn’t</em> show another screen.</li><li>The row says “4 people”, but we gave our <code>numberOfPeople</code> property a default value of 2.</li></ol><p>So, it’s a bit of “two steps forward, two steps back” – we have a nice result, but it doesn’t work and doesn’t show the right information!</p><p>We’ll fix both of those, starting with the easy one: why does it say 4 people when we gave <code>numberOfPeople</code> the default value of 2? Well, when creating the picker we used a <code>ForEach</code> view like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">..&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That counts from 2 up to 100, creating rows. What that means is that our 0th row – the first that is created – contains “2 People”, so when we gave <code>numberOfPeople</code> the value of 2 we were actually setting it to the <em>third</em> row, which is “4 People”.</p><p>So, although it’s a bit brain-bending, the fact that our UI shows “4 people” rather than “2 people” isn’t a bug. But there is still a large bug in our code: why does tapping on the row do nothing?</p><p>If you create a picker by itself, outside a form, iOS will show a spinning wheel of options. Here, though, we’ve told SwiftUI that this is a form for user input, and so it has automatically changed the way our picker looks so that it doesn’t take up so much space.</p><p>What SwiftUI <em>wants</em> to do – which is also why it’s added the gray disclosure indicator on the right edge of the row – is show a new view with the options from our picker. To do that, we need to add a navigation view, which does two things: gives us some space across the top to place a title, and also lets iOS slide in new views as needed.</p><p>So, directly before the form add <code>NavigationView {</code>, and after the form’s closing brace add another closing brace. If you got it right, your code should look like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">NavigationView</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Form</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// everything inside your form</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you run the program again you’ll see a large gray space at the top, which is where iOS is giving us room to place a title. We’ll do that in a moment, but first try tapping on the Number Of People row and you should see a new screen slide in with all the other possible options to choose from.</p><p>You should see that “4 People” has a checkmark next to it because it’s the selected value, but you can also tap a different number instead – the screen will automatically slide away again, taking the user back to the previous screen with their new selection.</p><p>What you’re seeing here is the importance of what’s called <em>declarative user interface design</em>. This means we say <em>what</em> we want rather than say <em>how</em> it should be done. We said we wanted a picker with some values inside, but it was down to SwiftUI to decide whether a wheel picker or the sliding view approach is better. It’s choosing the sliding view approach because the picker is inside a form, but on other platforms and environments it could choose something else.</p><p>Before we’re done with this step, let’s add a title to that new navigation bar. Give the form this modifier:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;WeSplit&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Tip: It’s tempting to think that modifier should be attached to the end of the <code>NavigationView</code>, but it needs to be attached to the end of the <code>Form</code> instead. The reason is that navigation views are capable of showing many views as your program runs, so by attaching the title to the thing <em>inside</em> the navigation view we’re allowing iOS to change titles freely.</p>`,23),D=e("h3",{id:"adding-a-segmented-control-for-tip-percentages",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#adding-a-segmented-control-for-tip-percentages"},[e("span",null,"Adding a segmented control for tip percentages")])],-1),j={class:"hint-container details"},A=e("summary",null,"Adding a segmented control for tip percentages",-1),U=l(`<p>Now we’re going to add a second picker view to our app, but this time we want something slightly different: we want a <em>segmented control</em>. This is a specialized kind of picker that shows a handful of options in a horizontal list, and it works great when you have only a small selection to choose from.</p><p>Our form already has two sections: one for the amount and number of people, and one where we’ll show the final result – it’s just showing <code>checkAmount</code> for now, but we’re going to fix it soon.</p><p>In the middle of those two sections I’d like you to add a third to show tip percentages:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Section</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Tip percentage&quot;</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $tipPercentage<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ForEach</span><span class="token punctuation">(</span>tipPercentages<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">,</span> format<span class="token punctuation">:</span> <span class="token punctuation">.</span>percent<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That loops over all the options in our <code>tipPercentages</code> array, converting each one into a text view with the <code>.percent</code> format. Just like the previous picker, SwiftUI will convert that to a single row in our list, and slide a new screen of options in when it’s tapped.</p><p>Here, though, I want to show you how to use a segmented control instead, because it looks much better. So, please add this modifier to the tip picker:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">pickerStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>segmented<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That should go at the end of the picker’s closing brace, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Section</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Tip percentage&quot;</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $tipPercentage<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ForEach</span><span class="token punctuation">(</span>tipPercentages<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">,</span> format<span class="token punctuation">:</span> <span class="token punctuation">.</span>percent<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">pickerStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>segmented<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you run the program now you’ll see things are starting to come together: users can now enter the amount on their check, select the number of people, and select how much tip they want to leave – not bad!</p><p>But things aren’t <em>quite</em> what you think. One problem app developers face is that we take for granted that our app does what we intended it to do – we designed it to solve a particular problem, so we automatically know what everything means.</p><p>Try to look at our user interface with fresh eyes, if you can:</p><ul><li>“Amount” makes sense – it’s a box users can type a number into.</li><li>“Number of people” is also pretty self-explanatory.</li><li>The label at the bottom is where we’ll show the total, so right now we can ignore that.</li><li>That middle section, though – what are those percentages for?</li></ul><p>Yes, <em>we</em> know they are to select how much tip to leave, but that isn’t obvious on the screen. We can – and <em>should</em> do better.</p><p>One option is to add another text view directly before the segmented control, which we could do like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Section</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;How much tip do you want to leave?&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Tip percentage&quot;</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $tipPercentage<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ForEach</span><span class="token punctuation">(</span>tipPercentages<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">,</span> format<span class="token punctuation">:</span> <span class="token punctuation">.</span>percent<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">pickerStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>segmented<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That works OK, but it doesn’t look great – it looks like it’s an item all by itself, rather than a label for the segmented control.</p><p>A much better idea is to modify the section itself: SwiftUI lets us add views to the header and footer of a section, which in this instance we can use to add a small explanatory prompt. In fact, we can use the same text view we just created, just moved to be the section header rather than a loose label inside it.</p><p>Here’s how that looks in code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Section</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Tip percentage&quot;</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $tipPercentage<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ForEach</span><span class="token punctuation">(</span>tipPercentages<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token short-argument">$0</span><span class="token punctuation">,</span> format<span class="token punctuation">:</span> <span class="token punctuation">.</span>percent<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">pickerStyle</span><span class="token punctuation">(</span><span class="token punctuation">.</span>segmented<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> header<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;How much tip do you want to leave?&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That uses multiple trailing closures to specify both the section body (the first closure) and the second header (the second closure).</p><p>It’s a small change to the code, but I think the end result looks a lot better – the text now looks like a prompt for the segmented control directly below it.</p>`,22),F=e("h3",{id:"calculating-the-total-per-person",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#calculating-the-total-per-person"},[e("span",null,"Calculating the total per person")])],-1),C={class:"hint-container details"},O=e("summary",null,"Calculating the total per person",-1),W=l(`<p>So far the final section in our form has shown a simple text view with whatever check amount the user entered, but now it’s time for the important part of this project: we want that text view to show how much each person needs to contribute to the payment.</p><p>There are a few ways we could solve this, but the easiest one also happens to be the <em>cleanest</em> one, by which I mean it gives us code that is clear and easy to understand: we’re going to add a computed property that calculates the total.</p><p>This needs to do a small amount of mathematics: the total amount payable per person is equal to the value of the order, plus the tip percentage, divided by the number of people.</p><p>But before we can get to that point, we first need to pull out the values for how many people there are, what the tip percentage is, and the value of the order. That might sound easy, but as you’ve already seen, <code>numberOfPeople</code> is off by 2 – when it stores the value 3 it means 5 people.</p><p>So, we’re going to create a new computed property called <code>totalPerPerson</code> that will be a <code>Double</code>, and it will start off by getting the input data ready: what is the correct number of people, and how much tip do they want to leave?</p><p>First, add the computed property itself, just before the <code>body</code> property:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> totalPerPerson<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// calculate the total per person here</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That sends back 0 so your code doesn’t break, but we’re going to replace the <code>// calculate the total per person here</code> comment with our calculations.</p><p>Next, we can figure out how many people there are by reading <code>numberOfPeople</code> and adding 2 to it. Remember, this thing has the range 2 to 100, but it <em>counts</em> from 0, which is why we need to add the 2.</p><p>So, start by replacing <code>// calculate the total per person here</code> with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> peopleCount <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>numberOfPeople <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You’ll notice that converts the resulting value to a <code>Double</code> because it needs to be used alongside the <code>checkAmount</code>.</p><p>For the same reason, we also need to convert our tip percentage into a <code>Double</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> tipSelection <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>tipPercentage<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now that we have our input values, it’s time do our mathematics. This takes another three steps:</p><ul><li>We can calculate the tip value by dividing <code>checkAmount</code> by 100 and multiplying by <code>tipSelection</code>.</li><li>We can calculate the grand total of the check by adding the tip value to <code>checkAmount</code>.</li><li>We can figure out the amount per person by dividing the grand total by <code>peopleCount</code>.</li></ul><p>Once that’s done, we can return the amount per person and we’re done.</p><p>Replace <code>return 0</code> in the property with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> tipValue <span class="token operator">=</span> checkAmount <span class="token operator">/</span> <span class="token number">100</span> <span class="token operator">*</span> tipSelection</span>
<span class="line"><span class="token keyword">let</span> grandTotal <span class="token operator">=</span> checkAmount <span class="token operator">+</span> tipValue</span>
<span class="line"><span class="token keyword">let</span> amountPerPerson <span class="token operator">=</span> grandTotal <span class="token operator">/</span> peopleCount</span>
<span class="line"></span>
<span class="line"><span class="token keyword">return</span> amountPerPerson</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you’ve followed everything correctly your code should look like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> totalPerPerson<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> peopleCount <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>numberOfPeople <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> tipSelection <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>tipPercentage<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> tipValue <span class="token operator">=</span> checkAmount <span class="token operator">/</span> <span class="token number">100</span> <span class="token operator">*</span> tipSelection</span>
<span class="line">    <span class="token keyword">let</span> grandTotal <span class="token operator">=</span> checkAmount <span class="token operator">+</span> tipValue</span>
<span class="line">    <span class="token keyword">let</span> amountPerPerson <span class="token operator">=</span> grandTotal <span class="token operator">/</span> peopleCount</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> amountPerPerson</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now that <code>totalPerPerson</code> gives us the correct value, we can change the final section in our table so it shows the correct text.</p><p>Replace this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Section</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span>checkAmount<span class="token punctuation">,</span> format<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">currency</span><span class="token punctuation">(</span>code<span class="token punctuation">:</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>currencyCode <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;USD&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Section</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span>totalPerPerson<span class="token punctuation">,</span> format<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">currency</span><span class="token punctuation">(</span>code<span class="token punctuation">:</span> <span class="token class-name">Locale</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>currencyCode <span class="token operator">??</span> <span class="token string-literal"><span class="token string">&quot;USD&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Try running the app now, and see what you think. You should find that because all the values that make up our total are marked with <code>@State</code>, changing any of them will cause the total to be recalculated automatically.</p><p>Hopefully you’re now seeing for yourself what it means that SwiftUI’s views are a function of their state – when the state changes, the views automatically update to match.</p>`,28),V=e("h3",{id:"hiding-the-keyboard",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#hiding-the-keyboard"},[e("span",null,"Hiding the keyboard")])],-1),N={class:"hint-container details"},$=e("summary",null,"Hiding the keyboard",-1),H=l(`<p>We’re now almost at the end of our project, but you might have spotted an annoyance: once the keyboard appears for the check amount entry, it never goes away!</p><p>This is a problem with the decimal and number keypads, because the regular alphabetic keyboard has a return key on there to dismiss the keyboard. However, with a little extra work we can fix this:</p><ol><li>We need to give SwiftUI some way of determining whether the check amount box should currently have <em>focus</em> – should be receiving text input from the user.</li><li>We need to add some kind of button to remove that focus when the user wants, which will in turn cause the keyboard to go away.</li></ol><p>To solve the first one you need to meet your second property wrapper: <code>@FocusState</code>. This is exactly like a regular <code>@State</code> property, except it’s specifically designed to handle input focus in our UI.</p><p>Add this new property to <code>ContentView</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@FocusState</span> <span class="token keyword">private</span> <span class="token keyword">var</span> amountIsFocused<span class="token punctuation">:</span> <span class="token class-name">Bool</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now we can attach that to our text field, so that when the text field is focused <code>amountIsFocused</code> is true, otherwise it’s false. Add this modifier to your <code>TextField</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">focused</span><span class="token punctuation">(</span>$amountIsFocused<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That’s the first part of our problem solved: although we can’t see anything different on the screen, SwiftUI is at least silently aware of whether the text field should have focus or not.</p><p>The second part of our solution is to add a toolbar to the keyboard when it appears, so we can place a Done button in there. To make this work really well you need to meet several new SwiftUI views, so I think the best thing to do is show you the code then explain what it does.</p><p>Add this new modifier to your form, below the existing <code>navigationTitle()</code> modifier:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span>toolbar <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ToolbarItemGroup</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>keyboard<span class="token punctuation">)</span> <span class="token punctuation">{</span>           </span>
<span class="line">        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Done&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            amountIsFocused <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Yes, that’s quite a lot of code, so let’s break it down:</p><ol><li>The <code>toolbar()</code> modifier lets us specify toolbar items for a view. These toolbar items might appear in various places on the screen – in the navigation bar at the top, in a special toolbar area at the bottom, and so on.</li><li><code>ToolbarItemGroup</code> lets us place one or more buttons in a specific location, and this is where we get to specify we want a keyboard toolbar – a toolbar that is attached to the <em>keyboard</em>, so it will automatically appear and disappear with the keyboard.</li><li>The <code>Button</code> view we’re using here displays some tappable text, which in our case is “Done”. We also need to provide it with some code to run when the button is pressed, which in our case sets <code>amountIsFocused</code> to false so that the keyboard is dismissed.</li></ol><p>You’ll meet these more in the future, but for now I recommend you run the program and try it out – it’s a big improvement!</p><p>Before we’re done, there’s one last small change I want to make: I’d like you to modify the <code>ToolbarItemGroup</code> to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">ToolbarItemGroup</span><span class="token punctuation">(</span>placement<span class="token punctuation">:</span> <span class="token punctuation">.</span>keyboard<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Spacer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Done&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        amountIsFocused <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That adds one small but important new view before the button, called <code>Spacer</code>. This is a <em>flexible space</em> by default – wherever you place a spacer it will automatically push other views to one side. That might mean pushing them up, down, left, or right depending on where it’s used, but by placing it first in our toolbar it will cause our button to be pushed to the right.</p><p>If you run the app again you’ll see the difference – it’s really minor, but having the Done button on the right of the keyboard is also the same thing other iOS apps do, and it’s good to make our own code adopt those conventions.</p><p>Anyway, that was the last step in this project – pat yourself on the back, because we’re finished!</p>`,20),R=e("hr",null,null,-1);function B(u,Y){const s=r("router-link"),a=r("VPCard"),c=r("VidStack");return k(),h("div",null,[e("h1",g,[e("a",f,[e("span",null,m(u.$frontmatter.title)+" 관련",1)])]),e("nav",v,[e("ul",null,[e("li",null,[n(s,{to:"#project-1-part-two"},{default:t(()=>[p("Project 1, part two")]),_:1}),e("ul",null,[e("li",null,[n(s,{to:"#reading-text-from-the-user-with-textfield"},{default:t(()=>[p("Reading text from the user with TextField")]),_:1})]),e("li",null,[n(s,{to:"#creating-pickers-in-a-form"},{default:t(()=>[p("Creating pickers in a form")]),_:1})]),e("li",null,[n(s,{to:"#adding-a-segmented-control-for-tip-percentages"},{default:t(()=>[p("Adding a segmented control for tip percentages")]),_:1})]),e("li",null,[n(s,{to:"#calculating-the-total-per-person"},{default:t(()=>[p("Calculating the total per person")]),_:1})]),e("li",null,[n(s,{to:"#hiding-the-keyboard"},{default:t(()=>[p("Hiding the keyboard")]),_:1})])])])])]),b,n(a,o(i({title:"100 Days of SwiftUI - Day 17",desc:"Project 1, part two",link:"https://www.hackingwithswift.com/100/swiftui/17",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),y,e("details",x,[T,n(a,o(i({title:"100 Days of SwiftUI - Day 17 - Reading text from the user with TextField",desc:"Reading text from the user with TextField",link:"https://hackingwithswift.com/books/ios-swiftui/reading-text-from-the-user-with-textfield",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(c,{src:"youtube/eBo4AE7TYZU"}),S]),_,e("details",P,[I,n(a,o(i({title:"100 Days of SwiftUI - Day 17 - Creating pickers in a form",desc:"Creating pickers in a form",link:"https://hackingwithswift.com/books/ios-swiftui/creating-pickers-in-a-form",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(c,{src:"youtube/XCtKAHxV8bs"}),q]),D,e("details",j,[A,n(a,o(i({title:"100 Days of SwiftUI - Day 17 - Adding a segmented control for tip percentages",desc:"Adding a segmented control for tip percentages",link:"https://hackingwithswift.com/books/ios-swiftui/adding-a-segmented-control-for-tip-percentages",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(c,{src:"youtube/Op1ChJRAvTk"}),U]),F,e("details",C,[O,n(a,o(i({title:"100 Days of SwiftUI - Day 17 - Calculating the total per person",desc:"Calculating the total per person",link:"https://hackingwithswift.com/books/ios-swiftui/calculating-the-total-per-person",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(c,{src:"youtube/pq79nxScJIQ"}),W]),V,e("details",N,[$,n(a,o(i({title:"100 Days of SwiftUI - Day 17 - Hiding the keyboard",desc:"Hiding the keyboard",link:"https://hackingwithswift.com/books/ios-swiftui/hiding-the-keyboard",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(c,{src:"youtube/9WVeOGX313Q"}),H]),R])}const z=d(w,[["render",B],["__file","17.html.vue"]]),G=JSON.parse('{"path":"/swift/100-days-of-swiftui/17.html","title":"Day 18","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 18","description":"100 Days of SwiftUI > Day 18","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 18"},{"property":"og:description","content":"Day 18"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/18.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/17.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 18"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 18"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 18\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 1, part two","slug":"project-1-part-two","link":"#project-1-part-two","children":[{"level":3,"title":"Reading text from the user with TextField","slug":"reading-text-from-the-user-with-textfield","link":"#reading-text-from-the-user-with-textfield","children":[]},{"level":3,"title":"Creating pickers in a form","slug":"creating-pickers-in-a-form","link":"#creating-pickers-in-a-form","children":[]},{"level":3,"title":"Adding a segmented control for tip percentages","slug":"adding-a-segmented-control-for-tip-percentages","link":"#adding-a-segmented-control-for-tip-percentages","children":[]},{"level":3,"title":"Calculating the total per person","slug":"calculating-the-total-per-person","link":"#calculating-the-total-per-person","children":[]},{"level":3,"title":"Hiding the keyboard","slug":"hiding-the-keyboard","link":"#hiding-the-keyboard","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":9}]},"readingTime":{"minutes":15.16,"words":4547},"filePathRelative":"swift/100-days-of-swiftui/17.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{z as comp,G as data};
