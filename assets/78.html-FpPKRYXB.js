import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,a as n,t as m,b as s,w as t,n as p,g as o,e as i,r as u,o as h,d as c}from"./app-U_bew1in.js";const v={},b={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},y=n("hr",null,null,-1),g=i('<h2 id="project-23-part-two" tabindex="-1"><a class="header-anchor" href="#project-23-part-two"><span>Project 23, part two</span></a></h2><p>This is a big project, right? Believe me, though: it is worth it – as Thomas Edison once said, “the most certain way to succeed is always to try just one more time.” So, even if you’re having a hard time I encourage you to stick with it – we’re finishing the project today, and I feel confident you’ll be impressed with the final game.</p><p>What I think you’ll find is that the code we’re looking it isn’t particularly hard, it’s just that there’s a lot of it. But this is important: it gives you the chance to flex your GCD muscles in a different project, with different purposes, which helps make that knowledge sink in a little more.</p><p>You’re also going to meet <code>CaseIterable</code> for the first time, which is a bit like <code>Codable</code> – it’s one of Swift’s built-in protocols that makes the compiler generate some code on our behalf. In this instance, though, it’s designed to let us read all the cases of an enum as an array, and it’s useful so that we can make random enemy types in our game.</p><p><strong>Today you have three topics to work through, and you’ll learn about <code>CaseIterable</code>, plus you’ll get more practice with GCD, <code>SKTexture</code>, and more.</strong></p><h3 id="follow-the-sequence" tabindex="-1"><a class="header-anchor" href="#follow-the-sequence"><span>Follow the sequence</span></a></h3>',6),q={class:"hint-container details"},x=n("summary",null,"Follow the sequence",-1),S=i(`<p>You&#39;ve come so far already, and really there isn&#39;t a lot to show for your work other than being able to draw glowing slice shapes when you move touches around the screen. But that&#39;s all about to change, because we&#39;re now about to create the interesting code – we&#39;re going to make the game actually create some enemies.</p><p>Now, you might very well be saying, “but Paul, we just wrote the enemy creating code, and I never want to see it again!” You&#39;re right (and I never want to see it again either!) but it&#39;s a bit more complicated: the <code>createEnemy()</code> method creates one enemy as required. The code we&#39;re going to write now will call <code>createEnemy()</code> in different ways so that we get varying groups of enemies.</p><p>For example, sometimes we want to create two enemies at once, sometimes we want to create four at once, and sometimes we want to create five in quick sequence. Each one of these will call <code>createEnemy()</code> in different ways.</p><p>There&#39;s a lot to cover here, so let&#39;s get started: add this new enum before the <code>ForceBomb</code> enum you added a few minutes ago:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">SequenceType</span><span class="token punctuation">:</span> <span class="token class-name">CaseIterable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> oneNoBomb<span class="token punctuation">,</span> one<span class="token punctuation">,</span> twoWithOneBomb<span class="token punctuation">,</span> two<span class="token punctuation">,</span> three<span class="token punctuation">,</span> four<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> fastChain</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That outlines the possible types of ways we can create enemy: one enemy that definitely is not a bomb, one that might or might not be a bomb, two where one is a bomb and one isn&#39;t, then two/three/four random enemies, a chain of enemies, then a fast chain of enemies.</p><p>The first two will be used exclusively when the player first starts the game, to give them a gentle warm up. After that, they&#39;ll be given random sequence types from <code>twoWithOneBomb</code> to <code>fastChain</code>.</p><p>You might have noticed I slipped in a new protocol there: <code>CaseIterable</code>. This is one of Swift’s most useful protocols, and it will automatically add an <code>allCases</code> property to the <code>SequenceType</code> enum that lists all its cases as an array. This is really useful in our project because we can then use <code>randomElement()</code> to pick random sequence types to run our game.</p><p>We&#39;re going to need quite a few new properties in order to make the plan work, so please add these now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> popupTime <span class="token operator">=</span> <span class="token number">0.9</span></span>
<span class="line"><span class="token keyword">var</span> sequence <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">SequenceType</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">var</span> sequencePosition <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">var</span> chainDelay <span class="token operator">=</span> <span class="token number">3.0</span></span>
<span class="line"><span class="token keyword">var</span> nextSequenceQueued <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And here&#39;s what they do:</p><ul><li>The <code>popupTime</code> property is the amount of time to wait between the last enemy being destroyed and a new one being created.</li><li>The <code>sequence</code> property is an array of our <code>SequenceType</code> enum that defines what enemies to create.</li><li>The <code>sequencePosition</code> property is where we are right now in the game.</li><li>The <code>chainDelay</code> property is how long to wait before creating a new enemy when the sequence type is <code>.chain</code> or <code>.fastChain</code>. Enemy chains don&#39;t wait until the previous enemy is offscreen before creating a new one, so it&#39;s like throwing five enemies quickly but with a small delay between each one.</li><li>The <code>nextSequenceQueued</code> property is used so we know when all the enemies are destroyed and we&#39;re ready to create more.</li></ul><p>Whenever we call our new method, which is <code>tossEnemies()</code>, we&#39;re going to decrease both <code>popupTime</code> and <code>chainDelay</code> so that the game gets harder as they play. Sneakily, we&#39;re always going to increase the speed of our physics world, so that objects move rise and fall faster too.</p><p>Nearly all the <code>tossEnemies()</code> method is a large <code>switch</code>/<code>case</code> statement that looks at the <code>sequencePosition</code> property to figure out what sequence type it should use. It then calls <code>createEnemy()</code> correctly for the sequence type, passing in whether to force bomb creation or not.</p><p>The one thing that will need to be explained is the way enemy chains are created. Unlike regular sequence types, a chain is made up of several enemies with a space between them, and the game doesn&#39;t wait for an enemy to be sliced before showing the next thing in the chain.</p><p>The best thing for you to do is to put this source code into your project, and we can talk about the chain complexities in a moment:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">tossEnemies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    popupTime <span class="token operator">*=</span> <span class="token number">0.991</span></span>
<span class="line">    chainDelay <span class="token operator">*=</span> <span class="token number">0.99</span></span>
<span class="line">    physicsWorld<span class="token punctuation">.</span>speed <span class="token operator">*=</span> <span class="token number">1.02</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> sequenceType <span class="token operator">=</span> sequence<span class="token punctuation">[</span>sequencePosition<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">switch</span> sequenceType <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span>oneNoBomb<span class="token punctuation">:</span></span>
<span class="line">        <span class="token function">createEnemy</span><span class="token punctuation">(</span>forceBomb<span class="token punctuation">:</span> <span class="token punctuation">.</span>never<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span>one<span class="token punctuation">:</span></span>
<span class="line">        <span class="token function">createEnemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span>twoWithOneBomb<span class="token punctuation">:</span></span>
<span class="line">        <span class="token function">createEnemy</span><span class="token punctuation">(</span>forceBomb<span class="token punctuation">:</span> <span class="token punctuation">.</span>never<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">createEnemy</span><span class="token punctuation">(</span>forceBomb<span class="token punctuation">:</span> <span class="token punctuation">.</span>always<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span>two<span class="token punctuation">:</span></span>
<span class="line">        <span class="token function">createEnemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">createEnemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span>three<span class="token punctuation">:</span></span>
<span class="line">        <span class="token function">createEnemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">createEnemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">createEnemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span>four<span class="token punctuation">:</span></span>
<span class="line">        <span class="token function">createEnemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">createEnemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">createEnemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">createEnemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span>chain<span class="token punctuation">:</span></span>
<span class="line">        <span class="token function">createEnemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">asyncAfter</span><span class="token punctuation">(</span>deadline<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>chainDelay <span class="token operator">/</span> <span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token keyword">weak</span> <span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">createEnemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">asyncAfter</span><span class="token punctuation">(</span>deadline<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>chainDelay <span class="token operator">/</span> <span class="token number">5.0</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token keyword">weak</span> <span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">createEnemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">asyncAfter</span><span class="token punctuation">(</span>deadline<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>chainDelay <span class="token operator">/</span> <span class="token number">5.0</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token keyword">weak</span> <span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">createEnemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">asyncAfter</span><span class="token punctuation">(</span>deadline<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>chainDelay <span class="token operator">/</span> <span class="token number">5.0</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token keyword">weak</span> <span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">createEnemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span>fastChain<span class="token punctuation">:</span></span>
<span class="line">        <span class="token function">createEnemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">asyncAfter</span><span class="token punctuation">(</span>deadline<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>chainDelay <span class="token operator">/</span> <span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token keyword">weak</span> <span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">createEnemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">asyncAfter</span><span class="token punctuation">(</span>deadline<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>chainDelay <span class="token operator">/</span> <span class="token number">10.0</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token keyword">weak</span> <span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">createEnemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">asyncAfter</span><span class="token punctuation">(</span>deadline<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>chainDelay <span class="token operator">/</span> <span class="token number">10.0</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token keyword">weak</span> <span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">createEnemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">        <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">asyncAfter</span><span class="token punctuation">(</span>deadline<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>chainDelay <span class="token operator">/</span> <span class="token number">10.0</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token keyword">weak</span> <span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">createEnemy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    sequencePosition <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">    nextSequenceQueued <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That looks like a massive method, I know, but in reality it&#39;s just the same thing being called in different ways. The interesting parts are the <code>.chain</code> and <code>.fastChain</code> cases, and also I want to explain in more detail the <code>nextSequenceQueued</code> property.</p><p>Each sequence in our array creates one or more enemies, then waits for them to be destroyed before continuing. Enemy chains are different: they create five enemies with a short break between, and don&#39;t wait for each one to be destroyed before continuing.</p><p>To handle these chains, we have calls to <code>asyncAfter()</code> with a timer value. If we assume for a moment that chainDelay is 10 seconds, then:</p><ul><li>That makes <code>chainDelay / 10.0</code> equal to 1 second.</li><li>That makes <code>chainDelay / 10.0 * 2</code> equal to 2 seconds.</li><li>That makes <code>chainDelay / 10.0 * 3</code> equal to three seconds.</li><li>That makes <code>chainDelay / 10.0 * 4</code> equal to four seconds.</li></ul><p>So, it spreads out the <code>createEnemy()</code> calls quite neatly.</p><p>The <code>nextSequenceQueued</code> property is more complicated. If it&#39;s false, it means we don&#39;t have a call to <code>tossEnemies()</code> in the pipeline waiting to execute. It gets set to true only in the gap between the previous sequence item finishing and <code>tossEnemies()</code> being called. Think of it as meaning, &quot;I know there aren&#39;t any enemies right now, but more will come shortly.&quot;</p><p>We can make our game come to life with enemies with two more pieces of code. First, add this just before the end of <code>didMove(to:)</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">sequence <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>oneNoBomb<span class="token punctuation">,</span> <span class="token punctuation">.</span>oneNoBomb<span class="token punctuation">,</span> <span class="token punctuation">.</span>twoWithOneBomb<span class="token punctuation">,</span> <span class="token punctuation">.</span>twoWithOneBomb<span class="token punctuation">,</span> <span class="token punctuation">.</span>three<span class="token punctuation">,</span> <span class="token punctuation">.</span>one<span class="token punctuation">,</span> <span class="token punctuation">.</span>chain<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span> <span class="token number">0</span> <span class="token operator">...</span> <span class="token number">1000</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> nextSequence <span class="token operator">=</span> <span class="token class-name">SequenceType</span><span class="token punctuation">.</span>allCases<span class="token punctuation">.</span><span class="token function">randomElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        sequence<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>nextSequence<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">asyncAfter</span><span class="token punctuation">(</span>deadline<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token keyword">weak</span> <span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token keyword">in</span></span>
<span class="line">    <span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">tossEnemies</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That code fills the <code>sequence</code> array with seven pre-written sequences to help players warm up to how the game works, then adds 1001 (the <code>...</code> operator means “up to and including”) random sequence types to fill up the game. Finally, it triggers the initial enemy toss after two seconds.</p><p>The way we generate random sequence type values is using the <code>CaseIterable</code> protocol I mentioned earlier. If you cast your mind back, this is how we defined the <code>SequenceType</code> enum:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">SequenceType</span><span class="token punctuation">:</span> <span class="token class-name">CaseIterable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> oneNoBomb<span class="token punctuation">,</span> one<span class="token punctuation">,</span> twoWithOneBomb<span class="token punctuation">,</span> two<span class="token punctuation">,</span> three<span class="token punctuation">,</span> four<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> fastChain</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note that it says <code>enum SequenceType: CaseIterable</code>, and it means we’ll automatically get an <code>allCases</code> property generated for our enum that contains each case in the enum in the order it was defined. So, to generate lots of random sequence types we can use <code>SequenceType.allCases.randomElement()</code> again and again.</p><p>The second change we&#39;re going to make is to remove enemies from the game when they fall off the screen. This is required, because our game mechanic means that new enemies aren&#39;t created until the previous ones have been removed. The exception to this rule are enemy chains, where multiple enemies are created in a batch, but even then the game won&#39;t continue until all enemies from the chain have been removed.</p><p>We&#39;re going to modify the <code>update()</code> method so that:</p><ol><li>If we have active enemies, we loop through each of them.</li><li>If any enemy is at or lower than Y position -140, we remove it from the game and our <code>activeEnemies</code> array.</li><li>If we don&#39;t have any active enemies and we haven&#39;t already queued the next enemy sequence, we schedule the next enemy sequence and set <code>nextSequenceQueued</code> to be true.</li></ol><p>Put this code first in the <code>update()</code> method:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> activeEnemies<span class="token punctuation">.</span>count <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token keyword">in</span> activeEnemies<span class="token punctuation">.</span><span class="token function">enumerated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> node<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">140</span> <span class="token punctuation">{</span></span>
<span class="line">            node<span class="token punctuation">.</span><span class="token function">removeFromParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            activeEnemies<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> index<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token operator">!</span>nextSequenceQueued <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token function">asyncAfter</span><span class="token punctuation">(</span>deadline<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> popupTime<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token keyword">weak</span> <span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token keyword">in</span></span>
<span class="line">            <span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">tossEnemies</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        nextSequenceQueued <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And now the part you&#39;ve been waiting for extremely patiently: press <kbd>Cmd</kbd>+<kbd>R</kbd> to run the game, because it should now be getting close to useful!</p><figure><img src="https://www.hackingwithswift.com/img/books/hws/23-3.pngs" alt="Now that the game has bombs as well as penguins, it&#39;s almost starting to come together." tabindex="0" loading="lazy"><figcaption>Now that the game has bombs as well as penguins, it&#39;s almost starting to come together.</figcaption></figure>`,36),T=n("h3",{id:"slice-to-win",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#slice-to-win"},[n("span",null,"Slice to win")])],-1),E={class:"hint-container details"},_=n("summary",null,"Slice to win",-1),D=i(`<p>We need to modify <code>touchesMoved()</code> to detect when users slice penguins and bombs. The code isn&#39;t complicated, but it <em>is</em> long, so I&#39;m going to split it into three. First, here&#39;s the structure – place this just before the end of <code>touchesMoved()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> nodesAtPoint <span class="token operator">=</span> <span class="token function">nodes</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> location<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token keyword">case</span> <span class="token keyword">let</span> node <span class="token keyword">as</span> <span class="token class-name">SKSpriteNode</span> <span class="token keyword">in</span> nodesAtPoint <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> node<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;enemy&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// destroy penguin</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> node<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;bomb&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// destroy bomb</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, let&#39;s take a look at what destroying a penguin should do. It should:</p><ol><li>Create a particle effect over the penguin.</li><li>Clear its node name so that it can&#39;t be swiped repeatedly.</li><li>Disable the <code>isDynamic</code> of its physics body so that it doesn&#39;t carry on falling.</li><li>Make the penguin scale out and fade out at the same time.</li><li>After making the penguin scale out and fade out, we should remove it from the scene.</li><li>Add one to the player&#39;s score.</li><li>Remove the enemy from our <code>activeEnemies</code> array.</li><li>Play a sound so the player knows they hit the penguin.</li></ol><p>Replace the <code>// destroy penguin</code> with this, following along with my numbered comments:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token comment">// 1</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> emitter <span class="token operator">=</span> <span class="token class-name">SKEmitterNode</span><span class="token punctuation">(</span>fileNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;sliceHitEnemy&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    emitter<span class="token punctuation">.</span>position <span class="token operator">=</span> node<span class="token punctuation">.</span>position</span>
<span class="line">    <span class="token function">addChild</span><span class="token punctuation">(</span>emitter<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2</span></span>
<span class="line">node<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3</span></span>
<span class="line">node<span class="token punctuation">.</span>physicsBody<span class="token operator">?</span><span class="token punctuation">.</span>isDynamic <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 4</span></span>
<span class="line"><span class="token keyword">let</span> scaleOut <span class="token operator">=</span> <span class="token class-name">SKAction</span><span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token number">0.001</span><span class="token punctuation">,</span> duration<span class="token punctuation">:</span><span class="token number">0.2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> fadeOut <span class="token operator">=</span> <span class="token class-name">SKAction</span><span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span>withDuration<span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> group <span class="token operator">=</span> <span class="token class-name">SKAction</span><span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">[</span>scaleOut<span class="token punctuation">,</span> fadeOut<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 5</span></span>
<span class="line"><span class="token keyword">let</span> seq <span class="token operator">=</span> <span class="token class-name">SKAction</span><span class="token punctuation">.</span><span class="token function">sequence</span><span class="token punctuation">(</span><span class="token punctuation">[</span>group<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">removeFromParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">node<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>seq<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 6</span></span>
<span class="line">score <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 7</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> index <span class="token operator">=</span> activeEnemies<span class="token punctuation">.</span><span class="token function">firstIndex</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    activeEnemies<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> index<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 8</span></span>
<span class="line"><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SKAction</span><span class="token punctuation">.</span><span class="token function">playSoundFileNamed</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;whack.caf&quot;</span></span><span class="token punctuation">,</span> waitForCompletion<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You&#39;ve now seen the two ways of collecting SpriteKit actions together: groups and sequences. An action <em>group</em> specifies that all actions inside it should execute simultaneously, whereas an action <code>sequence</code> runs them all one at a time. In the code above we have a group inside a sequence, which is common.</p><p>If the player swipes a bomb by accident, they lose the game immediately. This uses much the same code as destroying a penguin, but with a few differences:</p><ul><li>The node called &quot;bomb&quot; is the bomb image, which is inside the bomb container. So, we need to reference the node&#39;s parent when looking up our position, changing the physics body, removing the node from the scene, and removing the node from our <code>activeEnemies</code> array..</li><li>I&#39;m going to create a different particle effect for bombs than for penguins.</li><li>We end by calling the (as yet unwritten) method <code>endGame()</code>.</li></ul><p>Replace the <code>// destroy bomb</code> comment with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">guard</span> <span class="token keyword">let</span> bombContainer <span class="token operator">=</span> node<span class="token punctuation">.</span>parent <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">SKSpriteNode</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">continue</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> emitter <span class="token operator">=</span> <span class="token class-name">SKEmitterNode</span><span class="token punctuation">(</span>fileNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;sliceHitBomb&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    emitter<span class="token punctuation">.</span>position <span class="token operator">=</span> bombContainer<span class="token punctuation">.</span>position</span>
<span class="line">    <span class="token function">addChild</span><span class="token punctuation">(</span>emitter<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">node<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line">bombContainer<span class="token punctuation">.</span>physicsBody<span class="token operator">?</span><span class="token punctuation">.</span>isDynamic <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> scaleOut <span class="token operator">=</span> <span class="token class-name">SKAction</span><span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token number">0.001</span><span class="token punctuation">,</span> duration<span class="token punctuation">:</span><span class="token number">0.2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> fadeOut <span class="token operator">=</span> <span class="token class-name">SKAction</span><span class="token punctuation">.</span><span class="token function">fadeOut</span><span class="token punctuation">(</span>withDuration<span class="token punctuation">:</span> <span class="token number">0.2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">let</span> group <span class="token operator">=</span> <span class="token class-name">SKAction</span><span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">[</span>scaleOut<span class="token punctuation">,</span> fadeOut<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> seq <span class="token operator">=</span> <span class="token class-name">SKAction</span><span class="token punctuation">.</span><span class="token function">sequence</span><span class="token punctuation">(</span><span class="token punctuation">[</span>group<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">removeFromParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">bombContainer<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>seq<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> index <span class="token operator">=</span> activeEnemies<span class="token punctuation">.</span><span class="token function">firstIndex</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> bombContainer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    activeEnemies<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> index<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SKAction</span><span class="token punctuation">.</span><span class="token function">playSoundFileNamed</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;explosion.caf&quot;</span></span><span class="token punctuation">,</span> waitForCompletion<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">endGame</span><span class="token punctuation">(</span>triggeredByBomb<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Before I walk you through the <code>endGame()</code> method, we need to adjust the <code>update()</code> method a little. Right now, if a penguin or a bomb falls below -140, we remove it from the scene. We&#39;re going to modify that so that if the player misses slicing a penguin, they lose a life. We&#39;re also going to delete the node&#39;s name just in case any further checks for enemies or bombs happen – clearing the node name will avoid any problems.</p><p>In the <code>update()</code> method, replace this code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> node<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">140</span> <span class="token punctuation">{</span></span>
<span class="line">    node<span class="token punctuation">.</span><span class="token function">removeFromParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    activeEnemies<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> index<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>…with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> node<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">140</span> <span class="token punctuation">{</span></span>
<span class="line">    node<span class="token punctuation">.</span><span class="token function">removeAllActions</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> node<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;enemy&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        node<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line">        <span class="token function">subtractLife</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        node<span class="token punctuation">.</span><span class="token function">removeFromParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        activeEnemies<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> index<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> node<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;bombContainer&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        node<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line">        node<span class="token punctuation">.</span><span class="token function">removeFromParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        activeEnemies<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> index<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That&#39;s mostly the same, except now we call <code>subtractLife()</code> when the player lets any penguins through. So, if you miss a penguin you lose one life; if you swipe a bomb, you lose all your lives. Or at least you would if our code actually compiled, which it won&#39;t: you&#39;re missing the <code>subtractLife()</code> and <code>endGame()</code> methods!</p>`,17),I=n("h3",{id:"game-over-man-sktexture",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#game-over-man-sktexture"},[n("span",null,"Game over, man: SKTexture")])],-1),j={class:"hint-container details"},C=n("summary",null,"Game over, man: SKTexture",-1),A=i(`<p>You are now within reach of the end of this project, and not a moment too soon, I suspect. You&#39;ll be pleased to know that you&#39;re just two methods away from the end, and neither of them are particularly taxing.</p><p>First is the <code>subtractLife()</code> method, which is called when a penguin falls off the screen without being sliced. It needs to subtract 1 from the <code>lives</code> property that we created what seems like years ago, update the images in the <code>livesImages</code> array so that the correct number are crossed off, then end the game if the player is out of lives.</p><p>To make it a bit clearer that something bad has happened, we&#39;re also going to add playing a sound and animate the life being lost – we&#39;ll set the X and Y scale of the life being lost to 1.3, then animate it back down to 1.0.</p><p>Here&#39;s the code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">subtractLife</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    lives <span class="token operator">-=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SKAction</span><span class="token punctuation">.</span><span class="token function">playSoundFileNamed</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;wrong.caf&quot;</span></span><span class="token punctuation">,</span> waitForCompletion<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> life<span class="token punctuation">:</span> <span class="token class-name">SKSpriteNode</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> lives <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">{</span></span>
<span class="line">        life <span class="token operator">=</span> livesImages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> lives <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span></span>
<span class="line">        life <span class="token operator">=</span> livesImages<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        life <span class="token operator">=</span> livesImages<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token function">endGame</span><span class="token punctuation">(</span>triggeredByBomb<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    life<span class="token punctuation">.</span>texture <span class="token operator">=</span> <span class="token class-name">SKTexture</span><span class="token punctuation">(</span>imageNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;sliceLifeGone&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    life<span class="token punctuation">.</span>xScale <span class="token operator">=</span> <span class="token number">1.3</span></span>
<span class="line">    life<span class="token punctuation">.</span>yScale <span class="token operator">=</span> <span class="token number">1.3</span></span>
<span class="line">    life<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SKAction</span><span class="token punctuation">.</span><span class="token function">scale</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> duration<span class="token punctuation">:</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Note how I&#39;m using <code>SKTexture</code> to modify the contents of a sprite node without having to recreate it, just like in project 14.</p><p>Finally, there&#39;s the <code>endGame()</code> method. I&#39;ve made this accept a parameter that sets whether the game ended because of a bomb, so that we can update the UI appropriately.</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">endGame</span><span class="token punctuation">(</span>triggeredByBomb<span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> isGameEnded <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    isGameEnded <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">    physicsWorld<span class="token punctuation">.</span>speed <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    isUserInteractionEnabled <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line">    bombSoundEffect<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    bombSoundEffect <span class="token operator">=</span> <span class="token nil constant">nil</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> triggeredByBomb <span class="token punctuation">{</span></span>
<span class="line">        livesImages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>texture <span class="token operator">=</span> <span class="token class-name">SKTexture</span><span class="token punctuation">(</span>imageNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;sliceLifeGone&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        livesImages<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>texture <span class="token operator">=</span> <span class="token class-name">SKTexture</span><span class="token punctuation">(</span>imageNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;sliceLifeGone&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        livesImages<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>texture <span class="token operator">=</span> <span class="token class-name">SKTexture</span><span class="token punctuation">(</span>imageNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;sliceLifeGone&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If the game hasn&#39;t already ended, this code stops every object from moving by adjusting the speed of the physics world to be 0. It stops any bomb fuse fizzing, and sets all three lives images to have the same &quot;life gone&quot; graphic. Nothing surprising in there, but you do need to declare <code>isGameEnded</code> as a property for your class, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> isGameEnded <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Even though the game has ended, some actions can still take place. This should be banned if possible, so add these lines to the start of <code>tossEnemies()</code> and <code>touchesMoved()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> isGameEnded <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That&#39;s it, your game is done!</p>`,13),B=n("hr",null,null,-1);function K(r,N){const a=u("router-link"),e=u("VPCard"),l=u("VidStack");return h(),k("div",null,[n("h1",b,[n("a",w,[n("span",null,m(r.$frontmatter.title)+" 관련",1)])]),n("nav",f,[n("ul",null,[n("li",null,[s(a,{to:"#project-23-part-two"},{default:t(()=>[c("Project 23, part two")]),_:1}),n("ul",null,[n("li",null,[s(a,{to:"#follow-the-sequence"},{default:t(()=>[c("Follow the sequence")]),_:1})]),n("li",null,[s(a,{to:"#slice-to-win"},{default:t(()=>[c("Slice to win")]),_:1})]),n("li",null,[s(a,{to:"#game-over-man-sktexture"},{default:t(()=>[c("Game over, man: SKTexture")]),_:1})])])])])]),y,s(e,p(o({title:"100 Days of Swift - Day 78",desc:"Project 23, part two",link:"https://www.hackingwithswift.com/100/78",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),g,n("details",q,[x,s(e,p(o({title:"100 Days of Swift - Day 78 - Follow the sequence",desc:"Follow the sequence",link:"https://www.hackingwithswift.com/read/23/5/follow-the-sequence",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(l,{src:"youtube/tDfZfytNSls"}),S]),T,n("details",E,[_,s(e,p(o({title:"100 Days of Swift - Day 78 - Slice to win",desc:"Slice to win",link:"https://www.hackingwithswift.com/read/23/6/slice-to-win",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(l,{src:"youtube/kzGSiGXbxWo"}),D]),I,n("details",j,[C,s(e,p(o({title:"100 Days of Swift - Day 78 - Game over, man: SKTexture",desc:"Game over, man: SKTexture",link:"https://www.hackingwithswift.com/read/23/7/game-over-man-sktexture",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(l,{src:"youtube/HqrrsfA0sbA"}),A]),B])}const P=d(v,[["render",K],["__file","78.html.vue"]]),O=JSON.parse('{"path":"/swift/100-days-of-swift/78.html","title":"Day 78","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 78","description":"100 Days of Swift > Day 78","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of Swift > Day 78"},{"property":"og:description","content":"Day 78"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swift/78.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swift/78.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 78"}],["meta",{"property":"og:description","content":"100 Days of Swift > Day 78"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.hackingwithswift.com/img/books/hws/23-3.pngs"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 78\\",\\"image\\":[\\"https://www.hackingwithswift.com/img/books/hws/23-3.pngs\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 23, part two","slug":"project-23-part-two","link":"#project-23-part-two","children":[{"level":3,"title":"Follow the sequence","slug":"follow-the-sequence","link":"#follow-the-sequence","children":[]},{"level":3,"title":"Slice to win","slug":"slice-to-win","link":"#slice-to-win","children":[]},{"level":3,"title":"Game over, man: SKTexture","slug":"game-over-man-sktexture","link":"#game-over-man-sktexture","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":12}]},"readingTime":{"minutes":10.08,"words":3023},"filePathRelative":"swift/100-days-of-swift/78.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{P as comp,O as data};
