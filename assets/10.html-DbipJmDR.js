import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as s,t as m,b as n,w as l,n as o,g as c,e as a,d as e,r,o as k}from"./app-U_bew1in.js";const g={},w={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},y=s("hr",null,null,-1),b=s("h2",{id:"classes",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#classes"},[s("span",null,"Classes")])],-1),_=s("p",null,"At first, classes seem very similar to structs because we use them to create new data types with properties and methods. However, they introduce a new, important, and complex feature called inheritance – the ability to make one class build on the foundations of another.",-1),D=s("p",null,"This is a powerful feature, there’s no doubt about it, and there is no way to avoid using classes when you start building real iOS apps. But please remember to keep your code simple: just because a feature exists, it doesn’t mean you need to use it. As Martin Fowler wrote, “any fool can write code that a computer can understand, but good programmers write code that humans can understand.”",-1),x=s("p",null,"Today you have eight one-minute videos to watch, and you’ll meet things like method overrides, final classes, and deinitializers. Once you’ve watched each video and optionally gone through the extra reading, there’s a short test to help make sure you’ve understood what was taught.",-1),S=s("h3",{id:"_1-creating-your-own-classes",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-creating-your-own-classes"},[s("span",null,"1. Creating your own classes")])],-1),C={class:"hint-container details"},j=s("summary",null,"1. Creating your own classes",-1),q=a(`<p>Classes are similar to structs in that they allow you to create new types with properties and methods, but they have five important differences and I’m going to walk you through each of those differences one at a time.</p><p>The first difference between classes and structs is that classes never come with a memberwise initializer. This means if you have properties in your class, you must always create your own initializer.</p><p>For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> breed<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> breed<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>breed <span class="token operator">=</span> breed</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Creating instances of that class looks just the same as if it were a struct:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> poppy <span class="token operator">=</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Poppy&quot;</span></span><span class="token punctuation">,</span> breed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Poodle&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,6),z=a('<div class="hint-container info"><p class="hint-container-title">1. Creating your own classes - Additional</p><ul><li>Optional: <a href="https://hackingwithswfit.com/quick-start/understanding-swift/why-does-swift-have-both-classes-and-structs" target="_blank" rel="noopener noreferrer">Why does Swift have both classes and structs?</a></li><li>Test: <a href="https://hackingwithswfit.com/review/creating-your-own-classes" target="_blank" rel="noopener noreferrer">Creating your own classes</a></li></ul></div><h3 id="_2-class-inheritance" tabindex="-1"><a class="header-anchor" href="#_2-class-inheritance"><span>2. Class inheritance</span></a></h3>',2),T={class:"hint-container details"},P=s("summary",null,"2. Class inheritance",-1),O=a(`<p>The second difference between classes and structs is that you can create a class based on an existing class – it inherits all the properties and methods of the original class, and can add its own on top.</p><p>This is called class inheritance or subclassing, the class you inherit from is called the “parent” or “super” class, and the new class is called the “child” class.</p><p>Here’s the <code>Dog</code> class we just created:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> breed<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> breed<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>breed <span class="token operator">=</span> breed</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We could create a new class based on that one called <code>Poodle</code>. It will inherit the same properties and initializer as <code>Dog</code> by default:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Poodle</span><span class="token punctuation">:</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, we can also give <code>Poodle</code> its own initializer. We know it will always have the breed “Poodle”, so we can make a new initializer that only needs a <code>name</code> property. Even better, we can make the <code>Poodle</code> initializer call the <code>Dog</code> initializer directly so that all the same setup happens:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Poodle</span><span class="token punctuation">:</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> name<span class="token punctuation">,</span> breed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Poodle&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For safety reasons, Swift always makes you call <code>super.init()</code> from child classes – just in case the parent class does some important work when it’s created.</p>`,9),W=a('<div class="hint-container info"><p class="hint-container-title">2. Class inheritance - Additional</p><ul><li>Optional: <a href="https://hackingwithswfit.com/quick-start/understanding-swift/why-dont-swift-classes-have-a-memberwise-initializer" target="_blank" rel="noopener noreferrer">Why don’t Swift classes have a memberwise initializer?</a></li><li>Test: <a href="https://hackingwithswfit.com/review/class-inheritance" target="_blank" rel="noopener noreferrer">Class inheritance</a></li></ul></div><h3 id="_3-overriding-methods" tabindex="-1"><a class="header-anchor" href="#_3-overriding-methods"><span>3. Overriding methods</span></a></h3>',2),A={class:"hint-container details"},F=s("summary",null,"3. Overriding methods",-1),M=a(`<p>Child classes can replace parent methods with their own implementations – a process known as overriding. Here’s a trivial <code>Dog</code> class with a <code>makeNoise()</code> method:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">makeNoise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Woof!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If we create a new <code>Poodle</code> class that inherits from <code>Dog</code>, it will inherit the <code>makeNoise()</code> method. So, this will print “Woof!”:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Poodle</span><span class="token punctuation">:</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> poppy <span class="token operator">=</span> <span class="token class-name">Poodle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">poppy<span class="token punctuation">.</span><span class="token function">makeNoise</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Method overriding allows us to change the implementation of <code>makeNoise()</code> for the <code>Poodle</code> class.</p><p>Swift requires us to use <code>override func</code> rather than just <code>func</code> when overriding a method – it stops you from overriding a method by accident, and you’ll get an error if you try to override something that doesn’t exist on the parent class:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Poodle</span><span class="token punctuation">:</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">makeNoise</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Yip!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With that change, <code>poppy.makeNoise()</code> will print “Yip!” rather than “Woof!”.</p>`,9),N=a('<div class="hint-container info"><p class="hint-container-title">3. Overriding methods - Additional</p><ul><li>Optional: <a href="https://hackingwithswfit.com/quick-start/understanding-swift/when-would-you-want-to-override-a-method" target="_blank" rel="noopener noreferrer">When would you want to override a method?</a></li><li>Test: <a href="https://hackingwithswfit.com/review/overriding-methods" target="_blank" rel="noopener noreferrer">Overriding methods</a></li></ul></div><h3 id="_4-final-classes" tabindex="-1"><a class="header-anchor" href="#_4-final-classes"><span>4. Final classes</span></a></h3>',2),H={class:"hint-container details"},B=s("summary",null,"4. Final classes",-1),I=a(`<p>Although class inheritance is very useful – and in fact large parts of Apple’s platforms require you to use it – sometimes you want to disallow other developers from building their own class based on yours.</p><p>Swift gives us a <code>final</code> keyword just for this purpose: when you declare a class as being final, no other class can inherit from it. This means they can’t override your methods in order to change your behavior – they need to use your class the way it was written.</p><p>To make a class final just put the <code>final</code> keyword before it, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">var</span> breed<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> breed<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name</span>
<span class="line">        <span class="token keyword">self</span><span class="token punctuation">.</span>breed <span class="token operator">=</span> breed</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),V=a('<div class="hint-container info"><p class="hint-container-title">4. Final classes - Additional</p><ul><li>Optional: <a href="https://hackingwithswfit.com/quick-start/understanding-swift/which-classes-should-be-declared-as-final" target="_blank" rel="noopener noreferrer">Which classes should be declared as final?</a></li><li>Test: <a href="https://hackingwithswfit.com/review/final-classes" target="_blank" rel="noopener noreferrer">Final classes</a></li></ul></div><h3 id="_5-copying-objects" tabindex="-1"><a class="header-anchor" href="#_5-copying-objects"><span>5. Copying objects</span></a></h3>',2),J={class:"hint-container details"},R=s("summary",null,"5. Copying objects",-1),Y=a(`<p>The third difference between classes and structs is how they are copied. When you copy a struct, both the original and the copy are different things – changing one won’t change the other. When you copy a class, both the original and the copy point to the same thing, so changing one does change the other.</p><p>For example, here’s a simple <code>Singer</code> class that has a <code>name</code> property with a default value:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Singer</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Taylor Swift&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If we create an instance of that class and prints its name, we’ll get “Taylor Swift”:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> singer <span class="token operator">=</span> <span class="token class-name">Singer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>singer<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Now let’s create a second variable from the first one and change its name:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> singerCopy <span class="token operator">=</span> singer</span>
<span class="line">singerCopy<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Justin Bieber&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Because of the way classes work, both <code>singer</code> and <code>singerCopy</code> point to the same object in memory, so when we print the singer name again we’ll see “Justin Bieber”:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span>singer<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>On the other hand, if <code>Singer</code> were a struct then we would get “Taylor Swift” printed a second time:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">Singer</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Taylor Swift&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),E=a('<div class="hint-container info"><p class="hint-container-title">5. Copying objects - Additional</p><ul><li>Optional: <a href="https://hackingwithswfit.com/quick-start/understanding-swift/why-do-copies-of-a-class-share-their-data" target="_blank" rel="noopener noreferrer">Why do copies of a class share their data?</a></li><li>test: <a href="https://hackingwithswfit.com/review/copying-objects" target="_blank" rel="noopener noreferrer">Copying objects</a></li></ul></div><h3 id="_6-deinitializers" tabindex="-1"><a class="header-anchor" href="#_6-deinitializers"><span>6. Deinitializers</span></a></h3>',2),G={class:"hint-container details"},K=s("summary",null,"6. Deinitializers",-1),Z=a(`<p>The fourth difference between classes and structs is that classes can have deinitializers – code that gets run when an instance of a class is destroyed.</p><p>To demonstrate this, here’s a <code>Person</code> class with a <code>name</code> property, a simple initializer, and a <code>printGreeting()</code> method that prints a message:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;John Doe&quot;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is alive!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">printGreeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, I&#39;m </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We’re going to create a few instances of the <code>Person</code> class inside a loop, because each time the loop goes around a new person will be created then destroyed:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token omit keyword">_</span> <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">3</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    person<span class="token punctuation">.</span><span class="token function">printGreeting</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And now for the deinitializer. This will be called when the <code>Person</code> instance is being destroyed:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">deinit</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> is no more!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),X=a('<div class="hint-container info"><p class="hint-container-title">6. Deinitializers - Additional</p><ul><li>Optional: <a href="https://hackingwithswfit.com/quick-start/understanding-swift/why-do-classes-have-deinitializers-and-structs-dont" target="_blank" rel="noopener noreferrer">Why do classes have deinitializers and structs don’t?</a></li><li>Test: <a href="https://hackingwithswfit.com/review/deinitializers" target="_blank" rel="noopener noreferrer">Deinitializers</a></li></ul></div><h3 id="_7-mutability" tabindex="-1"><a class="header-anchor" href="#_7-mutability"><span>7. Mutability</span></a></h3>',2),L={class:"hint-container details"},Q=s("summary",null,"7. Mutability",-1),$=a(`<p>The final difference between classes and structs is the way they deal with constants. If you have a constant struct with a variable property, that property can’t be changed because the struct itself is constant.</p><p>However, if you have a constant class with a variable property, that property can be changed. Because of this, classes don’t need the <code>mutating</code> keyword with methods that change properties; that’s only needed with structs.</p><p>This difference means you can change any variable property on a class even when the class is created as a constant – this is perfectly valid code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Singer</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Taylor Swift&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> taylor <span class="token operator">=</span> <span class="token class-name">Singer</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">taylor<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Ed Sheeran&quot;</span></span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>taylor<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you want to stop that from happening you need to make the property constant:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Singer</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Taylor Swift&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),U=a('<div class="hint-container info"><p class="hint-container-title">7. Mutability - Additional</p><ul><li>Optional: <a href="https://hackingwithswfit.com/quick-start/understanding-swift/why-can-variable-properties-in-constant-classes-be-changed" target="_blank" rel="noopener noreferrer">Why can variable properties in constant classes be changed?</a></li><li>Test: <a href="https://hackingwithswfit.com/review/mutability" target="_blank" rel="noopener noreferrer">Mutability</a></li></ul></div><h3 id="_8-classes-summary" tabindex="-1"><a class="header-anchor" href="#_8-classes-summary"><span>8. Classes summary</span></a></h3>',2),ss={class:"hint-container details"},ns=s("summary",null,"8. Classes summary",-1),as=a("<p>You’ve made it to the end of the eighth part of this series, so let’s summarize:</p><ol><li>Classes and structs are similar, in that they can both let you create your own types with properties and methods.</li><li>One class can inherit from another, and it gains all the properties and methods of the parent class. It’s common to talk about class hierarchies – one class based on another, which itself is based on another.</li><li>You can mark a class with the <code>final</code> keyword, which stops other classes from inheriting from it.</li><li>Method overriding lets a child class replace a method in its parent class with a new implementation.</li><li>When two variables point at the same class instance, they both point at the same piece of memory – changing one changes the other.</li><li>Classes can have a deinitializer, which is code that gets run when an instance of the class is destroyed.</li><li>Classes don’t enforce constants as strongly as structs – if a property is declared as a variable, it can be changed regardless of how the class instance was created.</li></ol>",2),es=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"8. Classes summary - Additional"),s("ul",null,[s("li",null,[e("Test: "),s("a",{href:"https://hackingwithswfit.com/review/classes-summary",target:"_blank",rel:"noopener noreferrer"},"Classes")])])],-1),ts=s("hr",null,null,-1);function is(d,ls){const t=r("router-link"),i=r("VPCard"),p=r("VidStack");return k(),h("div",null,[s("h1",w,[s("a",v,[s("span",null,m(d.$frontmatter.title)+" 관련",1)])]),s("nav",f,[s("ul",null,[s("li",null,[n(t,{to:"#classes"},{default:l(()=>[e("Classes")]),_:1}),s("ul",null,[s("li",null,[n(t,{to:"#_1-creating-your-own-classes"},{default:l(()=>[e("1. Creating your own classes")]),_:1})]),s("li",null,[n(t,{to:"#_2-class-inheritance"},{default:l(()=>[e("2. Class inheritance")]),_:1})]),s("li",null,[n(t,{to:"#_3-overriding-methods"},{default:l(()=>[e("3. Overriding methods")]),_:1})]),s("li",null,[n(t,{to:"#_4-final-classes"},{default:l(()=>[e("4. Final classes")]),_:1})]),s("li",null,[n(t,{to:"#_5-copying-objects"},{default:l(()=>[e("5. Copying objects")]),_:1})]),s("li",null,[n(t,{to:"#_6-deinitializers"},{default:l(()=>[e("6. Deinitializers")]),_:1})]),s("li",null,[n(t,{to:"#_7-mutability"},{default:l(()=>[e("7. Mutability")]),_:1})]),s("li",null,[n(t,{to:"#_8-classes-summary"},{default:l(()=>[e("8. Classes summary")]),_:1})])])])])]),y,n(i,o(c({title:"100 Days of Swift - Day 10",desc:"Classes",link:"https://www.hackingwithswift.com/100/10",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),b,_,D,x,S,s("details",C,[j,n(i,o(c({title:"100 Days of Swift - Day 10 -  1. Creating your own classes",desc:"1. Creating your own classes",link:"https://hackingwithswift.com/sixty/8/1/creating-your-own-classes",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(p,{src:"youtube/dqPTykJaHys"}),q]),z,s("details",T,[P,n(i,o(c({title:"100 Days of Swift - Day 10 -  2. Class inheritance",desc:"2. Class inheritance",link:"https://hackingwithswift.com/sixty/8/2/class-inheritance",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(p,{src:"youtube/zv8Lia5Ertk"}),O]),W,s("details",A,[F,n(i,o(c({title:"100 Days of Swift - Day 10 -  3. Overriding methods",desc:"3. Overriding methods",link:"https://hackingwithswift.com/sixty/8/3/overriding-methods",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(p,{src:"youtube/T8FrBuSzEJA"}),M]),N,s("details",H,[B,n(i,o(c({title:"100 Days of Swift - Day 10 -  4. Final classes",desc:"4. Final classes",link:"https://hackingwithswift.com/sixty/8/4/final-classes",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(p,{src:"youtube/cfQshjRXhhw"}),I]),V,s("details",J,[R,n(i,o(c({title:"100 Days of Swift - Day 10 -  5. Copying objects",desc:"5. Copying objects",link:"https://hackingwithswift.com/sixty/8/5/copying-objects",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(p,{src:"youtube/og-rHqYYM9A"}),Y]),E,s("details",G,[K,n(i,o(c({title:"100 Days of Swift - Day 10 -  6. Deinitializers",desc:"6. Deinitializers",link:"https://hackingwithswift.com/sixty/8/6/deinitializers",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(p,{src:"youtube/OH1J1DXzbl4"}),Z]),X,s("details",L,[Q,n(i,o(c({title:"100 Days of Swift - Day 10 -  7. Mutability",desc:"7. Mutability",link:"https://hackingwithswift.com/sixty/8/7/mutability",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(p,{src:"youtube/Gw3mGIybT68"}),$]),U,s("details",ss,[ns,n(i,o(c({title:"100 Days of Swift - Day 10 -  8. Classes summary",desc:"8. Classes summary",link:"https://hackingwithswift.com/sixty/8/8/classes-summary",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),n(p,{src:"youtube/wF1ovHy2KO8"}),as]),es,ts])}const ps=u(g,[["render",is],["__file","10.html.vue"]]),rs=JSON.parse('{"path":"/swift/100-days-of-swift/10.html","title":"Day 10","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 10","description":"100 Days of Swift > Day 10","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of Swift > Day 10"},{"property":"og:description","content":"Day 10"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swift/10.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swift/10.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 10"}],["meta",{"property":"og:description","content":"100 Days of Swift > Day 10"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 10\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Classes","slug":"classes","link":"#classes","children":[{"level":3,"title":"1. Creating your own classes","slug":"_1-creating-your-own-classes","link":"#_1-creating-your-own-classes","children":[]},{"level":3,"title":"2. Class inheritance","slug":"_2-class-inheritance","link":"#_2-class-inheritance","children":[]},{"level":3,"title":"3. Overriding methods","slug":"_3-overriding-methods","link":"#_3-overriding-methods","children":[]},{"level":3,"title":"4. Final classes","slug":"_4-final-classes","link":"#_4-final-classes","children":[]},{"level":3,"title":"5. Copying objects","slug":"_5-copying-objects","link":"#_5-copying-objects","children":[]},{"level":3,"title":"6. Deinitializers","slug":"_6-deinitializers","link":"#_6-deinitializers","children":[]},{"level":3,"title":"7. Mutability","slug":"_7-mutability","link":"#_7-mutability","children":[]},{"level":3,"title":"8. Classes summary","slug":"_8-classes-summary","link":"#_8-classes-summary","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":9}]},"readingTime":{"minutes":7.26,"words":2177},"filePathRelative":"swift/100-days-of-swift/10.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{ps as comp,rs as data};
