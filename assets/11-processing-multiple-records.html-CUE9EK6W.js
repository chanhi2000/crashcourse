import{_ as v}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as b,a as s,t as k,b as i,w as e,n as g,g as f,d as n,e as d,r,o as _}from"./app-U_bew1in.js";const x={},y={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},C={class:"table-of-contents"},A=s("hr",null,null,-1),j=s("hr",null,null,-1),N=s("p",null,[n("Often, you need to consider multiple lines at a time to make a decision, such as the paragraph mode examples seen earlier. Sometimes, you need to match a particular record and then get records surrounding the matched record. The "),s("code",null,"condX{actionX}"),n(" shortcut makes it easy to code state machines concisely, which is useful to solve such multiple record use cases. See "),s("a",{href:"https://softwareengineering.stackexchange.com/questions/47806/examples-of-finite-state-machines",target:"_blank",rel:"noopener noreferrer"},"softwareengineering: FSM examples"),n(" if you are not familiar with state machines.")],-1),R={class:"hint-container info"},S=s("p",{class:"hint-container-title"},"Info",-1),T={href:"https://github.com/learnbyexample/learn_gnuawk/tree/master/example_files",target:"_blank",rel:"noopener noreferrer"},E=s("hr",null,null,-1),P=s("h2",{id:"processing-consecutive-records",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#processing-consecutive-records"},[s("span",null,"Processing consecutive records")])],-1),q=s("code",null,"awk",-1),$=s("code",null,"0",-1),z=s("p",null,"match and print two consecutive records the first record should contain 'he' and the second one should contain 'you'",-1),F=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token string"},"'p ~ /he/ && /you/{print p ORS $0} {p=$0}'"),n(" para.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Hi there")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# How are you")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),H=s("p",null,"same filtering as above, but print only the first record",-1),G=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token string"},"'p ~ /he/ && /you/{print p} {p=$0}'"),n(" para.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Hi there")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),O=s("p",null,"same filtering as above, but print only the second record",-1),Q=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token string"},"'p ~ /he/ && /you/; {p=$0}'"),n(" para.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# How are you")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),I=d(`<hr><h2 id="context-matching" tabindex="-1"><a class="header-anchor" href="#context-matching"><span>Context matching</span></a></h2><p>Sometimes you want not just the matching records, but the records relative to the matches as well. For example, it could be to see the comments at the start of a function block that was matched while searching a program file. Or, it could be to see extended information from a log file while searching for a particular error message.</p><p>Consider this sample input file:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> context.txt</span>
<span class="line"><span class="token comment"># blue</span></span>
<span class="line"><span class="token comment">#     toy</span></span>
<span class="line"><span class="token comment">#     flower</span></span>
<span class="line"><span class="token comment">#     sand stone</span></span>
<span class="line"><span class="token comment"># light blue</span></span>
<span class="line"><span class="token comment">#     flower</span></span>
<span class="line"><span class="token comment">#     sky</span></span>
<span class="line"><span class="token comment">#     water</span></span>
<span class="line"><span class="token comment"># language</span></span>
<span class="line"><span class="token comment">#     english</span></span>
<span class="line"><span class="token comment">#     hindi</span></span>
<span class="line"><span class="token comment">#     spanish</span></span>
<span class="line"><span class="token comment">#     tamil</span></span>
<span class="line"><span class="token comment"># programming language</span></span>
<span class="line"><span class="token comment">#     python</span></span>
<span class="line"><span class="token comment">#     kotlin</span></span>
<span class="line"><span class="token comment">#     ruby</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="case-1" tabindex="-1"><a class="header-anchor" href="#case-1"><span>Case 1</span></a></h3><p>Here&#39;s an example that emulates the <code>grep --no-group-separator -A&lt;n&gt;</code> functionality. The <code>n &amp;&amp; n--</code> trick used in the example below works like this:</p><ul><li>If initially <code>n=2</code>, then we get <ul><li><code>2 &amp;&amp; 2</code> — evaluates to <code>true</code> and <code>n</code> becomes <code>1</code></li><li><code>1 &amp;&amp; 1</code> — evaluates to <code>true</code> and <code>n</code> becomes <code>0</code></li><li><code>0 &amp;&amp;</code> — evaluates to <code>false</code> and <code>n</code> doesn&#39;t change</li></ul></li><li>Note that when conditionals are connected with logical <code>&amp;&amp;</code>, the second expression will not be executed at all if the first one turns out to be <code>false</code> because the overall result will always be <code>false</code>. Same is the case if the first expression evaluates to <code>true</code> with the logical <code>||</code> operator. Such logical operators are also known as <strong>short-circuit</strong> operators. Thus, in the above case, <code>n--</code> won&#39;t be executed when <code>n</code> is <code>0</code> on the left hand side. This prevents n going negative and <code>n &amp;&amp; n--</code> will never become true unless <code>n</code> is assigned again.</li></ul>`,8),J=s("blockquote",null,[s("p",null,[n("same as: "),s("code",null,"grep --no-group-separator -A1 'blue'")])],-1),M=s("p",null,"print the matching line as well as the one that follows it",-1),B=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token string"},"'/blue/{n=2} n && n--'"),n(" context.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# blue")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"#     toy")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# light blue")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"#     flower")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),L=s("p",null,[n("overlapping example, "),s("code",null,"n"),n(" gets re-assigned before reaching "),s("code",null,"0")],-1),V=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token string"},"'/toy|flower/{n=2} n && n--{print NR, $0}'"),n(" context.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 2     toy")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3     flower")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 4     sand stone")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 6     flower")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 7     sky")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),K=s("p",null,"doesn't allow overlapping cases to re-assign the counter",-1),U=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token string"},"'!n && /toy|flower/{n=2} n && n--{print NR, $0}'"),n(" context.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 2     toy")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3     flower")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 6     flower")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 7     sky")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),D=s("p",null,"Once you've understood the above examples, the rest of the examples in this section should be easier to comprehend. They are all variations of the logic used above and re-arranged to solve the use case being discussed.",-1),Y=s("h3",{id:"case-2",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#case-2"},[s("span",null,"Case 2")])],-1),Z=s("p",null,[n("Print "),s("code",null,"n"),n(" records after match. This is similar to previous case, except that the matching record isn't printed.")],-1),X=s("p",null,[n("print 1 line after the matching line for overlapping cases, "),s("code",null,"n"),n(" gets re-assigned before reaching "),s("code",null,"0")],-1),W=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token string"},"'n && n--; /language/{n=1}'"),n(" context.txt")]),n(`
`),s("span",{class:"line"},"    english"),n(`
`),s("span",{class:"line"},"    python"),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ss=s("p",null,[n("print "),s("code",null,"2"),n(" lines after the matching line doesn't allow overlapping cases to re-assign the counter")],-1),ns=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token string"},"'!n && /toy|flower/{n=2; next} n && n--'"),n(" context.txt")]),n(`
`),s("span",{class:"line"},"    flower"),n(`
`),s("span",{class:"line"},"    sand stone"),n(`
`),s("span",{class:"line"},"    sky"),n(`
`),s("span",{class:"line"},"    water"),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),es=s("h3",{id:"case-3",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#case-3"},[s("span",null,"Case 3")])],-1),as=s("p",null,[n("Here's how to print the "),s("code",null,"n"),n("th record after the matching record.")],-1),ls=s("p",null,"print only the 2nd line found after the matching line the array saves the matching result for each record doesn't rely on a counter, thus works for overlapping cases",-1),is=s("blockquote",null,[s("p",null,[n("same as: "),s("code",null,"awk -v n=2 'a[NR-n]; /toy|flower/{a[NR]=1}'")])],-1),ts=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token parameter variable"},"-v"),n(),s("span",{class:"token assign-left variable"},"n"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"2"),n(),s("span",{class:"token string"},"'NR in a; /toy|flower/{a[NR+n]}'"),n(" context.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"#     sand stone")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# light blue")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"#     water")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),cs=s("p",null,[n("print only the 3rd line found after matching line "),s("code",null,"n && !--n"),n(" will be true only when "),s("code",null,"--n"),n(" yields "),s("code",null,"0"),n(" overlapping cases won't work as "),s("code",null,"n"),n(" gets re-assigned before going to "),s("code",null,"0")],-1),os=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token string"},"'n && !--n; /language/{n=3}'"),n(" context.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"#     spanish")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"#     ruby")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),rs=s("h3",{id:"case-4",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#case-4"},[s("span",null,"Case 4")])],-1),ds=s("p",null,[n("Print "),s("code",null,"n"),n(" records before the match. Printing the matching record as well is left as an exercise. Since the file is being read in forward direction, and the problem statement is to print something before the matching record, overlapping situation like the previous examples doesn't occur.")],-1),ps=s("p",null,[s("code",null,"i>0"),n(" is used because "),s("code",null,"NR"),n(" starts from "),s("code",null,"1")],-1),ms=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token parameter variable"},"-v"),n(),s("span",{class:"token assign-left variable"},"n"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"2"),n(),s("span",{class:"token string"},"'/toy|flower/{for(i=NR-n; i<NR; i++) if(i>0) print a[i]}"),n(`
`),s("span",{class:"line"},"            {a[NR]=$0}'"),n(" context.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# blue")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# blue")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"#     toy")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"#     sand stone")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# light blue")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),us=s("h3",{id:"case-5",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#case-5"},[s("span",null,"Case 5")])],-1),hs=s("p",null,[n("Print "),s("code",null,"n"),n("th record before the matching record.")],-1),vs=s("p",null,[n("if the count is small enough, you can save them in variables this one prints the 2nd line before the matching line "),s("code",null,"NR>2"),n(" is needed as first 2 records shouldn't be considered for a match")],-1),bs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token string"},"'NR>2 && /toy|flower/{print p2} {p2=p1; p1=$0}'"),n(" context.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# blue")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"#     sand stone")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ks=s("p",null,"else, use an array to save previous records",-1),gs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token parameter variable"},"-v"),n(),s("span",{class:"token assign-left variable"},"n"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"4"),n(),s("span",{class:"token string"},"'NR>n && /age/{print a[NR-n]} {a[NR]=$0}'"),n(" context.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# light blue")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"#     english")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),fs=d(`<hr><h2 id="records-bounded-by-distinct-markers" tabindex="-1"><a class="header-anchor" href="#records-bounded-by-distinct-markers"><span>Records bounded by distinct markers</span></a></h2><p>This section will cover cases where the input file will always contain the same number of starting and ending patterns, arranged in an alternating fashion. For example, there cannot be two starting patterns appearing without an ending pattern between them and vice versa. Lines of text inside and between such groups are optional.</p><p>The sample file shown below will be used to illustrate examples in this section. For simplicity, assume that the starting pattern is marked by <code>start</code> and the ending pattern by <code>end</code>. They have also been given group numbers to make it easier to analyze the output.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> uniform.txt</span>
<span class="line"><span class="token comment"># mango</span></span>
<span class="line"><span class="token comment"># icecream</span></span>
<span class="line"><span class="token comment"># --start 1--</span></span>
<span class="line"><span class="token comment"># 1234</span></span>
<span class="line"><span class="token comment"># 6789</span></span>
<span class="line"><span class="token comment"># **end 1**</span></span>
<span class="line"><span class="token comment"># how are you</span></span>
<span class="line"><span class="token comment"># have a nice day</span></span>
<span class="line"><span class="token comment"># --start 2--</span></span>
<span class="line"><span class="token comment"># a</span></span>
<span class="line"><span class="token comment"># b</span></span>
<span class="line"><span class="token comment"># c</span></span>
<span class="line"><span class="token comment"># **end 2**</span></span>
<span class="line"><span class="token comment"># par,far,mar,tar</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="case-1-1" tabindex="-1"><a class="header-anchor" href="#case-1-1"><span>Case 1</span></a></h3><p>Processing all the groups of records based on the distinct markers, including the records matched by markers themselves. For simplicity, the below command will just print all such records.</p>`,7),_s=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token string"},"'/start/{f=1} f; /end/{f=0}'"),n(" uniform.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# --start 1--")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1234")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 6789")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# **end 1**")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# --start 2--")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# a")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# b")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# c")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# **end 2**")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),xs=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"Info"),s("p",null,[n("Similar to "),s("code",null,"sed -n '/start/,/end/p'"),n(" you can also use "),s("code",null,"awk '/start/,/end/'"),n(" but the state machine format is more suitable for the various cases to follow.")])],-1),ys=s("h3",{id:"case-2-1",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#case-2-1"},[s("span",null,"Case 2")])],-1),ws=s("p",null,"Processing all the groups of records but excluding the records matched by markers themselves.",-1),Cs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token string"},`'/end/{f=0} f{print "*", $0} /start/{f=1}'`),n(" uniform.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# * 1234")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# * 6789")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# * a")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# * b")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# * c")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),As=s("h3",{id:"case-3-4",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#case-3-4"},[s("span",null,"Case 3-4")])],-1),js=s("p",null,"Processing all the groups of records but excluding one of the markers.",-1),Ns=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token string"},"'/start/{f=1} /end/{f=0} f'"),n(" uniform.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# --start 1--")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1234")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 6789")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# --start 2--")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# a")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# b")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# c")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Rs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token string"},"'f; /start/{f=1} /end/{f=0}'"),n(" uniform.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1234")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 6789")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# **end 1**")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# a")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# b")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# c")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# **end 2**")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ss=s("p",null,[n("The next four cases are obtained by just using "),s("code",null,"!f"),n(" instead of "),s("code",null,"f"),n(" from the cases shown above.")],-1),Ts=s("h3",{id:"case-5-1",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#case-5-1"},[s("span",null,"Case 5")])],-1),Es=s("p",null,"Processing all input records except the groups of records bound by the markers.",-1),Ps=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token string"},`'/start/{f=1} !f{print $0 "."} /end/{f=0}'`),n(" uniform.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# mango.")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# icecream.")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# how are you.")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# have a nice day.")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# par,far,mar,tar.")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),qs=s("h3",{id:"case-6",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#case-6"},[s("span",null,"Case 6")])],-1),$s=s("p",null,"Processing all input records except the groups of records between the markers.",-1),zs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token string"},"'/end/{f=0} !f; /start/{f=1}'"),n(" uniform.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# mango")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# icecream")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# --start 1--")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# **end 1**")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# how are you")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# have a nice day")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# --start 2--")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# **end 2**")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# par,far,mar,tar")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Fs=s("h3",{id:"case-7-8",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#case-7-8"},[s("span",null,"Case 7-8")])],-1),Hs=s("p",null,"Similar to case 6, but include only one of the markers.",-1),Gs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token string"},"'!f; /start/{f=1} /end/{f=0}'"),n(" uniform.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# mango")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# icecream")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# --start 1--")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# how are you")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# have a nice day")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# --start 2--")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# par,far,mar,tar")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Os=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token string"},"'/start/{f=1} /end/{f=0} !f'"),n(" uniform.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# mango")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# icecream")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# **end 1**")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# how are you")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# have a nice day")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# **end 2**")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# par,far,mar,tar")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Qs=s("hr",null,null,-1),Is=s("h2",{id:"specific-blocks",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#specific-blocks"},[s("span",null,"Specific blocks")])],-1),Js=s("p",null,"Instead of working with all the groups (or blocks) bound by the markers, this section will discuss how to choose blocks based on an additional criteria.",-1),Ms=s("p",null,"Here's how you can process only the first matching block.",-1),Bs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token string"},"'/start/{f=1} f; /end/{exit}'"),n(" uniform.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# --start 1--")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1234")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 6789")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# **end 1**")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ls=s("p",null,"use other tricks discussed in previous section as needed",-1),Vs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token string"},"'/end/{exit} f; /start/{f=1}'"),n(" uniform.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1234")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 6789")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ks=s("p",null,"Getting last block alone involves lot more work, unless you happen to know how many blocks are present in the input file.",-1),Us=s("p",null,"reverse input linewise, change the order of comparison, reverse again might not work if RS has to be something other than newline",-1),Ds=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"tac"),n(" uniform.txt "),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token function"},"awk"),n(),s("span",{class:"token string"},"'/end/{f=1} f; /start/{exit}'"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token function"},"tac")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# --start 2--")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# a")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# b")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# c")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# **end 2**")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ys=s("p",null,"or, save the blocks in a buffer and print the last one alone",-1),Zs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token string"},"'/start/{f=1; b=$0; next} f{b=b ORS $0} /end/{f=0}"),n(`
`),s("span",{class:"line"},"     END{print b}'"),n(" uniform.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# --start 2--")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# a")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# b")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# c")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# **end 2**")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Xs=s("p",null,[n("Only the "),s("code",null,"n"),n("th block.")],-1),Ws=s("blockquote",null,[s("p",null,[n("can also use: "),s("code",null,"awk -v n=2 '/4/{c++} c==n{print; if(/6/) exit}'")])],-1),sn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"seq"),n(),s("span",{class:"token number"},"30"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token function"},"awk"),n(),s("span",{class:"token parameter variable"},"-v"),n(),s("span",{class:"token assign-left variable"},"n"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"2"),n(),s("span",{class:"token string"},"'/4/{c++} c==n; /6/ && c==n{exit}'")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 14")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 15")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 16")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),nn=s("p",null,"All blocks greater than nth block.",-1),en=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"seq"),n(),s("span",{class:"token number"},"30"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token function"},"awk"),n(),s("span",{class:"token parameter variable"},"-v"),n(),s("span",{class:"token assign-left variable"},"n"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"1"),n(),s("span",{class:"token string"},"'/4/{f=1; c++} f && c>n; /6/{f=0}'")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 14")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 15")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 16")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 24")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 25")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 26")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),an=s("p",null,[n("Excluding the "),s("code",null,"n"),n("th block.")],-1),ln=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"seq"),n(),s("span",{class:"token number"},"30"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token function"},"awk"),n(),s("span",{class:"token parameter variable"},"-v"),n(),s("span",{class:"token assign-left variable"},"n"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"2"),n(),s("span",{class:"token string"},"'/4/{f=1; c++} f && c!=n; /6/{f=0}'")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 4")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 5")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 6")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 24")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 25")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 26")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),tn=s("p",null,"All blocks, only if the records between the markers match an additional condition.",-1),cn=s("p",null,"additional condition here is a record with entire content as '15'",-1),on=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"seq"),n(),s("span",{class:"token number"},"30"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token function"},"awk"),n(),s("span",{class:"token string"},"'/4/{f=1; buf=$0; m=0; next}"),n(`
`),s("span",{class:"line"},"              f{buf=buf ORS $0}"),n(`
`),s("span",{class:"line"},"              /6/{f=0; if(m) print buf}"),n(`
`),s("span",{class:"line"},`              $0=="15"{m=1}'`)]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 14")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 15")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 16")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),rn=d(`<hr><h2 id="broken-blocks" tabindex="-1"><a class="header-anchor" href="#broken-blocks"><span>Broken blocks</span></a></h2><p>Sometimes, you can have markers in random order and mixed in different ways. In such cases, to work with blocks without any other marker present in between them, the buffer approach comes in handy again.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> broken.txt</span>
<span class="line"><span class="token comment"># qqqqqqqqqqqqqqqq</span></span>
<span class="line"><span class="token comment"># error 1</span></span>
<span class="line"><span class="token comment"># hi</span></span>
<span class="line"><span class="token comment"># error 2</span></span>
<span class="line"><span class="token comment"># 1234</span></span>
<span class="line"><span class="token comment"># 6789</span></span>
<span class="line"><span class="token comment"># state 1</span></span>
<span class="line"><span class="token comment"># bye</span></span>
<span class="line"><span class="token comment"># state 2</span></span>
<span class="line"><span class="token comment"># error 3</span></span>
<span class="line"><span class="token comment"># xyz</span></span>
<span class="line"><span class="token comment"># error 4</span></span>
<span class="line"><span class="token comment"># abcd</span></span>
<span class="line"><span class="token comment"># state 3</span></span>
<span class="line"><span class="token comment"># zzzzzzzzzzzzzzzz</span></span>
<span class="line"></span>
<span class="line"><span class="token function">awk</span> <span class="token string">&#39;/error/{f=1; buf=$0; next}</span>
<span class="line">     f{buf=buf ORS $0}</span>
<span class="line">     /state/{if(f) print buf; f=0}&#39;</span> broken.txt</span>
<span class="line"><span class="token comment"># error 2</span></span>
<span class="line"><span class="token comment"># 1234</span></span>
<span class="line"><span class="token comment"># 6789</span></span>
<span class="line"><span class="token comment"># state 1</span></span>
<span class="line"><span class="token comment"># error 4</span></span>
<span class="line"><span class="token comment"># abcd</span></span>
<span class="line"><span class="token comment"># state 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>This chapter covered various examples of working with multiple records. State machines play an important role in deriving solutions for such cases. Knowing various corner cases is also crucial, otherwise a solution that works for one input may fail for others.</p><p>Next chapter will discuss use cases where you need to process a file input based on contents of another file.</p><hr><h2 id="exercises" tabindex="-1"><a class="header-anchor" href="#exercises"><span>Exercises</span></a></h2>`,10),dn={class:"hint-container info"},pn=s("p",{class:"hint-container-title"},"Info",-1),mn={href:"https://github.com/learnbyexample/learn_gnuawk/tree/master/exercises",target:"_blank",rel:"noopener noreferrer"},un=s("h3",{id:"exercise-1",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-1"},[s("span",null,"Exercise 1")])],-1),hn=s("code",null,"sample.txt",-1),vn=s("code",null,"do",-1),bn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token comment"},"##### add your solution here")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Just do-it")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Much ado about nothing")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),kn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token string"},`'p2 ~ /you/ && p1=="" && /do/; {p2=p1; p1=$0}'`),n(" sample.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Just do-it")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Much ado about nothing")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),gn=s("h3",{id:"exercise-2",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-2"},[s("span",null,"Exercise 2")])],-1),fn=s("code",null,"sample.txt",-1),_n=s("code",null,"do",-1),xn=s("code",null,"not",-1),yn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token comment"},"##### add your solution here")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# No doubt you like it too")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Much ado about nothing")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),wn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token parameter variable"},"-v"),n(),s("span",{class:"token assign-left variable"},"IGNORECASE"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"1"),n(),s("span",{class:"token string"},"'/do/ && ++d == 2; /not/ && ++n == 2'"),n(" sample.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# No doubt you like it too")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Much ado about nothing")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Cn=s("h3",{id:"exercise-3",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-3"},[s("span",null,"Exercise 3")])],-1),An=s("code",null,"sample.txt",-1),jn=s("code",null,"are",-1),Nn=s("code",null,"bit",-1),Rn=s("code",null,"n",-1),Sn=s("code",null,"n",-1),Tn=s("code",null,"awk",-1),En=s("code",null,"-v",-1),Pn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token parameter variable"},"-v"),n(),s("span",{class:"token assign-left variable"},"n"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"1"),n(),s("span",{class:"token comment"},"##### add your solution here")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Good day")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# How are you")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"#")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Today is sunny")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Not a bit funny")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# No doubt you like it too")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# note that the first and last line are empty for this case")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token parameter variable"},"-v"),n(),s("span",{class:"token assign-left variable"},"n"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"2"),n(),s("span",{class:"token comment"},"##### add your solution here")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Good day")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# How are you")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Just do-it")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Today is sunny")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Not a bit funny")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# No doubt you like it too")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),qn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token parameter variable"},"-v"),n(),s("span",{class:"token assign-left variable"},"n"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"1"),n(),s("span",{class:"token string"},"'/are|bit/{for(i=NR-n; i<NR; i++) if(i>0) print a[i]; c=n+1}"),n(`
`),s("span",{class:"line"},"            c && c--; {a[NR]=$0}'"),n(" sample.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Good day")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# How are you")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Today is sunny")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Not a bit funny")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# No doubt you like it too")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token parameter variable"},"-v"),n(),s("span",{class:"token assign-left variable"},"n"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"2"),n(),s("span",{class:"token string"},"'/are|bit/{for(i=NR-n; i<NR; i++) if(i>0) print a[i]; c=n+1}"),n(`
`),s("span",{class:"line"},"            c && c--; {a[NR]=$0}'"),n(" sample.txt")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Good day")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# How are you")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Just do-it")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Today is sunny")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Not a bit funny")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# No doubt you like it too")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),$n=s("h3",{id:"exercise-4",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-4"},[s("span",null,"Exercise 4")])],-1),zn=s("code",null,"broken.txt",-1),Fn=s("code",null,"top",-1),Hn=s("code",null,"bottom",-1),Gn=s("code",null,"awk",-1),On=s("code",null,"top",-1),Qn=s("code",null,"bottom",-1),In=d(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> broken.txt</span>
<span class="line"><span class="token comment"># top</span></span>
<span class="line"><span class="token comment"># 3.14</span></span>
<span class="line"><span class="token comment"># bottom</span></span>
<span class="line"><span class="token comment"># ---</span></span>
<span class="line"><span class="token comment"># top</span></span>
<span class="line"><span class="token comment"># 1234567890</span></span>
<span class="line"><span class="token comment"># bottom</span></span>
<span class="line"><span class="token comment"># top</span></span>
<span class="line"><span class="token comment"># Hi there</span></span>
<span class="line"><span class="token comment"># Have a nice day</span></span>
<span class="line"><span class="token comment"># Good bye</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Jn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token comment"},"# wrong output")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token string"},"'/bottom/{f=0} f; /top/{f=1}'"),n(" broken.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3.14")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1234567890")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Hi there")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Have a nice day")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Good bye")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# expected output")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"##### add your solution here")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3.14")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1234567890")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Mn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token string"},"'/bottom/{f=0} f; /top/{f=1}'"),n(" broken.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3.14")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1234567890")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Hi there")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Have a nice day")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Good bye")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# expected output")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"tac"),n(" broken.txt "),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token function"},"awk"),n(),s("span",{class:"token string"},"'/top/{f=0} f; /bottom/{f=1}'"),n(),s("span",{class:"token operator"},"|"),n(),s("span",{class:"token function"},"tac")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3.14")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1234567890")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Bn=s("h3",{id:"exercise-5",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-5"},[s("span",null,"Exercise 5")])],-1),Ln=s("code",null,"concat.txt",-1),Vn=s("code",null,"###",-1),Kn=s("code",null,"n",-1),Un=s("code",null,"-v",-1),Dn=d(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> concat.txt</span>
<span class="line"><span class="token comment">### addr.txt</span></span>
<span class="line"><span class="token comment"># How are you</span></span>
<span class="line"><span class="token comment"># This game is good</span></span>
<span class="line"><span class="token comment"># Today is sunny</span></span>
<span class="line"><span class="token comment">### broken.txt</span></span>
<span class="line"><span class="token comment"># top</span></span>
<span class="line"><span class="token comment"># 1234567890</span></span>
<span class="line"><span class="token comment"># bottom</span></span>
<span class="line"><span class="token comment">### sample.txt</span></span>
<span class="line"><span class="token comment"># Just do-it</span></span>
<span class="line"><span class="token comment"># Believe it</span></span>
<span class="line"><span class="token comment">### mixed_fs.txt</span></span>
<span class="line"><span class="token comment"># pink blue white yellow</span></span>
<span class="line"><span class="token comment"># car,mat,ball,basket</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Yn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token parameter variable"},"-v"),n(),s("span",{class:"token assign-left variable"},"n"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"2"),n(),s("span",{class:"token comment"},"##### add your solution here")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"#### broken.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# top")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1234567890")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# bottom")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token parameter variable"},"-v"),n(),s("span",{class:"token assign-left variable"},"n"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"4"),n(),s("span",{class:"token comment"},"##### add your solution here")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"#### mixed_fs.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# pink blue white yellow")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# car,mat,ball,basket")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Zn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token parameter variable"},"-v"),n(),s("span",{class:"token assign-left variable"},"n"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"2"),n(),s("span",{class:"token string"},"'/^### /{c++} c==n'"),n(" concat.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"#### broken.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# top")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1234567890")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# bottom")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token parameter variable"},"-v"),n(),s("span",{class:"token assign-left variable"},"n"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"4"),n(),s("span",{class:"token string"},"'/^### /{c++} c==n'"),n(" concat.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"#### mixed_fs.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# pink blue white yellow")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# car,mat,ball,basket")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Xn=s("h3",{id:"exercise-6",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-6"},[s("span",null,"Exercise 6")])],-1),Wn=s("code",null,"ruby.md",-1),se=s("code",null,"ruby",-1),ne=s("code",null,"Ruby",-1),ee=s("code",null,"ruby",-1),ae=s("code",null,"out.md",-1),le=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token comment"},"##### add your solution here ruby.md > out.md")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"diff"),n(),s("span",{class:"token parameter variable"},"-sq"),n(" out.md expected.md ")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Files out.md and expected.md are identical")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ie=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token parameter variable"},"-v"),n(),s("span",{class:"token assign-left variable"},"IGNORECASE"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"1"),n(),s("span",{class:"token string"},"'/```ruby/{f=1} !f{gsub(/ruby/, \"Ruby\")} /```$/{f=0} 1'"),n(" ruby.md "),s("span",{class:"token operator"},">"),n(" out.md")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"diff"),n(),s("span",{class:"token parameter variable"},"-sq"),n(" out.md expected.md ")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Files out.md and expected.md are identical")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),te=s("h3",{id:"exercise-7",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-7"},[s("span",null,"Exercise 7")])],-1),ce=s("code",null,"lines.txt",-1),oe=s("code",null,"---",-1),re=d(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> lines.txt</span>
<span class="line"><span class="token comment"># Go There</span></span>
<span class="line"><span class="token comment"># come on</span></span>
<span class="line"><span class="token comment"># go there</span></span>
<span class="line"><span class="token comment"># ---</span></span>
<span class="line"><span class="token comment"># 2 apples and 5 mangoes</span></span>
<span class="line"><span class="token comment"># come on!</span></span>
<span class="line"><span class="token comment"># ---</span></span>
<span class="line"><span class="token comment"># 2 Apples</span></span>
<span class="line"><span class="token comment"># COME ON</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),de=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token comment"},"##### add your solution here")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Go There")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# come on")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# go there")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ---")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# come on!")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ---")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# COME ON")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),pe=s("blockquote",null,[s("p",null,[n("can also use: "),s("code",null,`awk '!(n && n--); $0=="---"{n=1}' lines.txt`)])],-1),me=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token string"},`'p!="---"; {p=$0}'`),n(" lines.txt")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Go There")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# come on")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# go there")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ---")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# come on!")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ---")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# COME ON")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ue=s("h3",{id:"exercise-8",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-8"},[s("span",null,"Exercise 8")])],-1),he=s("code",null,"result.csv",-1),ve=s("code",null,"---",-1),be=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(),s("span",{class:"token comment"},"##### add your solution here")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Amy,maths,89")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Amy,physics,75")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ---")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Joe,maths,79")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ---")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# John,chemistry,77")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# John,physics,91")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ---")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Moe,maths,81")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ---")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Ravi,physics,84")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Ravi,chemistry,70")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ---")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Yui,maths,92")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ke=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),n(" -F, "),s("span",{class:"token string"},`'NR>1 && p!=$1{print "---"} 1; {p=$1}'`),n(" result.csv")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Amy,maths,89")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Amy,physics,75")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ---")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Joe,maths,79")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ---")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# John,chemistry,77")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# John,physics,91")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ---")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Moe,maths,81")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ---")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Ravi,physics,84")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Ravi,chemistry,70")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ---")]),n(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Yui,maths,92")]),n(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1);function ge(p,fe){const t=r("router-link"),m=r("VPCard"),o=r("FontIcon"),u=r("RouteLink"),c=r("Tabs"),h=r("TagLinks");return _(),b("div",null,[s("h1",y,[s("a",w,[s("span",null,k(p.$frontmatter.title)+" 관련",1)])]),s("nav",C,[s("ul",null,[s("li",null,[i(t,{to:"#processing-consecutive-records"},{default:e(()=>[n("Processing consecutive records")]),_:1})]),s("li",null,[i(t,{to:"#context-matching"},{default:e(()=>[n("Context matching")]),_:1}),s("ul",null,[s("li",null,[i(t,{to:"#case-1"},{default:e(()=>[n("Case 1")]),_:1})]),s("li",null,[i(t,{to:"#case-2"},{default:e(()=>[n("Case 2")]),_:1})]),s("li",null,[i(t,{to:"#case-3"},{default:e(()=>[n("Case 3")]),_:1})]),s("li",null,[i(t,{to:"#case-4"},{default:e(()=>[n("Case 4")]),_:1})]),s("li",null,[i(t,{to:"#case-5"},{default:e(()=>[n("Case 5")]),_:1})])])]),s("li",null,[i(t,{to:"#records-bounded-by-distinct-markers"},{default:e(()=>[n("Records bounded by distinct markers")]),_:1}),s("ul",null,[s("li",null,[i(t,{to:"#case-1-1"},{default:e(()=>[n("Case 1")]),_:1})]),s("li",null,[i(t,{to:"#case-2-1"},{default:e(()=>[n("Case 2")]),_:1})]),s("li",null,[i(t,{to:"#case-3-4"},{default:e(()=>[n("Case 3-4")]),_:1})]),s("li",null,[i(t,{to:"#case-5-1"},{default:e(()=>[n("Case 5")]),_:1})]),s("li",null,[i(t,{to:"#case-6"},{default:e(()=>[n("Case 6")]),_:1})]),s("li",null,[i(t,{to:"#case-7-8"},{default:e(()=>[n("Case 7-8")]),_:1})])])]),s("li",null,[i(t,{to:"#specific-blocks"},{default:e(()=>[n("Specific blocks")]),_:1})]),s("li",null,[i(t,{to:"#broken-blocks"},{default:e(()=>[n("Broken blocks")]),_:1})]),s("li",null,[i(t,{to:"#summary"},{default:e(()=>[n("Summary")]),_:1})]),s("li",null,[i(t,{to:"#exercises"},{default:e(()=>[n("Exercises")]),_:1}),s("ul",null,[s("li",null,[i(t,{to:"#exercise-1"},{default:e(()=>[n("Exercise 1")]),_:1})]),s("li",null,[i(t,{to:"#exercise-2"},{default:e(()=>[n("Exercise 2")]),_:1})]),s("li",null,[i(t,{to:"#exercise-3"},{default:e(()=>[n("Exercise 3")]),_:1})]),s("li",null,[i(t,{to:"#exercise-4"},{default:e(()=>[n("Exercise 4")]),_:1})]),s("li",null,[i(t,{to:"#exercise-5"},{default:e(()=>[n("Exercise 5")]),_:1})]),s("li",null,[i(t,{to:"#exercise-6"},{default:e(()=>[n("Exercise 6")]),_:1})]),s("li",null,[i(t,{to:"#exercise-7"},{default:e(()=>[n("Exercise 7")]),_:1})]),s("li",null,[i(t,{to:"#exercise-8"},{default:e(()=>[n("Exercise 8")]),_:1})])])])])]),A,i(m,g(f({title:"11. Processing multiple records",desc:"CLI Text Processing with GNU awk",link:"https://learnbyexample.github.io/learn_gnuawk/processing-multiple-records.html",logo:"https://learnbyexample.github.io/favicon.svg",background:"rgba(22,25,35,0.2)"})),null,16),j,N,s("div",R,[S,s("p",null,[n("The "),s("a",T,[i(o,{icon:"iconfont icon-github"}),n(" example_files")]),n(" directory has all the files used in the examples.")])]),E,P,s("p",null,[n("You might need to define a condition that should satisfy something for one record and something else for the very next record. "),q,n(" does provide a feature to get next record, but that could get complicated (see the "),i(u,{to:"/cli/text-processing-w-gnu-awk/12-two-file-processing.html#getline"},{default:e(()=>[n("getline")]),_:1}),n(" section). Instead, you can simply save relevant records in variables/arrays and then create the required conditional expression when you have all the required records available. The default behavior of uninitialized variable to act as "),$,n(" in numerical context and empty in string context plays a role too.")]),i(c,{id:"24",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:e(({value:a,isActive:l})=>[n("Case 1")]),title1:e(({value:a,isActive:l})=>[n("Case 2")]),title2:e(({value:a,isActive:l})=>[n("Case 3")]),tab0:e(({value:a,isActive:l})=>[z,F]),tab1:e(({value:a,isActive:l})=>[H,G]),tab2:e(({value:a,isActive:l})=>[O,Q]),_:1}),I,i(c,{id:"90",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:e(({value:a,isActive:l})=>[n("Case 1")]),title1:e(({value:a,isActive:l})=>[n("Case 2")]),title2:e(({value:a,isActive:l})=>[n("Case 3")]),tab0:e(({value:a,isActive:l})=>[J,M,B]),tab1:e(({value:a,isActive:l})=>[L,V]),tab2:e(({value:a,isActive:l})=>[K,U]),_:1}),D,Y,Z,X,i(c,{id:"127",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:e(({value:a,isActive:l})=>[n("Case 1")]),title1:e(({value:a,isActive:l})=>[n("Case 2")]),tab0:e(({value:a,isActive:l})=>[W]),tab1:e(({value:a,isActive:l})=>[ss,ns]),_:1}),es,as,i(c,{id:"144",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:e(({value:a,isActive:l})=>[n("Case 1")]),title1:e(({value:a,isActive:l})=>[n("Case 2")]),tab0:e(({value:a,isActive:l})=>[ls,is,ts]),tab1:e(({value:a,isActive:l})=>[cs,os]),_:1}),rs,ds,i(c,{id:"169",data:[{id:"Case 1"}],active:0},{title0:e(({value:a,isActive:l})=>[n("Case 1")]),tab0:e(({value:a,isActive:l})=>[ps,ms]),_:1}),us,hs,i(c,{id:"183",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:e(({value:a,isActive:l})=>[n("Case 1")]),title1:e(({value:a,isActive:l})=>[n("Case 2")]),tab0:e(({value:a,isActive:l})=>[vs,bs]),tab1:e(({value:a,isActive:l})=>[ks,gs]),_:1}),fs,i(c,{id:"214",data:[{id:"Case 1"}],active:0},{title0:e(({value:a,isActive:l})=>[n("Case 1")]),tab0:e(({value:a,isActive:l})=>[_s]),_:1}),xs,ys,ws,i(c,{id:"230",data:[{id:"Case 1"}],active:0},{title0:e(({value:a,isActive:l})=>[n("Case 1")]),tab0:e(({value:a,isActive:l})=>[Cs]),_:1}),As,js,i(c,{id:"241",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:e(({value:a,isActive:l})=>[n("Case 1")]),title1:e(({value:a,isActive:l})=>[n("Case 2")]),tab0:e(({value:a,isActive:l})=>[Ns]),tab1:e(({value:a,isActive:l})=>[Rs]),_:1}),Ss,Ts,Es,i(c,{id:"258",data:[{id:"Case 1"}],active:0},{title0:e(({value:a,isActive:l})=>[n("Case 1")]),tab0:e(({value:a,isActive:l})=>[Ps]),_:1}),qs,$s,i(c,{id:"269",data:[{id:"Case 1"}],active:0},{title0:e(({value:a,isActive:l})=>[n("Case 1")]),tab0:e(({value:a,isActive:l})=>[zs]),_:1}),Fs,Hs,i(c,{id:"280",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:e(({value:a,isActive:l})=>[n("Case 1")]),title1:e(({value:a,isActive:l})=>[n("Case 2")]),tab0:e(({value:a,isActive:l})=>[Gs]),tab1:e(({value:a,isActive:l})=>[Os]),_:1}),Qs,Is,Js,Ms,i(c,{id:"298",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:e(({value:a,isActive:l})=>[n("Case 1")]),title1:e(({value:a,isActive:l})=>[n("Case 2")]),tab0:e(({value:a,isActive:l})=>[Bs]),tab1:e(({value:a,isActive:l})=>[Ls,Vs]),_:1}),Ks,i(c,{id:"312",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"},{id:"Case 4"},{id:"Case 5"},{id:"Case 6"}],active:0},{title0:e(({value:a,isActive:l})=>[n("Case 1")]),title1:e(({value:a,isActive:l})=>[n("Case 2")]),title2:e(({value:a,isActive:l})=>[n("Case 3")]),title3:e(({value:a,isActive:l})=>[n("Case 4")]),title4:e(({value:a,isActive:l})=>[n("Case 5")]),title5:e(({value:a,isActive:l})=>[n("Case 6")]),tab0:e(({value:a,isActive:l})=>[Us,Ds]),tab1:e(({value:a,isActive:l})=>[Ys,Zs]),tab2:e(({value:a,isActive:l})=>[Xs,Ws,sn]),tab3:e(({value:a,isActive:l})=>[nn,en]),tab4:e(({value:a,isActive:l})=>[an,ln]),tab5:e(({value:a,isActive:l})=>[tn,cn,on]),_:1}),rn,s("div",dn,[pn,s("p",null,[n("The "),s("a",mn,[i(o,{icon:"iconfont icon-github"}),n(" exercises")]),n(" directory has all the files used in this section.")])]),un,s("p",null,[n("For the input file "),i(o,{icon:"fas fa-file-lines"}),n(),hn,n(", print lines containing "),vn,n(" only if the previous line is empty and the line before that contains you.")]),i(c,{id:"391",data:[{id:"Question"},{id:"Solution"}],active:0},{title0:e(({value:a,isActive:l})=>[n("Question")]),title1:e(({value:a,isActive:l})=>[n("Solution")]),tab0:e(({value:a,isActive:l})=>[bn]),tab1:e(({value:a,isActive:l})=>[kn]),_:1}),gn,s("p",null,[n("For the input file "),i(o,{icon:"fas fa-file-lines"}),n(),fn,n(", match lines containing "),_n,n(" or "),xn,n(" case insensitively. Each of these terms occur multiple times in the file. The goal is to print only the second occurrences of these terms (independent of each other).")]),i(c,{id:"405",data:[{id:"Question"},{id:"Solution"}],active:0},{title0:e(({value:a,isActive:l})=>[n("Question")]),title1:e(({value:a,isActive:l})=>[n("Solution")]),tab0:e(({value:a,isActive:l})=>[yn]),tab1:e(({value:a,isActive:l})=>[wn]),_:1}),Cn,s("p",null,[n("For the input file "),i(o,{icon:"fas fa-file-lines"}),n(),An,n(", print the matching lines containing "),jn,n(" or "),Nn,n(" as well as "),Rn,n(" lines around the matching lines. The value for "),Sn,n(" is passed to the "),Tn,n(" command via the "),En,n(" option.")]),i(c,{id:"419",data:[{id:"Question"},{id:"Solution"}],active:0},{title0:e(({value:a,isActive:l})=>[n("Question")]),title1:e(({value:a,isActive:l})=>[n("Solution")]),tab0:e(({value:a,isActive:l})=>[Pn]),tab1:e(({value:a,isActive:l})=>[qn]),_:1}),$n,s("p",null,[n("For the input file "),i(o,{icon:"fas fa-file-lines"}),n(),zn,n(", print all lines between the markers "),Fn,n(" and "),Hn,n(". The first "),Gn,n(" command shown below doesn't work because it is matching till the end of file as the second marker isn't found. Assume that the input file cannot have two "),On,n(" markers without a "),Qn,n(" marker appearing in between and vice-versa.")]),In,i(c,{id:"434",data:[{id:"Question"},{id:"Solution"}],active:0},{title0:e(({value:a,isActive:l})=>[n("Question")]),title1:e(({value:a,isActive:l})=>[n("Solution")]),tab0:e(({value:a,isActive:l})=>[Jn]),tab1:e(({value:a,isActive:l})=>[Mn]),_:1}),Bn,s("p",null,[n("For the input file "),i(o,{icon:"fas fa-file-lines"}),n(),Ln,n(", extract contents from a line starting with "),Vn,n(" until but not including the next such line. The block to be extracted is indicated by the variable "),Kn,n(" passed via the "),Un,n(" option.")]),Dn,i(c,{id:"449",data:[{id:"Question"},{id:"Solution"}],active:0},{title0:e(({value:a,isActive:l})=>[n("Question")]),title1:e(({value:a,isActive:l})=>[n("Solution")]),tab0:e(({value:a,isActive:l})=>[Yn]),tab1:e(({value:a,isActive:l})=>[Zn]),_:1}),Xn,s("p",null,[n("For the input file "),i(o,{icon:"fa-brands fa-markdown"}),n(),Wn,n(", replace all occurrences of "),se,n(" (irrespective of case) with "),ne,n(". But, do not replace any matches between ```ruby and ``` lines ("),ee,n(" in these markers shouldn't be replaced either). Save the output in "),i(o,{icon:"fa-brands fa-markdown"}),n(),ae,n(".")]),i(c,{id:"463",data:[{id:"Question"},{id:"Solution"}],active:0},{title0:e(({value:a,isActive:l})=>[n("Question")]),title1:e(({value:a,isActive:l})=>[n("Solution")]),tab0:e(({value:a,isActive:l})=>[le]),tab1:e(({value:a,isActive:l})=>[ie]),_:1}),te,s("p",null,[n("For the input file "),i(o,{icon:"fas fa-file-lines"}),n(),ce,n(", delete the line that comes after a whole line containing "),oe,n(". Assume that such lines won't occur consecutively.")]),re,i(c,{id:"478",data:[{id:"Question"},{id:"Solution"}],active:0},{title0:e(({value:a,isActive:l})=>[n("Question")]),title1:e(({value:a,isActive:l})=>[n("Solution")]),tab0:e(({value:a,isActive:l})=>[de]),tab1:e(({value:a,isActive:l})=>[pe,me]),_:1}),ue,s("p",null,[n("For the input file "),i(o,{icon:"fas fa-file-csv"}),n(),he,n(", use "),ve,n(" to separate entries with the same name in the first column. Assume that the lines with the same first column value will always be next to each other.")]),i(c,{id:"497",data:[{id:"Question"},{id:"Solution"}],active:0},{title0:e(({value:a,isActive:l})=>[n("Question")]),title1:e(({value:a,isActive:l})=>[n("Solution")]),tab0:e(({value:a,isActive:l})=>[be]),tab1:e(({value:a,isActive:l})=>[ke]),_:1}),i(h)])}const ye=v(x,[["render",ge],["__file","11-processing-multiple-records.html.vue"]]),we=JSON.parse('{"path":"/cli/text-processing-w-gnu-awk/11-processing-multiple-records.html","title":"11. Processing multiple records","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"11. Processing multiple records","description":"Text Processing with GNU awk > 11. Processing multiple records","category":["CLI","Linux"],"tags":["crashcourse","cli","sh","shell","gnu","linux","awk"],"head":[[{"meta":null},{"property":"og:title","content":"Text Processing with GNU awk > 11. Processing multiple records"},{"property":"og:description","content":"11. Processing multiple records"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/cli/text-processing-w-gnu-awk/11-processing-multiple-records.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/cli/text-processing-w-gnu-awk/11-processing-multiple-records.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"11. Processing multiple records"}],["meta",{"property":"og:description","content":"Text Processing with GNU awk > 11. Processing multiple records"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-04-24T07:16:44.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"cli"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:tag","content":"shell"}],["meta",{"property":"article:tag","content":"gnu"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:tag","content":"awk"}],["meta",{"property":"article:modified_time","content":"2024-04-24T07:16:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"11. Processing multiple records\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-24T07:16:44.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Processing consecutive records","slug":"processing-consecutive-records","link":"#processing-consecutive-records","children":[]},{"level":2,"title":"Context matching","slug":"context-matching","link":"#context-matching","children":[{"level":3,"title":"Case 1","slug":"case-1","link":"#case-1","children":[]},{"level":3,"title":"Case 2","slug":"case-2","link":"#case-2","children":[]},{"level":3,"title":"Case 3","slug":"case-3","link":"#case-3","children":[]},{"level":3,"title":"Case 4","slug":"case-4","link":"#case-4","children":[]},{"level":3,"title":"Case 5","slug":"case-5","link":"#case-5","children":[]}]},{"level":2,"title":"Records bounded by distinct markers","slug":"records-bounded-by-distinct-markers","link":"#records-bounded-by-distinct-markers","children":[{"level":3,"title":"Case 1","slug":"case-1-1","link":"#case-1-1","children":[]},{"level":3,"title":"Case 2","slug":"case-2-1","link":"#case-2-1","children":[]},{"level":3,"title":"Case 3-4","slug":"case-3-4","link":"#case-3-4","children":[]},{"level":3,"title":"Case 5","slug":"case-5-1","link":"#case-5-1","children":[]},{"level":3,"title":"Case 6","slug":"case-6","link":"#case-6","children":[]},{"level":3,"title":"Case 7-8","slug":"case-7-8","link":"#case-7-8","children":[]}]},{"level":2,"title":"Specific blocks","slug":"specific-blocks","link":"#specific-blocks","children":[]},{"level":2,"title":"Broken blocks","slug":"broken-blocks","link":"#broken-blocks","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]},{"level":2,"title":"Exercises","slug":"exercises","link":"#exercises","children":[{"level":3,"title":"Exercise 1","slug":"exercise-1","link":"#exercise-1","children":[]},{"level":3,"title":"Exercise 2","slug":"exercise-2","link":"#exercise-2","children":[]},{"level":3,"title":"Exercise 3","slug":"exercise-3","link":"#exercise-3","children":[]},{"level":3,"title":"Exercise 4","slug":"exercise-4","link":"#exercise-4","children":[]},{"level":3,"title":"Exercise 5","slug":"exercise-5","link":"#exercise-5","children":[]},{"level":3,"title":"Exercise 6","slug":"exercise-6","link":"#exercise-6","children":[]},{"level":3,"title":"Exercise 7","slug":"exercise-7","link":"#exercise-7","children":[]},{"level":3,"title":"Exercise 8","slug":"exercise-8","link":"#exercise-8","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1713943004000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":9}]},"readingTime":{"minutes":10.8,"words":3240},"filePathRelative":"cli/text-processing-w-gnu-awk/11-processing-multiple-records.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{ye as comp,we as data};
