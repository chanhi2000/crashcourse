import{_ as b}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,a as s,t as g,b as l,w as n,n as k,g as f,d as e,e as o,r as d,o as _}from"./app-U_bew1in.js";const w={},x={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},A={class:"table-of-contents"},q=s("hr",null,null,-1),C=o("<hr><p>Regular Expressions is a versatile tool for text processing. It helps to precisely define a matching criteria. For learning and understanding purposes, one can view regular expressions as a mini-programming language in itself, specialized for text processing. Parts of a regular expression can be saved for future use, analogous to variables and functions. There are ways to perform AND, OR, NOT conditionals, features to concisely define repetition to avoid manual replication and so on.</p><p>Here are some common use cases:</p><ul><li>Sanitizing a string to ensure that it satisfies a known set of rules. For example, to check if a given string matches password rules.</li><li>Filtering or extracting portions on an abstract level like alphabets, digits, punctuation and so on.</li><li>Qualified string replacement. For example, at the start or the end of a string, only whole words, based on surrounding text, etc.</li></ul><p>This chapter will cover regular expressions as implemented in <code>awk</code>. Most of <code>awk</code>&#39;s regular expression syntax is similar to Extended Regular Expression (ERE) supported by <code>grep -E</code> and <code>sed -E</code>. Unless otherwise indicated, examples and descriptions will assume ASCII input.</p>",5),j={class:"hint-container info"},E=o('<p class="hint-container-title">Info</p><p>See also <a href="https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap09.html" target="_blank" rel="noopener noreferrer">POSIX specification</a> for regular expressions and <a href="https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap09.html" target="_blank" rel="noopener noreferrer">unix.stackexchange: Why does my regular expression work in X but not in Y?</a> See my <a href="https://learnbyexample.github.io/gnu-bre-ere-cheatsheet/" target="_blank" rel="noopener noreferrer">blog post</a> for differences between regexp features supported by <code>grep</code>, <code>sed</code> and <code>awk</code>.</p>',2),X={href:"https://github.com/learnbyexample/learn_gnuawk/tree/master/example_files",target:"_blank",rel:"noopener noreferrer"},T=o(`<hr><h2 id="syntax-and-variable-assignment" tabindex="-1"><a class="header-anchor" href="#syntax-and-variable-assignment"><span>Syntax and variable assignment</span></a></h2><p>As seen in the previous chapter, the syntax is <code>string ~ /regexp/</code> to check if the given string satisfies the rules specified by the regexp. And <code>string !~ /regexp/</code> to invert the condition. By default, <code>$0</code> is checked if the string isn&#39;t specified. You can also save a regexp literal in a variable by adding <code>@</code> as a prefix. This is needed because <code>/regexp/</code> by itself would mean <code>$0 ~ /regexp/</code>.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">printf</span> <span class="token string">&#39;spared no one\\ngrasped\\nspar\\n&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;/ed/&#39;</span></span>
<span class="line"><span class="token comment"># spared no one</span></span>
<span class="line"><span class="token comment"># grasped</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin class-name">printf</span> <span class="token string">&#39;spared no one\\ngrasped\\nspar\\n&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;BEGIN{r = @/ed/} $0 ~ r&#39;</span></span>
<span class="line"><span class="token comment"># spared no one</span></span>
<span class="line"><span class="token comment"># grasped</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="string-anchors" tabindex="-1"><a class="header-anchor" href="#string-anchors"><span>String Anchors</span></a></h2><p>In the examples seen so far, the regexp was a simple string value without any special characters. Also, the regexp pattern evaluated to <code>true</code> if it was found anywhere in the string. Instead of matching anywhere in the string, restrictions can be specified. These restrictions are made possible by assigning special meaning to certain characters and escape sequences. The characters with special meaning are known as <strong>metacharacters</strong> in regular expressions parlance. In case you need to match those characters literally, you need to escape them with a <code>\\</code> character (discussed in the <a href="#matching-the-metacharacters">Matching the metacharacters</a> section).</p><p>There are two string anchors:</p><ul><li><code>^</code> metacharacter restricts the matching to the start of the string</li><li><code>$</code> metacharacter restricts the matching to the end of the string</li></ul><p>By default, <code>awk</code> processes input line by line, using a newline character as the separator. This separator won&#39;t be part of the contents in <code>$0</code> but you get back the newline when printing because the default output record separator is also a newline character. Thus, these string anchors can be considered as <em>line</em> anchors when you are processing input content line by line.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> anchors.txt</span>
<span class="line"><span class="token comment"># sub par</span></span>
<span class="line"><span class="token comment"># spar</span></span>
<span class="line"><span class="token comment"># apparent effort</span></span>
<span class="line"><span class="token comment"># two spare computers</span></span>
<span class="line"><span class="token comment"># cart part tart mart</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),$=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/^sp/'"),e(" anchors.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# spar")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),I=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/ar$/'"),e(" anchors.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# sub par")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# spar")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),S=o(`<p>By combining these two anchors, you can restrict the matching to only whole lines. Here&#39;s an example:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># change only whole line &#39;spar&#39;</span></span>
<span class="line"><span class="token comment"># can also use: awk &#39;/^spar$/{$0 = 123} 1&#39;</span></span>
<span class="line"><span class="token comment"># can also use: awk &#39;$0==&quot;spar&quot;{$0 = 123} 1&#39;</span></span>
<span class="line"><span class="token builtin class-name">printf</span> <span class="token string">&#39;spared no one\\npar\\nspar\\n&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{sub(/^spar$/, &quot;123&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># spared no one</span></span>
<span class="line"><span class="token comment"># par</span></span>
<span class="line"><span class="token comment"># 123</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The anchors can be used by themselves as a pattern too. Helps to insert text at the start/end of a string, emulating string concatenation operations. These might not feel like useful capability, but combined with other features they become quite a handy tool.</p>`,3),N=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'spared no one\\ngrasped\\nspar\\n'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/^/, "* ")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# * spared no one")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# * grasped")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# * spar")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Q=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'spared no one\\ngrasped\\nspar\\n'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'!/ /{gsub(/$/, ".")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# spared no one")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# grasped.")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# spar.")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),B=o(`<div class="hint-container info"><p class="hint-container-title">Info</p><p>See also the <a href="#behavior-of--and--when-string-contains-newline">Behavior of ^ and $ when string contains newline</a> section.</p></div><hr><h2 id="word-anchors" tabindex="-1"><a class="header-anchor" href="#word-anchors"><span>Word Anchors</span></a></h2><p>The second type of restriction is word anchors. A word character is any alphabet (irrespective of case), digit and the underscore character. You might wonder why there are digits and underscores as well, why not only alphabets? This comes from variable and function naming conventions — typically alphabets, digits and underscores are allowed. So, the definition is more programming oriented than natural language.</p><p>Use <code>\\&lt;</code> to indicate the start of word anchor and<code> \\&gt;</code> to indicate the end of word anchor. As an alternate, you can use <code>\\y</code> to indicate both the start and end of word anchors.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> anchors.txt</span>
<span class="line"><span class="token comment"># sub par</span></span>
<span class="line"><span class="token comment"># spar</span></span>
<span class="line"><span class="token comment"># apparent effort</span></span>
<span class="line"><span class="token comment"># two spare computers</span></span>
<span class="line"><span class="token comment"># cart part tart mart</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),F=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/\\<par/'"),e(" anchors.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# sub par")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# cart part tart mart")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),R=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/par\\>/'"),e(" anchors.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# sub par")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# spar")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),z=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token comment"},"# note that only lines where the substitution succeeded will be printed")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# as the return value of sub/gsub is number of substitutions made")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'gsub(/\\<par\\>/, "***")'`),e(" anchors.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# sub ***")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),D=o('<div class="hint-container info"><p class="hint-container-title">Info</p><p>Typically <code>\\b</code> is used to represent the word anchor (for example, in <code>grep</code>, <code>sed</code>, <code>perl</code>, etc), but in <code>awk</code> the escape sequence <code>\\b</code> refers to the backspace character. See also the <a href="#word-boundary-differences">Word boundary differences</a> section.</p></div><hr><h2 id="opposite-word-anchor" tabindex="-1"><a class="header-anchor" href="#opposite-word-anchor"><span>Opposite Word Anchor</span></a></h2><p>The <code>\\y</code> escape sequence has an opposite anchor too. <code>\\B</code> matches wherever <code>\\y</code> doesn&#39;t match. This duality will be seen later with some other escape sequences too.</p>',4),W=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/\\Bpar\\B/'"),e(" anchors.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# apparent effort")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# two spare computers")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),H=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/\\Bpar/'"),e(" anchors.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# spar")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# apparent effort")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# two spare computers")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),P=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/par\\B/'"),e(" anchors.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# apparent effort")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# two spare computers")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# cart part tart mart")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),G=o(`<p>Here are some examples for using word boundaries by themselves as a pattern:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;copper&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{gsub(/\\y/, &quot;:&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># :copper:</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;copper&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{gsub(/\\B/, &quot;:&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># c:o:p:p:e:r</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Negative logic is handy in many text processing situations. But use it with care, you might end up matching things you didn&#39;t intend.</p></div><hr><h2 id="combining-conditions" tabindex="-1"><a class="header-anchor" href="#combining-conditions"><span>Combining conditions</span></a></h2><p>Before seeing the next regexp feature, it is good to note that sometimes using logical operators is easier to read and maintain compared to doing everything with regexp.</p>`,6),O=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/^b/ && !/at/'"),e(" table.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# blue cake mug shirt -7")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),U=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'$1 ~ /low/ || $NF<0'"),e(" table.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# blue cake mug shirt -7")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# yellow banana window shoes 3.14")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),L=o('<hr><h2 id="alternation" tabindex="-1"><a class="header-anchor" href="#alternation"><span>Alternation</span></a></h2><p>Many a times, you&#39;d want to search for multiple terms. In a conditional expression, you can use the logical operators to combine multiple conditions (see the previous section for examples). With regular expressions, the <code>|</code> metacharacter is similar to logical OR. The regular expression will match if any of the patterns separated by <code>|</code> is satisfied.</p><p>Alternation is similar to using the <code>||</code> operator between two regexps. Having a single regexp helps to write terser code and <code>||</code> cannot be used when substitution is required.</p>',4),M=s("blockquote",null,[s("p",null,[e("same as: "),s("code",null,"awk '/\\<par\\>/ || /s$/'")])],-1),Z=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/\\<par\\>|s$/'"),e(" anchors.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# sub par")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# two spare computers")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),V=s("blockquote",null,[s("p",null,"note the use of gsub for multiple replacements")],-1),Y=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'cats dog bee parrot foxed'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/cat|dog|fox/, "--")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# --s -- bee parrot --ed")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),K=o(`<hr><h2 id="alternation-precedence" tabindex="-1"><a class="header-anchor" href="#alternation-precedence"><span>Alternation precedence</span></a></h2><p>There are some tricky corner cases when using alternation. If it is used for filtering a line, there is no ambiguity. However, for use cases like substitution, it depends on a few factors. Say, you want to replace <code>are</code> or <code>spared</code> — which one should get precedence? The bigger word <code>spared</code> or the substring <code>are</code> inside it or based on something else?</p><p>The alternative which matches earliest in the input gets precedence.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># here, the output will be the same irrespective of alternation order</span></span>
<span class="line"><span class="token comment"># note that &#39;sub&#39; is used here, so only the first match gets replaced</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;cats dog bee parrot foxed&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{sub(/bee|parrot|at/, &quot;--&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># c--s dog bee parrot foxed</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;cats dog bee parrot foxed&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{sub(/parrot|at|bee/, &quot;--&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># c--s dog bee parrot foxed</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In case of matches starting from the same location, for example <code>spar</code> and <code>spared</code>, the longest matching portion gets precedence. Unlike other regular expression implementations, left-to-right priority for alternation comes into play only if the length of the matches are the same. See <a href="#longest-match-wins">Longest match wins</a> and <a href="#backreferences">Backreferences</a> sections for more examples. See <a href="https://www.regular-expressions.info/alternation.html" target="_blank" rel="noopener noreferrer">regular-expressions: alternation</a> for more information on this topic.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;spared party parent&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{sub(/spa|spared/, &quot;**&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># ** party parent</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;spared party parent&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{sub(/spared|spa/, &quot;**&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># ** party parent</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># other regexp flavors like Perl have left-to-right priority</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;spared party parent&#39;</span> <span class="token operator">|</span> perl <span class="token parameter variable">-pe</span> <span class="token string">&#39;s/spa|spared/**/&#39;</span></span>
<span class="line"><span class="token comment"># **red party parent</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="grouping" tabindex="-1"><a class="header-anchor" href="#grouping"><span>Grouping</span></a></h2><p>Often, there are some common things among the regular expression alternatives. It could be common characters or qualifiers like the anchors. In such cases, you can group them using a pair of parentheses metacharacters. Similar to <code>a(b+c)d = abd+acd</code> in maths, you get <code>a(b|c)d = abd|acd</code> in regular expressions.</p>`,10),J=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'red\\nreform\\nread\\narrest\\n'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/reform|rest/'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# reform")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# arrest")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ss=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'red\\nreform\\nread\\narrest\\n'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/re(form|st)/'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# reform")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# arrest")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),es=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/\\<par\\>|\\<part\\>/'"),e(" anchors.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# sub par")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# cart part tart mart")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ns=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/\\<(par|part)\\>/'"),e(" anchors.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# sub par")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# cart part tart mart")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),as=s("blockquote",null,[s("p",null,"you'll later learn a better technique instead of using empty alternate")],-1),ts=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/\\<par(|t)\\>/'"),e(" anchors.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# sub par")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# cart part tart mart")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ls=o(`<hr><h2 id="matching-the-metacharacters" tabindex="-1"><a class="header-anchor" href="#matching-the-metacharacters"><span>Matching the metacharacters</span></a></h2><p>You have already seen a few metacharacters and escape sequences that help compose a regular expression. To match the metacharacters literally, i.e. to remove their special meaning, prefix those characters with a <code>\\</code> character. To indicate a literal <code>\\</code> character, use <code>\\\\</code>.</p><p>Unlike <code>grep</code> and <code>sed</code>, the string anchors have to be always escaped to match them literally as there is no BRE mode in <code>awk</code>. They do not lose their special meaning even when not used in their customary positions.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># awk &#39;/b^2/&#39; will not work even though ^ isn&#39;t being used as anchor</span></span>
<span class="line"><span class="token comment"># b^2 will work for both grep and sed if you use BRE syntax</span></span>
<span class="line"><span class="token builtin class-name">printf</span> <span class="token string">&#39;a^2 + b^2 - C*3\\nd = c^2&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;/b\\^2/&#39;</span></span>
<span class="line"><span class="token comment"># a^2 + b^2 - C*3</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># note that &#39;)&#39; doesn&#39;t need to be escaped</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;(a*b) + c&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{gsub(/\\(|)/, &quot;&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># a*b + c</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;\\learn\\by\\example&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{gsub(/\\\\/, &quot;/&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># /learn/by/example</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Info</p><p>Handling the replacement section metacharacters will be discussed in the <a href="#backreferences">Backreferences</a> section.</p></div><hr><h2 id="using-string-literal-as-a-regexp" tabindex="-1"><a class="header-anchor" href="#using-string-literal-as-a-regexp"><span>Using string literal as a regexp</span></a></h2><p>The first argument to the <code>sub</code> and <code>gsub</code> functions can be a string as well, which will then be converted to a regexp. This is handy in a few cases. For example, if you have many <code>/</code> characters in the search pattern, it might become easier to use a string literal instead of a regexp.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token assign-left variable">p</span><span class="token operator">=</span><span class="token string">&#39;/home/learnbyexample/reports&#39;</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$p</span>&quot;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{sub(/\\/home\\/learnbyexample\\//, &quot;~/&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># ~/reports</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$p</span>&quot;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{sub(&quot;/home/learnbyexample/&quot;, &quot;~/&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># ~/reports</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># filtering example</span></span>
<span class="line"><span class="token builtin class-name">printf</span> <span class="token string">&#39;/home/joe/1\\n/home/john/1\\n&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;/\\/home\\/joe\\//&#39;</span></span>
<span class="line"><span class="token comment"># /home/joe/1</span></span>
<span class="line"><span class="token builtin class-name">printf</span> <span class="token string">&#39;/home/joe/1\\n/home/john/1\\n&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;$0 ~ &quot;/home/joe/&quot;&#39;</span></span>
<span class="line"><span class="token comment"># /home/joe/1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the above examples, the string literal was supplied directly. But any other expression or variable can be used as well, examples for which will be shown later in this chapter. The reason why string isn&#39;t always used to represent regexp is that the special meaning for the <code>\\</code> character will clash. For example:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">awk</span> <span class="token string">&#39;gsub(&quot;\\&lt;par\\&gt;&quot;, &quot;X&quot;)&#39;</span> anchors.txt</span>
<span class="line"><span class="token comment"># awk: cmd. line:1: warning: escape sequence \`\\&lt;&#39; treated as plain \`&lt;&#39;</span></span>
<span class="line"><span class="token comment"># awk: cmd. line:1: warning: escape sequence \`\\&gt;&#39; treated as plain \`&gt;&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># you&#39;ll need \\\\ to represent a single \\</span></span>
<span class="line"><span class="token function">awk</span> <span class="token string">&#39;gsub(&quot;\\\\&lt;par\\\\&gt;&quot;, &quot;X&quot;)&#39;</span> anchors.txt</span>
<span class="line"><span class="token comment"># sub X</span></span>
<span class="line"><span class="token comment"># regexp literal is better suited in these cases</span></span>
<span class="line"><span class="token function">awk</span> <span class="token string">&#39;gsub(/\\&lt;par\\&gt;/, &quot;X&quot;)&#39;</span> anchors.txt</span>
<span class="line"><span class="token comment"># sub X</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># another example</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;\\learn\\by\\example&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{gsub(&quot;\\\\\\\\&quot;, &quot;/&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># /learn/by/example</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;\\learn\\by\\example&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{gsub(/\\\\/, &quot;/&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># /learn/by/example</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Info</p><p>See <a href="https://www.gnu.org/software/gawk/manual/gawk.html#Gory-Details" target="_blank" rel="noopener noreferrer">gawk manual: Gory details</a> for more information than you&#39;d want to know.</p></div><hr><h2 id="the-dot-meta-character" tabindex="-1"><a class="header-anchor" href="#the-dot-meta-character"><span>The dot meta character</span></a></h2><p>The dot metacharacter serves as a placeholder to match any character (including the newline character). Later you&#39;ll learn how to define your own custom placeholder for a limited set of characters.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 3 character sequence starting with &#39;c&#39; and ending with &#39;t&#39;</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;tac tin cot abc:tyz excited&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{gsub(/c.t/, &quot;-&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># ta-in - ab-yz ex-ed</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># any character followed by 3 and again any character</span></span>
<span class="line"><span class="token builtin class-name">printf</span> <span class="token string">&#39;42\\t3500\\n&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{gsub(/.3./, &quot;:&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># 42:00</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># example to show that . matches \\n as well</span></span>
<span class="line"><span class="token comment"># &#39;c&#39; followed by any character followed by &#39;x&#39;</span></span>
<span class="line"><span class="token function">awk</span> <span class="token string">&#39;BEGIN{s=&quot;abc\\nxyz&quot;; sub(/c.x/, &quot; &quot;, s); print s}&#39;</span></span>
<span class="line"><span class="token comment"># ab yz</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="quantifiers" tabindex="-1"><a class="header-anchor" href="#quantifiers"><span>Quantifiers</span></a></h2><p>Alternation helps you match one among multiple patterns. Combining the dot metacharacter with quantifiers (and alternation if needed) paves a way to perform logical AND between patterns. For example, to check if a string matches two patterns with any number of characters in between. Quantifiers can be applied to characters, groupings and some more constructs that&#39;ll be discussed later. Apart from the ability to specify exact quantity and bounded range, these can also match unbounded varying quantities.</p><p>First up, the <code>?</code> metacharacter which quantifies a character or group to match <code>0</code> or <code>1</code> times. This helps to define optional patterns and build terser patterns.</p>`,21),is=s("blockquote",null,[s("p",null,[e("same as: "),s("code",null,`awk '{gsub(/\\<(fe.d|fed)\\>/, "X")} 1'`)])],-1),cs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'fed fold fe:d feeder'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/\\<fe.?d\\>/, "X")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# X fold X feeder")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),os=s("blockquote",null,[s("p",null,[e("same as: "),s("code",null,"awk '/\\<par(|t)\\>/'")])],-1),rs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/\\<part?\\>/'"),e(" anchors.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# sub par")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# cart part tart mart")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ds=s("blockquote",null,[s("p",null,[e("same as: "),s("code",null,`awk '{gsub(/part|parrot/, "X")} 1'`)])],-1),ps=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'par part parrot parent'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/par(ro)?t/, "X")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# par X X parent")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),us=s("blockquote",null,[s("p",null,[e("same as: "),s("code",null,`awk '{gsub(/part|parrot|parent/, "X")} 1'`)])],-1),hs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'par part parrot parent'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/par(en|ro)?t/, "X")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# par X X X")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ms=s("blockquote",null,[s("p",null,[e("matches '"),s("code",null,"<"),e("' or '"),s("code",null,"\\<"),e("' and they are both replaced with '"),s("code",null,"\\<"),e("'")])],-1),bs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'apple \\< fig ice < apple cream <'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/\\\\?</, "\\\\<")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# apple \\< fig ice \\< apple cream \\<")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),vs=s("p",null,[e("The "),s("code",null,"*"),e(" metacharacter quantifies a character or group to match "),s("code",null,"0"),e(" or more times.")],-1),gs=s("blockquote",null,[s("p",null,"'f' followed by zero or more of 'e' followed by 'd'")],-1),ks=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'fd fed fod fe:d feeeeder'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/fe*d/, "X")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# X X fod fe:d Xer")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),fs=s("blockquote",null,[s("p",null,"zero or more of '1' followed by '2'")],-1),_s=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'3111111111125111142'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/1*2/, "-")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"## 3-511114-")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ws=s("p",null,[e("The "),s("code",null,"+"),e(" metacharacter quantifies a character or group to match "),s("code",null,"1"),e(" or more times.")],-1),xs=s("blockquote",null,[s("p",null,"'f' followed by one or more of 'e' followed by 'd'")],-1),ys=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'fd fed fod fe:d feeeeder'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/fe+d/, "X")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# fd X fod fe:d Xer")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),As=s("blockquote",null,[s("p",null,"one or more of '1' followed by optional '4' and then '2'")],-1),qs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'3111111111125111142'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/1+4?2/, "-")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 3-5-")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Cs=o(`<p>You can specify a range of integer numbers, both bounded and unbounded, using <code>{}</code> metacharacters. There are four ways to use this quantifier as listed below:</p><table><thead><tr><th style="text-align:left;">Quantifeir</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>{m,n}</code></td><td style="text-align:left;">match <code>m</code> to <code>n</code> times</td></tr><tr><td style="text-align:left;"><code>{m,}</code></td><td style="text-align:left;">match at least <code>m</code> times</td></tr><tr><td style="text-align:left;"><code>{,n}</code></td><td style="text-align:left;">match up to <code>n</code> times (including <code>0</code> times)</td></tr><tr><td style="text-align:left;"><code>{n}</code></td><td style="text-align:left;">match exactly <code>n</code> times</td></tr></tbody></table><blockquote><p>note that stray characters like space are not allowed anywhere within <code>{}</code></p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;ac abc abbc abbbc abbbbbbbbc&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{gsub(/ab{1,4}c/, &quot;X&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># ac X X X abbbbbbbbc</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;ac abc abbc abbbc abbbbbbbbc&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{gsub(/ab{3,}c/, &quot;X&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># ac abc abbc X X</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;ac abc abbc abbbc abbbbbbbbc&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{gsub(/ab{,2}c/, &quot;X&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># X X X abbbc abbbbbbbbc</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;ac abc abbc abbbc abbbbbbbbc&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{gsub(/ab{3}c/, &quot;X&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># ac abc abbc X abbbbbbbbc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Info</p><p>The <code>{}</code> metacharacters have to be escaped to match them literally. Similar to the <code>()</code> metacharacters, escaping <code>{</code> alone is enough. If it doesn&#39;t conform strictly to any of the four forms listed above, escaping is not needed at all.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;a{5} = 10&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{sub(/a\\{5}/, &quot;x&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># x = 10</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;report_{a,b}.txt&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{sub(/_{a,b}/, &quot;_c&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># report_c.txt</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="conditional-and" tabindex="-1"><a class="header-anchor" href="#conditional-and"><span>Conditional AND</span></a></h2><p>Next up, how to construct conditional AND using dot metacharacter and quantifiers.</p><blockquote><p>match &#39;Error&#39; followed by zero or more characters followed by &#39;valid&#39;</p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;Error: not a valid input&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;/Error.*valid/&#39;</span></span>
<span class="line"><span class="token comment"># Error: not a valid input</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>To allow matching in any order, you&#39;ll have to bring in alternation as well.</p><blockquote><p>&#39;cat&#39; followed by &#39;dog&#39; or &#39;dog&#39; followed by &#39;cat&#39;</p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;two cats and a dog&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{gsub(/cat.*dog|dog.*cat/, &quot;pets&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># two pets</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;two dogs and a cat&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{gsub(/cat.*dog|dog.*cat/, &quot;pets&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># two pets</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="longest-match-wins" tabindex="-1"><a class="header-anchor" href="#longest-match-wins"><span>Longest match wins</span></a></h2><p>You&#39;ve already seen an example where the longest matching portion was chosen if the alternatives started from the same location. For example <code>spar|spared</code> will result in <code>spared</code> being chosen over <code>spar</code>. The same applies whenever there are two or more matching possibilities from the same starting location. For example, <code>f.?o</code> will match <code>foo</code> instead of <code>fo</code> if the input string to match is <code>foot</code>.</p>`,16),js=s("p",null,"longest match among 'foo' and 'fo' wins here",-1),Es=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'foot'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{sub(/f.?o/, "X")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Xt")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Xs=s("p",null,"everything will match here",-1),Ts=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'car bat cod map scat dot abacus'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{sub(/.*/, "X")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# X")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),$s=s("p",null,[e("longest match happens when "),s("code",null,"(1|2|3)+"),e(" matches up to '"),s("code",null,"1233"),e("' only so that '12apple' can match as well")],-1),Is=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'fig123312apple'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{sub(/g(1|2|3)+(12apple)?/, "X")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# fiX")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ss=s("p",null,"in other implementations like Perl, that is not the case precedence is left-to-right for greedy quantifiers",-1),Ns=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'fig123312apple'"),e(),s("span",{class:"token operator"},"|"),e(" perl "),s("span",{class:"token parameter variable"},"-pe"),e(),s("span",{class:"token string"},"'s/g(1|2|3)+(12apple)?/X/'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# fiXapple")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Qs=o("<p>While determining the longest match, the overall regular expression matching is also considered. That&#39;s how the <code>Error.*valid</code> example worked. If <code>.*</code> had consumed everything after <code>Error</code>, there wouldn&#39;t be any more characters to try to match <code>valid</code>. So, among the varying quantity of characters to match for <code>.*</code>, the longest portion that satisfies the overall regular expression is chosen. Something like <code>a.*b</code> will match from the first <code>a</code> in the input string to the last <code>b</code>. In other implementations, like Perl, this is achieved through a process called <strong>backtracking</strong>. These approaches have their own advantages and disadvantages and have cases where the pattern can result in exponential time consumption.</p>",1),Bs=s("blockquote",null,[s("p",null,"from the start of line to the last 'b' in the line")],-1),Fs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'car bat cod map scat dot abacus'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{sub(/.*b/, "-")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# -acus")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Rs=s("p",null,"from the first 'b' to the last 't' in the line",-1),zs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'car bat cod map scat dot abacus'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{sub(/b.*t/, "-")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# car - abacus")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ds=s("p",null,"from the first 'b' to the last 'at' in the line",-1),Ws=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'car bat cod map scat dot abacus'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{sub(/b.*at/, "-")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# car - dot abacus")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Hs=s("p",null,"here 'm*' will match 'm' zero times as that gives the longest match",-1),Ps=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'car bat cod map scat dot abacus'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{sub(/a.*m*/, "-")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# c-")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Gs=s("hr",null,null,-1),Os=s("h2",{id:"character-classes",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#character-classes"},[s("span",null,"Character classes")])],-1),Us=s("p",null,[e("To create a custom placeholder for limited set of characters, enclose them inside "),s("code",null,"[]"),e(" metacharacters. It is similar to using single character alternations inside a grouping, but with added flexibility and features. Character classes have their own versions of metacharacters and provide special predefined sets for common use cases. Quantifiers are also applicable to character classes.")],-1),Ls=s("blockquote",null,[s("p",null,[e("same as: "),s("code",null,"awk '/cot|cut/' and awk '/c(o|u)t/'")])],-1),Ms=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'cute\\ncat\\ncot\\ncoat\\ncost\\nscuttle\\n'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/c[ou]t/'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# cute")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# cot")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# scuttle")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Zs=s("blockquote",null,[s("p",null,[e("same as: "),s("code",null,"awk '/.(a|e|o)t/'")])],-1),Vs=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'meeting\\ncute\\nboat\\nat\\nfoot\\n'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/.[aeo]t/'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# meeting")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# boat")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# foot")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ys=s("blockquote",null,[s("p",null,[e("same as: "),s("code",null,`awk '{gsub(/\\<(s|o|t)(o|n)\\>/, "X")} 1'`)])],-1),Ks=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'no so in to do on'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/\\<[sot][on]\\>/, "X")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# no X in X do X")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Js=s("code",null,"words.txt",-1),se=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/^[on]{2,}$/'"),e(" words.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# no")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# non")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# noon")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# on")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ee=o('<hr><h2 id="character-class-metacharacters" tabindex="-1"><a class="header-anchor" href="#character-class-metacharacters"><span>Character class metacharacters</span></a></h2><p>Character classes have their own metacharacters to help define the sets succinctly. Metacharacters outside of character classes like <code>^</code>, <code>$</code>, <code>()</code> etc either don&#39;t have special meaning or have a completely different one inside the character classes.</p><p>First up, the <code>-</code> metacharacter that helps to define a range of characters instead of having to specify them all individually.</p>',4),ne=s("blockquote",null,[s("p",null,[e("same as: "),s("code",null,`awk '{gsub(/[0123456789]+/, "-")} 1'`)])],-1),ae=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'Sample123string42with777numbers'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/[0-9]+/, "-")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Sample-string-with-numbers")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),te=s("blockquote",null,[s("p",null,"whole words made up of lowercase alphabets and digits only")],-1),le=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'coat Bin food tar12 best'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/\\<[a-z0-9]+\\>/, "X")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# X Bin X X X")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ie=s("blockquote",null,[s("p",null,"whole words made up of lowercase alphabets, starting with 'p' to 'z'")],-1),ce=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'road i post grip read eat pit'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/\\<[p-z][a-z]*\\>/, "X")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# X i X grip X eat X")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),oe=s("p",null,"Character classes can also be used to construct numeric ranges. However, it is easy to miss corner cases and some ranges are complicated to design.",-1),re=s("blockquote",null,[s("p",null,"numbers between 10 to 29")],-1),de=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'23 154 12 26 34'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/\\<[12][0-9]\\>/, "X")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# X 154 X X 34")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),pe=s("blockquote",null,[s("p",null,"numbers >= 100 with optional leading zeros")],-1),ue=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'0501 035 154 12 26 98234'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/\\<0*[1-9][0-9]{2,}\\>/, "X")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# X 035 X 12 26 X")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),he=s("p",null,[e("Next metacharacter is "),s("code",null,"^"),e(" which has to be specified as the first character of the character class. It negates the set of characters, so all characters other than those specified will be matched. As highlighted earlier, handle negative logic with care, you might end up matching more than you wanted.")],-1),me=s("p",null,"replace all non-digit characters",-1),be=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'Sample123string42with777numbers'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/[^0-9]+/, "-")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# -123-42-777-")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ve=s("p",null,"delete last two columns",-1),ge=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'apple:123:banana:cherry'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{sub(/(:[^:]+){2}$/, "")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# apple:123")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ke=s("p",null,"sequence of characters surrounded by a unique character",-1),fe=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},`'I like "mango" and "guava"'`),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/"[^"]+"/, "X")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# I like X and X")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),_e=s("p",null,"sometimes it is simpler to positively define a set than negation",-1),we=s("blockquote",null,[s("p",null,[e("same as: "),s("code",null,"awk '/^[^aeiou]*$/'")])],-1),xe=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'tryst\\nfun\\nglyph\\npity\\nwhy\\n'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'!/[aeiou]/'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# tryst")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# glyph")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# why")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ye=o("<p>Some commonly used character sets have predefined escape sequences:</p><ul><li><code>\\w</code> matches all <strong>word</strong> characters <code>[a-zA-Z0-9_]</code> (recall the description for word boundaries)</li><li><code>\\W</code> matches all non-word characters (recall duality seen earlier, like <code>\\y</code> and <code>\\B</code>)</li><li><code>\\s</code> matches all <strong>whitespace</strong> characters: tab, newline, vertical tab, form feed, carriage return and space</li><li><code>\\S</code> matches all non-whitespace characters</li></ul><p>These escape sequences cannot be used inside character classes. Also, as mentioned earlier, these definitions assume ASCII input.</p>",3),Ae=s("p",null,"match all non-word characters",-1),qe=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'load;err_msg--\\/ant,r2..not'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/\\W+/, "|")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# load|err_msg|ant|r2|not")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ce=s("p",null,"replace all sequences of whitespaces with a single space",-1),je=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'hi  \\v\\f  there.\\thave   \\ra nice\\t\\tday\\n'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/\\s+/, " ")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# hi there. have a nice day")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ee=s("p",null,[s("code",null,"\\w"),e(" would simply match "),s("code",null,"w"),e(" inside character classes")],-1),Xe=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'w=y\\x+9*3'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/[\\w=]/, "")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# y\\x+9*3")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Te={class:"hint-container warning"},$e=s("p",{class:"hint-container-title"},"Warning",-1),Ie=s("p",null,[s("code",null,"awk"),e(" doesn't support "),s("code",null,"\\d"),e(" and "),s("code",null,"\\D"),e(", commonly featured in other implementations as a shortcut for all the digits and non-digits.")],-1),Se=s("p",null,[s("code",null,"\\d"),e(" will match just the 'd' character and produces a warning as well")],-1),Ne=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'42\\d123'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/\\d+/, "-")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# awk: cmd. line:1: warning: regexp escape sequence")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"#                   '\\d' is not a known regexp operator")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 42\\-123")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Qe=s("p",null,[s("code",null,"\\d"),e(" here matches all digit characters")],-1),Be=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'42\\d123'"),e(),s("span",{class:"token operator"},"|"),e(" perl "),s("span",{class:"token parameter variable"},"-pe"),e(),s("span",{class:"token string"},"'s/\\d+/-/g'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# -\\d-")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Fe=o(`<hr><h2 id="named-character-sets" tabindex="-1"><a class="header-anchor" href="#named-character-sets"><span>Named character sets</span></a></h2><p>A named character set is defined by a name enclosed between <code>[:</code> and <code>:]</code> and has to be used within a <code>character class</code> <code>[]</code>, along with other characters as needed.</p><table><thead><tr><th style="text-align:center;">Named set</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:center;"><code>[:digit:]</code></td><td style="text-align:left;"><code>[0-9]</code></td></tr><tr><td style="text-align:center;"><code>[:lower:]</code></td><td style="text-align:left;"><code>[a-z]</code></td></tr><tr><td style="text-align:center;"><code>[:upper:]</code></td><td style="text-align:left;"><code>[A-Z]</code></td></tr><tr><td style="text-align:center;"><code>[:alpha:]</code></td><td style="text-align:left;"><code>[a-zA-Z]</code></td></tr><tr><td style="text-align:center;"><code>[:alnum:]</code></td><td style="text-align:left;"><code>[0-9a-zA-Z]</code></td></tr><tr><td style="text-align:center;"><code>[:xdigit:]</code></td><td style="text-align:left;"><code>[0-9a-fA-F]</code></td></tr><tr><td style="text-align:center;"><code>[:cntrl:]</code></td><td style="text-align:left;">control characters — first 32 ASCII characters and 127th (DEL)</td></tr><tr><td style="text-align:center;"><code>[:punct:]</code></td><td style="text-align:left;">all the punctuation characters</td></tr><tr><td style="text-align:center;"><code>[:graph:]</code></td><td style="text-align:left;"><code>[:alnum:]</code> and<code> [:punct:]</code></td></tr><tr><td style="text-align:center;"><code>[:print:]</code></td><td style="text-align:left;"><code>[:alnum:]</code>, <code>[:punct:]</code> and space</td></tr><tr><td style="text-align:center;"><code>[:blank:]</code></td><td style="text-align:left;">space and tab characters</td></tr><tr><td style="text-align:center;"><code>[:space:]</code></td><td style="text-align:left;">whitespace characters, same as <code>\\s</code></td></tr></tbody></table><p>Here are some examples:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token string">&#39;err_msg xerox ant m_2 P2 load1 eel&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,6),Re=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/\\<[[:lower:]]+\\>/, "X")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# err_msg X X m_2 P2 load1 X")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ze=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/\\<[[:lower:]_]+\\>/, "X")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# X X X m_2 P2 load1 X")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),De=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/\\<[[:alnum:]]+\\>/, "X")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# err_msg X X m_2 X X X")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),We=s("p",null,"retain only punctuation characters",-1),He=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"',pie tie#ink-eat_42'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/[^[:punct:]]+/, "")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ,#-_")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Pe=o('<hr><h2 id="matching-character-class-metacharacters-literally" tabindex="-1"><a class="header-anchor" href="#matching-character-class-metacharacters-literally"><span>Matching <code>character class</code> metacharacters literally</span></a></h2><p>Specific placement is needed to match <code>character class</code> metacharacters literally. Or, they can be escaped by prefixing <code>\\</code> to avoid having to remember the different rules. As <code>\\</code> is special inside character class, use <code>\\\\</code> to represent it literally.</p><p><code>-</code> should be the first or the last character.</p>',4),Ge=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'ab-cd gh-c 12-423'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/[a-z-]{2,}/, "X")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# X X 12-423")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Oe=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token comment"},"# or escaped with \\")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'ab-cd gh-c 12-423'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/[a-z\\-0-9]{2,}/, "X")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# X X X")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ue=s("p",null,[s("code",null,"]"),e(" should be the first character.")],-1),Le=s("p",null,"no match",-1),Me=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'int a[5]\\nfig\\n1+1=2\\n'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/[=]]/'")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"})])],-1),Ze=s("p",null,"correct usage",-1),Ve=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'int a[5]\\nfig\\n1+1=2\\n'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/[]=]/'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# int a[5]")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 1+1=2")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ye=s("p",null,[s("code",null,"["),e(" can be used anywhere in the character set. Using "),s("code",null,"[][]"),e(" will match both "),s("code",null,"["),e(" and "),s("code",null,"]"),e(".")],-1),Ke=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'int a[5].y'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/[x[y.]/, "")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# int a5]")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Je=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'int a[5]\\nfig\\n1+1=2\\nwho]'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/[][]/'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# int a[5]")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# who]")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),sn=o(`<p><code>^</code> should be other than the first character.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;f*(a^b) - 3*(a+b)/(a-b)&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{gsub(/a[+^]b/, &quot;c&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># f*(c) - 3*(c)/(a-b)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Combinations like <code>[.</code> or <code>[:</code> cannot be used together to mean two individual characters, as they have special meaning within <code>[]</code>. See <a href="https://www.gnu.org/software/gawk/manual/gawk.html#Bracket-Expressions" target="_blank" rel="noopener noreferrer">gawk manual: Using Bracket Expressions</a> for more details.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;int a[5]&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;/[x[.y]/&#39;</span></span>
<span class="line"><span class="token comment"># awk: cmd. line:1: error: Unmatched [, [^, [:, [., or [=: /[x[.y]/</span></span>
<span class="line"> <span class="token builtin class-name">echo</span> <span class="token string">&#39;int a[5]&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;/[x[y.]/&#39;</span></span>
<span class="line"><span class="token comment"># int a[5]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><hr><h2 id="escape-sequences" tabindex="-1"><a class="header-anchor" href="#escape-sequences"><span>Escape sequences</span></a></h2><p>Certain ASCII characters like tab <code>\\t</code>, carriage return <code>\\r</code>, newline <code>\\n</code>, etc have escape sequences to represent them. Additionally, any character can be represented using their ASCII value in octal <code>\\NNN</code> or hexadecimal <code>\\xNN</code> formats. Unlike character set escape sequences like <code>\\w</code>, these can be used inside character classes.</p>`,6),en=s("p",null,[s("code",null,"\\t"),e(" represents the tab character")],-1),nn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'apple\\tbanana\\tcherry\\n'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/\\t/, " ")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# apple banana cherry")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),an=s("p",null,"these escape sequences work inside character class too",-1),tn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'a\\t\\r\\fb\\vc\\n'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/[\\t\\v\\f\\r]+/, ":")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# a:b:c")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ln=s("p",null,"representing single quotes",-1),cn=s("blockquote",null,[s("p",null,[e("use "),s("code",null,"\\047"),e(" for octal format")])],-1),on=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},`"universe: '42'"`),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/\\x27/, "")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# universe: 42")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),rn=s("p",null,"If a metacharacter is specified using the ASCII value format, it will still act as the metacharacter.",-1),dn=s("p",null,[s("code",null,"\\x5e"),e(" is "),s("code",null,"^"),e(" character, acts as line anchor here")],-1),pn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'acorn\\ncot\\ncat\\ncoat\\n'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/\\x5eco/'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# cot")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# coat")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),un=s("p",null,[s("code",null,"&"),e(" metacharacter in replacement will be discussed in a later section")],-1),hn=s("p",null,"it represents the entire matched portion",-1),mn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'hello world'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{sub(/.*/, "[&]")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [hello world]")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),bn=s("p",null,[s("code",null,"\\x26"),e(" in hexadecimal is the "),s("code",null,"&"),e(" character")],-1),vn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'hello world'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{sub(/.*/, "[\\x26]")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [hello world]")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),gn=o(`<p>Undefined sequences will result in a warning and treated as the character it escapes.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;read&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{sub(/\\d/, &quot;l&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># awk: cmd. line:1: warning: regexp escape sequence</span></span>
<span class="line"><span class="token comment">#                   &#39;\\d&#39; is not a known regexp operator</span></span>
<span class="line"><span class="token comment"># real</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Info</p><p>See <a href="https://www.gnu.org/software/gawk/manual/gawk.html#Escape-Sequences" target="_blank" rel="noopener noreferrer">gawk manual: Escape Sequences</a> for full list and other details.</p></div><hr><h2 id="replace-specific-occurrence" tabindex="-1"><a class="header-anchor" href="#replace-specific-occurrence"><span>Replace specific occurrence</span></a></h2><p>The third substitution function is gensub which can be used instead of both the <code>sub</code> and <code>gsub</code> functions. Syntax wise, <code>gensub</code> needs minimum three arguments. The third argument is used to indicate whether you want to replace all occurrences with <code>&quot;g&quot;</code> or a specific occurrence by passing a number. Another difference is that <code>gensub</code> returns a string value (irrespective of the substitution operation succeeding) instead of modifying the input.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token string">&#39;apple:banana:cherry:fig:mango&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,7),kn=s("blockquote",null,[s("p",null,[e("same as: "),s("code",null,"sed 's/:/-/2'")])],-1),fn=s("ul",null,[s("li",null,[e("replace only the second occurrence of '"),s("code",null,":"),e("' with '"),s("code",null,"-"),e("'")]),s("li",null,"note that the output of gensub is passed to print here")],-1),_n=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{print gensub(/:/, "-", 2)}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# apple:banana-cherry:fig:mango")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),wn=s("blockquote",null,[s("p",null,[e("same as: "),s("code",null,"sed -E 's/[^:]+/X/3'")])],-1),xn=s("ul",null,[s("li",null,"replace only the third field with '123'")],-1),yn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{print gensub(/[^:]+/, "123", 3)}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# apple:banana:123:fig:mango")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),An=o(`<p>The fourth argument for the <code>gensub</code> function allows you to specify a string or a variable on which the substitution has to be performed. Default is <code>$0</code>, as seen in the previous examples.</p><blockquote><p>same as: <code>awk &#39;{gsub(/[aeiou]/, &quot;X&quot;, $4)} 1&#39;</code></p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;1 good 2 apples&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{$4 = gensub(/[aeiou]/, &quot;X&quot;, &quot;g&quot;, $4)} 1&#39;</span></span>
<span class="line"><span class="token comment"># 1 good 2 XpplXs</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="backreferences" tabindex="-1"><a class="header-anchor" href="#backreferences"><span>Backreferences</span></a></h2><p>The grouping metacharacters <code>()</code> are also known as capture groups. Similar to variables in programming languages, the portion captured by <code>()</code> can be referred later using backreferences. The syntax is <code>\\N</code> where <code>N</code> is the capture group you want. Leftmost <code>(</code> in the regular expression is <code>\\1</code>, next one is <code>\\2</code> and so on up to <code>\\9</code>. The <code>&amp;</code> metacharacter represents entire matched string. As <code>\\</code> is already special inside double quotes, you&#39;ll have to use <code>&quot;\\\\1&quot;</code> to represent <code>\\1</code>.</p><div class="hint-container info"><p class="hint-container-title">Info</p><p>Backreferences of the form <code>\\N</code> can only be used with the <code>gensub</code> function. <code>&amp;</code> can be used with <code>sub</code>, <code>gsub</code> and <code>gensub</code> functions. <code>\\0</code> can also be used instead of <code>&amp;</code> with the <code>gensub</code> function.</p></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div></div>`,8),qn=s("p",null,[e("reduce "),s("code",null,"\\\\"),e(" to single "),s("code",null,"\\"),e(" and delete if it is a single "),s("code",null,"\\")],-1),Cn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'\\[\\] and \\\\w and \\[a-zA-Z0-9\\_\\]'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{print gensub(/(\\\\?)\\\\/, "\\\\1", "g")}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [] and \\w and [a-zA-Z0-9_]")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),jn=s("p",null,"duplicate the first column value and add it as the final column",-1),En=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'one,2,3.14,42'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{print gensub(/^([^,]+).*/, "&,\\\\1", 1)}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# one,2,3.14,42,one")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Xn=s("p",null,"add something at the start and end of string, gensub isn't needed here",-1),Tn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'hello world'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{sub(/.*/, "Hi. &. Have a nice day")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Hi. hello world. Have a nice day")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),$n=s("p",null,[e("here "),s("code",null,"{N}"),e(" refers to the last but Nth occurrence")],-1),In=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'car,art,pot,tap,urn,ray,ear'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{print gensub(/(.*),((.*,){2})/, "\\\\1[]\\\\2", 1)}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# car,art,pot,tap[]urn,ray,ear")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Sn=o(`<div class="hint-container warning"><p class="hint-container-title">Warning</p><p>See <a href="https://unix.stackexchange.com/q/579889/109046" target="_blank" rel="noopener noreferrer">unix.stackexchange: Why doesn&#39;t this sed command replace the 3rd-to-last &quot;and&quot;?</a> for a bug related to the use of word anchors in the <code>((pat){N})</code> generic case.</p></div><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Unlike other regular expression implementations, like <code>grep</code> or <code>sed</code> or <code>perl</code>, backreferences cannot be used in the search section in <code>awk</code>. See also <a href="https://unix.stackexchange.com/q/361427/109046" target="_blank" rel="noopener noreferrer">unix.stackexchange: backreference in awk</a>.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token string">&#39;effort flee facade oddball rat tool&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># no change</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$s</span>&quot;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{gsub(/\\w*(\\w)\\1\\w*/, &quot;X&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># effort flee facade oddball rat tool</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">#whole words that have at least one consecutive repeated character</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$s</span>&quot;</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token parameter variable">-E</span> <span class="token string">&#39;s/\\w*(\\w)\\1\\w*/X/g&#39;</span></span>
<span class="line"><span class="token comment"># X X facade X rat X</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>If a quantifier is applied on a pattern grouped inside <code>()</code> metacharacters, you&#39;ll need an outer <code>()</code> group to capture the matching portion. Other flavors like Perl provide non-capturing groups to handle such cases. In <code>awk</code> you&#39;ll have to consider the extra capture groups.</p><blockquote><p>note the numbers used in the replacement section</p></blockquote><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token string">&#39;one,2,3.14,42&#39;</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;<span class="token variable">$s</span>&quot;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{$0=gensub(/^(([^,]+,){2})([^,]+)/, &quot;[\\\\1](\\\\3)&quot;, 1)} 1&#39;</span></span>
<span class="line"><span class="token comment"># [one,2,](3.14),42</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here&#39;s an example where alternation order matters when the matching portions have the same length. Aim is to delete all whole words unless it starts with <code>g</code> or <code>p</code> and contains <code>y</code>.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token string">&#39;tryst,fun,glyph,pity,why,group&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,7),Nn=s("p",null,[e("all words get deleted because "),s("code",null,"\\<\\w+\\>"),e(" gets priority here")],-1),Qn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{print gensub(/\\<\\w+\\>|(\\<[gp]\\w*y\\w*\\>)/, "\\\\1", "g")}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ,,,,,")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Bn=s("p",null,"capture group gets priority here, so words in the capture group are retained",-1),Fn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{print gensub(/(\\<[gp]\\w*y\\w*\\>)|\\<\\w+\\>/, "\\\\1", "g")}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# ,,glyph,pity,,")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Rn=s("p",null,[e("As "),s("code",null,"\\"),e(" and "),s("code",null,"&"),e(" are special characters in the replacement section, you'll need to escape them for literal representation.")],-1),zn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'apple and fig'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{sub(/and/, "[&]")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# apple [and] fig")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Dn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'apple and fig'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{sub(/and/, "[\\\\&]")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# apple [&] fig")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Wn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'apple and fig'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{sub(/and/, "\\\\")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# apple \\ fig")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Hn=o('<hr><h2 id="case-insensitive-matching" tabindex="-1"><a class="header-anchor" href="#case-insensitive-matching"><span>Case insensitive matching</span></a></h2><p>Unlike <code>sed</code> or <code>perl</code>, regular expressions in <code>awk</code> do not directly support the use of flags to change certain behaviors. For example, there is no flag to force the regexp to ignore case while matching.</p><p>The <code>IGNORECASE</code> special variable controls case sensitivity, which is <code>0</code> by default. By changing it to some other value (which would mean <code>true</code> in a conditional expression), you can match case insensitively. The <code>-v</code> command line option allows you to assign a variable before input is read. The <code>BEGIN</code> block is also often used to change such settings.</p>',4),Pn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'Cat\\ncOnCaT\\nscatter\\ncot\\n'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"IGNORECASE"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"1"),e(),s("span",{class:"token string"},"'/cat/'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Cat")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# cOnCaT")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# scatter")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Gn=s("p",null,"for small enough string, you can also use character class",-1),On=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'Cat\\ncOnCaT\\nscatter\\ncot\\n'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/[cC][aA][tT]/, "(&)")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# (Cat)")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# cOn(CaT)")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# s(cat)ter")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# cot")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Un=o(`<p>Another way is to use built-in string function <code>tolower</code> to change the input to lowercase first.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">printf</span> <span class="token string">&#39;Cat\\ncOnCaT\\nscatter\\ncot\\n&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;tolower($0) ~ /cat/&#39;</span></span>
<span class="line"><span class="token comment"># Cat</span></span>
<span class="line"><span class="token comment"># cOnCaT</span></span>
<span class="line"><span class="token comment"># scatter</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="dynamic-regexp" tabindex="-1"><a class="header-anchor" href="#dynamic-regexp"><span>Dynamic regexp</span></a></h2><p>As seen earlier, string literals can be used instead of a regexp to specify the pattern to be matched. Which implies that you can use any expression or a variable as well. This is helpful if you need to compute the regexp based on some conditions or if you are getting the pattern externally, such as user input passed via the <code>-v</code> option from a <code>bash</code> variable.</p>`,5),Ln=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"r"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'cat.*dog|dog.*cat'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'two cats and a dog'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"ip"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$r"),e('"')]),e(),s("span",{class:"token string"},`'{gsub(ip, "pets")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# two pets")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Mn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'ow'"),e(),s("span",{class:"token string"},"'$0 ~ s'"),e(" table.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# brown bread mat hair 42")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# yellow banana window shoes 3.14")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Zn=s("p",null,[e("you'll have to make sure to use "),s("code",null,"\\\\"),e(" instead of "),s("code",null,"\\")],-1),Vn=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"r"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'\\\\<[12][0-9]\\\\>'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'23 154 12 26 34'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"ip"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$r"),e('"')]),e(),s("span",{class:"token string"},`'{gsub(ip, "X")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# X 154 X X 34")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Yn={class:"hint-container info"},Kn=s("p",{class:"hint-container-title"},"Info",-1),Jn=s("p",null,[e("Sometimes, user input has to be treated literally instead of as a regexp pattern. In such cases, you'll need to escape all the regexp metacharacters. Below example shows how to do it for the search section. For the replace section, you only have to escape the "),s("code",null,"\\"),e(" and "),s("code",null,"&"),e(" characters.")],-1),sa=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'(a.b)^{c}|d'"),e(),s("span",{class:"token string"},`'BEGIN{gsub(/[{[(^$*?+.|\\\\]/, "\\\\\\\\&", s); print s}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# \\(a\\.b)\\^\\{c}\\|d")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ea=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'f*(a^b) - 3*(a^b)'"),e(),s("span",{class:"token operator"},"|")]),e(`
`),s("span",{class:"line"},[e("     "),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'(a^b)'"),e(),s("span",{class:"token string"},`'{gsub(/[{[(^$*?+.|\\\\]/, "\\\\\\\\&", s); gsub(s, "c")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# f*c - 3*c")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),na=s("p",null,"match given input string literally, but only at the end of string",-1),aa=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'f*(a^b) - 3*(a^b)'"),e(),s("span",{class:"token operator"},"|")]),e(`
`),s("span",{class:"line"},[e("     "),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'(a^b)'"),e(),s("span",{class:"token string"},`'{gsub(/[{[(^$*?+.|\\\\]/, "\\\\\\\\&", s); gsub(s "$", "c")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# f*(a^b) - 3*c")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ta={class:"hint-container info"},la=s("p",{class:"hint-container-title"},"Info",-1),ia=s("p",null,[e("See "),s("a",{href:"https://learnbyexample.github.io/escaping-madness-awk-literal-field-separator/",target:"_blank",rel:"noopener noreferrer"},"my blog post"),e(" for more details about escaping metacharacters.")],-1),ca=s("hr",null,null,-1),oa=s("h2",{id:"summary",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#summary"},[s("span",null,"Summary")])],-1),ra=s("p",null,[e("Regular expressions is a feature that you'll encounter in multiple command line programs and programming languages. It is a versatile tool for text processing. Although the features in "),s("code",null,"awk"),e(" are less compared to those found in programming languages, they are sufficient for most of the tasks you'll need for command line usage. It takes a lot of time to get used to syntax and features of regular expressions, so I'll encourage you to practice a lot and maintain notes. It'd also help to consider it as a mini-programming language in itself for its flexibility and complexity.")],-1),da=s("hr",null,null,-1),pa=s("h2",{id:"exercises",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercises"},[s("span",null,"Exercises")])],-1),ua={class:"hint-container info"},ha=s("p",{class:"hint-container-title"},"Info",-1),ma={href:"https://github.com/learnbyexample/learn_gnuawk/tree/master/exercises",target:"_blank",rel:"noopener noreferrer"},ba=s("h3",{id:"exercise-1",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-1"},[s("span",null,"Exercise 1")])],-1),va=s("code",null,"patterns.txt",-1),ga=s("code",null,"den",-1),ka=s("code",null,"ly",-1),fa=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 2 lonely")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# dent")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# lovely")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),_a=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/^den|ly$/'"),e(" patterns.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 2 lonely")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# dent")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# lovely")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),wa=s("h3",{id:"exercise-2",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-2"},[s("span",null,"Exercise 2")])],-1),xa=s("code",null,"patterns.txt",-1),ya=s("code",null,"[42]",-1),Aa=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Hi[42]Bye nice1[42]3 bad42")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# eqn2 = pressure*3+42/5-1[42]56")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# cool_[42]a 42fake")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# _[42]_")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),qa=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'gsub(/\\B42\\B/, "[&]")'`),e(" patterns.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Hi[42]Bye nice1[42]3 bad42")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# eqn2 = pressure*3+42/5-1[42]56")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# cool_[42]a 42fake")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# _[42]_")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ca=s("h3",{id:"exercise-3",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-3"},[s("span",null,"Exercise 3")])],-1),ja=s("code",null,"patterns.txt",-1),Ea=s("code",null,"[]",-1),Xa=s("code",null,"s",-1),Ta=s("code",null,"e",-1),$a=s("code",null,"t",-1),Ia=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [sets] tests Sauerkraut")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [site] cite kite bite [store_2]")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [subtle] sequoia")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# a [set]")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Sa=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'gsub(/\\<s\\w*(e\\w*t|t\\w*e)\\w*/, "[&]")'`),e(" patterns.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [sets] tests Sauerkraut")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [site] cite kite bite [store_2]")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [subtle] sequoia")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# a [set]")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Na=s("h3",{id:"exercise-4",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-4"},[s("span",null,"Exercise 4")])],-1),Qa=s("code",null,"patterns.txt",-1),Ba=s("code",null,"a",-1),Fa=s("code",null,"r",-1),Ra=s("code",null,"A car park",-1),za=s("code",null,"A car",-1),Da=s("code",null,"park",-1),Wa=s("code",null,"car",-1),Ha=s("code",null,"far",-1),Pa=s("code",null,"tar",-1),Ga=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# par")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# car")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# tar")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# far")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Cart")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Not a")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# pip DOWN")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Oa=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'/[A-Z]/ && /[ar]\\> /{print gensub(/([ar])\\> /, "\\\\1\\n", "g")}'`),e(" patterns.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# par")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# car")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# tar")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# far")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Cart")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Not a")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# pip DOWN")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ua=s("h3",{id:"exercise-5",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-5"},[s("span",null,"Exercise 5")])],-1),La=s("code",null,"patterns.txt",-1),Ma=s("code",null,"*[5]",-1),Za=s("code",null,"2",-1),Va=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# s(9-2)2")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ya=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'gsub(/\\*\\[5]/, "2")'`),e(" patterns.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# (9-2)2")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ka=s("h3",{id:"exercise-6",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-6"},[s("span",null,"Exercise 6")])],-1),Ja=s("p",null,[s("code",null,"awk '/\\<[a-z](on|no)[a-z]\\>/'"),e(" is same as "),s("code",null,"awk '/\\<[a-z][on]{2}[a-z]\\>/'"),e(". True or False? Sample input shown below might help to understand the differences, if any.")],-1),st=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'known\\nmood\\nknow\\npony\\ninns\\n'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# known")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# mood")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# know")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# pony")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# inns")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),et=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"printf"),e(),s("span",{class:"token string"},"'known\\nmood\\nknow\\npony\\ninns\\n'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# known")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# mood")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# know")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# pony")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# inns")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),nt=s("h3",{id:"exercise-7",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-7"},[s("span",null,"Exercise 7")])],-1),at=s("code",null,"patterns.txt",-1),tt=s("code",null,"hand",-1),lt=s("code",null,"s",-1),it=s("code",null,"y",-1),ct=s("code",null,"le",-1),ot=s("code",null,"handed",-1),rt=s("code",null,"hand",-1),dt=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# handle")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# handy")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# hands")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# hand")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),pt=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/^hand([sy]|le)?$/'"),e(" patterns.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# handle")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# handy")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# hands")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# hand")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ut=s("h3",{id:"exercise-8",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-8"},[s("span",null,"Exercise 8")])],-1),ht=s("code",null,"patterns.txt",-1),mt=s("code",null,"42//5",-1),bt=s("code",null,"42/5",-1),vt=s("code",null,"8",-1),gt=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# eqn3 = r*42-5/3+42///5-83+a")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# eqn1 = a+8-c")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# eqn2 = pressure*3+8-14256")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),kt=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'gsub("42//?5", "8")'`),e(" patterns.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# eqn3 = r*42-5/3+42///5-83+a")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# eqn1 = a+8-c")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# eqn2 = pressure*3+8-14256")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ft=o('<h3 id="exercise-9" tabindex="-1"><a class="header-anchor" href="#exercise-9"><span>Exercise 9</span></a></h3><p>For the given quantifiers, what would be the equivalent form using the <code>{m,n}</code> representation?</p><ul><li><code>?</code> is same as <ul><li><code>{,1}</code></li></ul></li><li><code>*</code> is same as <ul><li><code>{0,}</code></li></ul></li><li><code>+</code> is same as <ul><li><code>{1,}</code></li></ul></li></ul><h3 id="exercise-10" tabindex="-1"><a class="header-anchor" href="#exercise-10"><span>Exercise 10</span></a></h3><p>True or False? <code>(a*|b*)</code> is same as <code>(a|b)*</code></p><blockquote><p>False. Because <code>(a*|b*)</code> will match only sequences like <code>a</code>, <code>aaa</code>, <code>bb</code>, <code>bbbbbbbb</code>. But <code>(a|b)*</code> can match a mixed sequence like <code>ababbba</code> too.</p></blockquote><h3 id="exercise-11" tabindex="-1"><a class="header-anchor" href="#exercise-11"><span>Exercise 11</span></a></h3>',7),_t=s("code",null,"patterns.txt",-1),wt=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token comment"},"# delete from '(' till the next ')'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# a/b + c%d")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# *[5]")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# def factorial")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 12- *4)")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Hi there. Nice day")]),e(`
`),s("span",{class:"line"}),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# delete from '(' till the next ')' but not if there is '(' in between")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# a/b + c%d")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# *[5]")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# def factorial")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 12- (e+*4)")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Hi there. Nice day(a")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),xt=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token comment"},"# delete from '(' till the next ')'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'gsub(/\\([^)]*)/, "")'`),e(" patterns.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# a/b + c%d")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# *[5]")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# def factorial")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 12- *4)")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Hi there. Nice day")]),e(`
`),s("span",{class:"line"}),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# delete from '(' till the next ')' but not if there is '(' in between")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'gsub(/\\([^()]*)/, "")'`),e(" patterns.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# a/b + c%d")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# *[5]")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# def factorial")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 12- (e+*4)")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Hi there. Nice day(a")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),yt=s("h3",{id:"exercise-12",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-12"},[s("span",null,"Exercise 12")])],-1),At=s("code",null,"anchors.txt",-1),qt=o(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> anchors.txt</span>
<span class="line"><span class="token comment"># &lt;a name=&quot;regular-expressions&quot;&gt;&lt;/a&gt;Regular Expressions</span></span>
<span class="line"><span class="token comment">## &lt;a name=&quot;subexpression-calls&quot;&gt;&lt;/a&gt;Subexpression calls</span></span>
<span class="line"><span class="token comment">## &lt;a name=&quot;the-dot-meta-character&quot;&gt;&lt;/a&gt;The dot meta character</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Ct=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [Regular Expressions](#regular-expressions)")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [Subexpression calls](#subexpression-calls)")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [The dot meta character](#the-dot-meta-character)")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),jt=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{print gensub(/#+ <a name="([^"]+)"><\\/a>(.+)/, "[\\\\2](#\\\\1)", 1)}'`),e(" anchors.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [Regular Expressions](#regular-expressions)")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [Subexpression calls](#subexpression-calls)")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [The dot meta character](#the-dot-meta-character)")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Et=s("h3",{id:"exercise-13",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-13"},[s("span",null,"Exercise 13")])],-1),Xt=s("code",null,"sample.txt",-1),Tt=s("ul",null,[s("li",null,[s("code",null,"to"),e(" or "),s("code",null,"he"),e(" matched irrespective of case")]),s("li",null,[s("code",null,"World"),e(" or "),s("code",null,"No"),e(" matched case sensitively")])],-1),$t=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Hello World")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# No doubt you like it too")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),It=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'tolower($0) ~ /to|he/ && /World|No/'"),e(" sample.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Hello World")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# No doubt you like it too")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),St=s("h3",{id:"exercise-14",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-14"},[s("span",null,"Exercise 14")])],-1),Nt=s("p",null,[e("Given sample strings have fields separated by "),s("code",null,","),e(" and field values cannot be empty. Replace the third field with "),s("code",null,"42"),e(".")],-1),Qt=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'lion,ant,road,neon'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# lion,ant,42,neon")]),e(`
`),s("span",{class:"line"}),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'_;3%,.,=-=,:'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# _;3%,.,42,:")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Bt=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'lion,ant,road,neon'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{print gensub(/[^,]+/, "42", 3)}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# lion,ant,42,neon")]),e(`
`),s("span",{class:"line"}),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},"'_;3%,.,=-=,:'"),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{print gensub(/[^,]+/, "42", 3)}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# _;3%,.,42,:")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Ft=s("h3",{id:"exercise-15",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-15"},[s("span",null,"Exercise 15")])],-1),Rt=s("code",null,"patterns.txt",-1),zt=s("code",null,"ar",-1),Dt=s("code",null,"ar",-1),Wt=s("code",null,"X",-1),Ht=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# par car tX far Cart")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# pXt cart mart")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Pt=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'BEGIN{r = @/(.*)ar((.*ar){2})/} $0~r{print gensub(r, "\\\\1X\\\\2", 1)}'`),e(" patterns.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# par car tX far Cart")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# pXt cart mart")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Gt=s("h3",{id:"exercise-16",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-16"},[s("span",null,"Exercise 16")])],-1),Ot=s("p",null,[e("Surround all whole words with "),s("code",null,"()"),e(". Additionally, if the whole word is "),s("code",null,"imp"),e(" or "),s("code",null,"ant"),e(", delete them.")],-1),Ut=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"words"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'tiger imp goat eagle ant important'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$words"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# (tiger) () (goat) (eagle) () (important)")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Lt=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"words"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'tiger imp goat eagle ant important'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$words"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{print gensub(/\\<(imp|ant|(\\w+))\\>/, "(\\\\2)", "g")}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# (tiger) () (goat) (eagle) () (important)")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Mt=s("h3",{id:"exercise-17",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-17"},[s("span",null,"Exercise 17")])],-1),Zt=s("code",null,"patterns.txt",-1),Vt=s("code",null,"scared-cat",-1),Yt=s("code",null,"car care",-1),Kt=s("code",null,"far",-1),Jt=s("code",null,"car",-1),sl=s("code",null,"park",-1),el=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# scar")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# care")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# a huge discarded pile of books")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# scare")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# part cart mart")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),nl=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/\\Bcar|car\\B/'"),e(" patterns.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# scar")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# care")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# a huge discarded pile of books")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# scare")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# part cart mart")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),al=o(`<h3 id="exercise-18" tabindex="-1"><a class="header-anchor" href="#exercise-18"><span>Exercise 18</span></a></h3><p>Will the pattern<code> ^a\\w+([0-9]+:fig)?</code> match the same characters for the input <code>apple42:banana314</code> and <code>apple42:fig100</code>? If not, why not?</p><details class="hint-container details"><summary>Answer</summary><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;apple42:banana314&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{sub(/^a\\w+([0-9]+:fig)?/, &quot;[&amp;]&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># [apple42]:banana314</span></span>
<span class="line"></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;apple42:fig100&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{sub(/^a\\w+([0-9]+:fig)?/, &quot;[&amp;]&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># [apple42:fig]100</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For patterns matching from the same starting location, longest match wins in ERE. So, <code>\\w+</code> will give up characters to allow <code>([0-9]+:fig)?</code> to also match in the second case. In other flavors like PCRE, <code>apple42</code> will be matched for both the cases.</p></details><h3 id="exercise-19" tabindex="-1"><a class="header-anchor" href="#exercise-19"><span>Exercise 19</span></a></h3>`,4),tl=s("code",null,"patterns.txt",-1),ll=s("code",null,"4",-1),il=s("code",null,"-",-1),cl=s("code",null,"u",-1),ol=s("code",null,"sub",-1),rl=s("code",null,"care",-1),dl=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# care")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 4*5]")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# -handy")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# subtle sequoia")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# unhand")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),pl=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},"'/^([4u-]|sub|care)/'"),e(" patterns.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# care")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 4*5]")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# -handy")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# subtle sequoia")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# unhand")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),ul=s("h3",{id:"exercise-20",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-20"},[s("span",null,"Exercise 20")])],-1),hl=s("p",null,[e("Replace sequences made up of words separated by "),s("code",null,":"),e(" or "),s("code",null,"."),e(" by the first word of the sequence. Such sequences will end when "),s("code",null,":"),e(" or "),s("code",null,"."),e(" is not followed by a word character.")],-1),ml=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"ip"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'wow:Good:2_two.five: hi-2 bye kite.777:water.'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$ip"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# wow hi-2 bye kite")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),bl=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"ip"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'wow:Good:2_two.five: hi-2 bye kite.777:water.'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$ip"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{gsub(/([:.]\\w*)+/, "")} 1'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# wow hi-2 bye kite")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),vl=s("h3",{id:"exercise-21",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-21"},[s("span",null,"Exercise 21")])],-1),gl=s("p",null,[e("Replace sequences made up of words separated by "),s("code",null,":"),e(" or "),s("code",null,"."),e(" by the last word of the sequence. Such sequences will end when "),s("code",null,":"),e(" or "),s("code",null,"."),e(" is not followed by a word character.")],-1),kl=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"ip"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'wow:Good:2_two.five: hi-2 bye kite.777:water.'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$ip"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# five hi-2 bye water")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),fl=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"ip"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'wow:Good:2_two.five: hi-2 bye kite.777:water.'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$ip"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{print gensub(/((\\w+)[:.])+/, "\\\\2", "g")}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# five hi-2 bye water")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),_l=s("h3",{id:"exercise-22",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-22"},[s("span",null,"Exercise 22")])],-1),wl=s("p",null,[e("Replace all whole words with "),s("code",null,"X"),e(" unless it is preceded by a "),s("code",null,"("),e(" character.")],-1),xl=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'guava (apple) berry) apple (mango) (grape'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# X (apple) X) X (mango) (grape")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),yl=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"s"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'guava (apple) berry) apple (mango) (grape'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$s"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{print gensub(/(^|[^(])\\<\\w+/, "\\\\1X", "g")}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# X (apple) X) X (mango) (grape")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Al=s("h3",{id:"exercise-23",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-23"},[s("span",null,"Exercise 23")])],-1),ql=s("p",null,[e("Surround whole words with "),s("code",null,"[]"),e(" only if they are followed by "),s("code",null,":"),e(" or "),s("code",null,","),e(" or "),s("code",null,"-"),e(".")],-1),Cl=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"ip"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'Poke,on=-=so_good:ink.to/is(vast)ever2-sit'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$ip"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [Poke],on=-=[so_good]:ink.to/is(vast)[ever2]-sit")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),jl=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token assign-left variable"},"ip"),s("span",{class:"token operator"},"="),s("span",{class:"token string"},"'Poke,on=-=so_good:ink.to/is(vast)ever2-sit'")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token builtin class-name"},"echo"),e(),s("span",{class:"token string"},[e('"'),s("span",{class:"token variable"},"$ip"),e('"')]),e(),s("span",{class:"token operator"},"|"),e(),s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{print gensub(/(\\w+)([:,-])/, "[\\\\1]\\\\2", "g")}'`)]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# [Poke],on=-=[so_good]:ink.to/is(vast)[ever2]-sit")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),El=s("h3",{id:"exercise-24",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#exercise-24"},[s("span",null,"Exercise 24")])],-1),Xl=s("code",null,"fields.txt",-1),Tl=s("code",null,":",-1),$l=s("code",null,":",-1),Il=o(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> fields.txt</span>
<span class="line"><span class="token comment"># 42:cat</span></span>
<span class="line"><span class="token comment"># twelve:a2b</span></span>
<span class="line"><span class="token comment"># we:be:he:0:a:b:bother</span></span>
<span class="line"><span class="token comment"># apple:banana-42:cherry:</span></span>
<span class="line"><span class="token comment"># dragon:unicorn:centaur</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Sl=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 42")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# twelve:a2b")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# we:be:he:0:a:b")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# apple:banana-42:cherry")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# dragon:unicorn:centaur")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Nl=s("blockquote",null,[s("p",null,[e("can also use: "),s("code",null,`awk '/[0-9].*:/{sub(/:[^:]*$/, "")} 1' fields.txt`)])],-1),Ql=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token string"},`'{print gensub(/([0-9].*):.*/, "\\\\1", 1)}'`),e(" fields.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# 42")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# twelve:a2b")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# we:be:he:0:a:b")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# apple:banana-42:cherry")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# dragon:unicorn:centaur")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Bl=o(`<h3 id="exercise-25" tabindex="-1"><a class="header-anchor" href="#exercise-25"><span>Exercise 25</span></a></h3><p>Can you use a character other than <code>/</code> as the regexp delimiter? If not, are there ways to construct a regexp that do not require the <code>/</code> character to be escaped for literal matching?</p><details class="hint-container details"><summary>Answer</summary><p>A regexp literal can use only the <code>/</code> character as the regexp delimiter. You can also pass a string literal for regexp matching, which doesn&#39;t require the <code>/</code> character to be escaped for literal matching. However, you&#39;ll have to use <code>\\\\</code> to represent a single <code>\\</code> character, which will affect the use of escape sequences like <code>\\&lt;</code> and <code>\\w</code>.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># using a string literal for regexp matching, no need to escape the / character</span></span>
<span class="line"><span class="token builtin class-name">printf</span> <span class="token string">&#39;/home/joe/1\\n/home/john/1\\n&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;$0 ~ &quot;/home/joe/&quot;&#39;</span></span>
<span class="line"><span class="token comment"># /home/joe/1</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># however, you&#39;ll need \\\\ to represent a single \\</span></span>
<span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&#39;\\learn\\by\\example&#39;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{gsub(&quot;\\\\\\\\&quot;, &quot;/&quot;)} 1&#39;</span></span>
<span class="line"><span class="token comment"># /learn/by/example</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="exercise-26" tabindex="-1"><a class="header-anchor" href="#exercise-26"><span>Exercise 26</span></a></h3>`,4),Fl=s("code",null,"patterns.txt",-1),Rl=s("code",null,"[]",-1),zl=s("code",null,"0x",-1),Dl=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token comment"},"##### add your solution here")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},'# "should not match [0XdeadBEEF]"')]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Hi42Bye nice1423 [bad42]")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# took 0xbad 22 [0x0ff1ce]")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# eqn2 = pressure*3+42/5-[14256]")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Wl=s("blockquote",null,[s("p",null,[e("can also use: "),s("code",null,`awk 'gsub(/\\<(0[xX])?[[:xdigit:]]{4,}\\>/, "[&]")' patterns.txt`)])],-1),Hl=s("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",null,[s("code",null,[s("span",{class:"line"}),e(`
`),s("span",{class:"line"},[s("span",{class:"token function"},"awk"),e(),s("span",{class:"token parameter variable"},"-v"),e(),s("span",{class:"token assign-left variable"},"IGNORECASE"),s("span",{class:"token operator"},"="),s("span",{class:"token number"},"1"),e(),s("span",{class:"token string"},`'gsub(/\\<(0x)?[0-9a-f]{4,}\\>/, "[&]")'`),e(" patterns.txt")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},'# "should not match [0XdeadBEEF]"')]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# Hi42Bye nice1423 [bad42]")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# took 0xbad 22 [0x0ff1ce]")]),e(`
`),s("span",{class:"line"},[s("span",{class:"token comment"},"# eqn2 = pressure*3+42/5-[14256]")]),e(`
`),s("span",{class:"line"})])]),s("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),Pl=s("hr",null,null,-1);function Gl(u,Ol){const c=d("router-link"),h=d("VPCard"),r=d("FontIcon"),i=d("Tabs"),p=d("RouteLink"),m=d("TagLinks");return _(),v("div",null,[s("h1",x,[s("a",y,[s("span",null,g(u.$frontmatter.title)+" 관련",1)])]),s("nav",A,[s("ul",null,[s("li",null,[l(c,{to:"#syntax-and-variable-assignment"},{default:n(()=>[e("Syntax and variable assignment")]),_:1})]),s("li",null,[l(c,{to:"#string-anchors"},{default:n(()=>[e("String Anchors")]),_:1})]),s("li",null,[l(c,{to:"#word-anchors"},{default:n(()=>[e("Word Anchors")]),_:1})]),s("li",null,[l(c,{to:"#opposite-word-anchor"},{default:n(()=>[e("Opposite Word Anchor")]),_:1})]),s("li",null,[l(c,{to:"#combining-conditions"},{default:n(()=>[e("Combining conditions")]),_:1})]),s("li",null,[l(c,{to:"#alternation"},{default:n(()=>[e("Alternation")]),_:1})]),s("li",null,[l(c,{to:"#alternation-precedence"},{default:n(()=>[e("Alternation precedence")]),_:1})]),s("li",null,[l(c,{to:"#grouping"},{default:n(()=>[e("Grouping")]),_:1})]),s("li",null,[l(c,{to:"#matching-the-metacharacters"},{default:n(()=>[e("Matching the metacharacters")]),_:1})]),s("li",null,[l(c,{to:"#using-string-literal-as-a-regexp"},{default:n(()=>[e("Using string literal as a regexp")]),_:1})]),s("li",null,[l(c,{to:"#the-dot-meta-character"},{default:n(()=>[e("The dot meta character")]),_:1})]),s("li",null,[l(c,{to:"#quantifiers"},{default:n(()=>[e("Quantifiers")]),_:1})]),s("li",null,[l(c,{to:"#conditional-and"},{default:n(()=>[e("Conditional AND")]),_:1})]),s("li",null,[l(c,{to:"#longest-match-wins"},{default:n(()=>[e("Longest match wins")]),_:1})]),s("li",null,[l(c,{to:"#character-classes"},{default:n(()=>[e("Character classes")]),_:1})]),s("li",null,[l(c,{to:"#character-class-metacharacters"},{default:n(()=>[e("Character class metacharacters")]),_:1})]),s("li",null,[l(c,{to:"#named-character-sets"},{default:n(()=>[e("Named character sets")]),_:1})]),s("li",null,[l(c,{to:"#matching-character-class-metacharacters-literally"},{default:n(()=>[e("Matching character class metacharacters literally")]),_:1})]),s("li",null,[l(c,{to:"#escape-sequences"},{default:n(()=>[e("Escape sequences")]),_:1})]),s("li",null,[l(c,{to:"#replace-specific-occurrence"},{default:n(()=>[e("Replace specific occurrence")]),_:1})]),s("li",null,[l(c,{to:"#backreferences"},{default:n(()=>[e("Backreferences")]),_:1})]),s("li",null,[l(c,{to:"#case-insensitive-matching"},{default:n(()=>[e("Case insensitive matching")]),_:1})]),s("li",null,[l(c,{to:"#dynamic-regexp"},{default:n(()=>[e("Dynamic regexp")]),_:1})]),s("li",null,[l(c,{to:"#summary"},{default:n(()=>[e("Summary")]),_:1})]),s("li",null,[l(c,{to:"#exercises"},{default:n(()=>[e("Exercises")]),_:1}),s("ul",null,[s("li",null,[l(c,{to:"#exercise-1"},{default:n(()=>[e("Exercise 1")]),_:1})]),s("li",null,[l(c,{to:"#exercise-2"},{default:n(()=>[e("Exercise 2")]),_:1})]),s("li",null,[l(c,{to:"#exercise-3"},{default:n(()=>[e("Exercise 3")]),_:1})]),s("li",null,[l(c,{to:"#exercise-4"},{default:n(()=>[e("Exercise 4")]),_:1})]),s("li",null,[l(c,{to:"#exercise-5"},{default:n(()=>[e("Exercise 5")]),_:1})]),s("li",null,[l(c,{to:"#exercise-6"},{default:n(()=>[e("Exercise 6")]),_:1})]),s("li",null,[l(c,{to:"#exercise-7"},{default:n(()=>[e("Exercise 7")]),_:1})]),s("li",null,[l(c,{to:"#exercise-8"},{default:n(()=>[e("Exercise 8")]),_:1})]),s("li",null,[l(c,{to:"#exercise-9"},{default:n(()=>[e("Exercise 9")]),_:1})]),s("li",null,[l(c,{to:"#exercise-10"},{default:n(()=>[e("Exercise 10")]),_:1})]),s("li",null,[l(c,{to:"#exercise-11"},{default:n(()=>[e("Exercise 11")]),_:1})]),s("li",null,[l(c,{to:"#exercise-12"},{default:n(()=>[e("Exercise 12")]),_:1})]),s("li",null,[l(c,{to:"#exercise-13"},{default:n(()=>[e("Exercise 13")]),_:1})]),s("li",null,[l(c,{to:"#exercise-14"},{default:n(()=>[e("Exercise 14")]),_:1})]),s("li",null,[l(c,{to:"#exercise-15"},{default:n(()=>[e("Exercise 15")]),_:1})]),s("li",null,[l(c,{to:"#exercise-16"},{default:n(()=>[e("Exercise 16")]),_:1})]),s("li",null,[l(c,{to:"#exercise-17"},{default:n(()=>[e("Exercise 17")]),_:1})]),s("li",null,[l(c,{to:"#exercise-18"},{default:n(()=>[e("Exercise 18")]),_:1})]),s("li",null,[l(c,{to:"#exercise-19"},{default:n(()=>[e("Exercise 19")]),_:1})]),s("li",null,[l(c,{to:"#exercise-20"},{default:n(()=>[e("Exercise 20")]),_:1})]),s("li",null,[l(c,{to:"#exercise-21"},{default:n(()=>[e("Exercise 21")]),_:1})]),s("li",null,[l(c,{to:"#exercise-22"},{default:n(()=>[e("Exercise 22")]),_:1})]),s("li",null,[l(c,{to:"#exercise-23"},{default:n(()=>[e("Exercise 23")]),_:1})]),s("li",null,[l(c,{to:"#exercise-24"},{default:n(()=>[e("Exercise 24")]),_:1})]),s("li",null,[l(c,{to:"#exercise-25"},{default:n(()=>[e("Exercise 25")]),_:1})]),s("li",null,[l(c,{to:"#exercise-26"},{default:n(()=>[e("Exercise 26")]),_:1})])])])])]),q,l(h,k(f({title:"3. Regular Expressions",desc:"CLI Text Processing with GNU awk",link:"https://learnbyexample.github.io/learn_gnuawk/regular-expressions.html",logo:"https://learnbyexample.github.io/favicon.svg",background:"rgba(22,25,35,0.2)"})),null,16),C,s("div",j,[E,s("p",null,[e("The "),s("a",X,[l(r,{icon:"iconfont icon-github"}),e(" example_files")]),e(" directory has all the files used in the examples.")])]),T,l(i,{id:"77",data:[{id:"lines starting with 'sp'"},{id:"lines ending with 'ar'"}],active:0},{title0:n(({value:a,isActive:t})=>[e("lines starting with 'sp'")]),title1:n(({value:a,isActive:t})=>[e("lines ending with 'ar'")]),tab0:n(({value:a,isActive:t})=>[$]),tab1:n(({value:a,isActive:t})=>[I]),_:1}),S,l(i,{id:"92",data:[{id:"add '* ' at the start of every input line"},{id:"append '.' only if a line doesn't contain space characters"}],active:0},{title0:n(({value:a,isActive:t})=>[e("add '* ' at the start of every input line")]),title1:n(({value:a,isActive:t})=>[e("append '.' only if a line doesn't contain space characters")]),tab0:n(({value:a,isActive:t})=>[N]),tab1:n(({value:a,isActive:t})=>[Q]),_:1}),B,l(i,{id:"116",data:[{id:"words starting with 'par'"},{id:"words ending with 'par'"},{id:"replace only whole word 'par'"}],active:0},{title0:n(({value:a,isActive:t})=>[e("words starting with 'par'")]),title1:n(({value:a,isActive:t})=>[e("words ending with 'par'")]),title2:n(({value:a,isActive:t})=>[e("replace only whole word 'par'")]),tab0:n(({value:a,isActive:t})=>[F]),tab1:n(({value:a,isActive:t})=>[R]),tab2:n(({value:a,isActive:t})=>[z]),_:1}),D,l(i,{id:"139",data:[{id:"match 'par' if it is surrounded by word characters"},{id:"match 'par' but not at the start of a word"},{id:"match 'par' but not at the end of a word"}],active:0},{title0:n(({value:a,isActive:t})=>[e("match 'par' if it is surrounded by word characters")]),title1:n(({value:a,isActive:t})=>[e("match 'par' but not at the start of a word")]),title2:n(({value:a,isActive:t})=>[e("match 'par' but not at the end of a word")]),tab0:n(({value:a,isActive:t})=>[W]),tab1:n(({value:a,isActive:t})=>[H]),tab2:n(({value:a,isActive:t})=>[P]),_:1}),G,l(i,{id:"166",data:[{id:"lines starting with 'b' and not containing 'at'"},{id:"first field contains 'low' or, the last field value is less than 0"}],active:0},{title0:n(({value:a,isActive:t})=>[e("lines starting with 'b' and not containing 'at'")]),title1:n(({value:a,isActive:t})=>[e("first field contains 'low' or, the last field value is less than 0")]),tab0:n(({value:a,isActive:t})=>[O]),tab1:n(({value:a,isActive:t})=>[U]),_:1}),L,l(i,{id:"184",data:[{id:"match whole word 'par' or string ending with 's'"},{id:"replace 'cat' or 'dog' or 'fox' with '--'"}],active:0},{title0:n(({value:a,isActive:t})=>[e("match whole word 'par' or string ending with 's'")]),title1:n(({value:a,isActive:t})=>[e("replace 'cat' or 'dog' or 'fox' with '--'")]),tab0:n(({value:a,isActive:t})=>[M,Z]),tab1:n(({value:a,isActive:t})=>[V,Y]),_:1}),K,l(i,{id:"224",data:[{id:"without grouping"},{id:"with grouping"}],active:0},{title0:n(({value:a,isActive:t})=>[e("without grouping")]),title1:n(({value:a,isActive:t})=>[e("with grouping")]),tab0:n(({value:a,isActive:t})=>[J]),tab1:n(({value:a,isActive:t})=>[ss]),_:1}),l(i,{id:"232",data:[{id:"without grouping"},{id:"taking out common anchors"},{id:"taking out common characters as well"}],active:0},{title0:n(({value:a,isActive:t})=>[e("without grouping")]),title1:n(({value:a,isActive:t})=>[e("taking out common anchors")]),title2:n(({value:a,isActive:t})=>[e("taking out common characters as well")]),tab0:n(({value:a,isActive:t})=>[es]),tab1:n(({value:a,isActive:t})=>[ns]),tab2:n(({value:a,isActive:t})=>[as,ts]),_:1}),ls,l(i,{id:"299",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"},{id:"Case 4"},{id:"Case 5"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Case 1")]),title1:n(({value:a,isActive:t})=>[e("Case 2")]),title2:n(({value:a,isActive:t})=>[e("Case 3")]),title3:n(({value:a,isActive:t})=>[e("Case 4")]),title4:n(({value:a,isActive:t})=>[e("Case 5")]),tab0:n(({value:a,isActive:t})=>[is,cs]),tab1:n(({value:a,isActive:t})=>[os,rs]),tab2:n(({value:a,isActive:t})=>[ds,ps]),tab3:n(({value:a,isActive:t})=>[us,hs]),tab4:n(({value:a,isActive:t})=>[ms,bs]),_:1}),vs,l(i,{id:"344",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Case 1")]),title1:n(({value:a,isActive:t})=>[e("Case 2")]),tab0:n(({value:a,isActive:t})=>[gs,ks]),tab1:n(({value:a,isActive:t})=>[fs,_s]),_:1}),ws,l(i,{id:"365",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Case 1")]),title1:n(({value:a,isActive:t})=>[e("Case 2")]),tab0:n(({value:a,isActive:t})=>[xs,ys]),tab1:n(({value:a,isActive:t})=>[As,qs]),_:1}),Cs,l(i,{id:"473",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"},{id:"Case 4"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Case 1")]),title1:n(({value:a,isActive:t})=>[e("Case 2")]),title2:n(({value:a,isActive:t})=>[e("Case 3")]),title3:n(({value:a,isActive:t})=>[e("Case 4")]),tab0:n(({value:a,isActive:t})=>[js,Es]),tab1:n(({value:a,isActive:t})=>[Xs,Ts]),tab2:n(({value:a,isActive:t})=>[$s,Is]),tab3:n(({value:a,isActive:t})=>[Ss,Ns]),_:1}),Qs,l(i,{id:"502",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"},{id:"Case 4"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Case 1")]),title1:n(({value:a,isActive:t})=>[e("Case 2")]),title2:n(({value:a,isActive:t})=>[e("Case 3")]),title3:n(({value:a,isActive:t})=>[e("Case 4")]),tab0:n(({value:a,isActive:t})=>[Bs,Fs]),tab1:n(({value:a,isActive:t})=>[Rs,zs]),tab2:n(({value:a,isActive:t})=>[Ds,Ws]),tab3:n(({value:a,isActive:t})=>[Hs,Ps]),_:1}),Gs,Os,Us,l(i,{id:"537",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"},{id:"Case 4"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Case 1")]),title1:n(({value:a,isActive:t})=>[e("Case 2")]),title2:n(({value:a,isActive:t})=>[e("Case 3")]),title3:n(({value:a,isActive:t})=>[e("Case 4")]),tab0:n(({value:a,isActive:t})=>[Ls,Ms]),tab1:n(({value:a,isActive:t})=>[Zs,Vs]),tab2:n(({value:a,isActive:t})=>[Ys,Ks]),tab3:n(({value:a,isActive:t})=>[s("p",null,[e("lines made up of letters 'o' and 'n', line length at least 2 "),l(r,{icon:"fas fa-file-lines"}),Js,e(" contains dictionary words, one word per line")]),se]),_:1}),ee,l(i,{id:"579",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Case 1")]),title1:n(({value:a,isActive:t})=>[e("Case 2")]),title2:n(({value:a,isActive:t})=>[e("Case 3")]),tab0:n(({value:a,isActive:t})=>[ne,ae]),tab1:n(({value:a,isActive:t})=>[te,le]),tab2:n(({value:a,isActive:t})=>[ie,ce]),_:1}),oe,l(i,{id:"608",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Case 1")]),title1:n(({value:a,isActive:t})=>[e("Case 2")]),tab0:n(({value:a,isActive:t})=>[re,de]),tab1:n(({value:a,isActive:t})=>[pe,ue]),_:1}),he,l(i,{id:"629",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"},{id:"Case 4"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Case 1")]),title1:n(({value:a,isActive:t})=>[e("Case 2")]),title2:n(({value:a,isActive:t})=>[e("Case 3")]),title3:n(({value:a,isActive:t})=>[e("Case 4")]),tab0:n(({value:a,isActive:t})=>[me,be]),tab1:n(({value:a,isActive:t})=>[ve,ge]),tab2:n(({value:a,isActive:t})=>[ke,fe]),tab3:n(({value:a,isActive:t})=>[_e,we,xe]),_:1}),ye,l(i,{id:"688",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Case 1")]),title1:n(({value:a,isActive:t})=>[e("Case 2")]),title2:n(({value:a,isActive:t})=>[e("Case 3")]),tab0:n(({value:a,isActive:t})=>[Ae,qe]),tab1:n(({value:a,isActive:t})=>[Ce,je]),tab2:n(({value:a,isActive:t})=>[Ee,Xe]),_:1}),s("div",Te,[$e,Ie,l(i,{id:"712",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Case 1")]),title1:n(({value:a,isActive:t})=>[e("Case 2")]),tab0:n(({value:a,isActive:t})=>[Se,Ne]),tab1:n(({value:a,isActive:t})=>[Qe,Be]),_:1})]),Fe,l(i,{id:"848",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"},{id:"Case 4"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Case 1")]),title1:n(({value:a,isActive:t})=>[e("Case 2")]),title2:n(({value:a,isActive:t})=>[e("Case 3")]),title3:n(({value:a,isActive:t})=>[e("Case 4")]),tab0:n(({value:a,isActive:t})=>[Re]),tab1:n(({value:a,isActive:t})=>[ze]),tab2:n(({value:a,isActive:t})=>[De]),tab3:n(({value:a,isActive:t})=>[We,He]),_:1}),Pe,l(i,{id:"875",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Case 1")]),title1:n(({value:a,isActive:t})=>[e("Case 2")]),tab0:n(({value:a,isActive:t})=>[Ge]),tab1:n(({value:a,isActive:t})=>[Oe]),_:1}),Ue,l(i,{id:"886",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Case 1")]),title1:n(({value:a,isActive:t})=>[e("Case 2")]),tab0:n(({value:a,isActive:t})=>[Le,Me]),tab1:n(({value:a,isActive:t})=>[Ze,Ve]),_:1}),Ye,l(i,{id:"903",data:[{id:"Case 1"},{id:"Csee 2"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Case 1")]),title1:n(({value:a,isActive:t})=>[e("Csee 2")]),tab0:n(({value:a,isActive:t})=>[Ke]),tab1:n(({value:a,isActive:t})=>[Je]),_:1}),sn,l(i,{id:"928",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Case 1")]),title1:n(({value:a,isActive:t})=>[e("Case 2")]),title2:n(({value:a,isActive:t})=>[e("Case 3")]),tab0:n(({value:a,isActive:t})=>[en,nn]),tab1:n(({value:a,isActive:t})=>[an,tn]),tab2:n(({value:a,isActive:t})=>[ln,cn,on]),_:1}),rn,l(i,{id:"956",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Case 1")]),title1:n(({value:a,isActive:t})=>[e("Case 2")]),title2:n(({value:a,isActive:t})=>[e("Case 3")]),tab0:n(({value:a,isActive:t})=>[dn,pn]),tab1:n(({value:a,isActive:t})=>[un,hn,mn]),tab2:n(({value:a,isActive:t})=>[bn,vn]),_:1}),gn,l(i,{id:"996",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Case 1")]),title1:n(({value:a,isActive:t})=>[e("Case 2")]),tab0:n(({value:a,isActive:t})=>[kn,fn,_n]),tab1:n(({value:a,isActive:t})=>[wn,xn,yn]),_:1}),An,l(i,{id:"1055",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"},{id:"Case 4"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Case 1")]),title1:n(({value:a,isActive:t})=>[e("Case 2")]),title2:n(({value:a,isActive:t})=>[e("Case 3")]),title3:n(({value:a,isActive:t})=>[e("Case 4")]),tab0:n(({value:a,isActive:t})=>[qn,Cn]),tab1:n(({value:a,isActive:t})=>[jn,En]),tab2:n(({value:a,isActive:t})=>[Xn,Tn]),tab3:n(({value:a,isActive:t})=>[$n,In]),_:1}),Sn,l(i,{id:"1105",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Case 1")]),title1:n(({value:a,isActive:t})=>[e("Case 2")]),tab0:n(({value:a,isActive:t})=>[Nn,Qn]),tab1:n(({value:a,isActive:t})=>[Bn,Fn]),_:1}),Rn,l(i,{id:"1122",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Case 1")]),title1:n(({value:a,isActive:t})=>[e("Case 2")]),title2:n(({value:a,isActive:t})=>[e("Case 3")]),tab0:n(({value:a,isActive:t})=>[zn]),tab1:n(({value:a,isActive:t})=>[Dn]),tab2:n(({value:a,isActive:t})=>[Wn]),_:1}),Hn,l(i,{id:"1143",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Case 1")]),title1:n(({value:a,isActive:t})=>[e("Case 2")]),tab0:n(({value:a,isActive:t})=>[Pn]),tab1:n(({value:a,isActive:t})=>[Gn,On]),_:1}),Un,l(i,{id:"1165",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Case 1")]),title1:n(({value:a,isActive:t})=>[e("Case 2")]),title2:n(({value:a,isActive:t})=>[e("Case 3")]),tab0:n(({value:a,isActive:t})=>[Ln]),tab1:n(({value:a,isActive:t})=>[Mn]),tab2:n(({value:a,isActive:t})=>[Zn,Vn]),_:1}),s("div",Yn,[Kn,s("p",null,[e("See "),l(p,{to:"/cli/text-processing-w-gnu-awk/07-using-shell-variables.html#using-shell-variables"},{default:n(()=>[e("Using shell variables")]),_:1}),e(" chapter for a way to avoid having to escape backslashes.")])]),Jn,l(i,{id:"1187",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Case 1")]),title1:n(({value:a,isActive:t})=>[e("Case 2")]),title2:n(({value:a,isActive:t})=>[e("Case 3")]),tab0:n(({value:a,isActive:t})=>[sa]),tab1:n(({value:a,isActive:t})=>[ea]),tab2:n(({value:a,isActive:t})=>[na,aa]),_:1}),s("div",ta,[la,ia,s("p",null,[e("If you need to just match literally instead of substitution, you can use the index function. See the "),l(p,{to:"/cli/text-processing-w-gnu-awk/09-built-in-functions.html#index"},{default:n(()=>[e("index")]),_:1}),e(" section for details.")])]),ca,oa,ra,da,pa,s("div",ua,[ha,s("p",null,[e("The "),s("a",ma,[l(r,{icon:"iconfont icon-github"}),e(" exercises")]),e(" directory has all the files used in this section.")])]),ba,s("p",null,[e("For the input file "),l(r,{icon:"fas fa-file-lines"}),va,e(", display all lines that start with "),ga,e(" or end with "),ka,e(".")]),l(i,{id:"1231",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Question")]),title1:n(({value:a,isActive:t})=>[e("Answer")]),tab0:n(({value:a,isActive:t})=>[fa]),tab1:n(({value:a,isActive:t})=>[_a]),_:1}),wa,s("p",null,[e("For the input file "),l(r,{icon:"fas fa-file-lines"}),xa,e(", replace all occurrences of 42 with "),ya,e(" unless it is at the edge of a word. Display only the modified lines.")]),l(i,{id:"1245",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Question")]),title1:n(({value:a,isActive:t})=>[e("Answer")]),tab0:n(({value:a,isActive:t})=>[Aa]),tab1:n(({value:a,isActive:t})=>[qa]),_:1}),Ca,s("p",null,[e("For the input file "),l(r,{icon:"fas fa-file-lines"}),ja,e(", add "),Ea,e(" around words starting with "),Xa,e(" and containing "),Ta,e(" and "),$a,e(" in any order. Display only the modified lines.")]),l(i,{id:"1259",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Question")]),title1:n(({value:a,isActive:t})=>[e("Answer")]),tab0:n(({value:a,isActive:t})=>[Ia]),tab1:n(({value:a,isActive:t})=>[Sa]),_:1}),Na,s("p",null,[e("For the input file "),l(r,{icon:"fas fa-file-lines"}),Qa,e(", replace the space character that occurs after a word ending with "),Ba,e(" or "),Fa,e(" with a newline character, only if the line also contains an uppercase letter. Display only the modified lines. For example, "),Ra,e(" should get converted to "),za,e(" and "),Da,e(" separated by a newline. But "),Wa,e(),Ha,e(),Pa,e(" shouldn't be matched as there's no uppercase letter in this line.")]),l(i,{id:"1273",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Question")]),title1:n(({value:a,isActive:t})=>[e("Answer")]),tab0:n(({value:a,isActive:t})=>[Ga]),tab1:n(({value:a,isActive:t})=>[Oa]),_:1}),Ua,s("p",null,[e("For the input file "),l(r,{icon:"fas fa-file-lines"}),La,e(", replace all occurrences of "),Ma,e(" with "),Za,e(". Display only the modified lines.")]),l(i,{id:"1287",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Question")]),title1:n(({value:a,isActive:t})=>[e("Answer")]),tab0:n(({value:a,isActive:t})=>[Va]),tab1:n(({value:a,isActive:t})=>[Ya]),_:1}),Ka,Ja,l(i,{id:"1301",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Question")]),title1:n(({value:a,isActive:t})=>[e("Answer")]),tab0:n(({value:a,isActive:t})=>[st]),tab1:n(({value:a,isActive:t})=>[et]),_:1}),nt,s("p",null,[e("For the input file "),l(r,{icon:"fas fa-file-lines"}),at,e(", display all lines starting with "),tt,e(" and ending immediately with "),lt,e(" or "),it,e(" or "),ct,e(" or no further characters. For example, "),ot,e(" shouldn't be matched even though it starts with "),rt,e(".")]),l(i,{id:"1315",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Question")]),title1:n(({value:a,isActive:t})=>[e("Answer")]),tab0:n(({value:a,isActive:t})=>[dt]),tab1:n(({value:a,isActive:t})=>[pt]),_:1}),ut,s("p",null,[e("For the input file "),l(r,{icon:"fas fa-file-lines"}),ht,e(", replace "),mt,e(" or "),bt,e(" with "),vt,e(". Display only the modified lines.")]),l(i,{id:"1329",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Question")]),title1:n(({value:a,isActive:t})=>[e("Answer")]),tab0:n(({value:a,isActive:t})=>[gt]),tab1:n(({value:a,isActive:t})=>[kt]),_:1}),ft,s("p",null,[e("For the input file "),l(r,{icon:"fas fa-file-lines"}),_t,e(", construct two different regexps to get the outputs as shown below. Display only the modified lines.")]),l(i,{id:"1398",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Question")]),title1:n(({value:a,isActive:t})=>[e("Answer")]),tab0:n(({value:a,isActive:t})=>[wt]),tab1:n(({value:a,isActive:t})=>[xt]),_:1}),yt,s("p",null,[e("For the input file "),l(r,{icon:"fas fa-file-lines"}),At,e(", convert markdown anchors to corresponding hyperlinks as shown below.")]),qt,l(i,{id:"1413",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Question")]),title1:n(({value:a,isActive:t})=>[e("Answer")]),tab0:n(({value:a,isActive:t})=>[Ct]),tab1:n(({value:a,isActive:t})=>[jt]),_:1}),Et,s("p",null,[e("Display lines from "),l(r,{icon:"fas fa-file-lines"}),Xt,e(" that satisfy both of these conditions:")]),Tt,l(i,{id:"1439",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Question")]),title1:n(({value:a,isActive:t})=>[e("Answer")]),tab0:n(({value:a,isActive:t})=>[$t]),tab1:n(({value:a,isActive:t})=>[It]),_:1}),St,Nt,l(i,{id:"1453",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Question")]),title1:n(({value:a,isActive:t})=>[e("Answer")]),tab0:n(({value:a,isActive:t})=>[Qt]),tab1:n(({value:a,isActive:t})=>[Bt]),_:1}),Ft,s("p",null,[e("For the input file "),l(r,{icon:"fas fa-file-lines"}),Rt,e(", filter lines containing three or more occurrences of "),zt,e(" and replace the last but second "),Dt,e(" with "),Wt,e(".")]),l(i,{id:"1467",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Question")]),title1:n(({value:a,isActive:t})=>[e("Answer")]),tab0:n(({value:a,isActive:t})=>[Ht]),tab1:n(({value:a,isActive:t})=>[Pt]),_:1}),Gt,Ot,l(i,{id:"1481",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Question")]),title1:n(({value:a,isActive:t})=>[e("Answer")]),tab0:n(({value:a,isActive:t})=>[Ut]),tab1:n(({value:a,isActive:t})=>[Lt]),_:1}),Mt,s("p",null,[e("For the input file "),l(r,{icon:"fas fa-file-lines"}),Zt,e(", display lines containing car but not as a whole word. For example, "),Vt,e(" and "),Yt,e(" should match but not "),Kt,e(),Jt,e(),sl,e(".")]),l(i,{id:"1495",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Question")]),title1:n(({value:a,isActive:t})=>[e("Answer")]),tab0:n(({value:a,isActive:t})=>[el]),tab1:n(({value:a,isActive:t})=>[nl]),_:1}),al,s("p",null,[e("For the input file "),l(r,{icon:"fas fa-file-lines"}),tl,e(", display lines starting with "),ll,e(" or "),il,e(" or "),cl,e(" or "),ol,e(" or "),rl,e(".")]),l(i,{id:"1521",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Question")]),title1:n(({value:a,isActive:t})=>[e("Answer")]),tab0:n(({value:a,isActive:t})=>[dl]),tab1:n(({value:a,isActive:t})=>[pl]),_:1}),ul,hl,l(i,{id:"1535",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Question")]),title1:n(({value:a,isActive:t})=>[e("Answer")]),tab0:n(({value:a,isActive:t})=>[ml]),tab1:n(({value:a,isActive:t})=>[bl]),_:1}),vl,gl,l(i,{id:"1549",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Question")]),title1:n(({value:a,isActive:t})=>[e("Answer")]),tab0:n(({value:a,isActive:t})=>[kl]),tab1:n(({value:a,isActive:t})=>[fl]),_:1}),_l,wl,l(i,{id:"1563",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Question")]),title1:n(({value:a,isActive:t})=>[e("Answer")]),tab0:n(({value:a,isActive:t})=>[xl]),tab1:n(({value:a,isActive:t})=>[yl]),_:1}),Al,ql,l(i,{id:"1577",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Question")]),title1:n(({value:a,isActive:t})=>[e("Answer")]),tab0:n(({value:a,isActive:t})=>[Cl]),tab1:n(({value:a,isActive:t})=>[jl]),_:1}),El,s("p",null,[e("The "),l(r,{icon:"fas fa-file-lines"}),Xl,e(" file has fields separated by the "),Tl,e(" character. Delete "),$l,e(" and the last field if there is a digit character anywhere before the last field.")]),Il,l(i,{id:"1592",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Question")]),title1:n(({value:a,isActive:t})=>[e("Answer")]),tab0:n(({value:a,isActive:t})=>[Sl]),tab1:n(({value:a,isActive:t})=>[Nl,Ql]),_:1}),Bl,s("p",null,[e("For the input file "),l(r,{icon:"fas fa-file-lines"}),Fl,e(", surround all hexadecimal sequences with a minimum of four characters with "),Rl,e(". Match "),zl,e(" as an optional prefix, but shouldn't be counted for determining the length. Match the characters case insensitively, and the sequences shouldn't be surrounded by other word characters. Display only the modified lines.")]),l(i,{id:"1623",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:t})=>[e("Question")]),title1:n(({value:a,isActive:t})=>[e("Answer")]),tab0:n(({value:a,isActive:t})=>[Dl]),tab1:n(({value:a,isActive:t})=>[Wl,Hl]),_:1}),Pl,l(m)])}const Ml=b(w,[["render",Gl],["__file","03-regular-expressions.html.vue"]]),Zl=JSON.parse('{"path":"/cli/text-processing-w-gnu-awk/03-regular-expressions.html","title":"3. Regular Expressions","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"3. Regular Expressions","description":"Text Processing with GNU awk > 3. Regular Expressions","category":["CLI","Linux"],"tags":["crashcourse","cli","sh","shell","gnu","linux","awk"],"head":[[{"meta":null},{"property":"og:title","content":"Text Processing with GNU awk > 3. Regular Expressions"},{"property":"og:description","content":"3. Regular Expressions"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/cli/text-processing-w-gnu-awk/03-regular-expressions.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/cli/text-processing-w-gnu-awk/03-regular-expressions.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"3. Regular Expressions"}],["meta",{"property":"og:description","content":"Text Processing with GNU awk > 3. Regular Expressions"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-04-24T07:16:44.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"cli"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:tag","content":"shell"}],["meta",{"property":"article:tag","content":"gnu"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:tag","content":"awk"}],["meta",{"property":"article:modified_time","content":"2024-04-24T07:16:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3. Regular Expressions\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-24T07:16:44.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Syntax and variable assignment","slug":"syntax-and-variable-assignment","link":"#syntax-and-variable-assignment","children":[]},{"level":2,"title":"String Anchors","slug":"string-anchors","link":"#string-anchors","children":[]},{"level":2,"title":"Word Anchors","slug":"word-anchors","link":"#word-anchors","children":[]},{"level":2,"title":"Opposite Word Anchor","slug":"opposite-word-anchor","link":"#opposite-word-anchor","children":[]},{"level":2,"title":"Combining conditions","slug":"combining-conditions","link":"#combining-conditions","children":[]},{"level":2,"title":"Alternation","slug":"alternation","link":"#alternation","children":[]},{"level":2,"title":"Alternation precedence","slug":"alternation-precedence","link":"#alternation-precedence","children":[]},{"level":2,"title":"Grouping","slug":"grouping","link":"#grouping","children":[]},{"level":2,"title":"Matching the metacharacters","slug":"matching-the-metacharacters","link":"#matching-the-metacharacters","children":[]},{"level":2,"title":"Using string literal as a regexp","slug":"using-string-literal-as-a-regexp","link":"#using-string-literal-as-a-regexp","children":[]},{"level":2,"title":"The dot meta character","slug":"the-dot-meta-character","link":"#the-dot-meta-character","children":[]},{"level":2,"title":"Quantifiers","slug":"quantifiers","link":"#quantifiers","children":[]},{"level":2,"title":"Conditional AND","slug":"conditional-and","link":"#conditional-and","children":[]},{"level":2,"title":"Longest match wins","slug":"longest-match-wins","link":"#longest-match-wins","children":[]},{"level":2,"title":"Character classes","slug":"character-classes","link":"#character-classes","children":[]},{"level":2,"title":"Character class metacharacters","slug":"character-class-metacharacters","link":"#character-class-metacharacters","children":[]},{"level":2,"title":"Named character sets","slug":"named-character-sets","link":"#named-character-sets","children":[]},{"level":2,"title":"Matching character class metacharacters literally","slug":"matching-character-class-metacharacters-literally","link":"#matching-character-class-metacharacters-literally","children":[]},{"level":2,"title":"Escape sequences","slug":"escape-sequences","link":"#escape-sequences","children":[]},{"level":2,"title":"Replace specific occurrence","slug":"replace-specific-occurrence","link":"#replace-specific-occurrence","children":[]},{"level":2,"title":"Backreferences","slug":"backreferences","link":"#backreferences","children":[]},{"level":2,"title":"Case insensitive matching","slug":"case-insensitive-matching","link":"#case-insensitive-matching","children":[]},{"level":2,"title":"Dynamic regexp","slug":"dynamic-regexp","link":"#dynamic-regexp","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]},{"level":2,"title":"Exercises","slug":"exercises","link":"#exercises","children":[{"level":3,"title":"Exercise 1","slug":"exercise-1","link":"#exercise-1","children":[]},{"level":3,"title":"Exercise 2","slug":"exercise-2","link":"#exercise-2","children":[]},{"level":3,"title":"Exercise 3","slug":"exercise-3","link":"#exercise-3","children":[]},{"level":3,"title":"Exercise 4","slug":"exercise-4","link":"#exercise-4","children":[]},{"level":3,"title":"Exercise 5","slug":"exercise-5","link":"#exercise-5","children":[]},{"level":3,"title":"Exercise 6","slug":"exercise-6","link":"#exercise-6","children":[]},{"level":3,"title":"Exercise 7","slug":"exercise-7","link":"#exercise-7","children":[]},{"level":3,"title":"Exercise 8","slug":"exercise-8","link":"#exercise-8","children":[]},{"level":3,"title":"Exercise 9","slug":"exercise-9","link":"#exercise-9","children":[]},{"level":3,"title":"Exercise 10","slug":"exercise-10","link":"#exercise-10","children":[]},{"level":3,"title":"Exercise 11","slug":"exercise-11","link":"#exercise-11","children":[]},{"level":3,"title":"Exercise 12","slug":"exercise-12","link":"#exercise-12","children":[]},{"level":3,"title":"Exercise 13","slug":"exercise-13","link":"#exercise-13","children":[]},{"level":3,"title":"Exercise 14","slug":"exercise-14","link":"#exercise-14","children":[]},{"level":3,"title":"Exercise 15","slug":"exercise-15","link":"#exercise-15","children":[]},{"level":3,"title":"Exercise 16","slug":"exercise-16","link":"#exercise-16","children":[]},{"level":3,"title":"Exercise 17","slug":"exercise-17","link":"#exercise-17","children":[]},{"level":3,"title":"Exercise 18","slug":"exercise-18","link":"#exercise-18","children":[]},{"level":3,"title":"Exercise 19","slug":"exercise-19","link":"#exercise-19","children":[]},{"level":3,"title":"Exercise 20","slug":"exercise-20","link":"#exercise-20","children":[]},{"level":3,"title":"Exercise 21","slug":"exercise-21","link":"#exercise-21","children":[]},{"level":3,"title":"Exercise 22","slug":"exercise-22","link":"#exercise-22","children":[]},{"level":3,"title":"Exercise 23","slug":"exercise-23","link":"#exercise-23","children":[]},{"level":3,"title":"Exercise 24","slug":"exercise-24","link":"#exercise-24","children":[]},{"level":3,"title":"Exercise 25","slug":"exercise-25","link":"#exercise-25","children":[]},{"level":3,"title":"Exercise 26","slug":"exercise-26","link":"#exercise-26","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1713943004000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":7}]},"readingTime":{"minutes":29.68,"words":8905},"filePathRelative":"cli/text-processing-w-gnu-awk/03-regular-expressions.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{Ml as comp,Zl as data};
