import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as e,t as w,b as t,w as i,n as l,g as r,d as n,e as s,r as p,o as g}from"./app-U_bew1in.js";const f={},y={id:"frontmatter-title-관련",tabindex:"-1"},m={class:"header-anchor",href:"#frontmatter-title-관련"},b={class:"table-of-contents"},v=e("hr",null,null,-1),k=e("h2",{id:"first-steps-in-swift",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#first-steps-in-swift"},[e("span",null,"First steps in Swift")])],-1),_=e("p",null,"As Mark Twain once said, “the secret to getting ahead is getting started.” Well, you’re starting now, so we’re going to dive in and learn about variables, constants, and simple data types.",-1),S=e("p",null,[e("strong",null,"Today you have eight one-minute videos to watch."),n(" If you want to dive deeper into each topic there is optional further reading, but you don’t need to read that unless you want to. Regardless, once you’ve finished each topic there’s a short test to help make sure you’ve understood what was taught.")],-1),x=e("p",null,"I know, I know: the temptation is strong to continue on to watch more videos and take more tests beyond those linked below, but remember: don’t rush ahead! It’s much better to do one hour a day every day than do chunks with large gaps between.",-1),D=e("hr",null,null,-1),T=e("h3",{id:"_1-variables",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-variables"},[e("span",null,"1. Variables")])],-1),q={class:"hint-container details"},I=e("summary",null,"1. Variables",-1),j=s(`<p>When you launch Xcode it will ask you what you want to do, and I’d like you to choose “Get Started with a Playground” – this is a sandbox where you can type Swift code and see immediate results.</p><p>The default is a blank playground for iOS, which is fine, so click Next then Create to save it on your desktop.</p><p>In this video I want to introduce you to variables, which are places where you can store program data. They are called variables because they can vary – you can change their values freely.</p><p>Playgrounds start with a line of code that creates a variable for us:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Hello, playground&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That creates a new variable called <code>str</code>, giving it the value “Hello, playground”. On the right of the playground you can see “Hello, playground” in the output area – that’s Xcode showing us the value was set.</p><p>Because <code>str</code> is a variable we can change it:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">str <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Goodbye&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We don’t need <code>var</code> the second time because the variable has already been created – we’re just changing it.</p>`,9),A=s('<div class="hint-container info"><p class="hint-container-title">1. Variable - Additional</p><ul><li>Optional: <a href="https://www.hackingwithswift.com/quick-start/understanding-swift/why-does-swift-have-variables" target="_blank" rel="noopener noreferrer">Why does Swift have variables?</a></li><li>Test: <a href="https://www.hackingwithswift.com/review/variables" target="_blank" rel="noopener noreferrer">Variables</a></li></ul></div><h3 id="_2-strings-and-integers" tabindex="-1"><a class="header-anchor" href="#_2-strings-and-integers"><span>2. Strings and integers</span></a></h3>',2),V={class:"hint-container details"},B=e("summary",null,"2. Strings and integers",-1),C=s(`<p>Swift is what’s known as a type-safe language, which means that every variable must be of one specific type. The <code>str</code> variable that Xcode created for us holds a string of letters that spell “Hello, playground”, so Swift assigns it the type <code>String</code>.</p><p>On the other hand, if we want to store someone’s age we might make a variable like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">38</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That holds a whole number, so Swift assigns the type <code>Int</code> – short for “integer”.</p><p>If you have large numbers, Swift lets you use underscores as thousands separators – they don’t change the number, but they do make it easier to read. For example:</p><p>var population = 8_000_000 Strings and integers are different types, and they can’t be mixed. So, while it’s safe to change <code>str</code> to “Goodbye”, I can’t make it 38 because that’s an <code>Int</code> not a <code>String</code>.</p>`,6),O=s('<div class="hint-container info"><p class="hint-container-title">2. Strings and integers - Additional</p><ul><li>Optional: <a href="https://www.hackingwithswift.com/quick-start/understanding-swift/why-is-swift-a-type-safe-language" target="_blank" rel="noopener noreferrer">Why is Swift a type-safe language?</a></li><li>Test: <a href="https://www.hackingwithswift.com/review/strings-and-integers" target="_blank" rel="noopener noreferrer">Strings and integers</a></li></ul></div><h3 id="_3-multi-line-strings" tabindex="-1"><a class="header-anchor" href="#_3-multi-line-strings"><span>3. Multi-line strings</span></a></h3>',2),W={class:"hint-container details"},Y=e("summary",null,"3. Multi-line strings",-1),M=s(`<p>Standard Swift strings use double quotes, but you can’t include line breaks in there.</p><p>If you want multi-line strings you need slightly different syntax: start and end with three double quote marks, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;&quot;</span>
<span class="line">This goes</span>
<span class="line">over multiple</span>
<span class="line">lines</span>
<span class="line">&quot;&quot;&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Swift is very particular about how you write those quote marks: the opening and closing triple must be on their own line, but opening and closing line breaks won’t be included in your final string.</p><p>If you only want multi-line strings to format your code neatly, and you don’t want those line breaks to actually be in your string, end each line with a <code>\\</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;&quot;</span>
<span class="line">This goes </span><span class="token punctuation">\\</span><span class="token string"></span>
<span class="line">over multiple </span><span class="token punctuation">\\</span><span class="token string"></span>
<span class="line">lines</span>
<span class="line">&quot;&quot;&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),R=s('<div class="hint-container info"><p class="hint-container-title">3. Multi-line strings - Additional</p><ul><li>Optional: <a href="https://www.hackingwithswift.com/quick-start/understanding-swift/why-does-swift-need-multi-line-strings" target="_blank" rel="noopener noreferrer">Why does Swift need multi-line strings?</a></li><li>Test: <a href="https://www.hackingwithswift.com/review/multi-line-strings" target="_blank" rel="noopener noreferrer">Multi-line strings</a></li></ul></div><h3 id="_4-doubles-and-booleans" tabindex="-1"><a class="header-anchor" href="#_4-doubles-and-booleans"><span>4. Doubles and Booleans</span></a></h3>',2),F={class:"hint-container details"},P=e("summary",null,"4. Doubles and Booleans",-1),N=s(`<p>Two other basic types of data in Swift are doubles and booleans, and you’ll be using them a lot.</p><p>“Double” is short for “double-precision floating-point number”, and it’s a fancy way of saying it holds fractional values such as 38.1, or 3.141592654.</p><p>Whenever you create a variable with a fractional number, Swift automatically gives that variable the type <code>Double</code>. For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> pi <span class="token operator">=</span> <span class="token number">3.141</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Doubles are different from integers, and you can’t mix them by accident.</p><p>As for booleans, they are much simpler: they just hold either true or false, and Swift will automatically assign the boolean type to any variable assigned either true or false as its value.</p><p>For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> awesome <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,8),H=s('<div class="hint-container info"><p class="hint-container-title">4. Doubles and Booleans - Additional</p><ul><li>Optional: <a href="https://www.hackingwithswift.com/quick-start/understanding-swift/why-does-swift-need-both-doubles-and-integers" target="_blank" rel="noopener noreferrer">Why does Swift need both Doubles and Integers?</a></li><li>Test: <a href="https://www.hackingwithswift.com/review/doubles-and-booleans" target="_blank" rel="noopener noreferrer">Doubles and Booleans</a></li></ul></div><h3 id="_5-string-interpolation" tabindex="-1"><a class="header-anchor" href="#_5-string-interpolation"><span>5. String interpolation</span></a></h3>',2),X={class:"hint-container details"},Z=e("summary",null,"5. String interpolation",-1),G=s(`<p>You’ve seen how you can type values for strings directly into your code, but Swift also has a feature called string interpolation – the ability to place variables inside your strings to make them more useful.</p><p>You can place any type of variable inside your string – all you have to do is write a backslash, <code>\\,</code> followed by your variable name in parentheses. For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">85</span></span>
<span class="line"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Your score was </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">score</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see in the playground output, that sets the <code>str</code> variable to be “Your score was 85”.</p><p>You can do this as many times as you need, making strings out of strings if you want:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> results <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;The test results are here: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">str</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>As you’ll see later on, string interpolation isn’t just limited to placing variables – you can actually run code inside there.</p>`,7),z=s('<div class="hint-container info"><p class="hint-container-title">5. String interpolation - Additional</p><ul><li>Optional: <a href="https://www.hackingwithswift.com/quick-start/understanding-swift/why-does-swift-have-string-interpolation" target="_blank" rel="noopener noreferrer">Why does Swift have string interpolation?</a></li><li>Test: <a href="https://www.hackingwithswift.com/review/string-interpolation" target="_blank" rel="noopener noreferrer">String interpolation</a></li></ul></div><h3 id="_6-constants" tabindex="-1"><a class="header-anchor" href="#_6-constants"><span>6. Constants</span></a></h3>',2),K={class:"hint-container details"},E=e("summary",null,"6. Constants",-1),J=s(`<p>I already said that variables have that name because their values can change over time, and that is often useful. However, very often you want to set a value once and never change it, and so we have an alternative to the <code>var</code> keyword called <code>let</code>.</p><p>The <code>let</code> keyword creates constants, which are values that can be set once and never again. For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> taylor <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;swift&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If you try to change that, Xcode will refuse to run your code. It’s a form of safety: when you use constants you can no longer change something by accident.</p><p>When you write your own Swift code, you should always use <code>let</code> unless you specifically want to change a value. In fact, Xcode will warn you if you use <code>var</code> then don’t change the variable.</p>`,5),U=s('<div class="hint-container info"><p class="hint-container-title">6. Constants - Additional</p><ul><li>Optional: <a href="https://www.hackingwithswift.com/quick-start/understanding-swift/why-does-swift-have-constants-as-well-as-variables" target="_blank" rel="noopener noreferrer">Why does Swift have constants as well as variables?</a></li><li>Test: <a href="https://www.hackingwithswift.com/review/constants" target="_blank" rel="noopener noreferrer">Constants</a></li></ul></div><h3 id="_7-type-annotations" tabindex="-1"><a class="header-anchor" href="#_7-type-annotations"><span>7. Type annotations</span></a></h3>',2),$={class:"hint-container details"},L=e("summary",null,"7. Type annotations",-1),Q=s(`<p>Swift assigns each variable and constant a type based on what value it’s given when it’s created. So, when you write code like this Swift can see it holds a string:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Hello, playground&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That will make <code>str</code> a string, so you can’t try to assign it an integer or a boolean later on. This is called type inference: Swift is able to infer the type of something based on how you created it.</p><p>If you want you can be explicit about the type of your data rather than relying on Swift’s type inference, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> album<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Reputation&quot;</span></span></span>
<span class="line"><span class="token keyword">let</span> year<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">1989</span></span>
<span class="line"><span class="token keyword">let</span> height<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">1.78</span></span>
<span class="line"><span class="token keyword">let</span> taylorRocks<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice that booleans have the short type name <code>Bool</code>, in the same way that integers have the short type name <code>Int</code>.</p>`,6),ee=s('<div class="hint-container info"><p class="hint-container-title">7. Type annotations - Additional</p><ul><li>Optional: <a href="https://www.hackingwithswift.com/quick-start/understanding-swift/why-does-swift-have-type-annotations" target="_blank" rel="noopener noreferrer">Why does Swift have type annotations?</a></li><li>Test: <a href="https://www.hackingwithswift.com/review/type-annotations" target="_blank" rel="noopener noreferrer">Type annotations</a></li></ul></div><h3 id="_8-simple-types-summary" tabindex="-1"><a class="header-anchor" href="#_8-simple-types-summary"><span>8. Simple types: Summary</span></a></h3>',2),te={class:"hint-container details"},se=e("summary",null,"8. Simple types: Summary",-1),ne=e("p",null,"You’ve made it to the end of the first part of this series, so let’s summarize.",-1),ae=e("ol",null,[e("li",null,[n("You make variables using "),e("code",null,"var"),n(" and constants using "),e("code",null,"let"),n(". It’s preferable to use constants as often as possible.")]),e("li",null,"Strings start and end with double quotes, but if you want them to run across multiple lines you should use three sets of double quotes."),e("li",null,"Integers hold whole numbers, doubles hold fractional numbers, and booleans hold true or false."),e("li",null,"String interpolation allows you to create strings from other variables and constants, placing their values inside your string."),e("li",null,"Swift uses type inference to assign each variable or constant a type, but you can provide explicit types if you want.")],-1),ie=s('<div class="hint-container info"><p class="hint-container-title">8. Simple types: Summary - Additional</p><ul><li>Test: <a href="https://www.hackingwithswift.com/review/simple-types-summary" target="_blank" rel="noopener noreferrer">Simple types</a></li></ul></div><p>When you’re finished, don’t forget to tell other people about your progress. Yes, this is only day one, but the more motivation you get now the more you’ll be able to power through when things get tougher!</p><p>Reminder: I have a free iOS app that helps you practice Swift right on your iPhone and iPad. It contains the same lessons and tests as above, plus lots more bonus activities. And did I mention it was free? <a href="https://itunes.apple.com/app/id1440611372" target="_blank" rel="noopener noreferrer">Download it here</a>.</p><hr><h2 id="tips" tabindex="-1"><a class="header-anchor" href="#tips"><span>Tips</span></a></h2><p>You can download Xcode from the Mac App Store by <a href="https://apps.apple.com/gb/app/xcode/id497799835?mt=12" target="_blank" rel="noopener noreferrer">clicking here</a>. As you progress in these early days you’ll build up lots of code from each day. You can keep it in different playgrounds if you want, or you can delete it – it’s down to you.</p><hr>',7);function oe(d,le){const a=p("router-link"),o=p("VPCard"),c=p("VidStack");return g(),h("div",null,[e("h1",y,[e("a",m,[e("span",null,w(d.$frontmatter.title)+" 관련",1)])]),e("nav",b,[e("ul",null,[e("li",null,[t(a,{to:"#first-steps-in-swift"},{default:i(()=>[n("First steps in Swift")]),_:1}),e("ul",null,[e("li",null,[t(a,{to:"#_1-variables"},{default:i(()=>[n("1. Variables")]),_:1})]),e("li",null,[t(a,{to:"#_2-strings-and-integers"},{default:i(()=>[n("2. Strings and integers")]),_:1})]),e("li",null,[t(a,{to:"#_3-multi-line-strings"},{default:i(()=>[n("3. Multi-line strings")]),_:1})]),e("li",null,[t(a,{to:"#_4-doubles-and-booleans"},{default:i(()=>[n("4. Doubles and Booleans")]),_:1})]),e("li",null,[t(a,{to:"#_5-string-interpolation"},{default:i(()=>[n("5. String interpolation")]),_:1})]),e("li",null,[t(a,{to:"#_6-constants"},{default:i(()=>[n("6. Constants")]),_:1})]),e("li",null,[t(a,{to:"#_7-type-annotations"},{default:i(()=>[n("7. Type annotations")]),_:1})]),e("li",null,[t(a,{to:"#_8-simple-types-summary"},{default:i(()=>[n("8. Simple types: Summary")]),_:1})])])]),e("li",null,[t(a,{to:"#tips"},{default:i(()=>[n("Tips")]),_:1})])])]),v,t(o,l(r({title:"100 Days of Swift - Day 1",desc:"First steps in Swift",link:"https://www.hackingwithswift.com/100/1",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),k,_,S,x,D,T,e("details",q,[I,t(o,l(r({title:"100 Days of Swift - Day 1 - 1. Variables",desc:"1. Variables",link:"https://www.hackingwithswift.com/sixty/1/1/variables",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),t(c,{src:"youtube/kohIy64THOo"}),j]),A,e("details",V,[B,t(o,l(r({title:"100 Days of Swift - Day 1 - 2. Strings and integers",desc:"2. Strings and integers",link:"https://www.hackingwithswift.com/sixty/1/2/strings-and-integers",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),t(c,{src:"youtube/ZU3JDkjvn3w"}),C]),O,e("details",W,[Y,t(o,l(r({title:"100 Days of Swift - Day 1 - 3. Multi-line strings",desc:"3. Multi-line strings",link:"https://www.hackingwithswift.com/sixty/1/3/multi-line-strings",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),t(c,{src:"youtube/Ppl-8E1YgRU"}),M]),R,e("details",F,[P,t(o,l(r({title:"100 Days of Swift - Day 1 - 4. Doubles and Booleans",desc:"4. Doubles and Booleans",link:"https://www.hackingwithswift.com/sixty/1/4/doubles-and-booleans",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),t(c,{src:"youtube/ZpGDwOAWiXA"}),N]),H,e("details",X,[Z,t(o,l(r({title:"100 Days of Swift - Day 1 - 5. String interpolation",desc:"5. String interpolation",link:"https://www.hackingwithswift.com/sixty/1/5/string-interpolation",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),t(c,{src:"youtube/lk5sZhpicdw"}),G]),z,e("details",K,[E,t(o,l(r({title:"100 Days of Swift - Day 1 - 6. Constants",desc:"6. Constants",link:"https://www.hackingwithswift.com/sixty/1/6/constants",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),t(c,{src:"youtube/mnuejTF2Ixs"}),J]),U,e("details",$,[L,t(o,l(r({title:"100 Days of Swift - Day 1 - 7. Type annotations",desc:"7. Type annotations",link:"https://www.hackingwithswift.com/sixty/1/7/type-annotations",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),t(c,{src:"youtube/krT4RYDSpgo"}),Q]),ee,e("details",te,[se,t(o,l(r({title:"100 Days of Swift - Day 1 - 8. Simple types: Summary",desc:"8. Simple types: Summary",link:"https://www.hackingwithswift.com/sixty/1/8/simple-types-summary",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),t(c,{src:"youtube/3-6cyNw1Ync"}),ne,ae]),ie])}const pe=u(f,[["render",oe],["__file","01.html.vue"]]),de=JSON.parse('{"path":"/swift/100-days-of-swift/01.html","title":"Day 01","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 01","description":"100 Days of Swift > Day 01","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of Swift > Day 01"},{"property":"og:description","content":"Day 01"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swift/01.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swift/01.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 01"}],["meta",{"property":"og:description","content":"100 Days of Swift > Day 01"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 01\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"First steps in Swift","slug":"first-steps-in-swift","link":"#first-steps-in-swift","children":[{"level":3,"title":"1. Variables","slug":"_1-variables","link":"#_1-variables","children":[]},{"level":3,"title":"2. Strings and integers","slug":"_2-strings-and-integers","link":"#_2-strings-and-integers","children":[]},{"level":3,"title":"3. Multi-line strings","slug":"_3-multi-line-strings","link":"#_3-multi-line-strings","children":[]},{"level":3,"title":"4. Doubles and Booleans","slug":"_4-doubles-and-booleans","link":"#_4-doubles-and-booleans","children":[]},{"level":3,"title":"5. String interpolation","slug":"_5-string-interpolation","link":"#_5-string-interpolation","children":[]},{"level":3,"title":"6. Constants","slug":"_6-constants","link":"#_6-constants","children":[]},{"level":3,"title":"7. Type annotations","slug":"_7-type-annotations","link":"#_7-type-annotations","children":[]},{"level":3,"title":"8. Simple types: Summary","slug":"_8-simple-types-summary","link":"#_8-simple-types-summary","children":[]}]},{"level":2,"title":"Tips","slug":"tips","link":"#tips","children":[]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":9}]},"readingTime":{"minutes":7.24,"words":2171},"filePathRelative":"swift/100-days-of-swift/01.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{pe as comp,de as data};
