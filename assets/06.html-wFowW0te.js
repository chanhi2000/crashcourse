import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as e,t as m,b as i,w as t,n as g,g as v,d as n,e as b,r,o as _}from"./app-U_bew1in.js";const f={},k={id:"frontmatter-title-관련",tabindex:"-1"},y={class:"header-anchor",href:"#frontmatter-title-관련"},R={class:"table-of-contents"},C=e("hr",null,null,-1),A=e("p",null,"With some help from a program called CRIU, Podman can checkpoint and restore containers on the same host. This can be useful with workloads that have a long startup period or require a long time to warm up caches. For example, large memcached servers, database, or even Java workloads can take several minutes or even hours to reach maximum throughput performance. This is often referred to as cache warming.",-1),w=e("p",null,"If this doesn't quite make sense, let's talk about it in the context of container creation and deletion. Podman allow you to break the creation and deletion of containers down into very granular steps. Here's what the life cycle of a container looks like from start to finish:",-1),I=e("li",null,[e("code",null,"podman pull"),n(" - Pull the container image")],-1),x=e("code",null,"podman create",-1),j=e("code",null,"/var/lib/containers",-1),T=e("code",null,".local/share/containers",-1),U=e("li",null,[e("code",null,"podman mount"),n(" - Create a copy-on-write layer and mount the container image with a read/write layer above it")],-1),P=e("code",null,"podman init",-1),N=e("code",null,"config.json",-1),E=e("code",null,"podman start",-1),S=e("code",null,"config.json",-1),V=e("li",null,"Workload runs either as a batch process, or as a daemon",-1),W=e("li",null,[e("code",null,"podman kill"),n(" - kills the process or processes in the container")],-1),D=e("li",null,[e("code",null,"podman rm"),n(" - Unmount and delete the copy-on-write layer")],-1),H=e("code",null,"podman rmi",-1),$=e("code",null,"/var/lib/containers",-1),O=e("code",null,".local/share/containers",-1),F=e("p",null,"To understand CRIU, you need to understand step 6. When this step is executed, Podman sends a kill signal to the processes in the container. CRIU allows us to break this down even further like this:",-1),M=e("li",null,[e("code",null,"podman pull"),n(" - Pull the container image")],-1),B=e("code",null,"podman create",-1),z=e("code",null,"/var/lib/containers",-1),K=e("code",null,".local/share/containers",-1),Z=e("li",null,[e("code",null,"podman mount"),n(" - Create a copy-on-write layer and mount the container image with a read/write layer above it")],-1),q=e("code",null,"podman init",-1),G=e("code",null,"config.json",-1),J=e("code",null,"podman start",-1),L=e("code",null,"config.json",-1),Q=b("<li>Workload runs either as a batch process, or as a daemon</li><li><code>podman checkpoint</code> - Dump contents of memory to disk and kill processes</li><li>Workload process no longer running, memory contents are saved on disk</li><li><code>podman restore</code> - Restore memory contents to new processes</li><li>Workload runs either as a batch process, or as a daemon</li><li><code>podman kill</code> - kills the process or processes in the container</li><li><code>podman rm</code> - Unmount and delete the copy-on-write layer</li>",7),X=e("code",null,"podman rmi",-1),Y=e("code",null,"/var/lib/containers",-1),ee=e("code",null,".local/share/containers",-1),ne=e("p",null,"So, in a nutshell, CRIU gives you more flexibility with containerized processes. Let's see it in action. First, start a simple container which generates incrementing numbers so that we can verify memory contents are really restored:",-1),te=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"podman"),n(" run "),e("span",{class:"token parameter variable"},"-d"),n(),e("span",{class:"token parameter variable"},"--name"),n(" looper ubi8 /bin/sh "),e("span",{class:"token parameter variable"},"-c"),n(),e("span",{class:"token punctuation"},"\\")]),n(`
`),e("span",{class:"line"},[n("         "),e("span",{class:"token string"},"'i=0; while true; do echo $i; i=$(expr $i + 1); sleep 1; done'")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),se=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token comment"},'# Resolved "ubi8" as an alias (/etc/containers/registries.conf.d/001-rhel-shortnames.conf)')]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Trying to pull registry.access.redhat.com/ubi8:latest...")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Getting image source signatures")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Checking if image destination supports signatures")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Copying blob 70de3d8fc2c6 done  ")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Copying config 62ac1f7ef5 done  ")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Writing manifest to image destination")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Storing signatures")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},'# Error: runc: container_linux.go:349: starting container process caused "error adding seccomp filter rule for syscall bdflush: permission denied": OCI permission denied')]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ae=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"podman"),n(" run "),e("span",{class:"token parameter variable"},"-d"),n(),e("span",{class:"token parameter variable"},"--name"),n(" looper "),e("span",{class:"token parameter variable"},"--privileged"),n(" ubi8 /bin/sh "),e("span",{class:"token parameter variable"},"-c"),n(),e("span",{class:"token punctuation"},"\\")]),n(`
`),e("span",{class:"line"},[n("         "),e("span",{class:"token string"},"'i=0; while true; do echo $i; i=$(expr $i + 1); sleep 1; done'")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ie=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token comment"},'# Error: OCI runtime error: runc: container_linux.go:349: starting container process caused "unknown capability \\"CAP_BPF\\""')]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1),le=e("p",null,"Now, verify that numbers are being generated. Run this a few times to see the numbers incrementing:",-1),oe=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"podman"),n(" logs "),e("span",{class:"token parameter variable"},"-l")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1),re=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}})],-1),ce=e("p",null,"Now, let's dump the contents of memory to disk, and kill the process:",-1),de=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"podman"),n(" container checkpoint "),e("span",{class:"token parameter variable"},"-l")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1),ue=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token comment"},'# Error: "created" is not running, cannot checkpoint: container state improper')]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1),he=e("p",null,"Verify that it's not running. Notice that that container is in the exited state. This means the copy-on-write layer for the container has not been deleted. Since we used the checkpoint sub-command, the contents of memory are also saved on disk:",-1),pe=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"podman"),n(),e("span",{class:"token function"},"ps"),n(),e("span",{class:"token parameter variable"},"-a")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1),me=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token comment"},"# CONTAINER ID  IMAGE                                     COMMAND               CREATED             STATUS             PORTS       NAMES")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# a83dd382c16d  registry.fedoraproject.org/fedora:latest  bash                  27 minutes ago      Up 27 minutes ago              meta-data-container")]),n(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 592a894441ef  registry.access.redhat.com/ubi8:latest    /bin/sh -c i=0; w...  About a minute ago  Created                        looper")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ge=e("p",null,"Verify that numbers are not being generated. Run this a few times to verify:",-1),ve=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"podman"),n(" logs "),e("span",{class:"token parameter variable"},"-l")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1),be=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}})],-1),_e=e("p",null,"Restore the container:",-1),fe=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"podman"),n(" container restore "),e("span",{class:"token parameter variable"},"-l")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1),ke=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}})],-1),ye=e("p",null,"Verify the contents of memory and disk are being used and the numbers are incrementing again:",-1),Re=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"podman"),n(" logs "),e("span",{class:"token parameter variable"},"-l")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1),Ce=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}})],-1),Ae=e("p",null,"We're all done, so clean up. This will kill the process, delete the contents of the copy-on-write layer, and remove all of the meta-data for all containers:",-1),we=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"podman"),n(),e("span",{class:"token function"},"kill"),n(),e("span",{class:"token parameter variable"},"-a")]),n(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"})])],-1),Ie=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}})],-1),xe=e("hr",null,null,-1),je=e("h2",{id:"conclusions",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#conclusions"},[e("span",null,"Conclusions")])],-1),Te=e("p",null,"Checkpointing and restoring containers is easy with CRIU and Podman. As part of the container-tools application streams, specific versions of Podman and CRIU are tested and verified to work together (not all versions of Podman and CRIU are guaranteed to work together). Now,",-1);function Ue(c,Pe){const d=r("router-link"),u=r("VPCard"),l=r("FontIcon"),o=r("Tabs");return _(),p("div",null,[e("h1",k,[e("a",y,[e("span",null,m(c.$frontmatter.title)+" 관련",1)])]),e("nav",R,[e("ul",null,[e("li",null,[i(d,{to:"#conclusions"},{default:t(()=>[n("Conclusions")]),_:1})])])]),C,i(u,g(v({title:"Red Hat Container Tools",desc:"Intro",link:"https://developers.redhat.com/courses/devops-red-hat-container-tools",logo:"https://developers.redhat.com/themes/custom/rhdp2/images/branding/2023_RHDLogo_black_text.svg",background:"rgba(255,255,255,0.2)"})),null,16),A,w,e("ol",null,[I,e("li",null,[x,n(" - Add tracking meta-data to "),i(l,{icon:"fas fa-folder-open"}),j,n(" or "),i(l,{icon:"fas fa-folder-open"}),T]),U,e("li",null,[P,n(" - Create a "),i(l,{icon:"fas fa-file-lines"}),N,n(" file")]),e("li",null,[E,n(" - Run the workload by handing the "),i(l,{icon:"fas fa-file-lines"}),S,n(" and root file system to runc")]),V,W,D,e("li",null,[H,n(" - remove the image "),i(l,{icon:"fas fa-folder-open"}),$,n(" or "),i(l,{icon:"fas fa-folder-open"}),O])]),F,e("ol",null,[M,e("li",null,[B,n(" - Add tracking meta-data to "),i(l,{icon:"fas fa-folder-open"}),z,n(" or "),i(l,{icon:"fas fa-folder-open"}),K]),Z,e("li",null,[q,n(" - Create a "),i(l,{icon:"fas fa-file-lines"}),G,n(" file")]),e("li",null,[J,n(" - Run the workload by handing the "),i(l,{icon:"fas fa-file-lines"}),L,n(" and root file system to runc")]),Q,e("li",null,[X,n(" - remove the image "),i(l,{icon:"fas fa-folder-open"}),Y,n(" or "),i(l,{icon:"fas fa-folder-open"}),ee])]),ne,i(o,{id:"134",data:[{id:"Input"},{id:"Error"},{id:"Input (Correct)"},{id:"Result"}],active:0},{title0:t(({value:s,isActive:a})=>[n("Input")]),title1:t(({value:s,isActive:a})=>[n("Error")]),title2:t(({value:s,isActive:a})=>[n("Input (Correct)")]),title3:t(({value:s,isActive:a})=>[n("Result")]),tab0:t(({value:s,isActive:a})=>[te]),tab1:t(({value:s,isActive:a})=>[se]),tab2:t(({value:s,isActive:a})=>[ae]),tab3:t(({value:s,isActive:a})=>[ie]),_:1}),le,i(o,{id:"151",data:[{id:"Input"},{id:"Result"}],active:0},{title0:t(({value:s,isActive:a})=>[n("Input")]),title1:t(({value:s,isActive:a})=>[n("Result")]),tab0:t(({value:s,isActive:a})=>[oe]),tab1:t(({value:s,isActive:a})=>[re]),_:1}),ce,i(o,{id:"162",data:[{id:"Input"},{id:"Result"}],active:0},{title0:t(({value:s,isActive:a})=>[n("Input")]),title1:t(({value:s,isActive:a})=>[n("Result")]),tab0:t(({value:s,isActive:a})=>[de]),tab1:t(({value:s,isActive:a})=>[ue]),_:1}),he,i(o,{id:"173",data:[{id:"Input"},{id:"Result"}],active:0},{title0:t(({value:s,isActive:a})=>[n("Input")]),title1:t(({value:s,isActive:a})=>[n("Result")]),tab0:t(({value:s,isActive:a})=>[pe]),tab1:t(({value:s,isActive:a})=>[me]),_:1}),ge,i(o,{id:"184",data:[{id:"Input"},{id:"Result"}],active:0},{title0:t(({value:s,isActive:a})=>[n("Input")]),title1:t(({value:s,isActive:a})=>[n("Result")]),tab0:t(({value:s,isActive:a})=>[ve]),tab1:t(({value:s,isActive:a})=>[be]),_:1}),_e,i(o,{id:"195",data:[{id:"Input"},{id:"Result"}],active:0},{title0:t(({value:s,isActive:a})=>[n("Input")]),title1:t(({value:s,isActive:a})=>[n("Result")]),tab0:t(({value:s,isActive:a})=>[fe]),tab1:t(({value:s,isActive:a})=>[ke]),_:1}),ye,i(o,{id:"206",data:[{id:"Input"},{id:"Result"}],active:0},{title0:t(({value:s,isActive:a})=>[n("Input")]),title1:t(({value:s,isActive:a})=>[n("Result")]),tab0:t(({value:s,isActive:a})=>[Re]),tab1:t(({value:s,isActive:a})=>[Ce]),_:1}),Ae,i(o,{id:"217",data:[{id:"Input"},{id:"Result"}],active:0},{title0:t(({value:s,isActive:a})=>[n("Input")]),title1:t(({value:s,isActive:a})=>[n("Result")]),tab0:t(({value:s,isActive:a})=>[we]),tab1:t(({value:s,isActive:a})=>[Ie]),_:1}),xe,je,Te])}const Se=h(f,[["render",Ue],["__file","06.html.vue"]]),Ve=JSON.parse('{"path":"/devops/red-hat-container-tools/06.html","title":"6. CRIU - Checkpointing and Restoring","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"6. CRIU - Checkpointing and Restoring","description":"Red Hat Container Tools > 6. CRIU - Checkpointing and Restoring","category":["RedHat"],"tag":["crashcourse","redhat","buildah","podman","skopeo","sesearch","semodule"],"head":[[{"meta":null},{"property":"og:title","content":"Red Hat Container Tools > 6. CRIU - Checkpointing and Restoring"},{"property":"og:description","content":"6. CRIU - Checkpointing and Restoring"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/devops/red-hat-container-tools/06.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/devops/red-hat-container-tools/06.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"6. CRIU - Checkpointing and Restoring"}],["meta",{"property":"og:description","content":"Red Hat Container Tools > 6. CRIU - Checkpointing and Restoring"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-04-24T07:16:44.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"redhat"}],["meta",{"property":"article:tag","content":"buildah"}],["meta",{"property":"article:tag","content":"podman"}],["meta",{"property":"article:tag","content":"skopeo"}],["meta",{"property":"article:tag","content":"sesearch"}],["meta",{"property":"article:tag","content":"semodule"}],["meta",{"property":"article:modified_time","content":"2024-04-24T07:16:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"6. CRIU - Checkpointing and Restoring\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-24T07:16:44.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Conclusions","slug":"conclusions","link":"#conclusions","children":[]}],"git":{"createdTime":1703642364000,"updatedTime":1713943004000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":8}]},"readingTime":{"minutes":3.54,"words":1063},"filePathRelative":"devops/red-hat-container-tools/06.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{Se as comp,Ve as data};
