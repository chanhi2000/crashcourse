import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,a as e,t as p,b as t,w as n,n as s,g as i,e as r,r as c,o as w,d as l}from"./app-U_bew1in.js";const y={},m={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},g={class:"table-of-contents"},k=e("hr",null,null,-1),b=e("h2",{id:"milestone-projects-1-3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#milestone-projects-1-3"},[e("span",null,"Milestone: Projects 1-3")])],-1),v=e("p",null,"It’s time for another consolidation day, because we’ve covered a lot of ground in the first three topics and it’s important you review them if you want them to stick in your head.",-1),I=e("p",null,"However, this will also be the first day you’re asked to create a complete app from scratch. Don’t worry: I outline all the components required to make it work, and also provide hints to give you a head start.",-1),_=e("p",null,"As you’ll see, creating an app from scratch is a very different experience to adding modifications to an existing app: you get blank page paralysis, which is where your brain knows where you want to get to but you’re just not sure how to start.",-1),C=e("p",null,"A common reason to get stuck is that folks try to write flawless code first time. As Margaret Atwood once said, “if I waited for perfection, I would never write a word.” So, dive in and see where you get – these milestone challenges will help you learn to get comfortable starting fresh projects, and to get real functionality up and running quickly.",-1),S=e("p",null,[e("strong",null,"Today you have three topics to work through, one of which of is your challenge.")],-1),T=e("h3",{id:"what-you-learned",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#what-you-learned"},[e("span",null,"What you learned")])],-1),V={class:"hint-container details"},x=e("summary",null,"What you learned",-1),D=r("<p>You’ve made your first two projects now, and completed a technique project too – this same cadence of app, game, technique is used all the way up to project 30, and you’ll start to settle into it as time goes by.</p><p>Both the app and the game were built with UIKit – something we’ll continue for two more milestones – so that you can really start to understand how the basics of view controllers work. These really are a fundamental part of any iOS app, so the more experience I can give you with them the better.</p><p>At this point you’re starting to put your Swift knowledge into practice with real context: actual, hands-on projects. Because most iOS apps are visual, that means you’ve started to use lots of things from UIKit, not least:</p><ul><li>Table views using <code>UITableView</code>. These are used everywhere in iOS, and are one of the most important components on the entire platform.</li><li>Image views using <code>UIImageView</code>, as well as the data inside them, <code>UIImage</code>. Remember: a <code>UIImage</code> contains the pixels, but a <code>UIImageView</code> displays them – i.e., positions and sizes them. You also saw how iOS handles retina and retina HD screens using @2x and @3x filenames.</li><li>Buttons using <code>UIButton</code>. These don’t have any special design in iOS by default – they just look like labels, really. But they do respond when tapped, so you can take some action.</li><li>View controllers using <code>UIViewController</code>. These give you all the fundamental display technology required to show one screen, including things like rotation and multi-tasking on iPad.</li><li>System alerts using <code>UIAlertController</code>. We used this to show a score in project 2, but it’s helpful for any time you need the user to confirm something or make a choice.</li><li>Navigation bar buttons using <code>UIBarButtonItem</code>. We used the built-in action icon, but there are lots of others to choose from, and you can use your own custom text if you prefer.</li><li>Colors using <code>UIColor</code>, which we used to outline the flags with a black border. There are lots of built-in system colors to choose from, but you can also create your own.</li><li>Sharing content to Facebook and Twitter using <code>UIActivityViewController</code>. This same class also handles printing, saving images to the photo library, and more.</li></ul><p>One thing that might be confusing for you is the relationship between <code>CALayer</code> and <code>UIView</code>, and <code>CGColor</code> and <code>UIColor</code>. I’ve tried to describe them as being “lower level” and “higher level”, which may or may not help. Put simply, you’ve seen how you can create apps by building on top of Apple’s APIs, and that’s exactly how Apple works too: their most advanced things like <code>UIView</code> are built on top of lower-level things like <code>CALayer</code>. Some times you need to reach down to these lower-level concept, but most of the time you’ll stay in UIKit.</p><p>If you’re concerned that you won’t know when to use UIKit or when to use one of the lower-level alternatives, don’t worry: if you try to use a <code>UIColor</code> when Xcode expects a <code>CGColor</code>, it will tell you!</p><p>Both projects 1 and 2 worked extensively in Interface Builder, which is a running theme in this series: although you <em>can</em> do things in code, it’s generally preferable not to. Not only does this mean you can see exactly how your layout will look when previewed across various device types, but you also open the opportunity for specialized designers to come in and adjust your layouts without touching your code. Trust me on this: keeping your UI and code separate is A Good Thing.</p><p>Three important Interface Builder things you’ve met so far are:</p><ol><li>Storyboards, edited using Interface Builder, but used in code too by setting storyboard identifiers.</li><li>Outlets and action from Interface Builder. Outlets connect views to named properties (e.g. <code>imageView</code>), and actions connect them to methods that get run, e.g. <code>buttonTapped()</code>.</li><li>Auto Layout to create rules for how elements of your interface should be positioned relative to each other.</li></ol><p>You’ll be using Interface Builder a <em>lot</em> throughout this series. Sometimes we’ll make interfaces in code, but only when needed and always with good reason.</p><p>There are three other things I want to touch on briefly, because they are important.</p><p>First, you met the <code>Bundle</code> class, which lets you use any assets you build into your projects, like images and text files. We used that to get the list of NSSL JPEGs in project 1, but we’ll use it again in future projects.</p><p>Second, loading those NSSL JPEGs was done by scanning the app bundle using the <code>FileManager</code> class, which lets you read and write to the iOS filesystem. We used it to scan directories, but it can also check if a file exists, delete things, copy things, and more.</p><p>Finally, you learned how to generate truly random numbers using Swift’s <code>Int.random(in:)</code> method. Swift has lots of other functionality for randomness that we’ll be looking at in future projects.</p>",14),j=e("h3",{id:"key-points",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#key-points"},[e("span",null,"Key points")])],-1),U={class:"hint-container details"},A=e("summary",null,"Key points",-1),B=r(`<p>There are five important pieces of code that are important enough they warrant some revision. First, this line:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> items <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">!</span> fm<span class="token punctuation">.</span><span class="token function">contentsOfDirectory</span><span class="token punctuation">(</span>atPath<span class="token punctuation">:</span> path<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The <code>fm</code> was a reference to <code>FileManager</code> and <code>path</code> was a reference to the resource path from <code>Bundle</code>, so that line pulled out an array of files at the directory where our app’s resources lived. But do you remember why the <code>try!</code> was needed?</p><p>When you ask for the contents of a directory, it’s possible – although hopefully unlikely! – that the directory doesn’t actually exist. Maybe you meant to look in a directory called “files” but accidentally wrote “file”. In this situation, the <code>contentsOfDirectory()</code> call will fail, and Swift will throw an exception – it will literally refuse to continue running your code until you handle the error.</p><p>This is important, because handling the error allows your app to behave well even when things go wrong. But in this case we got the path straight from iOS – we didn’t type it in by hand, so if reading from our own app’s bundle doesn’t work then clearly something is very wrong indeed.</p><p>Swift requires any calls that might fail to be called using the <code>try</code> keyword, which forces you to add code to catch any errors that might result. However, because we know this code will work – it can’t possibly be mistyped – we can use the <code>try!</code> keyword, which means “don’t make me catch errors, because they won’t happen.” Of course, if you’re wrong – if errors <em>do</em> happen – then your app will crash, so be careful!</p><p>The second piece of code I’d like to look at is this method:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">tableView</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> tableView<span class="token punctuation">:</span> <span class="token class-name">UITableView</span><span class="token punctuation">,</span> numberOfRowsInSection section<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> pictures<span class="token punctuation">.</span>count</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That was used in project 1 to make the table view show as many rows as necessary for the <code>pictures</code> array, but it packs a lot into a small amount of space.</p><p>To recap, we used the Single View App template when creating project 1, which gave us a single <code>UIViewController</code> subclass called simply <code>ViewController</code>. To make it use a table instead, we changed <code>ViewController</code> so that it was based on <code>UITableViewController</code>, which provides default answers to lots of questions: how many sections are there? How many rows? What’s in each row? What happens when a row is tapped? And so on.</p><p>Clearly we don’t want the default answers to each of those questions, because our app needs to specify how many rows it wants based on its own data. And that’s where the <code>override</code> keyword comes in: it means “I know there’s a default answer to this question, but I want to provide a new one.” The “question” in this case is “numberOfRowsInSection”, which expects to receive an <code>Int</code> back: how many rows should there be?</p><p>The last two pieces of code I want to look at again are these:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> cell <span class="token operator">=</span> tableView<span class="token punctuation">.</span><span class="token function">dequeueReusableCell</span><span class="token punctuation">(</span>withIdentifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Picture&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> indexPath<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">let</span> vc <span class="token operator">=</span> storyboard<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">instantiateViewController</span><span class="token punctuation">(</span>withIdentifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Detail&quot;</span></span><span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">DetailViewController</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Both of these are responsible for linking code to storyboard information using an identifier string. In the former case, it’s a cell reuse identifier; in the latter, it’s a view controller’s storyboard identifier. You always need to use the same name in Interface Builder and your code – if you don’t, you’ll get a crash because iOS doesn’t know what to do.</p><p>The second of those pieces of code is particularly interesting, because of the <code>if let</code> and <code>as? DetailViewController</code>. When we dequeued the table view cell, we used the built-in “Basic” style – we didn’t need to use a custom class to work with it, so we could just crack on and set its text.</p><p>However, the detail view controller has its own custom thing we need to work with: the <code>selectedImage</code> string. That doesn’t exist on a regular <code>UIViewController</code>, and that’s what the <code>instantiateViewController()</code> method returns – it doesn’t know (or care) what’s inside the storyboard, after all. That’s where the <code>if let</code> and <code>as?</code> typecast comes in: it means “I want to treat this is a <code>DetailViewController</code> so please try and convert it to one.”</p><p>Only if that conversion works will the code inside the braces execute – and that’s why we can access the <code>selectedImage</code> property safely.</p>`,17),O=e("h3",{id:"challenge",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#challenge"},[e("span",null,"Challenge")])],-1),q={class:"hint-container details"},P=e("summary",null,"Challenge",-1),W=r("<p>You have a rudimentary understanding of table views, image views, and navigation controllers, so let’s put them together: your challenge is to create an app that lists various world flags in a table view. When one of them is tapped, slide in a detail view controller that contains an image view, showing the same flag full size. On the detail view controller, add an action button that lets the user share the flag picture and country name using <code>UIActivityViewController</code>.</p><p>To solve this challenge you’ll need to draw on skills you learned in tutorials 1, 2, and 3:</p><ol><li>Start with a Single View App template, then change its main <code>ViewController</code> class so that builds on <code>UITableViewController</code> instead.</li><li>Load the list of available flags from the app bundle. You can type them directly into the code if you want, but it’s preferable not to.</li><li>Create a new Cocoa Touch Class responsible for the detail view controller, and give it properties for its image view and the image to load.</li><li>You’ll also need to adjust your storyboard to include the detail view controller, including using Auto Layout to pin its image view correctly.</li><li>You will need to use <code>UIActivityViewController</code> to share your flag.</li></ol><p>As always, I’m going to provide some hints below, but I suggest you try to complete as much of the challenge as you can before reading them.</p><p>Hints:</p><ul><li>To load the images from disk you need to use three lines of code: <code>let fm = FileManager.default</code>, then <code>let path = Bundle.main.resourcePath!</code>, then finally <code>let items = try! fm.contentsOfDirectory(atPath: path)</code>.</li><li>Those lines end up giving you an array of all items in your app’s bundle, but you only want the pictures, so you’ll need to use something like the <code>hasSuffix()</code> method.</li><li>Once you have made <code>ViewController</code> build on <code>UITableViewController</code>, you’ll need to override its <code>numberOfRowsInSection</code> and <code>cellForRowAt</code> methods.</li><li>You’ll need to assign a cell prototype identifier in Interface Builder, such as “Country”. You can then dequeue cells of that type using <code>tableView.dequeueReusableCell(withIdentifier: &quot;Country&quot;, for: indexPath)</code>.</li><li>The <code>didSelectItemAt</code> method is responsible for taking some action when the user taps a row.</li><li>Make sure your detail view controller has a property for the image name to load, as well as the <code>UIImageView</code> to load it into. The former should be modified from <code>ViewController</code> inside <code>didSelectItemAt</code>; the latter should be modified in the <code>viewDidLoad()</code> method of your detail view controller.</li></ul><p>Bonus tip: try setting the <code>imageView</code> property of the table view cell. Yes, they have one. And yes, it automatically places an image right there in the table view cell – it makes a great preview for every country.</p>",7),K=e("div",{class:"hint-container tip"},[e("p",{class:"hint-container-title"},"Note"),e("p",null,"Don’t worry if you don’t complete challenges in the day they were assigned – in future days you’ll find you have some time to spare here and there, so challenges are something you can return back to in the future.")],-1),R=e("hr",null,null,-1);function M(d,Y){const o=c("router-link"),a=c("VPCard");return w(),u("div",null,[e("h1",m,[e("a",f,[e("span",null,p(d.$frontmatter.title)+" 관련",1)])]),e("nav",g,[e("ul",null,[e("li",null,[t(o,{to:"#milestone-projects-1-3"},{default:n(()=>[l("Milestone: Projects 1-3")]),_:1}),e("ul",null,[e("li",null,[t(o,{to:"#what-you-learned"},{default:n(()=>[l("What you learned")]),_:1})]),e("li",null,[t(o,{to:"#key-points"},{default:n(()=>[l("Key points")]),_:1})]),e("li",null,[t(o,{to:"#challenge"},{default:n(()=>[l("Challenge")]),_:1})])])])])]),k,t(a,s(i({title:"100 Days of Swift - Day 23",desc:"Milestone: Projects 1-3",link:"https://www.hackingwithswift.com/100/23",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),b,v,I,_,C,S,T,e("details",V,[x,t(a,s(i({title:"100 Days of Swift - Day 23 - What you learned",desc:"What you learned",link:"https://hackingwithswift.com/guide/2/1/what-you-learned",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),D]),j,e("details",U,[A,t(a,s(i({title:"100 Days of Swift - Day 23 - Key points",desc:"Key points",link:"https://hackingwithswift.com/guide/2/2/key-points",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),B]),O,e("details",q,[P,t(a,s(i({title:"100 Days of Swift - Day 23 - Challenge",desc:"Challenge",link:"https://hackingwithswift.com/guide/2/3/challenge",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),W]),K,R])}const L=h(y,[["render",M],["__file","23.html.vue"]]),H=JSON.parse('{"path":"/swift/100-days-of-swift/23.html","title":"Day 23","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 23","description":"100 Days of Swift > Day 23","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of Swift > Day 23"},{"property":"og:description","content":"Day 23"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swift/23.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swift/23.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 23"}],["meta",{"property":"og:description","content":"100 Days of Swift > Day 23"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 23\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Milestone: Projects 1-3","slug":"milestone-projects-1-3","link":"#milestone-projects-1-3","children":[{"level":3,"title":"What you learned","slug":"what-you-learned","link":"#what-you-learned","children":[]},{"level":3,"title":"Key points","slug":"key-points","link":"#key-points","children":[]},{"level":3,"title":"Challenge","slug":"challenge","link":"#challenge","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":11}]},"readingTime":{"minutes":8.2,"words":2461},"filePathRelative":"swift/100-days-of-swift/23.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{L as comp,H as data};
