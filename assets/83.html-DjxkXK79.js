import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as n,t as m,b as s,w as o,n as i,g as p,d as a,e as r,r as l,o as w}from"./app-U_bew1in.js";const g={},v={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},b=n("hr",null,null,-1),I=n("h2",{id:"project-25-part-one",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#project-25-part-one"},[n("span",null,"Project 25, part one")])],-1),C=n("p",null,"Back in 1980, Bob Metcalfe outlined what has since become known as Metcalfe’s law: “the effect of a telecommunications network is proportional to the square of the number of connected users of the system.”",-1),_=n("p",null,"Put into practical terms, if you’re the only person in the world who owns a cellphone, you can’t call anyone. But if another person gets one you can now make one connection, if five people have one then there are 10 possible connections, if 12 people get one then there are 66 possible connections, and so on – the value increases massively as more people join the network.",-1),j=n("p",null,"We looked at traditional networking way back in project 7, but today you’re going to meet something quite different: multipeer networking, which allows users to make direct connections to those nearby to them. This fundamentally affects Metcalfe’s law: suddenly anyone can join or leave a network just by changing their location – they don’t need to sign in, authenticate, create an account, register, or anything like that. Instead, they just need to launch your app and tap a button to join the other folks around them.",-1),S=n("p",null,[n("strong",null,"Today you have four topics to work through, and you’ll learn about peer to peer networking, while also getting some practice with collection views, GCD, and more.")],-1),D=n("h3",{id:"setting-up",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#setting-up"},[n("span",null,"Setting up")])],-1),M={class:"hint-container details"},P=n("summary",null,"Setting up",-1),A=n("p",null,"This project is going to give you some practice with collection views, the image picker and GCD, but at the same time introduce you to a new technology called the multipeer connectivity framework. This is a way to let users form impromptu connections to each other and send data, rather like BitTorrent.",-1),q=n("p",null,"The app we're going to make will show photos of your choosing in a collection view. That much is easy enough, because we did pretty much that already in project 10. But this time there's a subtle difference: when you add a photo it's going to automatically send it to any other devices you are currently connected to, and any photos they select will appear for you.",-1),V=n("p",null,"Create a new Single View App project in Xcode, naming it Project25. Please note: the nature of peer-to-peer apps is that you need to have at least two copies of your app running, one to send and one to receive. There are a few ways of setting this up, but I recommend using one physical device talking to the iOS simulator – that’s more than enough.",-1),x=n("h3",{id:"importing-photos-again",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#importing-photos-again"},[n("span",null,"Importing photos again")])],-1),T={class:"hint-container details"},B=n("summary",null,"Importing photos again",-1),U=n("p",null,[a("We've used the "),n("code",null,"UIImagePickerController"),a(" class twice now: once in project 10 and again in project 13, so I hope you're already comfortable with it. We also used a collection view in project 10, but we haven't used it since so you might not be quite so familiar with it.")],-1),W=n("code",null,"ViewController.swift",-1),N=r(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">ViewController</span><span class="token punctuation">:</span> <span class="token class-name">UIViewController</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>To this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">ViewController</span><span class="token punctuation">:</span> <span class="token class-name">UICollectionViewController</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,3),R=n("code",null,"Main.storyboard",-1),F=n("p",null,'With the collection view selected, set cell size to be 145 wide and 145 high, and give all four section insets a value of 10. Click inside the prototype cell that Xcode made for you and give it the reuse identifier "ImageView". Finally, drop an image view into the cell so that it occupies all its space, and give it the tag 1000.',-1),H=n("p",null,"All the constraints in this project can be made automatically, so select the collection view using the document outline then go to the Editor menu and choose Resolve Auto Layout Issues > Reset to Suggested Constraints.",-1),L=n("code",null,"ViewController.swift",-1),O=r(`<p>To start, add a right bar button item that uses the system&#39;s camera icon and calls an <code>importPicture()</code> method that we&#39;ll write shortly. I&#39;m also going to customize the title of the view controller so that it isn&#39;t empty, so here&#39;s the new <code>viewDidLoad()</code> method:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">viewDidLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    title <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Selfie Share&quot;</span></span></span>
<span class="line">    navigationItem<span class="token punctuation">.</span>rightBarButtonItem <span class="token operator">=</span> <span class="token class-name">UIBarButtonItem</span><span class="token punctuation">(</span>barButtonSystemItem<span class="token punctuation">:</span> <span class="token punctuation">.</span>camera<span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> <span class="token other-directive property">#selector</span><span class="token punctuation">(</span>importPicture<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, let&#39;s make the collection view work correctly, starting with the easy stuff: make your view controller conform to the <code>UINavigationControllerDelegate</code> and <code>UIImagePickerControllerDelegate</code> protocols, because we need those to work with the image picker.</p><p>We will store all our apps images inside a <code>UIImage</code> array, so please add this property now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> images <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">UIImage</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We&#39;re going to use that array to know how many items are in our collection view, so you should know to write this method yourself:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">collectionView</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> collectionView<span class="token punctuation">:</span> <span class="token class-name">UICollectionView</span><span class="token punctuation">,</span> numberOfItemsInSection section<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> images<span class="token punctuation">.</span>count</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next comes the only thing out of the ordinary in all this code, which is the <code>cellForItemAt</code> method for our collection view. To get us through this part of the project as quickly as possible, I took a shortcut: when it comes to configuring cells to look correct, we can dequeue using the identifier &quot;ImageView&quot; then find the <code>UIImageView</code> inside them without a property.</p><p>I asked you to set the tag of the image view to be 1000, and here&#39;s why: all <code>UIView</code> subclasses have a method called <code>viewWithTag()</code>, which searches for any views inside itself (or indeed itself) with that tag number. We can find our image view just by using this method, although I&#39;ll still use <code>if let</code> and a conditional typecast to be sure.</p><p>Here&#39;s the code for <code>cellForItemAt</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">collectionView</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> collectionView<span class="token punctuation">:</span> <span class="token class-name">UICollectionView</span><span class="token punctuation">,</span> cellForItemAt indexPath<span class="token punctuation">:</span> <span class="token class-name">IndexPath</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">UICollectionViewCell</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> cell <span class="token operator">=</span> collectionView<span class="token punctuation">.</span><span class="token function">dequeueReusableCell</span><span class="token punctuation">(</span>withReuseIdentifier<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;ImageView&quot;</span></span><span class="token punctuation">,</span> <span class="token keyword">for</span><span class="token punctuation">:</span> indexPath<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> imageView <span class="token operator">=</span> cell<span class="token punctuation">.</span><span class="token function">viewWithTag</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">UIImageView</span> <span class="token punctuation">{</span></span>
<span class="line">        imageView<span class="token punctuation">.</span>image <span class="token operator">=</span> images<span class="token punctuation">[</span>indexPath<span class="token punctuation">.</span>item<span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> cell</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That makes the collection view work just fine, but we still need three more methods in order to get our basic app ready, and these are the methods to handle the image picker. If this code isn&#39;t identical to the code we&#39;ve previously written, it might as well be – check project 10 if your memory is bad!</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@objc</span> <span class="token keyword">func</span> <span class="token function-definition function">importPicture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> picker <span class="token operator">=</span> <span class="token class-name">UIImagePickerController</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    picker<span class="token punctuation">.</span>allowsEditing <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">    picker<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">self</span></span>
<span class="line">    <span class="token function">present</span><span class="token punctuation">(</span>picker<span class="token punctuation">,</span> animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">imagePickerController</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> picker<span class="token punctuation">:</span> <span class="token class-name">UIImagePickerController</span><span class="token punctuation">,</span> didFinishPickingMediaWithInfo info<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">UIImagePickerController</span><span class="token punctuation">.</span><span class="token class-name">InfoKey</span> <span class="token punctuation">:</span> <span class="token keyword">Any</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">guard</span> <span class="token keyword">let</span> image <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token punctuation">.</span>editedImage<span class="token punctuation">]</span> <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">UIImage</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">dismiss</span><span class="token punctuation">(</span>animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    images<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> at<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    collectionView<span class="token punctuation">.</span><span class="token function">reloadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Done – no more boring old code now. At this point you can run the app if you want, but there&#39;s no need to other than being sure your code works – this is just a cut-down version of project 10 so far.</p>`,14),G=n("h3",{id:"going-peer-to-peer-mcsession-mcbrowserviewcontroller",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#going-peer-to-peer-mcsession-mcbrowserviewcontroller"},[n("span",null,[a("Going peer to peer: "),n("code",null,"MCSession"),a(", "),n("code",null,"MCBrowserViewController")])])],-1),E={class:"hint-container details"},K=n("summary",null,"Going peer to peer: MCSession, MCBrowserViewController",-1),z=r(`<p>The next step is to add a left bar button item to our view controller, using the &quot;add&quot; system icon, and making it call a method called <code>showConnectionPrompt()</code>. We&#39;re going to make that method ask users whether they want to connect to an existing session with other people, or whether they want to create their own. Here&#39;s the code for the bar button item – put this in <code>viewDidLoad()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">navigationItem<span class="token punctuation">.</span>leftBarButtonItem <span class="token operator">=</span> <span class="token class-name">UIBarButtonItem</span><span class="token punctuation">(</span>barButtonSystemItem<span class="token punctuation">:</span> <span class="token punctuation">.</span>add<span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> <span class="token other-directive property">#selector</span><span class="token punctuation">(</span>showConnectionPrompt<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Asking users to clarify how they want to take an action is of course the purpose of <code>UIAlertController</code> as an action sheet, and our <code>showConnectionPrompt()</code> method is going to use one to ask users what kind of connection they want to make. Put this code into your view controller:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@objc</span> <span class="token keyword">func</span> <span class="token function-definition function">showConnectionPrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> ac <span class="token operator">=</span> <span class="token class-name">UIAlertController</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Connect to others&quot;</span></span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">,</span> preferredStyle<span class="token punctuation">:</span> <span class="token punctuation">.</span>alert<span class="token punctuation">)</span></span>
<span class="line">    ac<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">UIAlertAction</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Host a session&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">,</span> handler<span class="token punctuation">:</span> startHosting<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    ac<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">UIAlertAction</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Join a session&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">,</span> handler<span class="token punctuation">:</span> joinSession<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    ac<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">UIAlertAction</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Cancel&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>cancel<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">present</span><span class="token punctuation">(</span>ac<span class="token punctuation">,</span> animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, here&#39;s where it gets trickier. Multipeer connectivity requires four new classes:</p><ol><li><code>MCSession</code> is the manager class that handles all multipeer connectivity for us.</li><li><code>MCPeerID</code> identifies each user uniquely in a session.</li><li><code>MCAdvertiserAssistant</code> is used when creating a session, telling others that we exist and handling invitations.</li><li><code>MCBrowserViewController</code> is used when looking for sessions, showing users who is nearby and letting them join.</li></ol><p>We&#39;re going to use all four of them in our app, but only three need to be properties.</p><p>Start by importing the multipeer framework:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token class-name">MultipeerConnectivity</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now add these to your view controller:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> peerID <span class="token operator">=</span> <span class="token class-name">MCPeerID</span><span class="token punctuation">(</span>displayName<span class="token punctuation">:</span> <span class="token class-name">UIDevice</span><span class="token punctuation">.</span>current<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">var</span> mcSession<span class="token punctuation">:</span> <span class="token class-name">MCSession</span><span class="token operator">?</span></span>
<span class="line"><span class="token keyword">var</span> mcAdvertiserAssistant<span class="token punctuation">:</span> <span class="token class-name">MCAdvertiserAssistant</span><span class="token operator">?</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Although both the session and advertiser assistant are optional, that code creates the <code>MCPeerID</code> up front using the name of the current device, which will usually be something like &quot;Paul&#39;s iPhone&quot; – there’s no need to make an optional for that.</p><p>Depending on what users select in our alert controller, we need to call one of two methods: <code>startHosting()</code> or <code>joinSession()</code>. Because both of these are coming from the result of a <code>UIAction</code> being tapped, both methods must accept a <code>UIAlertAction</code> as their only parameter.</p><p>Before I show you the code to get multipeer connectivity up and running, I want to go over what they will do. Most important of all is that all multipeer services on iOS must declare a service type, which is a 15-digit string that uniquely identify your service. Those 15 digits can contain only the letters A-Z, numbers and hyphens, and it&#39;s usually preferred to include your company in there somehow.</p><p>Apple&#39;s example is, &quot;a text chat app made by ABC company could use the service type <code>abc-txtchat</code>&quot;; for this project I&#39;ll be using <code>hws-project25</code>.</p><p>This service type is used by both <code>MCAdvertiserAssistant</code> and <code>MCBrowserViewController</code> to make sure your users only see other users of the same app. They both also want a reference to your <code>MCSession</code> instance so they can take care of connections for you.</p><p>We&#39;re going to start by initializing our <code>MCSession</code> so that we&#39;re able to make connections. Put this code into <code>viewDidLoad()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">mcSession <span class="token operator">=</span> <span class="token class-name">MCSession</span><span class="token punctuation">(</span>peer<span class="token punctuation">:</span> peerID<span class="token punctuation">,</span> securityIdentity<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">,</span> encryptionPreference<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">required</span><span class="token punctuation">)</span></span>
<span class="line">mcSession<span class="token operator">?</span><span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">self</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Our peer ID is used to create the session, along with the encryption option of <code>.required</code> to ensure that any data transferred is kept safe.</p><p>Don&#39;t worry about conforming to any extra protocols just yet; we&#39;ll do that in just a minute.</p><p>At this point, the code for <code>startHosting()</code> and <code>joinSession()</code> will look quite trivial. Here goes:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">startHosting</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token class-name">UIAlertAction</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">guard</span> <span class="token keyword">let</span> mcSession <span class="token operator">=</span> mcSession <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line">    mcAdvertiserAssistant <span class="token operator">=</span> <span class="token class-name">MCAdvertiserAssistant</span><span class="token punctuation">(</span>serviceType<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;hws-project25&quot;</span></span><span class="token punctuation">,</span> discoveryInfo<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">,</span> session<span class="token punctuation">:</span> mcSession<span class="token punctuation">)</span></span>
<span class="line">    mcAdvertiserAssistant<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">joinSession</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token class-name">UIAlertAction</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">guard</span> <span class="token keyword">let</span> mcSession <span class="token operator">=</span> mcSession <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">let</span> mcBrowser <span class="token operator">=</span> <span class="token class-name">MCBrowserViewController</span><span class="token punctuation">(</span>serviceType<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;hws-project25&quot;</span></span><span class="token punctuation">,</span> session<span class="token punctuation">:</span> mcSession<span class="token punctuation">)</span></span>
<span class="line">    mcBrowser<span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token keyword">self</span></span>
<span class="line">    <span class="token function">present</span><span class="token punctuation">(</span>mcBrowser<span class="token punctuation">,</span> animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We&#39;re making our view controller the delegate of a second object, so that&#39;s two protocols we need to conform to in order to fix our current compile failures. Easily done: add <code>MCSessionDelegate</code> and <code>MCBrowserViewControllerDelegate</code> to your class definition… and now there are even more errors, because we need to implement lots of new methods.</p>`,23),X=n("h3",{id:"invitation-only-mcpeerid",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#invitation-only-mcpeerid"},[n("span",null,[a("Invitation only: "),n("code",null,"MCPeerID")])])],-1),J={class:"hint-container details"},Z=n("summary",null,"Invitation only: MCPeerID",-1),Q=r(`<p>Merely by saying that we conform to the <code>MCSessionDelegate</code> and <code>MCBrowserViewControllerDelegate</code> protocols, your code won&#39;t build any more. This is because the two protocols combined have seven required methods that you need to implement just to be compatible.</p><p>Helpfully, for this project you can effectively ignore three of them, two more are trivial, and one further is just for diagnostic information in this project. That leaves only one method that is non-trivial and important to the program.</p><p>Let&#39;s tackle the ones we can effectively <em>ignore</em>. Of course, you can&#39;t ignore required methods, otherwise they wouldn&#39;t be required. But these methods aren&#39;t ones that do anything useful to our program, so we can just create empty methods. Remember, once you&#39;ve said you conform to a protocol, Xcode&#39;s code completion is updated so you can just start typing the first few letters of a method name in order to have Xcode prompt you with a list to choose from.</p><p>Here are the three methods that we need to provide, but don&#39;t actually need any code inside them:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">session</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> session<span class="token punctuation">:</span> <span class="token class-name">MCSession</span><span class="token punctuation">,</span> didReceive stream<span class="token punctuation">:</span> <span class="token class-name">InputStream</span><span class="token punctuation">,</span> withName streamName<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> fromPeer peerID<span class="token punctuation">:</span> <span class="token class-name">MCPeerID</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">session</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> session<span class="token punctuation">:</span> <span class="token class-name">MCSession</span><span class="token punctuation">,</span> didStartReceivingResourceWithName resourceName<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> fromPeer peerID<span class="token punctuation">:</span> <span class="token class-name">MCPeerID</span><span class="token punctuation">,</span> with progress<span class="token punctuation">:</span> <span class="token class-name">Progress</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">session</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> session<span class="token punctuation">:</span> <span class="token class-name">MCSession</span><span class="token punctuation">,</span> didFinishReceivingResourceWithName resourceName<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> fromPeer peerID<span class="token punctuation">:</span> <span class="token class-name">MCPeerID</span><span class="token punctuation">,</span> at localURL<span class="token punctuation">:</span> <span class="token constant">URL</span><span class="token operator">?</span><span class="token punctuation">,</span> withError error<span class="token punctuation">:</span> <span class="token class-name">Error</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>They are really long, so make sure you use code completion!</p><p>The two methods we&#39;re going to implement that are trivial are both for the multipeer browser: one is called when it finishes successfully, and one when the user cancels. Both methods just need to dismiss the view controller that is currently being presented, which means this is their entire code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">browserViewControllerDidFinish</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> browserViewController<span class="token punctuation">:</span> <span class="token class-name">MCBrowserViewController</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">dismiss</span><span class="token punctuation">(</span>animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">browserViewControllerWasCancelled</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> browserViewController<span class="token punctuation">:</span> <span class="token class-name">MCBrowserViewController</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">dismiss</span><span class="token punctuation">(</span>animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Brilliant! Isn&#39;t it easy being a coder?</p><p>There are two methods left: one that is used in this project only for diagnostic information, and one that&#39;s actually useful. Let&#39;s eliminate the diagnostic method first so that we can focus on the interesting bit.</p><p>When a user connects or disconnects from our session, the method <code>session(_:peer:didChangeState:)</code> is called so you know what&#39;s changed – is someone connecting, are they now connected, or have they just disconnected? We&#39;re not going to be using this information in the project, but I do want to show you how it might be used by printing out some diagnostics. This is helpful for debugging, because it means you can look in Xcode&#39;s debug console to see these messages and know your code is working.</p><p>When this method is called, you&#39;ll be told what peer changed state, and what their new state is. There are only three possible session states: not connected, connecting, and connected. So, we can make our app print out useful information just by using switch/case and a bit of <code>print()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">session</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> session<span class="token punctuation">:</span> <span class="token class-name">MCSession</span><span class="token punctuation">,</span> peer peerID<span class="token punctuation">:</span> <span class="token class-name">MCPeerID</span><span class="token punctuation">,</span> didChange state<span class="token punctuation">:</span> <span class="token class-name">MCSessionState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">switch</span> state <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span>connected<span class="token punctuation">:</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Connected: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">peerID<span class="token punctuation">.</span>displayName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span>connecting<span class="token punctuation">:</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Connecting: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">peerID<span class="token punctuation">.</span>displayName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">case</span> <span class="token punctuation">.</span>notConnected<span class="token punctuation">:</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Not Connected: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">peerID<span class="token punctuation">.</span>displayName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token attribute atrule">@unknown</span> <span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Unknown state received: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">peerID<span class="token punctuation">.</span>displayName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There’s one final case in there to handle any unknown cases that crop up in the future. While we <em>could</em> have made one of the other cases handle that using a regular <code>default</code> case, in this project none of them really make sense for whatever might occur in the future so I’ve added a dedicated <code>@unknown default</code> case to handle future cases.</p><p>That just leaves one more method that must be implemented before you&#39;re fully compliant with the protocols, but before I talk you through it you need to know how the core of this app works. It&#39;s not hard, but it is important, so listen carefully!</p><p>Right now, when we add a picture to the collection view it is shown on our screen but doesn&#39;t go anywhere. We&#39;re going to add some code to the image picker&#39;s <code>didFinishPickingMediaWithInfo</code> method so that when an image is added it also gets sent out to peers.</p><p>Sending images across a multipeer connection is remarkably easy. In project 10 we used the function <code>jpegData()</code> to convert a <code>UIImage</code> object into a <code>Data</code> so it can be saved to disk, and here we’ll be using <code>pngData()</code> that does the same thing with the PNG image format. Once we have that, <code>MCSession</code> objects have a <code>sendData()</code> method that will ensure that data gets transmitted reliably to your peers.</p><p>Once the data arrives at each peer, the method <code>session(_:didReceive:fromPeer:)</code> will get called with that data, at which point we can create a <code>UIImage</code> from it and add it to our <code>images</code> array. There is one catch: when you receive data it might not be on the main thread, and you never manipulate user interfaces anywhere but the main thread, right? Right.</p><p>Here&#39;s the final protocol method, to catch data being received in our session:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">session</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> session<span class="token punctuation">:</span> <span class="token class-name">MCSession</span><span class="token punctuation">,</span> didReceive data<span class="token punctuation">:</span> <span class="token class-name">Data</span><span class="token punctuation">,</span> fromPeer peerID<span class="token punctuation">:</span> <span class="token class-name">MCPeerID</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">DispatchQueue</span><span class="token punctuation">.</span>main<span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token keyword">weak</span> <span class="token keyword">self</span><span class="token punctuation">]</span> <span class="token keyword">in</span>    </span>
<span class="line">        <span class="token keyword">if</span> <span class="token keyword">let</span> image <span class="token operator">=</span> <span class="token class-name">UIImage</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span>images<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> at<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">self</span><span class="token operator">?</span><span class="token punctuation">.</span>collectionView<span class="token punctuation">.</span><span class="token function">reloadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Take note of the call to <code>async()</code> to ensure we definitely only manipulate the user interface on the main thread!</p><p>The final piece of code to finish up this whole project is the bit that sends image data to peers. This is so easy you might not even believe me. In fact, the code is only as long as it is because there&#39;s some error checking in there.</p><p>This final code needs to:</p><ol><li>Check if we have an active session we can use.</li><li>Check if there are any peers to send to.</li><li>Convert the new image to a <code>Data</code> object.</li><li>Send it to all peers, ensuring it gets delivered.</li><li>Show an error message if there&#39;s a problem.</li></ol><p>Converting that into code, you get the below. Put this into your <code>didFinishPickingMediaWithInfo</code> method, just after the call to <code>reloadData()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token comment">// 1</span></span>
<span class="line"><span class="token keyword">guard</span> <span class="token keyword">let</span> mcSession <span class="token operator">=</span> mcSession <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2</span></span>
<span class="line"><span class="token keyword">if</span> mcSession<span class="token punctuation">.</span>connectedPeers<span class="token punctuation">.</span>count <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 3</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> imageData <span class="token operator">=</span> image<span class="token punctuation">.</span><span class="token function">pngData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 4</span></span>
<span class="line">        <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">try</span> mcSession<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>imageData<span class="token punctuation">,</span> toPeers<span class="token punctuation">:</span> mcSession<span class="token punctuation">.</span>connectedPeers<span class="token punctuation">,</span> with<span class="token punctuation">:</span> <span class="token punctuation">.</span>reliable<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 5</span></span>
<span class="line">            <span class="token keyword">let</span> ac <span class="token operator">=</span> <span class="token class-name">UIAlertController</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Send error&quot;</span></span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> error<span class="token punctuation">.</span>localizedDescription<span class="token punctuation">,</span> preferredStyle<span class="token punctuation">:</span> <span class="token punctuation">.</span>alert<span class="token punctuation">)</span></span>
<span class="line">            ac<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">UIAlertAction</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;OK&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">present</span><span class="token punctuation">(</span>ac<span class="token punctuation">,</span> animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Yes, the code to ensure data gets sent intact to all peers, as opposed to having some parts lost in the ether, is just to use transmission mode <code>.reliable</code> – nothing more.</p><p>It’s possible that sending data might throw errors, so we need to surround our code in a <code>do/catch</code> block as shown above. When any error is thrown in the <code>do</code> block, Swift immediately jumps straight to the <code>catch</code> block where you can handle it – or in our case show a message. Swift automatically creates an <code>error</code> constant telling you what went wrong.</p><p>Anyway, I hope you&#39;ll agree that the multipeer connectivity framework is super easy to use. The advertiser assistant takes care of telling the world that our app is looking for connections, as well as handling people who want to join. The browser controller takes care of finding all compatible sessions, and sending invitations. Our job is just to hook it all together with a nice user interface, then relax and wait for the App Store riches to come in. Sort of.</p><p><strong>Remember</strong>: to test your project, you&#39;ll need to either run it on multiple devices, or use one device and one simulator.</p>`,30),Y=n("hr",null,null,-1);function $(d,nn){const e=l("router-link"),t=l("VPCard"),c=l("VidStack"),u=l("FontIcon");return w(),h("div",null,[n("h1",v,[n("a",f,[n("span",null,m(d.$frontmatter.title)+" 관련",1)])]),n("nav",y,[n("ul",null,[n("li",null,[s(e,{to:"#project-25-part-one"},{default:o(()=>[a("Project 25, part one")]),_:1}),n("ul",null,[n("li",null,[s(e,{to:"#setting-up"},{default:o(()=>[a("Setting up")]),_:1})]),n("li",null,[s(e,{to:"#importing-photos-again"},{default:o(()=>[a("Importing photos again")]),_:1})]),n("li",null,[s(e,{to:"#going-peer-to-peer-mcsession-mcbrowserviewcontroller"},{default:o(()=>[a("Going peer to peer: MCSession, MCBrowserViewController")]),_:1})]),n("li",null,[s(e,{to:"#invitation-only-mcpeerid"},{default:o(()=>[a("Invitation only: MCPeerID")]),_:1})])])])])]),b,s(t,i(p({title:"100 Days of Swift - Day 83",desc:"Project 25, part one",link:"https://www.hackingwithswift.com/100/83",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),I,C,_,j,S,D,n("details",M,[P,s(t,i(p({title:"100 Days of Swift - Day 83 - Setting up",desc:"Setting up",link:"https://www.hackingwithswift.com/read/25/1/setting-up",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(c,{src:"youtube/1KnE6UpWvf8"}),A,q,V]),x,n("details",T,[B,s(t,i(p({title:"100 Days of Swift - Day 83 - Importing photos again",desc:"Importing photos again",link:"https://www.hackingwithswift.com/read/25/2/importing-photos-again",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(c,{src:"youtube/Uw1C0JCEprA"}),U,n("p",null,[a("We need to use a collection view controller, just like in project 10. So, start by opening "),s(u,{icon:"fa-brands fa-swift"}),W,a(" and changing this line:")]),N,n("p",null,[a("Now open "),s(u,{icon:"fas fa-file-lines"}),R,a(" in Interface Builder, then delete the existing view controller and replace it with a new collection view controller. Use the attributes inspector to make it the initial view controller, use the identity inspector to give it the class “ViewController”, then finally embed it inside a navigation controller.")]),F,H,n("p",null,[a("We’re done with Interface Builder, so open up "),s(u,{icon:"fa-brands fa-swift"}),L,a(" because it’s time to write the code. Note that almost all of this has been covered in other projects, so we're not going to waste much time here when there are far more interesting things around the corner!")]),O]),G,n("details",E,[K,s(t,i(p({title:"100 Days of Swift - Day 83 - Going peer to peer: MCSession, MCBrowserViewController",desc:"Going peer to peer: MCSession, MCBrowserViewController",link:"https://www.hackingwithswift.com/read/25/3/going-peer-to-peer-mcsession-mcbrowserviewcontroller",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(c,{src:"youtube/p_8TRJAoevA"}),z]),X,n("details",J,[Z,s(t,i(p({title:"100 Days of Swift - Day 83 - Invitation only: MCPeerID",desc:"Invitation only: MCPeerID",link:"https://www.hackingwithswift.com/read/25/4/invitation-only-mcpeerid",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(c,{src:"youtube/ak4vK2ICg9M"}),Q]),Y])}const en=k(g,[["render",$],["__file","83.html.vue"]]),tn=JSON.parse('{"path":"/swift/100-days-of-swift/83.html","title":"Day 83","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 83","description":"100 Days of Swift > Day 83","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of Swift > Day 83"},{"property":"og:description","content":"Day 83"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swift/83.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swift/83.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 83"}],["meta",{"property":"og:description","content":"100 Days of Swift > Day 83"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 83\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 25, part one","slug":"project-25-part-one","link":"#project-25-part-one","children":[{"level":3,"title":"Setting up","slug":"setting-up","link":"#setting-up","children":[]},{"level":3,"title":"Importing photos again","slug":"importing-photos-again","link":"#importing-photos-again","children":[]},{"level":3,"title":"Going peer to peer: MCSession, MCBrowserViewController","slug":"going-peer-to-peer-mcsession-mcbrowserviewcontroller","link":"#going-peer-to-peer-mcsession-mcbrowserviewcontroller","children":[]},{"level":3,"title":"Invitation only: MCPeerID","slug":"invitation-only-mcpeerid","link":"#invitation-only-mcpeerid","children":[]}]}],"git":{"createdTime":1703739559000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":12}]},"readingTime":{"minutes":11.42,"words":3425},"filePathRelative":"swift/100-days-of-swift/83.md","localizedDate":"2023년 12월 28일","excerpt":"\\n\\n<hr>\\n"}');export{en as comp,tn as data};
