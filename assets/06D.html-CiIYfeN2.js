import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as e,t as d,b as a,n as m,g as u,d as s,e as t,r as o,o as h}from"./app-U_bew1in.js";const b={},v={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},k=e("nav",{class:"table-of-contents"},[e("ul")],-1),_=e("hr",null,null,-1),g=e("p",null,"Docker 데이터 볼륨은 데이터를 컨테이너가 아닌 호스트에 저장하는 방식입니다. 따라서 데이터볼륨은 컨테이너끼리 데이터를 공유할 때 활용할 수 있습니다.",-1),y=e("p",null,[s("Docker 컨테이너 안의 파일 변경 사항은 Union File System에 의해 관리됩니다. 하지만 데이터 볼륨은 Union File System을 통하지 않고 바로 호스트에 저장됩니다. 따라서 "),e("code",null,"docker commit"),s(" 명령을 통해 이미지로 생성해도 데이터 볼륨의 변경 사항은 이미지에 포함되지 않습니다.")],-1),D=e("figure",null,[e("img",{src:"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/5.png",alt:"Docker 데이터 볼륨",tabindex:"0",loading:"lazy"}),e("figcaption",null,"Docker 데이터 볼륨")],-1),w=e("code",null,"/data",-1),x=e("code",null,"/data",-1),U=e("code",null,"hello",-1),T=e("code",null,"exit",-1),j=t(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-i</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">--name</span> hello-volume <span class="token parameter variable">-v</span> /data ubuntu /bin/bash</span>
<span class="line"><span class="token builtin class-name">cd</span> /data/</span>
<span class="line"><span class="token function">touch</span> hello</span>
<span class="line"><span class="token builtin class-name">exit</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>데이터 볼륨 옵션은 <code>-v &lt;컨테이너 디렉터리&gt;</code> 형식입니다.</p><p><code>docker inspect</code> 명령으로 <code>hello-volume</code> 컨테이너의 데이터 볼륨 경로를 확인합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> inspect <span class="token parameter variable">-f</span> <span class="token string">&quot;{{ .Mounts }}&quot;</span> hello-volume</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># [{volume ebf7f26c7875a77fb7dbb743efa55d9da5f29dbb7d9ef77307b696223dab81f9 /var/lib/docker/volumes/ebf7f26c7875a77fb7dbb743efa55d9da5f29dbb7d9ef77307b696223dab81f9/_data /data local  true }]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),A=e("code",null,"ls",-1),H=e("code",null,"/var/lib/docker/vfs/dir/xxxx",-1),L=t(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">ls</span> /var/lib/docker/volumes/ebf7f26c7875a77fb7dbb743efa55d9da5f29dbb7d9ef77307b696223dab81f9/_data</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># hello</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),B=e("code",null,"hello",-1),S=e("p",null,"이번에는 데이터 볼륨을 사용하여 컨테이너끼리 데이터를 공유해보겠습니다.",-1),P=e("figure",null,[e("img",{src:"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/6.png",alt:"Docker 데이터 볼륨으로 데이터 공유",tabindex:"0",loading:"lazy"}),e("figcaption",null,"Docker 데이터 볼륨으로 데이터 공유")],-1),R=e("code",null,"/data",-1),V=e("code",null,"world",-1),Z=e("code",null,"exit",-1),N=t(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-i</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">--name</span> hello-volume1 <span class="token parameter variable">-v</span> /root/data:/data ubuntu /bin/bash</span>
<span class="line"><span class="token builtin class-name">cd</span> /data</span>
<span class="line"><span class="token function">touch</span> world</span>
<span class="line"><span class="token builtin class-name">exit</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),z=e("code",null,"-v <호스트 디렉터리>:<컨테이너 디렉터리>",-1),C=e("code",null,"/root/data",-1),F=e("code",null,"/data",-1),I=e("code",null,"/root/data",-1),E=t(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">ls</span> /root/data</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># world</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),K=e("code",null,"world",-1),M=e("code",null,"/data",-1),O=t(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-i</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">--name</span> hello-volume2 <span class="token parameter variable">-v</span> /root/data:/data ubuntu /bin/bash</span>
<span class="line"><span class="token function">ls</span> /data</span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># world</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),q=e("code",null,"world",-1),J=e("code",null,"hello-volume2",-1),$=e("code",null,"/data",-1),G=e("code",null,"hello-volume1",-1),Q=e("hr",null,null,-1);function W(l,X){const i=o("VPCard"),c=o("SiteInfo"),n=o("FontIcon");return h(),p("div",null,[e("h1",v,[e("a",f,[e("span",null,d(l.$frontmatter.title)+" 관련",1)])]),a(i,m(u({title:"목차",desc:"언제나 최신 Docker",link:"/docker/always-up-to-date-docker/README.md",logo:"https://pyrasis.com/assets/images/pyrasis.png",background:"rgba(31,41,55,0.2)"})),null,16),k,_,a(c,{name:"6장 - 4. Docker 데이터 볼륨 사용하기",desc:"언제나 최신 Docker",url:"https://pyrasis.com/jHLsAlwaysUpToDateDocker/Unit06/04",logo:"https://pyrasis.com/assets/images/pyrasis.png",preview:"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/5.png"}),g,y,D,e("p",null,[s("다음 명령을 입력하면 컨테이너 안의 "),a(n,{icon:"fas fa-folder-open"}),w,s(" 디렉터리가 데이터 볼륨으로 설정됩니다. 컨테이너의 Bash 셸이 실행되면 "),a(n,{icon:"fas fa-folder-open"}),x,s(" 디렉터리로 이동한 뒤 "),a(n,{icon:"fas fa-file-lines"}),U,s("라는 빈 파일을 생성합니다. 그리고 "),T,s("를 입력하여 Bash 셸에서 빠져나옵니다.")]),j,e("p",null,[A,s(" 명령으로 앞에서 알아낸 디렉터리("),a(n,{icon:"fas fa-folder-open"}),H,s(")안의 파일 목록을 출력합니다. 이 디렉터리는 컨테이너를 생성할 때마다 함께 생성됩니다.")]),L,e("p",null,[s("앞에서 생성한 "),a(n,{icon:"fas fa-file-lines"}),B,s(" 파일이 보입니다. 이 디렉터리에 파일을 생성하면 컨테이너 안에서도 사용할 수 있습니다.")]),S,P,e("p",null,[s("다음 명령을 실행하여 컨테이너를 생성하고 데이터 볼륨을 설정합니다. 컨테이너의 Bash 셸이 실행되면 "),a(n,{icon:"fas fa-folder-open"}),R,s(" 디렉터리로 이동한 뒤 "),a(n,{icon:"fas fa-file-lines"}),V,s("라는 빈 파일을 생성합니다. 그리고 "),Z,s("를 입력하여 Bash 셸에서 빠져나옵니다.")]),N,e("p",null,[s("데이터 볼륨 옵션은 "),z,s(" 형식입니다. 여기서는 호스트의 "),a(n,{icon:"fas fa-folder-open"}),C,s(" 디렉터리를 Docker 컨테이너의 "),a(n,{icon:"fas fa-folder-open"}),F,s(" 디렉터리에 연결합니다.")]),e("p",null,[s("."),a(n,{icon:"fas fa-folder-open"}),I,s(" 디렉터리의 파일 목록을 출력합니다.")]),E,e("p",null,[s("앞에서 생성한 "),a(n,{icon:"fas fa-file-lines"}),K,s(" 파일이 보입니다.")]),e("p",null,[s("이제 두 번째 컨테이너를 생성합니다. 컨테이너의 Bash 셸이 실행되면 "),a(n,{icon:"fas fa-folder-open"}),M,s(" 디렉터리의 파일 목록을 출력합니다.")]),O,e("p",null,[s("앞에서 생성한 "),a(n,{icon:"fas fa-file-lines"}),q,s(" 파일이 "),J,s(" 파일에서도 보입니다. "),a(n,{icon:"fas fa-folder-open"}),$,s(" 디렉터리에 파일을 생성하면 호스트 및 "),G,s(" 컨테이너에서도 사용할 수 있습니다. 이렇게 데이터 볼륨 설정을 통해 컨테이너끼리 데이터를 공유할 수 있습니다.")]),Q])}const se=r(b,[["render",W],["__file","06D.html.vue"]]),ae=JSON.parse('{"path":"/docker/always-up-to-date-docker/06D.html","title":"06D. Docker 데이터 볼륨 사용하기","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"06D. Docker 데이터 볼륨 사용하기","description":"언제나 최신 Docker > 06D. Docker 데이터 볼륨 사용하기","category":["DevOps","Docker"],"tag":["crashcourse","pyrasis.com","docker","devops"],"head":[[{"meta":null},{"property":"og:title","content":"언제나 최신 Docker > 06D. Docker 데이터 볼륨 사용하기"},{"property":"og:description","content":"06D. Docker 데이터 볼륨 사용하기"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/docker/always-up-to-date-docker/06D.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/docker/always-up-to-date-docker/06D.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"06D. Docker 데이터 볼륨 사용하기"}],["meta",{"property":"og:description","content":"언제나 최신 Docker > 06D. Docker 데이터 볼륨 사용하기"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/5.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/5.png"}],["meta",{"name":"twitter:image:alt","content":"06D. Docker 데이터 볼륨 사용하기"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"pyrasis.com"}],["meta",{"property":"article:tag","content":"docker"}],["meta",{"property":"article:tag","content":"devops"}],["meta",{"property":"article:published_time","content":"2022-10-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"06D. Docker 데이터 볼륨 사용하기\\",\\"image\\":[\\"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/5.png\\",\\"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/6.png\\"],\\"datePublished\\":\\"2022-10-03T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]],"date":"2022-10-03T00:00:00.000Z","isOriginal":false,"cover":"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateDocker/Unit06/5.png"},"headers":[],"git":{"createdTime":1716977950000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":3}]},"readingTime":{"minutes":1.15,"words":344},"filePathRelative":"docker/always-up-to-date-docker/06D.md","localizedDate":"2022년 10월 3일","excerpt":"\\n"}');export{se as comp,ae as data};
