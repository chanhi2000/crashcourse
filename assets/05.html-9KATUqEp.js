import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as n,t as k,b as s,w as i,n as l,g as p,e as a,d as e,r,o as m}from"./app-U_bew1in.js";const v={},w={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},b=n("hr",null,null,-1),y=a('<h2 id="conditions" tabindex="-1"><a class="header-anchor" href="#conditions"><span>Conditions</span></a></h2><p>If there’s one line from Shakespeare’s <em>Hamlet</em> that most people know, it’s “to be or not to be, that is the question.” Shakespeare meant that as the ultimate question of life or death, but it just so happens that Hamlet strikes right at the heart of logic in programming: evaluating whether a condition is true or not.</p><p>Today we’re going to get into the real detail of Swift: operators and conditions, which let us evaluate our program’s state as it runs and take different action depending on the result. There are several ways of doing it and you’ll need them all, but we’ll walk through them step by step so you can see how they compare.</p><p><strong>Today you have four tutorials to work through, where you’ll meet things like <code>if</code>, <code>switch</code>, and more.</strong> Once you’ve watched each video and optionally gone through the extra reading, there’s a short test to help make sure you’ve understood what was taught.</p><h3 id="_1-how-to-check-a-condition-is-true-or-false" tabindex="-1"><a class="header-anchor" href="#_1-how-to-check-a-condition-is-true-or-false"><span>1. How to check a condition is true or false</span></a></h3>',5),q={class:"hint-container details"},_=n("summary",null,"1. How to check a condition is true or false",-1),x=a(`<p>Programs very often make choices:</p><ul><li>If the student’s exam score was over 80 then print a success message.</li><li>If the user entered a name that comes after their friend’s name alphabetically, put the friend’s name first.</li><li>If adding a number to an array makes it contain more than 3 items, remove the oldest one.</li><li>If the user was asked to enter their name and typed nothing at all, give them a default name of “Anonymous”.</li></ul><p>Swift handles these with <code>if</code> statements, which let us check a condition and run some code if the condition is true. They look like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> someCondition <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Do something&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let’s break that down:</p><ol><li>The condition starts with <code>if</code>, which signals to Swift we want to check some kind of condition in our code.</li><li>The <code>someCondition</code> part is where you write your condition – was the score over 80? Does the array contain more than 3 items?</li><li>If the condition is true – if the score really is over 80 – then we print the “Do something” message.</li></ol><p>Of course, that isn’t everything in the code: I didn’t mention the little <code>{</code> and <code>}</code> symbols. These are called braces – opening and closing braces, more specifically – although sometimes you’ll hear them referred to as “curly braces” or “curly brackets”.</p><p>These braces are used extensively in Swift to mark blocks of code: the opening brace starts the block, and the closing brace ends it. <em>Inside</em> the code block is all the code we want to run if our condition happens to be true when it’s checked, which in our case is printing a message.</p><p>You can include as much code in there as you want:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> someCondition <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Do something&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Do something else&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Do a third thing&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Of course, what really matters is the <code>someCondition</code> part, because that’s where your checking code comes in: what condition do you actually want to check?</p><p>Well, let’s try the score example: if a <code>score</code> constant is over 80, let’s print a message. Here’s how that would look in code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> score <span class="token operator">=</span> <span class="token number">85</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> score <span class="token operator">&gt;</span> <span class="token number">80</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Great job!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In that code, <code>score &gt; 80</code> is our condition. You’ll remember <code>&gt;</code> from school meaning “is greater than”, so our complete condition is “if score is greater than 80.” And if it is greater than 80, “Great job!” will be printed – nice!</p><p>That <code>&gt;</code> symbol is a comparison operator, because it compares two things and returns a Boolean result: is the thing on the left greater than the thing on the right? You can also use <code>&lt;</code> for less than, <code>&gt;=</code> for “greater than or equal”, and <code>&lt;=</code> for “less than or equal.”</p><p>Let’s try it out – what do you think this code will print?</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> speed <span class="token operator">=</span> <span class="token number">88</span></span>
<span class="line"><span class="token keyword">let</span> percentage <span class="token operator">=</span> <span class="token number">85</span></span>
<span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">18</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> speed <span class="token operator">&gt;=</span> <span class="token number">88</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Where we&#39;re going we don&#39;t need roads.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> percentage <span class="token operator">&lt;</span> <span class="token number">85</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Sorry, you failed the test.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;You&#39;re eligible to vote&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Try and run the code mentally in your head – which <code>print()</code> lines will actually be run?</p><p>Well, our first one will run if <code>speed</code> is greater than or equal to 88, and because it is exactly 88 the first <code>print()</code> code will be run.</p><p>The second one will run if <code>percentage</code> is less than 85, and because it is exactly 85 the second <code>print()</code> will not run – we used less than, not less than or equal.</p><p>The third will run if <code>age</code> is greater than or equal to 18, and because it’s exactly 18 the third <code>print()</code> will run.</p><p>Now let’s try our second example condition: if the user entered a name that comes after their friend’s name alphabetically, put the friend’s name first. You’ve seen how <code>&lt;</code>, <code>&gt;=</code> and others work great with numbers, but they also work equally well with strings right out of the box:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> ourName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Dave Lister&quot;</span></span></span>
<span class="line"><span class="token keyword">let</span> friendName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Arnold Rimmer&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> ourName <span class="token operator">&lt;</span> friendName <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;It&#39;s </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">ourName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> vs </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">friendName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> ourName <span class="token operator">&gt;</span> friendName <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;It&#39;s </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">friendName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> vs </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">ourName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So, if the string inside <code>ourName</code> comes before the string inside <code>friendName</code> when sorted alphabetically, it prints <code>ourName</code> first then <code>friendName</code>, exactly as we wanted.</p><p>Let’s take a look at our third example condition: if adding a number to an array makes it contain more than 3 items, remove the oldest one. You’ve already met <code>append()</code>, <code>count</code>, <code>and remove(at:)</code>, so we can now put all three together with a condition like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token comment">// Make an array of 3 numbers</span></span>
<span class="line"><span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Add a 4th</span></span>
<span class="line">numbers<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// If we have over 3 items</span></span>
<span class="line"><span class="token keyword">if</span> numbers<span class="token punctuation">.</span>count <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Remove the oldest number</span></span>
<span class="line">    numbers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Display the result</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now let’s look at our fourth example condition: if the user was asked to enter their name and typed nothing at all, give them a default name of “Anonymous”.</p><p>To solve this you’ll first need to meet two other comparison operators you’ll use a lot, both of which handle equality. The first is <code>==</code> and means “is equal to,” which is used like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> country <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Canada&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> country <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;Australia&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;G&#39;day!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The second is <code>!=</code>, which means “is not equal to”, and is used like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Taylor Swift&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> name <span class="token operator">!=</span> <span class="token string-literal"><span class="token string">&quot;Anonymous&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Welcome, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In our case, we want to check whether the username entered by the user is empty, which we could do like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token comment">// Create the username variable</span></span>
<span class="line"><span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;taylorswift13&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// If \`username\` contains an empty string</span></span>
<span class="line"><span class="token keyword">if</span> username <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Make it equal to &quot;Anonymous&quot;</span></span>
<span class="line">    username <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Anonymous&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Now print a welcome message</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Welcome, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">username</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That <code>&quot;&quot;</code> is an empty string: we start the string and end the string, with nothing in between. By comparing <code>username</code> to that, we’re checking if the user also entered an empty string for their username, which is exactly what we want.</p><p>Now, there are other ways of doing this check, and it’s important you understand what they do.</p><p>First, we could compare the <code>count</code> of the string – how many letters it has – against 0, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> username<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">    username <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Anonymous&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Comparing one string against another isn’t very fast in any language, so we’ve replaced the string comparison with an integer comparison: does the number of letters in the string equal 0?</p><p>In many languages that’s very fast, but not in Swift. You see, Swift supports all sorts of complex strings – literally every human language works out of the box, including emoji, and that just isn’t true in so many other programming languages. However, this really great support has a cost, and one part of that cost is that asking a string for its <code>count</code> makes Swift go through and count up all the letters one by one – it doesn’t just store its length separately from the string.</p><p>So, think about the situation where you have a massive string that stores the complete works of Shakespeare. Our little check for <code>count == 0</code> has to go through and count all the letters in the string, even though as soon as we have counted at least one character we know the answer to our question.</p><p>As a result, Swift adds a second piece of functionality to all its strings, arrays, dictionaries, and sets: <code>isEmpty</code>. This will send back <code>true</code> if the thing you’re checking has nothing inside, and we can use it to fix our condition like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> username<span class="token punctuation">.</span>isEmpty <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">{</span></span>
<span class="line">    username <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Anonymous&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That’s better, but we can go one step further. You see, ultimately what matters is that your condition must boil down to either true or false; Swift won’t allow anything else. In our case, <code>username.isEmpty</code> is already a Boolean, meaning it will be true or false, so we can make our code even simpler:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> username<span class="token punctuation">.</span>isEmpty <span class="token punctuation">{</span></span>
<span class="line">    username <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Anonymous&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If <code>isEmpty</code> is true the condition passes and <code>username</code> gets set to Anonymous, otherwise the condition fails.</p>`,45),I=a('<div class="hint-container info"><p class="hint-container-title">1. How to check a condition is true or false - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/how-does-swift-let-us-compare-many-types-of-data" target="_blank" rel="noopener noreferrer">How does Swift let us compare many types of data?</a></li></ul></div><h3 id="_2-how-to-check-multiple-conditions" tabindex="-1"><a class="header-anchor" href="#_2-how-to-check-multiple-conditions"><span>2. How to check multiple conditions</span></a></h3>',2),S={class:"hint-container details"},T=n("summary",null,"2. How to check multiple conditions",-1),j=a(`<p>When we use <code>if</code> we must provide Swift some kind of condition that will either be true or false once it has been evaluated. If you want to check for several different values, you can place them one after the other like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">16</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;You can vote in the next election.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">18</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Sorry, you&#39;re too young to vote.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, that’s not very efficient if you think about it: our two conditions are mutually exclusive, because if someone is greater than or equal to 18 (the first condition) then they can’t be less than 18 (the second condition), and the opposite is also true. We’re making Swift do work that just isn’t needed.</p><p>In this situation, Swift provides us with a more advanced condition that lets us add an <code>else</code> block to our code – some code to run if the condition is not true.</p><p>Using <code>else</code> we could rewrite our previous code to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">16</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;You can vote in the next election.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Sorry, you&#39;re too young to vote.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now Swift only needs to check <code>age</code> once: if it’s greater than or equal to 18 the first <code>print()</code> code is run, but if it’s any value less than 18 the second <code>print()</code> code is run.</p><p>So, now our condition looks like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> someCondition <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;This will run if the condition is true&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;This will run if the condition is false&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There’s an even more advanced condition called <code>else if</code>, which lets you run a new check if the first one fails. You can have just one of these if you want, or have multiple <code>else if</code>, and even combine <code>else if</code> with an <code>else</code> if needed. However, you can only ever have one <code>else</code>, because that means “if all the other conditions have been false.”</p><p>Here’s how that looks:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> a <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Code to run if a is true&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> b <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Code to run if a is false but b is true&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Code to run if both a and b are false&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can keep on adding more and more <code>else if</code> conditions if you want, but watch out that your code doesn’t get too complicated!</p><p>As well as using <code>else</code> and <code>else if</code> to make more advanced conditions, you can also check more than one thing. For example, we might want to say “if today’s temperature is over 20 degrees Celsius but under 30, print a message.”</p><p>This has two conditions, so we could write this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token number">25</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> temp <span class="token operator">&gt;</span> <span class="token number">20</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> temp <span class="token operator">&lt;</span> <span class="token number">30</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;It&#39;s a nice day.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Although that works well enough, Swift provides a shorter alternative: we can use <code>&amp;&amp;</code> to combine two conditions together, and the whole condition will only be true if the two parts inside the condition are true.</p><p>So, we could change our code to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> temp <span class="token operator">&gt;</span> <span class="token number">20</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">&lt;</span> <span class="token number">30</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;It&#39;s a nice day.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You should read <code>&amp;&amp;</code> as “and”, so our whole conditions reads “if temp is greater than 20 and temp is less than 30, print a message.” It’s called a <em>logical operator</em> because it combines Booleans to make a new Boolean.</p><p><code>&amp;&amp;</code> has a counterpart that is two pipe symbols, <code>||</code>, which means “or”. Whereas <code>&amp;&amp;</code> will only make a condition be true if both subconditions are true, <code>||</code> will make a condition be true if either subcondition is true.</p><p>For example, we could say that a user can buy a game if they are at least 18, or if they are under 18 they must have permission from a parent. We could write that using <code>||</code> like so:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> userAge <span class="token operator">=</span> <span class="token number">14</span></span>
<span class="line"><span class="token keyword">let</span> hasParentalConsent <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> userAge <span class="token operator">&gt;=</span> <span class="token number">18</span> <span class="token operator">||</span> hasParentalConsent <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;You can buy the game&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That will print “You can buy the game”, because although the first half of our condition fails – the user is not at least 18 – the second half passes, because they do have parental consent.</p><p>Remember, using <code>== true</code> in a condition can be removed, because we’re obviously already checking a Boolean. So, we could write this instead:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> userAge <span class="token operator">&gt;=</span> <span class="token number">18</span> <span class="token operator">||</span> hasParentalConsent <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;You can buy the game&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To finish up with checking multiple conditions, let’s try a more complex example that combines <code>if</code>, <code>else if</code>, <code>else</code>, and <code>||</code> all at the same time, and even shows off how enums fit into conditions.</p><p>In this example we’re going to create an enum called <code>TransportOption</code>, which contains five cases: airplane, helicopter, bicycle, car, and scooter. We’ll then assign an example value to a constant, and run some checks:</p><ul><li>If we are going somewhere by airplane or by helicopter, we’ll print “Let’s fly!”</li><li>If we’re going by bicycle, we’ll print “I hope there’s a bike path…”</li><li>If we’re going by car, we’ll print “Time to get stuck in traffic.”</li><li>Otherwise we’ll print “I’m going to hire a scooter now!”</li></ul><p>Here’s the code for that:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">TransportOption</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> airplane<span class="token punctuation">,</span> helicopter<span class="token punctuation">,</span> bicycle<span class="token punctuation">,</span> car<span class="token punctuation">,</span> scooter</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> transport <span class="token operator">=</span> <span class="token class-name">TransportOption</span><span class="token punctuation">.</span>airplane</span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> transport <span class="token operator">==</span> <span class="token punctuation">.</span>airplane <span class="token operator">||</span> transport <span class="token operator">==</span> <span class="token punctuation">.</span>helicopter <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Let&#39;s fly!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> transport <span class="token operator">==</span> <span class="token punctuation">.</span>bicycle <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I hope there&#39;s a bike path…&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> transport <span class="token operator">==</span> <span class="token punctuation">.</span>car <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Time to get stuck in traffic.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I&#39;m going to hire a scooter now!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I’d like to pick out a few parts of that code:</p><ol><li>When we set the value for <code>transport</code> we need to be explicit that we’re referring to <code>TransportOption.airplane</code>. We can’t just write <code>.airplane</code> because Swift doesn’t understand we mean the <code>TransportOption</code> enum.</li><li>Once that has happened, we don’t need to write <code>TransportOption</code> any more because Swift knows transport must be some kind of <code>TransportOption</code>. So, we can check whether it’s equal to <code>.airplane</code> rather than <code>TransportOption.airplane</code>.</li><li>The code using <code>||</code> to check whether <code>transport</code> is equal to <code>.airplane</code> or equal to <code>.helicopter</code>, and if either of them are true then the condition is true, and “Let’s fly!” is printed.</li><li>If the first condition fails – if the transport mode isn’t <code>.airplane</code> or <code>.helicopter</code> – then the second condition is run: is the transport mode <code>.bicycle</code>? If so, “I hope there’s a bike path…” is printed.</li><li>If we aren’t going by bicycle either, then we check whether we’re going by car. If we are, “Time to get stuck in traffic.” is printed.</li><li>Finally, if all the previous conditions fail then the <code>else</code> block is run, and it means we’re going by scooter.</li></ol>`,33),W=a('<div class="hint-container info"><p class="hint-container-title">2. How to check multiple conditions - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/whats-the-difference-between-if-and-else-if" target="_blank" rel="noopener noreferrer">What’s the difference between if and else if?</a></li><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/how-to-check-multiple-conditions" target="_blank" rel="noopener noreferrer">How to check multiple conditions</a></li><li>Test: <a href="https://hackingwithswift.com/review/sixty/conditions" target="_blank" rel="noopener noreferrer">Conditions</a></li><li>Test: <a href="https://hackingwithswift.com/review/sixty/combining-conditions" target="_blank" rel="noopener noreferrer">Combining conditions</a></li></ul></div><h3 id="_3-how-to-use-switch-statements-to-check-multiple-conditions" tabindex="-1"><a class="header-anchor" href="#_3-how-to-use-switch-statements-to-check-multiple-conditions"><span>3. How to use switch statements to check multiple conditions</span></a></h3>',2),H={class:"hint-container details"},D=n("summary",null,"3. How to use switch statements to check multiple conditions",-1),A=a(`<p>You can use <code>if</code> and <code>else if</code> repeatedly to check conditions as many times as you want, but it gets a bit hard to read. For example, if we had a weather forecast from an enum we could choose which message to print based on a series of conditions, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">Weather</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> sun<span class="token punctuation">,</span> rain<span class="token punctuation">,</span> wind<span class="token punctuation">,</span> snow<span class="token punctuation">,</span> unknown</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> forecast <span class="token operator">=</span> <span class="token class-name">Weather</span><span class="token punctuation">.</span>sun</span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> forecast <span class="token operator">==</span> <span class="token punctuation">.</span>sun <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;It should be a nice day.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> forecast <span class="token operator">==</span> <span class="token punctuation">.</span>rain <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Pack an umbrella.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> forecast <span class="token operator">==</span> <span class="token punctuation">.</span>wind <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Wear something warm&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> forecast <span class="token operator">==</span> <span class="token punctuation">.</span>rain <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;School is cancelled.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Our forecast generator is broken!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That works, but it has problems:</p><ol><li>We keep having to write <code>forecast</code>, even though we’re checking the same thing each time.</li><li>I accidentally checked <code>.rain</code> twice, even though the second check can never be true because the second check is only performed if the first check failed.</li><li>I didn’t check <code>.snow</code> at all, so we’re missing functionality.</li></ol><p>We can solve all three of those problems using a different way of checking conditions called <code>switch</code>. This also lets us check individual cases one by one, but now Swift is able to help out. In the case of an enum, it knows all possible cases the enum can have, so if we miss one or check one twice it will complain.</p><p>So, we can replace all those <code>if</code> and <code>else if</code> checks with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">switch</span> forecast <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token punctuation">.</span>sun<span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;It should be a nice day.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token punctuation">.</span>rain<span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Pack an umbrella.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token punctuation">.</span>wind<span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Wear something warm&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token punctuation">.</span>snow<span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;School is cancelled.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token punctuation">.</span>unknown<span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Our forecast generator is broken!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Let’s break that down:</p><ol><li>We start with <code>switch forecast</code>, which tells Swift that’s the value we want to check.</li><li>We then have a string of <code>case</code> statements, each of which are values we want to compare against <code>forecast</code>.</li><li>Each of our cases lists one weather type, and because we’re switching on <code>forecast</code> we don’t need to write <code>Weather.sun</code>, <code>Weather.rain</code> and so on – Swift knows it must be some kind of <code>Weather</code>.</li><li>After each case, we write a colon to mark the start of the code to run if that case is matched.</li><li>We use a closing brace to end the <code>switch</code> statement.</li></ol><p>If you try changing <code>.snow</code> for <code>.rain</code>, you’ll see Swift complains loudly: once that we’ve checked <code>.rain</code> twice, and again that our <code>switch</code> statement is not exhaustive – that it doesn’t handle all possible cases.</p><p>If you’ve ever used other programming languages, you might have noticed that Swift’s switch statement is different in two places:</p><ol><li>All <code>switch</code> statements must be exhaustive, meaning that all possible values must be handled in there so you can’t leave one off by accident.</li><li>Swift will execute the first case that matches the condition you’re checking, but no more. Other languages often carry on executing other code from all subsequent cases, which is usually entirely the wrong default thing to do.</li></ol><p>Although both those statements are true, Swift gives us a little more control if we need it.</p><p>First, yes all <code>switch</code> statements must be exhaustive: you must ensure all possible values are covered. If you’re switching on a string then clearly it’s not possible to make an exhaustive check of all possible strings because there is an infinite number, so instead we need to provide a default case – code to run if none of the other cases match.</p><p>For example, we could switch over a string containing a place name:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> place <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Metropolis&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">switch</span> place <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&quot;Gotham&quot;</span></span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;You&#39;re Batman!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&quot;Mega-City One&quot;</span></span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;You&#39;re Judge Dredd!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token string-literal"><span class="token string">&quot;Wakanda&quot;</span></span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;You&#39;re Black Panther!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Who are you?&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That <code>default:</code> at the end is the default case, which will be run if all cases have failed to match.</p><p><strong>Remember: Swift checks its cases in order and runs the first one that matches.</strong> If you place <code>default</code> before any other case, that case is useless because it will never be matched and Swift will refuse to build your code.</p><p>Second, if you explicitly want Swift to carry on executing subsequent cases, use <code>fallthrough</code>. This is not commonly used, but sometimes – just sometimes – it can help you avoid repeating work.</p><p>For example, there’s a famous Christmas song called The Twelve Days of Christmas, and as the song goes on more and more gifts are heaped on an unfortunate person who by about day six has a rather full house.</p><p>We could make a simple approximation of this song using <code>fallthrough</code>. First, here’s how the code would look without <code>fallthrough</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> day <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;My true love gave to me…&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">switch</span> day <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;5 golden rings&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;4 calling birds&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;3 French hens&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;2 turtle doves&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;A partridge in a pear tree&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That will print “5 golden rings”, which isn’t quite right. On day 1 only “A partridge in a pear tree” should be printed, on day 2 it should be “2 turtle doves” then “A partridge in a pear tree”, on day 3 it should be “3 French hens”, “2 turtle doves”, and… well, you get the idea.</p><p>We can use <code>fallthrough</code> to get exactly that behavior:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> day <span class="token operator">=</span> <span class="token number">5</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;My true love gave to me…&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">switch</span> day <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;5 golden rings&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">fallthrough</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;4 calling birds&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">fallthrough</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;3 French hens&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">fallthrough</span></span>
<span class="line"><span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;2 turtle doves&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">fallthrough</span></span>
<span class="line"><span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;A partridge in a pear tree&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That will match the first case and print “5 golden rings”, but the <code>fallthrough</code> line means <code>case 4</code> will execute and print “4 calling birds”, which in turn uses <code>fallthrough</code> again so that “3 French hens” is printed, and so on. It’s not a perfect match to the song, but at least you can see the functionality in action!</p>`,26),C=a('<div class="hint-container info"><p class="hint-container-title">3. How to use switch statements to check multiple conditions - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-should-you-use-switch-statements-rather-than-if" target="_blank" rel="noopener noreferrer">When should you use switch statements rather than if?</a></li><li>Test: <a href="https://hackingwithswift.com/review/sixty/switch-statements" target="_blank" rel="noopener noreferrer">Switch statements</a></li></ul></div><h3 id="_4-how-to-use-the-ternary-conditional-operator-for-quick-tests" tabindex="-1"><a class="header-anchor" href="#_4-how-to-use-the-ternary-conditional-operator-for-quick-tests"><span>4. How to use the ternary conditional operator for quick tests</span></a></h3>',2),N={class:"hint-container details"},O=n("summary",null,"4. How to use the ternary conditional operator for quick tests",-1),Y=a(`<p>There’s one last way to check conditions in Swift, and when you’ll see it chances are you’ll wonder when it’s useful. To be fair, for a long time I very rarely used this approach, but as you’ll see later it’s really important with SwiftUI.</p><p>This option is called the ternary conditional operator. To understand why it has that name, you first need to know that <code>+</code>, <code>-</code>, <code>==</code>, and so on are all called binary operators because they work with two pieces of input: <code>2 + 5</code>, for example, works with 2 and 5.</p><p>Ternary operators work with three pieces of input, and in fact because the ternary conditional operator is the only ternary operator in Swift, you’ll often hear it called just “the ternary operator.”</p><p>Anyway, enough about names: what does this actually do? Well, the ternary operator lets us check a condition and return one of two values: something if the condition is true, and something if it’s false.</p><p>For example, we could create a constant called <code>age</code> that stores someone’s age, then create a second constant called <code>canVote</code> that will store whether that person is able to vote or not:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">18</span></span>
<span class="line"><span class="token keyword">let</span> canVote <span class="token operator">=</span> age <span class="token operator">&gt;=</span> <span class="token number">18</span> <span class="token operator">?</span> <span class="token string-literal"><span class="token string">&quot;Yes&quot;</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;No&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>When that code runs, <code>canVote</code> will be set to “Yes” because <code>age</code> is set to 18.</p><p>As you can see, the ternary operator is split into three parts: a check (<code>age &gt;= 18</code>), something for when the condition is true (“Yes”), and something for when the condition is false (“No”). That makes it exactly like a regular <code>if</code> and <code>else</code> block, in the same order.</p><p>If it helps, <a href="https://twitter.com/scottmichaud/status/1087510756634083330" target="_blank" rel="noopener noreferrer">Scott Michaud</a> suggested a helpful mnemonic: WTF. It stands for “what, true, false”, and matches the order of our code:</p><ul><li>What is our condition? Well, it’s <code>age &gt;= 18</code>.</li><li>What to do when the condition is true? Send back “Yes”, so it can be stored in <code>canVote</code>.</li><li>And if the condition is false? Send back “No”.</li></ul><p>Let’s look at some other examples, start with an easy one that reads an hour in 24-hour format and prints one of two messages:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> hour <span class="token operator">=</span> <span class="token number">23</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>hour <span class="token operator">&lt;</span> <span class="token number">12</span> <span class="token operator">?</span> <span class="token string-literal"><span class="token string">&quot;It&#39;s before noon&quot;</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;It&#39;s after noon&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice how that doesn’t assign the result anywhere – either the true or false case just gets printed depending on the value of <code>hour</code>.</p><p>Or here’s one that reads the <code>count</code> of an array as part of its condition, then sends back one of two strings:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Jayne&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Kaylee&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Mal&quot;</span></span><span class="token punctuation">]</span>   </span>
<span class="line"><span class="token keyword">let</span> crewCount <span class="token operator">=</span> names<span class="token punctuation">.</span>isEmpty <span class="token operator">?</span> <span class="token string-literal"><span class="token string">&quot;No one&quot;</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">names<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> people&quot;</span></span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>crewCount<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It gets a little hard to read when your condition use <code>==</code> to check for equality, as you can see here:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">Theme</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> light<span class="token punctuation">,</span> dark</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> theme <span class="token operator">=</span> <span class="token class-name">Theme</span><span class="token punctuation">.</span>dark</span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> background <span class="token operator">=</span> theme <span class="token operator">==</span> <span class="token punctuation">.</span>dark <span class="token operator">?</span> <span class="token string-literal"><span class="token string">&quot;black&quot;</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;white&quot;</span></span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>background<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The <code>= theme ==</code> part is usually the bit folks find hard to read, but remember to break it down:</p><ul><li>What? <code>theme == .dark</code></li><li>True: “black”</li><li>False: “white” So if theme is equal to <code>.dark</code> return “Black”, otherwise return “White”, then assign that to <code>background</code>.</li></ul><p>Now, you might be wondering why the ternary operator is useful, particularly when we have regular <code>if</code>/<code>else</code> conditions available to us. I realize it’s not a great answer, but you’ll have to trust me on this: there are some times, particularly with SwiftUI, when we have no choice and must use a ternary.</p><p>You can see roughly what the problem is with our code to check hours:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> hour <span class="token operator">=</span> <span class="token number">23</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>hour <span class="token operator">&lt;</span> <span class="token number">12</span> <span class="token operator">?</span> <span class="token string-literal"><span class="token string">&quot;It&#39;s before noon&quot;</span></span> <span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;It&#39;s after noon&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>If we wanted to write that out using <code>if</code> and <code>else</code> we’d either need to write this invalid code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">if</span> hour <span class="token operator">&lt;</span> <span class="token number">12</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string-literal"><span class="token string">&quot;It&#39;s before noon&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token string-literal"><span class="token string">&quot;It&#39;s after noon&quot;</span></span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Or run <code>print()</code> twice, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">if</span> hour <span class="token operator">&lt;</span> <span class="token number">12</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;It&#39;s before noon&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;It&#39;s after noon&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That second one works fine here, but it becomes almost impossible in SwiftUI as you’ll see much later. So, even though you might look at the ternary operator and wonder why you’d ever use it, please trust me: it matters!</p>`,27),F=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"4. How to use the ternary conditional operator for quick tests - Additional"),n("ul",null,[n("li",null,[e("Optional: "),n("a",{href:"https://hackingwithswift.com/quick-start/understanding-swift/when-should-you-use-the-ternary-operator-in-swift",target:"_blank",rel:"noopener noreferrer"},"When should you use the ternary operator in Swift?")]),n("li",null,[e("Test: "),n("a",{href:"https://hackingwithswift.com/review/sixty/the-ternary-operator",target:"_blank",rel:"noopener noreferrer"},"The ternary operator")])])],-1),U=n("p",null,"Do you remember the two rules of this series? You’re already being awesome at the first one because you keep coming back for more (you rock!), but don’t forget the second: post your progress online, so you can benefit from all the encouragement.",-1),P=n("hr",null,null,-1);function B(u,V){const t=r("router-link"),o=r("VPCard"),c=r("VidStack");return m(),h("div",null,[n("h1",w,[n("a",g,[n("span",null,k(u.$frontmatter.title)+" 관련",1)])]),n("nav",f,[n("ul",null,[n("li",null,[s(t,{to:"#conditions"},{default:i(()=>[e("Conditions")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#_1-how-to-check-a-condition-is-true-or-false"},{default:i(()=>[e("1. How to check a condition is true or false")]),_:1})]),n("li",null,[s(t,{to:"#_2-how-to-check-multiple-conditions"},{default:i(()=>[e("2. How to check multiple conditions")]),_:1})]),n("li",null,[s(t,{to:"#_3-how-to-use-switch-statements-to-check-multiple-conditions"},{default:i(()=>[e("3. How to use switch statements to check multiple conditions")]),_:1})]),n("li",null,[s(t,{to:"#_4-how-to-use-the-ternary-conditional-operator-for-quick-tests"},{default:i(()=>[e("4. How to use the ternary conditional operator for quick tests")]),_:1})])])])])]),b,s(o,l(p({title:"100 Days of SwiftUI - Day 5",desc:"Conditions",link:"https://www.hackingwithswift.com/100/swiftui/5",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),y,n("details",q,[_,s(o,l(p({title:"100 Days of SwiftUI - Day 5 - 1. How to check a condition is true or false",desc:"1. How to check a condition is true or false",link:"https://hackingwithswift.com/quick-start/beginners/how-to-check-a-condition-is-true-or-false",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/PrVO7b-BmdY"}),x]),I,n("details",S,[T,s(o,l(p({title:"100 Days of SwiftUI - Day 5 - 2. How to check multiple conditions",desc:"2. How to check multiple conditions",link:"https://hackingwithswift.com/quick-start/beginners/how-to-check-multiple-conditions",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/vX4wPb0UUD0"}),j]),W,n("details",H,[D,s(o,l(p({title:"100 Days of SwiftUI - Day 5 - 3. How to use switch statements to check multiple conditions",desc:"3. How to use switch statements to check multiple conditions",link:"https://hackingwithswift.com/quick-start/beginners/how-to-use-switch-statements-to-check-multiple-conditions",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/cDpJy4Y7OYE"}),A]),C,n("details",N,[O,s(o,l(p({title:"100 Days of SwiftUI - Day 5 - 4. How to use the ternary conditional operator for quick tests",desc:"4. How to use the ternary conditional operator for quick tests",link:"https://hackingwithswift.com/quick-start/beginners/how-to-use-the-ternary-conditional-operator-for-quick-tests",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(c,{src:"youtube/FToxl_63Unw"}),Y]),F,U,P])}const M=d(v,[["render",B],["__file","05.html.vue"]]),R=JSON.parse('{"path":"/swift/100-days-of-swiftui/05.html","title":"Day 05","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 05","description":"100 Days of SwiftUI > Day 05","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 05"},{"property":"og:description","content":"Day 05"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/05.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/05.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 05"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 05"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 05\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Conditions","slug":"conditions","link":"#conditions","children":[{"level":3,"title":"1. How to check a condition is true or false","slug":"_1-how-to-check-a-condition-is-true-or-false","link":"#_1-how-to-check-a-condition-is-true-or-false","children":[]},{"level":3,"title":"2. How to check multiple conditions","slug":"_2-how-to-check-multiple-conditions","link":"#_2-how-to-check-multiple-conditions","children":[]},{"level":3,"title":"3. How to use switch statements to check multiple conditions","slug":"_3-how-to-use-switch-statements-to-check-multiple-conditions","link":"#_3-how-to-use-switch-statements-to-check-multiple-conditions","children":[]},{"level":3,"title":"4. How to use the ternary conditional operator for quick tests","slug":"_4-how-to-use-the-ternary-conditional-operator-for-quick-tests","link":"#_4-how-to-use-the-ternary-conditional-operator-for-quick-tests","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":8}]},"readingTime":{"minutes":16.85,"words":5055},"filePathRelative":"swift/100-days-of-swiftui/05.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{M as comp,R as data};
