import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as w,a as e,t as g,b as t,w as o,n as i,g as l,d as n,e as p,r as c,o as m}from"./app-U_bew1in.js";const b={},k={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},v=e("hr",null,null,-1),_=p('<h2 id="project-4-part-one" tabindex="-1"><a class="header-anchor" href="#project-4-part-one"><span>Project 4, part one</span></a></h2><p>Alexis Ohanian, the founder of Reddit, once said “to join in the industrial revolution, you needed to open a factory; in the Internet revolution, you need to open a laptop.” Well, thanks to iOS we have something even easier: you just need to tap a button on your iPhone.</p><p>Apple gives us the ability to render any kind of web content just like Safari does, all powered through its open source WebKit framework. This is cross-platform, meaning that we can use it on macOS and iOS just the same, and it’s also blazingly fast as you’ll see in a moment.</p><p>In this project we’re going to build a simple web browser using WebKit. The whole thing takes only about 60 lines of code once you remove comments and empty lines, which shows you just how easy to use WebKit is.</p><p><strong>Today you have three topics to work through, and you’ll meet <code>WKWebView</code>, action sheets, and more.</strong></p><h3 id="setting-up" tabindex="-1"><a class="header-anchor" href="#setting-up"><span>Setting up</span></a></h3>',6),W={class:"hint-container details"},I=e("summary",null,"Setting up",-1),V=p("<p>In this project you&#39;re going to build on your new knowledge of <code>UIBarButtonItem</code> and <code>UIAlertController</code> by producing a simple web browser app. Yes, I realize this is another easy project, but learning is as much about tackling new challenges as going over what you&#39;ve already learned.</p><p>To sweeten the deal, I&#39;m going to use this opportunity to teach you lots of new things: <code>WKWebView</code> (Apple&#39;s extraordinary web widget), <code>UIToolbar</code> (a toolbar component that holds <code>UIBarButtonItems</code>), <code>UIProgressView</code>, delegation, key-value observing, and how to create your views in code. Plus, this is the last easy app project, so enjoy it while it lasts!</p><p>To get started, create a new Xcode project using the Single View App template, and call it Project4. Make sure Swift is selected for the language, then save the project on your desktop.</p>",3),A=e("code",null,"Main.storyboard",-1),j=e("code",null,"[Editor] > [Embed In] > [Navigation Controller]",-1),U=e("h3",{id:"creating-a-simple-browser-with-wkwebview",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#creating-a-simple-browser-with-wkwebview"},[e("span",null,"Creating a simple browser with WKWebView")])],-1),C={class:"hint-container details"},S=e("summary",null,"Creating a simple browser with WKWebView",-1),x=p(`<p>In our first two projects we used Interface Builder for a lot of layout work, but here our layout will be so simple that we can do the entire thing in code. You see, before we were adding buttons and images to our view, but in this project the web view is going to take up all the space so it might as well <em>be</em> the view controller&#39;s main view.</p><p>So far, we&#39;ve been using the <code>viewDidLoad()</code> method to configure our view once its layout has loaded. This time we need to override the actual loading of the view because we don&#39;t want that empty thing on the storyboard, we want our own code. It will still be placed inside the navigation controller, but the rest is up to us.</p><p>iOS has two different ways of working with web views, but the one we’ll be using for this project is called <code>WKWebView</code>. It’s part of the WebKit framework rather than the UIKit framework, but we can import it by adding this line to the top of ViewController.swift:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token class-name">WebKit</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>When we create the web view, we need to store it as a property so we can reference it later on. So, add this property to the class now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> webView<span class="token punctuation">:</span> <span class="token class-name">WKWebView</span><span class="token operator">!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Finally, add this new method <em>before</em> <code>viewDidLoad()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">loadView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    webView <span class="token operator">=</span> <span class="token class-name">WKWebView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    webView<span class="token punctuation">.</span>navigationDelegate <span class="token operator">=</span> <span class="token keyword">self</span></span>
<span class="line">    view <span class="token operator">=</span> webView</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tha t code will trigger a compiler error for now, but we’ll fix it in a moment.</p><p>Note: You don’t need to put <code>loadView()</code> before <code>viewDidLoad()</code>, and in fact you could put it anywhere between class <code>ViewController: UIViewController {</code> down to the last closing brace in the file. However, I encourage you to structure your methods in an organized way, and because <code>loadView()</code> gets called before <code>viewDidLoad()</code> it makes sense to position the code above it too.</p><p>Anyway, there are only three things we care about, because by now you should understand why we need to use the <code>override</code> keyword. (Hint: it&#39;s because there&#39;s a default implementation, which is to load the layout from the storyboard.)</p><p>First, we create a new instance of Apple&#39;s <code>WKWebView</code> web browser component and assign it to the <code>webView</code> property. Third, we make our view (the root view of the view controller) that web view.</p><p>Yes, I missed out the second line, and that&#39;s because it introduces new concept: delegation. Delegation is what&#39;s called a <em>programming pattern</em> – a way of writing code – and it&#39;s used extensively in iOS. And for good reason: it&#39;s easy to understand, easy to use, and extremely flexible.</p><p>A <em>delegate</em> is one thing acting in place of another, effectively answering questions and responding to events on its behalf. In our example, we&#39;re using <code>WKWebView</code>: Apple&#39;s powerful, flexible and efficient web renderer. But as smart as <code>WKWebView</code> is, it doesn&#39;t know (or care) how our application wants to behave, because that&#39;s our custom code.</p><p>The delegation solution is brilliant: we can tell <code>WKWebView</code> that we want to be informed when something interesting happens. In our code, we&#39;re setting the web view&#39;s <code>navigationDelegate</code> property to <code>self</code>, which means &quot;when any web page navigation happens, please tell me – the current view controller.”</p><p>When you do this, two things happen:</p><ol><li>You must conform to the protocol. This is a fancy way of saying, &quot;if you&#39;re telling me you can handle being my delegate, here are the methods you need to implement.&quot; In the case of <code>navigationDelegate</code>, all these methods are optional, meaning that we don&#39;t <em>need</em> to implement any methods.</li><li>Any methods you do implement will now be given control over the <code>WKWebView</code>&#39;s behavior. Any you don&#39;t implement will use the default behavior of <code>WKWebView</code>.</li></ol><p>Before we go any further, it’s time to fix the compilation error. When you set any delegate, you need to conform to the protocol that matches the delegate. Yes, all the <code>navigationDelegate</code> protocol methods are optional, but Swift doesn&#39;t know that yet. All it knows is that we&#39;re promising we&#39;re a suitable delegate for the web view, and yet haven&#39;t implemented the protocol.</p><p>The fix for this is simple, but I&#39;m going to hijack it to introduce something else at the same time, because this is an opportune moment. First, the fix: find this line:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">ViewController</span><span class="token punctuation">:</span> <span class="token class-name">UIViewController</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>…and change it to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">ViewController</span><span class="token punctuation">:</span> <span class="token class-name">UIViewController</span><span class="token punctuation">,</span> <span class="token class-name">WKNavigationDelegate</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That&#39;s the fix. But what I want to discuss is the way <code>ViewController</code> now appears to inherit from two things, which isn’t possible in Swift. As you know, when we say <code>class A: B</code> we’re defining a new class called <code>A</code> that builds on the functionality provided by class <code>B</code>. However, when we say <code>class A: B, C</code> we’re saying it inherits from <code>UIViewController</code> (the first item in the list), <em>and</em> promises it implements the <code>WKNavigationDelegate</code> protocol.</p><p>The order here really is important: the parent class (superclass) comes first, then all protocols implemented come next, all separated by commas. We&#39;re saying that we conform to only one protocol here (<code>WKNavigationDelegate</code>) but you can specify as many as you need to.</p><p>So, the complete meaning of this line is &quot;create a new subclass of <code>UIViewController</code> called <code>ViewController</code>, and tell the compiler that we promise we’re safe to use as a <code>WKNavigationDelegate</code>.&quot;</p><p>This program is almost doing something useful, so before you run it let&#39;s add three more lines. Please place these in the <code>viewDidLoad()</code> method, just after the <code>super</code> call:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://www.hackingwithswift.com&quot;</span></span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line">webView<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">URLRequest</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> url<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">webView<span class="token punctuation">.</span>allowsBackForwardNavigationGestures <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The first line creates a new data type called <code>URL</code>, which is Swift’s way of storing the location of files. You’re probably already familiar with URLs as being used online, like with <a href="https://www.hackingwithswift.com" target="_blank" rel="noopener noreferrer">https://www.hackingwithswift.com</a>, but they are just as important for storing local filenames too – they are flexible little things!</p><p>Even though we’re used to URLs being strings of text, Swift stores URLs in a specific <code>URL</code> data type that adds a lot of extra functionality. So, that first line of code creates a new <code>URL</code> out of the string “<a href="https://www.hackingwithswift.com" target="_blank" rel="noopener noreferrer">https://www.hackingwithswift.com</a>”. I&#39;m using hackingwithswift.com as an example website, but please change it to something you like.</p><p><strong>Warning: you need to ensure you use https:// for your websites, because iOS does not like apps sending or receiving data insecurely.</strong> If this is something you want to override, I wrote an article specifically about App Transport Security: <code>&lt;/example-code/system/how-to-handle-the-https-requirements-in-ios-9-with-app-transport-security&gt;</code>.</p><p>The second line does two things: it creates a new <code>URLRequest</code> object from that URL, and gives it to our web view to load.</p><p>Now, this probably seems like pointless obfuscation from Apple, but <code>WKWebViews</code> don&#39;t load websites from strings like <em>www.hackingwithswift.com</em>, or even from a URL made out of those strings. You need to turn the string into a <code>URL</code>, then put the URL into an <code>URLRequest</code>, and <code>WKWebView</code> will load <em>that</em>. Fortunately it&#39;s not hard to do!</p><p><strong>Warning</strong>: Your URL must be complete, and valid, in order for this process to work. That means including the <strong>https://</strong> part.</p><p>The third line enables a property on the web view that allows users to swipe from the left or right edge to move backward or forward in their web browsing. This is a feature from the Safari browser that many users rely on, so it&#39;s nice to keep it around.</p><p>It’s time to run the app, so please press <kbd>Cmd</kbd>+<kbd>R</kbd> to run your app, and you should be able to view your website. Step one done!</p><figure><img src="https://www.hackingwithswift.com/img/books/hws/4-1.png" alt="Just by embedding a web view into the app, we can now render any website content – win!" tabindex="0" loading="lazy"><figcaption>Just by embedding a web view into the app, we can now render any website content – win!</figcaption></figure>`,36),D=e("h3",{id:"choosing-a-website-uialertcontroller-action-sheets",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#choosing-a-website-uialertcontroller-action-sheets"},[e("span",null,"Choosing a website: UIAlertController action sheets")])],-1),T={class:"hint-container details"},K=e("summary",null,"Choosing a website: UIAlertController action sheets",-1),R=p(`<p>We&#39;re going to lock this app down so that it opens websites selected by the user. The first step to doing this is to give the user the option to choose from one of our selected websites, and that means adding a button to the navigation bar.</p><p>Somewhere in <code>viewDidLoad()</code> (but always after it has called <code>super.viewDidLoad()</code>), add this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">navigationItem<span class="token punctuation">.</span>rightBarButtonItem <span class="token operator">=</span> <span class="token class-name">UIBarButtonItem</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Open&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>plain<span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> <span class="token other-directive property">#selector</span><span class="token punctuation">(</span>openTapped<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We did exactly this in the previous project, except here we&#39;re using a custom title for our bar button rather than a system icon. It’s going to call the <code>openTapped()</code> method when the button is tapped, so let&#39;s add that now. Put this method below <code>viewDidLoad()</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@objc</span> <span class="token keyword">func</span> <span class="token function-definition function">openTapped</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> ac <span class="token operator">=</span> <span class="token class-name">UIAlertController</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Open page…&quot;</span></span><span class="token punctuation">,</span> message<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">,</span> preferredStyle<span class="token punctuation">:</span> <span class="token punctuation">.</span>actionSheet<span class="token punctuation">)</span></span>
<span class="line">    ac<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">UIAlertAction</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;apple.com&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">,</span> handler<span class="token punctuation">:</span> openPage<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    ac<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">UIAlertAction</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;hackingwithswift.com&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">,</span> handler<span class="token punctuation">:</span> openPage<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    ac<span class="token punctuation">.</span><span class="token function">addAction</span><span class="token punctuation">(</span><span class="token class-name">UIAlertAction</span><span class="token punctuation">(</span>title<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Cancel&quot;</span></span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">.</span>cancel<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    ac<span class="token punctuation">.</span>popoverPresentationController<span class="token operator">?</span><span class="token punctuation">.</span>barButtonItem <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span>navigationItem<span class="token punctuation">.</span>rightBarButtonItem</span>
<span class="line">    <span class="token function">present</span><span class="token punctuation">(</span>ac<span class="token punctuation">,</span> animated<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We haven’t written the <code>openPage()</code> method yet, so ignore any warnings you see about it for the time being. Just like in project 3 we’re calling <code>openTapped()</code> from Apple’s own Objective-C code in <code>UIBarButtonItem</code>, so the method must be marked <code>@objc</code>.</p><p>Just like in project 3, setting the alert controller’s <code>popoverPresentationController?.barButtonItem</code> property is used only on iPad, and tells iOS where it should make the action sheet be anchored.</p><p>We used the <code>UIAlertController</code> class in project 2, but here it&#39;s slightly different for three reason:</p><ol><li>We&#39;re using <code>nil</code> for the message, because this alert doesn&#39;t need one.</li><li>We&#39;re using the <code>preferredStyle</code> of <code>.actionSheet</code> because we&#39;re prompting the user for more information.</li><li>We&#39;re adding a dedicated Cancel button using style <code>.cancel</code>. It doesn’t provide a <code>handler</code> parameter, which means iOS will just dismiss the alert controller if it’s tapped.</li></ol><p>Both our website buttons point to the <code>openPage()</code> method, which, again, doesn&#39;t exist yet. This is going to be very similar to how we loaded the web page before, but now you will at least see why the handler method of <code>UIAlertAction</code> takes a parameter telling you which action was selected!</p><p>Add this method directly beneath the <code>openTapped()</code> method you just made:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">openPage</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token class-name">UIAlertAction</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://&quot;</span></span> <span class="token operator">+</span> action<span class="token punctuation">.</span>title<span class="token operator">!</span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line">    webView<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">URLRequest</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> url<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This method takes one parameter, which is the <code>UIAlertAction</code> object that was selected by the user. Obviously it won&#39;t be called if Cancel was tapped, because that had a <code>nil</code> handler rather than <code>openPage</code>.</p><p>What the method does is use the <code>title</code> property of the action (apple.com, hackingwithswift.com), put &quot;https://&quot; in front of it to satisfy App Transport Security, then construct a <code>URL</code> out of it. It then wraps that inside an <code>URLRequest</code>, and gives it to the web view to load. All you need to do is make sure the websites in the <code>UIAlertController</code> are correct, and this method will load anything.</p><p>You can go ahead and test the app now, but there&#39;s one small change we can add to make the whole experience more pleasant: setting the title in the navigation bar. Now, we are the web view&#39;s navigation delegate, which means we will be told when any interesting navigation happens, such as when the web page has finished loading. We&#39;re going to use this to set the navigation bar title.</p><p>As soon as we told Swift that our <code>ViewController</code> class conformed to the <code>WKNavigationDelegate</code> protocol, Xcode updated its code completion system to support all the <code>WKNavigationDelegate</code> methods that can be called. As a result, if you go below the <code>openPage()</code> method and start typing &quot;web&quot; you&#39;ll see a list of all the <code>WKNavigationDelegate</code> methods we can use.</p><p>Scroll through the list of options until you see <code>didFinish</code> and press return to have Xcode fill in the method for you. Now modify it to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">webView</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> webView<span class="token punctuation">:</span> <span class="token class-name">WKWebView</span><span class="token punctuation">,</span> didFinish navigation<span class="token punctuation">:</span> <span class="token class-name">WKNavigation</span><span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    title <span class="token operator">=</span> webView<span class="token punctuation">.</span>title</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>All this method does is update our view controller&#39;s <code>title</code> property to be the title of the web view, which will automatically be set to the page title of the web page that was most recently loaded.</p><p>Press <kbd>Cmd</kbd>+<kbd>R</kbd> now to run the app, and you&#39;ll see things are starting to come together: your initial web page will load, and when the load finishes you&#39;ll see its page title in the navigation bar.</p><figure><img src="https://www.hackingwithswift.com/img/books/hws/4-2.png" alt="Using a  is an easy way to let users choose which website to visit." tabindex="0" loading="lazy"><figcaption>Using a <code>UIAlertController</code> is an easy way to let users choose which website to visit.</figcaption></figure>`,21),q=e("p",null,"Remember to tell others about your progress – it keeps you engaged in learning, and you’ll be back for more tomorrow!",-1),L=e("hr",null,null,-1);function P(d,B){const s=c("router-link"),a=c("VPCard"),r=c("VidStack"),u=c("FontIcon");return m(),w("div",null,[e("h1",k,[e("a",f,[e("span",null,g(d.$frontmatter.title)+" 관련",1)])]),e("nav",y,[e("ul",null,[e("li",null,[t(s,{to:"#project-4-part-one"},{default:o(()=>[n("Project 4, part one")]),_:1}),e("ul",null,[e("li",null,[t(s,{to:"#setting-up"},{default:o(()=>[n("Setting up")]),_:1})]),e("li",null,[t(s,{to:"#creating-a-simple-browser-with-wkwebview"},{default:o(()=>[n("Creating a simple browser with WKWebView")]),_:1})]),e("li",null,[t(s,{to:"#choosing-a-website-uialertcontroller-action-sheets"},{default:o(()=>[n("Choosing a website: UIAlertController action sheets")]),_:1})])])])])]),v,t(a,i(l({title:"100 Days of Swift - Day 24",desc:"Project 4, part one",link:"https://www.hackingwithswift.com/100/24",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),_,e("details",W,[I,t(a,i(l({title:"100 Days of Swift - Day 24 - Setting up",desc:"Setting up",link:"https://hackingwithswift.com/read/4/1/setting-up",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),t(r,{src:"youtube/kZnzMswPUkw"}),V,e("p",null,[n("Open up "),t(u,{icon:"fas fa-file-lines"}),A,n(", select the view controller, and choose "),j,n(" – that's our storyboard finished. Nice!")])]),U,e("details",C,[S,t(a,i(l({title:"100 Days of Swift - Day 24 - Creating a simple browser with WKWebView",desc:"Creating a simple browser with WKWebView",link:"https://hackingwithswift.com/read/4/2/creating-a-simple-browser-with-wkwebview",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),t(r,{src:"youtube/pLiT5DdjEbM"}),x]),D,e("details",T,[K,t(a,i(l({title:"100 Days of Swift - Day 24 - Choosing a website: UIAlertController action sheets",desc:"Choosing a website: UIAlertController action sheets",link:"https://hackingwithswift.com/read/4/3/choosing-a-website-uialertcontroller-action-sheets",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),t(r,{src:"youtube/LkqYPTSk3aQ"}),R]),q,L])}const Y=h(b,[["render",P],["__file","24.html.vue"]]),F=JSON.parse('{"path":"/swift/100-days-of-swift/24.html","title":"Day 24","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 24","description":"100 Days of Swift > Day 24","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of Swift > Day 24"},{"property":"og:description","content":"Day 24"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swift/24.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swift/24.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 24"}],["meta",{"property":"og:description","content":"100 Days of Swift > Day 24"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.hackingwithswift.com/img/books/hws/4-1.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 24\\",\\"image\\":[\\"https://www.hackingwithswift.com/img/books/hws/4-1.png\\",\\"https://www.hackingwithswift.com/img/books/hws/4-2.png\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 4, part one","slug":"project-4-part-one","link":"#project-4-part-one","children":[{"level":3,"title":"Setting up","slug":"setting-up","link":"#setting-up","children":[]},{"level":3,"title":"Creating a simple browser with WKWebView","slug":"creating-a-simple-browser-with-wkwebview","link":"#creating-a-simple-browser-with-wkwebview","children":[]},{"level":3,"title":"Choosing a website: UIAlertController action sheets","slug":"choosing-a-website-uialertcontroller-action-sheets","link":"#choosing-a-website-uialertcontroller-action-sheets","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":11}]},"readingTime":{"minutes":8.95,"words":2684},"filePathRelative":"swift/100-days-of-swift/24.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{Y as comp,F as data};
