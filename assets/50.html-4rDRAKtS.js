import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as s,t as m,b as n,w as o,n as p,g as l,d as a,e,r as c,o as v}from"./app-U_bew1in.js";const b={},w={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},y=s("hr",null,null,-1),q=s("h2",{id:"project-10-part-2",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#project-10-part-2"},[s("span",null,"Project 10, part 2")])],-1),_=e('<p>Today we’re going to be building the user interface for our app – everything apart from the part where we handle the networking.</p><p>Although the fundamentals of today’s work will be familiar to you, there’s still scope for new things as you’ll see. This will become particularly common as we continue to push SwiftUI’s boundaries – everything is easy when your app is easy, but as we venture more into larger apps you’ll find we need to spend more time getting the details right.</p><p>But that’s OK. As American tire magnate Harvey Firestone once said, “success is the sum of details.” I hope you can look at Apple’s iOS apps and be inspired by them: their UI is often uncomplicated, but they put a ton of work into getting the details right so the whole experience feels great.</p><p>When the user launches <em>your</em> app on their $1000 iPhone, it takes up the full screen. You owe it to them, and to yourself, to make sure you’ve done your best to get things working as smoothly as possible. If Apple can do it, so can we!</p><p><strong>Today you have three topics to work through, in which you’ll use property observers, observed objects, <code>disabled()</code>, and more.</strong></p><h3 id="taking-basic-order-details" tabindex="-1"><a class="header-anchor" href="#taking-basic-order-details"><span>Taking basic order details</span></a></h3>',6),x={class:"hint-container details"},T=s("summary",null,"Taking basic order details",-1),S=e("<p>The first step in this project will be to create an ordering screen that takes the basic details of an order: how many cupcakes they want, what kind they want, and whether there are any special customizations.</p><p>Before we get into the UI, we need to start by defining the data model. Previously we’ve used <code>@State</code> for simple value types and <code>@StateObject</code> for reference types, and we’ve looked at how it’s possible to have an <code>ObservableObject</code> class containing structs inside it so that we get the benefits of both.</p><p>Here we’re going to take a different solution: we’re going to have a single class that stores all our data, which will be passed from screen to screen. This means all screens in our app share the same data, which will work really well as you’ll see.</p><p>For now this class won’t need many properties:</p><ul><li>The type of cakes, plus a static array of all possible options.</li><li>How many cakes the user wants to order.</li><li>Whether the user wants to make special requests, which will show or hide extra options in our UI.</li><li>Whether the user wants extra frosting on their cakes.</li><li>Whether the user wants to add sprinkles on their cakes.</li></ul><p>Each of those need to update the UI when changed, which means we need to mark them with <code>@Published</code> and make the whole class conform to <code>ObservableObject</code>.</p>",6),V=s("code",null,"Order.swift",-1),j=e(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token punctuation">:</span> <span class="token class-name">ObservableObject</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">let</span> types <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Vanilla&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Strawberry&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Chocolate&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Rainbow&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> type <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> quantity <span class="token operator">=</span> <span class="token number">3</span></span>
<span class="line"></span>
<span class="line">    <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> specialRequestEnabled <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> extraFrosting <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> addSprinkles <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can now create a single instance of that inside <code>ContentView</code> by adding this property:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@StateObject</span> <span class="token keyword">var</span> order <span class="token operator">=</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>That’s the only place the order will be created – every other screen in our app will be passed that property so they all work with the same data.</p><p>We’re going to build the UI for this screen in three sections, starting with cupcake type and quantity. This first section will show a picker letting users choose from Vanilla, Strawberry, Chocolate and Rainbow cakes, then a stepper with the range 3 through 20 to choose the amount. All that will be wrapped inside a form, which is itself inside a navigation view so we can set a title.</p><p>There’s a small speed bump here: our cupcake topping list is an array of strings, but we’re storing the user’s selection as an integer – how can we match the two? One easy solution is to use the <code>indices</code> property of the array, which gives us a position of each item that we can then use with as an array index. This is a bad idea for mutable arrays because the order of your array can change at any time, but here our array order won’t ever change so it’s safe.</p><p>Put this into the body of <code>ContentView</code> now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">NavigationView</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Form</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Section</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Picker</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Select your cake type&quot;</span></span><span class="token punctuation">,</span> selection<span class="token punctuation">:</span> $order<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token class-name">Order</span><span class="token punctuation">.</span>types<span class="token punctuation">.</span>indices<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token class-name">Order</span><span class="token punctuation">.</span>types<span class="token punctuation">[</span><span class="token short-argument">$0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Stepper</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Number of cakes: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">order<span class="token punctuation">.</span>quantity</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> $order<span class="token punctuation">.</span>quantity<span class="token punctuation">,</span> <span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token operator">...</span><span class="token number">20</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Cupcake Corner&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The second section of our form will hold three toggle switches bound to <code>specialRequestEnabled</code>, <code>extraFrosting</code>, and <code>addSprinkles</code> respectively. However, the second and third switches should only be visible when the first one is enabled, so we’ll wrap then in a condition.</p><p>Add this second section now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Section</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Any special requests?&quot;</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> $order<span class="token punctuation">.</span>specialRequestEnabled<span class="token punctuation">.</span><span class="token function">animation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> order<span class="token punctuation">.</span>specialRequestEnabled <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Add extra frosting&quot;</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> $order<span class="token punctuation">.</span>extraFrosting<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Toggle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Add extra sprinkles&quot;</span></span><span class="token punctuation">,</span> isOn<span class="token punctuation">:</span> $order<span class="token punctuation">.</span>addSprinkles<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Go ahead and run the app again, and try it out – notice how I bound the first toggle with an <code>animation()</code> modifier attached, so that the second and third toggles slide in and out smoothly.</p><p>However, there’s another bug, and this time it’s one of our own making: if we enable special requests then enable one or both of “extra frosting” and “extra sprinkles”, then <em>disable</em> the special requests, our previous special request selection stays active. This means if we re-enable special requests, the previous special requests are still active.</p><p>This kind of problem isn’t hard to work around if every layer of your code is aware of it – if the app, your server, your database, and so on are all programmed to ignore the values of <code>extraFrosting</code> and <code>addSprinkles</code> when <code>specialRequestEnabled</code> is set to false. However, a better idea – a <em>safer</em> idea – is to make sure that both <code>extraFrosting</code> and <code>addSprinkles</code> are reset to false when <code>specialRequestEnabled</code> is set to false.</p><p>We can make this happen by adding a <code>didSet</code> property observer to <code>specialRequestEnabled</code>. Add this now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> specialRequestEnabled <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">didSet</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> specialRequestEnabled <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">{</span></span>
<span class="line">            extraFrosting <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">            addSprinkles <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Our third section is the easiest, because it’s just going to be a <code>NavigationLink</code> pointing to the next screen. We don’t have a second screen, but we can add it quickly enough: create a new SwiftUI view called “AddressView”, and give it an <code>order</code> observed object property like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">AddressView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@ObservedObject</span> <span class="token keyword">var</span> order<span class="token punctuation">:</span> <span class="token class-name">Order</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">AddressView_Previews</span><span class="token punctuation">:</span> <span class="token class-name">PreviewProvider</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> previews<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">AddressView</span><span class="token punctuation">(</span>order<span class="token punctuation">:</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),P=s("code",null,"ContentView.swift",-1),A=s("code",null,"NavigationLink",-1),O=s("code",null,"AddressView",-1),C=e(`<p>Please add this final section now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Section</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">NavigationLink</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">AddressView</span><span class="token punctuation">(</span>order<span class="token punctuation">:</span> order<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> label<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Delivery details&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That completes our first screen, so give it a try one last time before we move on – you should be able to select your cake type, choose a quantity, and toggle all the switches just fine.</p>`,3),I=s("h3",{id:"checking-for-a-valid-address",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#checking-for-a-valid-address"},[s("span",null,"Checking for a valid address")])],-1),D={class:"hint-container details"},F=s("summary",null,"Checking for a valid address",-1),U=e(`<p>The second step in our project will be to let the user enter their address into a form, but as part of that we’re going to add some validation – we only want to proceed to the third step if their address looks good.</p><p>We can accomplish this by adding a <code>Form</code> view to the <code>AddressView</code> struct we made previously, which will contain four text fields: name, street address, city, and zip. We can then add a <code>NavigationLink</code> to move to the next screen, which is where the user will see their final price and can check out.</p><p>To make this easier to follow, we’re going to start by adding a new view called <code>CheckoutView</code>, which is where this address view will push to once the user is ready. This just avoids us having to put a placeholder in now then remember to come back later.</p><p>So, create a new SwiftUI view called <code>CheckoutView</code> and give it the same <code>Order</code> observed object property and preview that <code>AddressView</code> has:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">CheckoutView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@ObservedObject</span> <span class="token keyword">var</span> order<span class="token punctuation">:</span> <span class="token class-name">Order</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, World!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">CheckoutView_Previews</span><span class="token punctuation">:</span> <span class="token class-name">PreviewProvider</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">var</span> previews<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">CheckoutView</span><span class="token punctuation">(</span>order<span class="token punctuation">:</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Again, we’ll come back to that later, but first let’s implement <code>AddressView</code>. Like I said, this needs to have a form with four text fields bound to four properties from our <code>Order</code> object, plus a <code>NavigationLink</code> passing control off to our check out view.</p><p>First, we need four new <code>@Published</code> properties in <code>Order</code> to store delivery details:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line"><span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> streetAddress <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line"><span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> city <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line"><span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> zip <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now replace the existing <code>body</code> of <code>AddressView</code> with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Form</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Section</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Name&quot;</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> $order<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">        <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Street Address&quot;</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> $order<span class="token punctuation">.</span>streetAddress<span class="token punctuation">)</span></span>
<span class="line">        <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;City&quot;</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> $order<span class="token punctuation">.</span>city<span class="token punctuation">)</span></span>
<span class="line">        <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Zip&quot;</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> $order<span class="token punctuation">.</span>zip<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Section</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">NavigationLink</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">CheckoutView</span><span class="token punctuation">(</span>order<span class="token punctuation">:</span> order<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> label<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Check out&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Delivery details&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">navigationBarTitleDisplayMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>inline<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, that passes our <code>order</code> object on one level deeper, to <code>CheckoutView</code>, which means we now have three views pointing to the same data.</p><p>Go ahead and run the app again, because I want you to see why all this matters. Enter some data on the first screen, enter some data on the second screen, then try navigating back to the beginning then forward to the end – that is, go back to the first screen, then click the bottom button twice to get to the checkout view again.</p><p>What you should see is that all the data you entered stays saved no matter what screen you’re on. Yes, this is the natural side effect of using a class for our data, but it’s an instant feature in our app without having to do any work – if we had used a struct, then any address details we had entered would disappear if we moved back to the original view. If you really wanted to use a struct for your data, you should follow the same struct inside class approach we used back in project 7; it’s certainly worth keeping it in mind when you evaluate your options.</p><p>Now that <code>AddressView</code> works, it’s time to stop the user progressing to the checkout unless some condition is satisfied. What condition? Well, that’s down to us to decide. Although we could write length checks for each of our four text fields, this often trips people up – some names are only four or five letters, so if you try to add length validation you might accidentally exclude people.</p><p>So, instead we’re just going to check that the <code>name</code>, <code>streetAddress</code>, <code>city</code>, and <code>zip</code> properties of our order aren’t empty. I prefer adding this kind of complex check inside my data, which means you need to add a new computed property to <code>Order</code> like this one:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> hasValidAddress<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> name<span class="token punctuation">.</span>isEmpty <span class="token operator">||</span> streetAddress<span class="token punctuation">.</span>isEmpty <span class="token operator">||</span> city<span class="token punctuation">.</span>isEmpty <span class="token operator">||</span> zip<span class="token punctuation">.</span>isEmpty <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can now use that condition in conjunction with SwiftUI’s <code>disabled()</code> modifier – attach that to any view along with a condition to check, and the view will stop responding to user interaction if the condition is true.</p><p>In our case, the condition we want to check is the computed property we just wrote, <code>hasValidAddress</code>. If that is false, then the form section containing our <code>NavigationLink</code> ought to be disabled, because we need users to fill in their delivery details first.</p><p>So, add this modifier to the end of the second section in <code>AddressView</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">disabled</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>hasValidAddress <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The code should look like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Section</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">NavigationLink</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">CheckoutView</span><span class="token punctuation">(</span>order<span class="token punctuation">:</span> order<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> label<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Check out&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">disabled</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>hasValidAddress <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now if you run the app you’ll see that all four address fields must contain at least one character in order to continue. Even better, SwiftUI automatically grays out the button when the condition isn’t true, giving the user really clear feedback when it is and isn’t interactive.</p>`,23),W=s("h3",{id:"preparing-for-checkout",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#preparing-for-checkout"},[s("span",null,"Preparing for checkout")])],-1),N={class:"hint-container details"},E=s("summary",null,"Preparing for checkout",-1),R=e(`<p>The final screen in our app is <code>CheckoutView</code>, and it’s really a tale of two halves: the first half is the basic user interface, which should provide little real challenge for you; but the second half is all new: we need to encode our <code>Order</code> class to JSON, send it over the internet, and get a response.</p><p>We’re going to look at the whole encoding and transferring chunk of work soon enough, but first let’s tackle the easy part: giving <code>CheckoutView</code> a user interface. More specifically, we’re going to create a <code>ScrollView</code> with an image, the total price of their order, and a Place Order button to kick off the networking.</p><p>For the image, I’ve uploaded a cupcake image to my server that we’ll load remotely with <code>AsyncImage</code> – we <em>could</em> store it in the app, but having a remote image means we can dynamically switch it out for seasonal alternatives and promotions.</p><p>As for the order cost, we don’t actually have any pricing for our cupcakes in our data, so we can just invent one – it’s not like we’re actually going to be charging people here. The pricing we’re going to use is as follows:</p><ul><li>There’s a base cost of $2 per cupcake.</li><li>We’ll add a little to the cost for more complicated cakes.</li><li>Extra frosting will cost $1 per cake.</li><li>Adding sprinkles will be another 50 cents per cake.</li></ul><p>We can wrap all that logic up in a new computed property for <code>Order</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> cost<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// $2 per cake</span></span>
<span class="line">    <span class="token keyword">var</span> cost <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// complicated cakes cost more</span></span>
<span class="line">    cost <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token class-name">Double</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// $1/cake for extra frosting</span></span>
<span class="line">    <span class="token keyword">if</span> extraFrosting <span class="token punctuation">{</span></span>
<span class="line">        cost <span class="token operator">+=</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// $0.50/cake for sprinkles</span></span>
<span class="line">    <span class="token keyword">if</span> addSprinkles <span class="token punctuation">{</span></span>
<span class="line">        cost <span class="token operator">+=</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> cost</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The actual view itself is straightforward: we’ll use a <code>VStack</code> inside a vertical <code>ScrollView</code>, then our image, the cost text, and button to place the order.</p><p>We’ll be filling in the button’s action in a minute, but first let’s get the basic layout done – replace the existing <code>body</code> of <code>CheckoutView</code> with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">ScrollView</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">AsyncImage</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;https://hws.dev/img/cupcakes@3x.jpg&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> scale<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> image <span class="token keyword">in</span></span>
<span class="line">                image</span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> placeholder<span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">ProgressView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">233</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Your total is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">order<span class="token punctuation">.</span>cost<span class="token punctuation">,</span> format<span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">currency</span><span class="token punctuation">(</span>code<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;USD&quot;</span></span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Place Order&quot;</span></span><span class="token punctuation">,</span> action<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">navigationTitle</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Check out&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">navigationBarTitleDisplayMode</span><span class="token punctuation">(</span><span class="token punctuation">.</span>inline<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That should all be old news for you by now. But the tricky part comes next…</p>`,11),$=s("hr",null,null,-1);function B(d,L){const t=c("router-link"),i=c("VPCard"),r=c("VidStack"),u=c("FontIcon");return v(),h("div",null,[s("h1",w,[s("a",g,[s("span",null,m(d.$frontmatter.title)+" 관련",1)])]),s("nav",f,[s("ul",null,[s("li",null,[n(t,{to:"#project-10-part-2"},{default:o(()=>[a("Project 10, part 2")]),_:1}),s("ul",null,[s("li",null,[n(t,{to:"#taking-basic-order-details"},{default:o(()=>[a("Taking basic order details")]),_:1})]),s("li",null,[n(t,{to:"#checking-for-a-valid-address"},{default:o(()=>[a("Checking for a valid address")]),_:1})]),s("li",null,[n(t,{to:"#preparing-for-checkout"},{default:o(()=>[a("Preparing for checkout")]),_:1})])])])])]),y,q,n(i,p(l({title:"100 Days of SwiftUI - Day 50",desc:"Project 10, part 2",link:"https://www.hackingwithswift.com/100/swiftui/50",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),_,s("details",x,[T,n(i,p(l({title:"100 Days of SwiftUI - Day 50 - Taking basic order details",desc:"Taking basic order details",link:"https://www.hackingwithswift.com/books/ios-swiftui/taking-basic-order-details",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(r,{src:"youtube/fXPeIir0SCA"}),S,s("p",null,[a("So, please make a new Swift file called "),n(u,{icon:"fa-brands fa-swift"}),V,a(", change its Foundation import for SwiftUI, and give it this code:")]),j,s("p",null,[a("We’ll make that more useful shortly, but for now it means we can return to "),n(u,{icon:"fa-brands fa-swift"}),P,a(" and add the final section for our form. This will create a "),A,a(" that points to an "),O,a(", passing in the current order object.")]),C]),I,s("details",D,[F,n(i,p(l({title:"100 Days of SwiftUI - Day 50 - Checking for a valid address",desc:"Checking for a valid address",link:"https://www.hackingwithswift.com/books/ios-swiftui/checking-for-a-valid-address",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(r,{src:"youtube/xyhsUsTKXsA"}),U]),W,s("details",N,[E,n(i,p(l({title:"100 Days of SwiftUI - Day 50 - Preparing for checkout",desc:"Preparing for checkout",link:"https://www.hackingwithswift.com/books/ios-swiftui/preparing-for-checkout",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),n(r,{src:"youtube/vOwD9q5r2cQ"}),R]),$])}const K=k(b,[["render",B],["__file","50.html.vue"]]),M=JSON.parse('{"path":"/swift/100-days-of-swiftui/50.html","title":"Day 50","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 50","description":"100 Days of SwiftUI > Day 50","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 50"},{"property":"og:description","content":"Day 50"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/50.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/50.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 50"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 50"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 50\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 10, part 2","slug":"project-10-part-2","link":"#project-10-part-2","children":[{"level":3,"title":"Taking basic order details","slug":"taking-basic-order-details","link":"#taking-basic-order-details","children":[]},{"level":3,"title":"Checking for a valid address","slug":"checking-for-a-valid-address","link":"#checking-for-a-valid-address","children":[]},{"level":3,"title":"Preparing for checkout","slug":"preparing-for-checkout","link":"#preparing-for-checkout","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":8}]},"readingTime":{"minutes":8.85,"words":2654},"filePathRelative":"swift/100-days-of-swiftui/50.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n<h2>Project 10, part 2</h2>\\n"}');export{K as comp,M as data};
