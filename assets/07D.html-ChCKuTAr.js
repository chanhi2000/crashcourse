import{_ as b}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as v,a as n,t as k,b as e,n as d,g as u,w as l,d as s,e as c,r as o,o as g}from"./app-U_bew1in.js";const y={},f={id:"frontmatter-title-관련",tabindex:"-1"},_={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},w=n("hr",null,null,-1),L=n("p",null,"드디어 AWS의 ELB(NLB, Network load balancer)와 연동된 서비스를 생성할 수 있게 되었습니다.",-1),E=n("hr",null,null,-1),B=n("h2",{id:"인그레스-컨트롤러-설치하기",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#인그레스-컨트롤러-설치하기"},[n("span",null,"인그레스 컨트롤러 설치하기")])],-1),S=n("p",null,"인그레스를 사용하려면 먼저 인그레스 컨트롤러를 설치해야 합니다. 여기서는 Nginx 인그레스 컨트롤러를 사용하겠습니다.",-1),j=n("p",null,"다음 명령을 실행하여 AWS용 Nginx 인그레스 컨트롤러를 설치합니다.",-1),T=c(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl apply <span class="token parameter variable">-f</span> https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.5.1/deploy/static/provider/aws/deploy.yaml</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>다음 명령을 입력하여 Nginx 인그레스 컨트롤러가 제대로 설치되었는지 확인해봅니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl <span class="token parameter variable">-n</span> ingress-nginx get <span class="token function">service</span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># NAME                                 TYPE           CLUSTER-IP      EXTERNAL-IP                                                                          PORT(S)                      AGE</span></span>
<span class="line highlighted"><span class="token comment"># ingress-nginx-controller             LoadBalancer   100.68.245.83   a9d2164f4b43b43749deeb45a44e6458-1692cf8342f016af.elb.ap-northeast-2.amazonaws.com   80:32325/TCP,443:31028/TCP   15m</span></span>
<span class="line"><span class="token comment"># ingress-nginx-controller-admission   ClusterIP      100.68.74.143   &lt;none&gt;                                                                               443/TCP                      15m</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ingress-nginx-controller</code>의 TYPE을 보면 <code>LoadBalancer</code>로 설정된 것을 볼 수 있고, <code>EXTERNAL-IP</code>에는 ELB(NLB)의 도메인이 표시됩니다. 즉, AWS의 로드밸런서를 통해 트래픽을 받을 수 있게 된 것입니다.</p><hr><h2 id="디플로이먼트-서비스-생성하기" tabindex="-1"><a class="header-anchor" href="#디플로이먼트-서비스-생성하기"><span>디플로이먼트, 서비스 생성하기</span></a></h2><p>다음 내용을 <code>deployment.yaml</code> 파일로 저장합니다.</p><p>https://github.com/pyrasis/jHLsKubernetes/blob/main/Unit07/deployment.yaml</p>`,8),P=n("code",null,"deployment.yaml",-1),A=c(`<div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> apps/v1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Deployment</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>nginx</span>
<span class="line"><span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span></span>
<span class="line">  <span class="token key atrule">selector</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">app</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>nginx</span>
<span class="line">  <span class="token key atrule">template</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">labels</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">app</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>nginx</span>
<span class="line">    <span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">containers</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>nginx</span>
<span class="line">          <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>latest</span>
<span class="line">          <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token punctuation">-</span> <span class="token key atrule">containerPort</span><span class="token punctuation">:</span> <span class="token number">80</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>다음 명령을 실행하여 <code>deployment.yaml</code> 파일로 디플로이먼트를 생성합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl create <span class="token parameter variable">-f</span> deployment.yaml</span>
<span class="line">deployment.apps/hello-nginx created</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>이번에는 서비스를 생성합니다. 다음 내용을 <code>service.yaml</code> 파일로 저장합니다.</p><p>https://github.com/pyrasis/jHLsKubernetes/blob/main/Unit07/service.yaml</p>`,5),D=n("code",null,"service.yaml",-1),I=c(`<div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Service</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>nginx</span>
<span class="line"><span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">selector</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">app</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>nginx</span>
<span class="line">  <span class="token key atrule">ports</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">protocol</span><span class="token punctuation">:</span> TCP</span>
<span class="line">      <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span></span>
<span class="line">      <span class="token key atrule">targetPort</span><span class="token punctuation">:</span> <span class="token number">80</span></span>
<span class="line">  <span class="token key atrule">type</span><span class="token punctuation">:</span> ClusterIP</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>다음 명령을 실행하여 <code>service.yaml</code> 파일로 서비스를 생성합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl create <span class="token parameter variable">-f</span> service.yaml</span>
<span class="line">service/hello-nginx created</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>디플로이먼트와 서비스는 지금까지 만들었던 것과 같은 형식이므로 따로 설명하지 않겠습니다.</p><hr><h2 id="인그레스-만들기" tabindex="-1"><a class="header-anchor" href="#인그레스-만들기"><span>인그레스 만들기</span></a></h2><h3 id="도메인을-구입한-경우" tabindex="-1"><a class="header-anchor" href="#도메인을-구입한-경우"><span>도메인을 구입한 경우</span></a></h3><p>이제 인그레스를 만들 차례입니다. 다음 내용을 <code>ingress.yaml</code> 파일로 저장합니다. 이때 <code>host</code> 부분을 <code>hello.&lt;구입한 도메인&gt;</code>으로 설정해줍니다. 특히 apex 도메인(root 도메인)은 Route 53에 자동으로 레코드가 생성되지 않으므로 주의해야 합니다. 반드시 서브 도메인으로 설정해줍니다.</p><p>https://github.com/pyrasis/jHLsKubernetes/blob/main/Unit07/ingress.yaml</p>`,9),C=n("code",null,"ingress.yaml",-1),N=c(`<div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.k8s.io/v1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>nginx</span>
<span class="line"><span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">ingressClassName</span><span class="token punctuation">:</span> nginx</span>
<span class="line">  <span class="token key atrule">rules</span><span class="token punctuation">:</span></span>
<span class="line highlighted">    <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> hello.&lt;구입한 도메인<span class="token punctuation">&gt;</span></span>
<span class="line">      <span class="token key atrule">http</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">paths</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token punctuation">-</span> <span class="token key atrule">backend</span><span class="token punctuation">:</span></span>
<span class="line">              <span class="token key atrule">service</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token key atrule">name</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>nginx</span>
<span class="line">                <span class="token key atrule">port</span><span class="token punctuation">:</span></span>
<span class="line">                  <span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token number">80</span></span>
<span class="line">            <span class="token key atrule">path</span><span class="token punctuation">:</span> /</span>
<span class="line">            <span class="token key atrule">pathType</span><span class="token punctuation">:</span> Prefix</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>저장이 끝났으면 인그레스를 생성합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl create <span class="token parameter variable">-f</span> ingress.yaml</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,3),K=n("code",null,"ingress.yaml",-1),R=n("code",null,"kubectl apply",-1),U=c(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl delete <span class="token parameter variable">-f</span> ingress.yaml</span>
<span class="line">kubectl create <span class="token parameter variable">-f</span> ingress.yaml</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">webhook 에러가 발생한다면?</p><p>다음과 같이 <code>Internal error occurred: failed calling webhook</code> 에러가 발생할 수도 있습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># error: failed to create ingress: Internal error occurred: failed calling webhook &quot;validate.nginx.ingress.kubernetes.io&quot;: failed to call webhook: Post &quot;https://ingress-nginx-controller-admission.ingress-nginx.svc:443/networking/v1/ingresses?timeout=10s&quot;: context deadline exceeded</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>이때는 다음 명령을 입력하여 <code>ingress-nginx-admission</code> webhook 설정을 삭제해줍니다. 지금은 이 webhook을 사용하지 않으므로 삭제해도 괜찮습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl delete validatingwebhookconfiguration ingress-nginx-admission</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>삭제되었다면 다시 인그레스를 생성해봅니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl create <span class="token parameter variable">-f</span> ingress.yaml</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><p>이제 <code>kubectl get ingress</code> 명령으로 인그레스를 출력해보겠습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl get ingress</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># NAME          CLASS   HOSTS             ADDRESS                                                                              PORTS   AGE</span></span>
<span class="line highlighted"><span class="token comment"># hello-nginx   nginx   &lt;구입한 도메인&gt;    a9d2164f4b43b43749deeb45a44e6458-1692cf8342f016af.elb.ap-northeast-2.amazonaws.com   80      26m</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HOSTS에 도메인으로 <code>&lt;구입한 도메인&gt;</code>이 설정된 것을 볼 수 있습니다. ADDRESS에는 ELB(NLB)의 도메인이 표시됩니다. 저는 <code>a9d2164f4b43b43749deeb45a44e6458-1692cf8342f016af.elb.ap-northeast-2.amazonaws.com</code>가 나왔지만, 이 도메인은 각자 다르게 나올 것입니다.</p><p>웹 브라우저를 열고 <code>http://&lt;구입한 도메인&gt;</code> 접속하면 **Welcome to nginx!**가 표시될 것입니다.</p><p>실습이 끝났으면 다음 명령을 실행하여 클러스터를 삭제합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kops delete cluster <span class="token parameter variable">--name</span> k8s.ap-northeast-2.aws.hello.com <span class="token parameter variable">--yes</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="도메인을-구입하지-않은-경우" tabindex="-1"><a class="header-anchor" href="#도메인을-구입하지-않은-경우"><span>도메인을 구입하지 않은 경우</span></a></h3><p>이제 인그레스를 만들 차례입니다. 다음 내용을 <code>ingress.yaml</code> 파일로 저장합니다.</p><p>https://github.com/pyrasis/jHLsKubernetes/blob/main/Unit07/ingress.yaml</p>`,11),O=n("code",null,"ingress.yaml",-1),q=c(`<div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> networking.k8s.io/v1</span>
<span class="line"><span class="token key atrule">kind</span><span class="token punctuation">:</span> Ingress</span>
<span class="line"><span class="token key atrule">metadata</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">name</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>nginx</span>
<span class="line"><span class="token key atrule">spec</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">ingressClassName</span><span class="token punctuation">:</span> nginx</span>
<span class="line">  <span class="token key atrule">rules</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token punctuation">-</span> <span class="token key atrule">host</span><span class="token punctuation">:</span> nginx.hello.com</span>
<span class="line">      <span class="token key atrule">http</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">paths</span><span class="token punctuation">:</span></span>
<span class="line">          <span class="token punctuation">-</span> <span class="token key atrule">backend</span><span class="token punctuation">:</span></span>
<span class="line">              <span class="token key atrule">service</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token key atrule">name</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>nginx</span>
<span class="line">                <span class="token key atrule">port</span><span class="token punctuation">:</span></span>
<span class="line">                  <span class="token key atrule">number</span><span class="token punctuation">:</span> <span class="token number">80</span></span>
<span class="line">            <span class="token key atrule">path</span><span class="token punctuation">:</span> /</span>
<span class="line">            <span class="token key atrule">pathType</span><span class="token punctuation">:</span> Prefix</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>저장이 끝났으면 인그레스를 생성합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl create <span class="token parameter variable">-f</span> ingress.yaml</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">webhook 에러가 발생한다면?</p><p>다음과 같이 <code>Internal error occurred: failed calling webhook</code> 에러가 발생할 수도 있습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># error: failed to create ingress: Internal error occurred: failed calling webhook &quot;validate.nginx.ingress.kubernetes.io&quot;: failed to call webhook: Post &quot;https://ingress-nginx-controller-admission.ingress-nginx.svc:443/networking/v1/ingresses?timeout=10s&quot;: context deadline exceeded</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>이때는 다음 명령을 입력하여 <code>ingress-nginx-admission</code> webhook 설정을 삭제해줍니다. 지금은 이 webhook을 사용하지 않으므로 삭제해도 괜찮습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl delete validatingwebhookconfiguration ingress-nginx-admission</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>삭제되었다면 다시 인그레스를 생성해봅니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl create <span class="token parameter variable">-f</span> ingress.yaml</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div><p>이제 <code>kubectl get ingress</code> 명령으로 인그레스를 출력해보겠습니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kubectl get ingress</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># NAME          CLASS   HOSTS             ADDRESS                                                                              PORTS   AGE</span></span>
<span class="line highlighted"><span class="token comment"># hello-nginx   nginx   nginx.hello.com   a9d2164f4b43b43749deeb45a44e6458-1692cf8342f016af.elb.ap-northeast-2.amazonaws.com   80      26m</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HOSTS에 도메인으로 <code>nginx.hello.com</code>이 설정된 것을 볼 수 있습니다. ADDRESS에는 ELB(NLB)의 도메인이 표시됩니다. 저는 <code>a9d2164f4b43b43749deeb45a44e6458-1692cf8342f016af.elb.ap-northeast-2.amazonaws.com</code>가 나왔지만, 이 도메인은 각자 다르게 나올 것입니다.</p><p>우리는 실제로 <code>hello.com</code> 도메인을 구입하지 않았으므로, 로컬에서 임시로 사용할 수 있도록 설정해야 합니다. 즉, <code>nginx.hello.com</code> 도메인이 ELB의 IP 주소로 연결되도록 설정하는 것입니다. 운영체제별로 설정 파일이 조금 다른데, 각자 운영체제에 맞는 파일을 수정합니다.</p><p>먼저 <code>ping</code> 명령으로 ELB(NLB)의 IP 주소를 알아냅니다.</p>`,9),H=n("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token function"},"ping"),s(" a9d2164f4b43b43749deeb45a44e6458-1692cf8342f016af.elb.ap-northeast-2.amazonaws.com")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"#")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"# PING a9d2164f4b43b43749deeb45a44e6458-1692cf8342f016af.elb.ap-northeast-2.amazonaws.com (3.37.156.171) 56(84) bytes of data.")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),z=n("div",{class:"language-cmd line-numbers-mode","data-highlighter":"prismjs","data-ext":"cmd","data-title":"cmd"},[n("pre",null,[n("code",null,[n("span",{class:"line"},"ping a9d2164f4b43b43749deeb45a44e6458-1692cf8342f016af.elb.ap-northeast-2.amazonaws.com"),s(`
`),n("span",{class:"line"},"#"),s(`
`),n("span",{class:"line highlighted"},"# Pinging a9d2164f4b43b43749deeb45a44e6458-1692cf8342f016af.elb.ap-northeast-2.amazonaws.com [3.37.156.171] with 32 bytes of data:"),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),V=n("p",null,[s("IP 주소가 출력되면 "),n("kbd",null,"Ctrl"),s("+"),n("kbd",null,"C"),s("를 눌러 "),n("code",null,"ping"),s(" 명령을 종료시킵니다. 저는 IP 주소가 "),n("code",null,"3.37.156.171"),s("로 나왔지만, ELB 도메인과 마찬가지로 각자 다르게 나올 것입니다("),n("code",null,"<ELB의 퍼블릭 IPv4 주소>"),s(").")],-1),W=n("code",null,"/etc/",-1),F=n("code",null,"hosts",-1),Z=n("code",null,"sudo vim",-1),G=n("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token function"},"sudo"),s(),n("span",{class:"token function"},"vim"),s(" /etc/hosts")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1),M=n("p",null,[n("code",null,"/etc/hosts"),s(" 파일의 마지막 부분에 다음 내용을 추가한 뒤 저장합니다.")],-1),X=n("code",null,"/etc/",-1),Y=n("code",null,"hosts",-1),J=n("div",{class:"language-text line-numbers-mode","data-highlighter":"prismjs","data-ext":"text","data-title":"text"},[n("pre",null,[n("code",null,[n("span",{class:"line"},"<ELB의 퍼블릭 IPv4 주소> nginx.hello.com"),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1),$=n("code",null,"C:\\Windows\\System32\\drivers\\etc\\",-1),Q=n("code",null,"hosts",-1),nn=n("code",null,"C:\\Windows\\System32\\drivers\\etc\\",-1),sn=n("code",null,"hosts",-1),en=n("code",null,"C:\\Windows\\System32\\drivers\\etc\\",-1),an=n("code",null,"hosts",-1),ln=n("div",{class:"language-text line-numbers-mode","data-highlighter":"prismjs","data-ext":"text","data-title":"text"},[n("pre",null,[n("code",null,[n("span",{class:"line"},"<ELB의 퍼블릭 IPv4 주소> nginx.hello.com"),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1),tn=c(`<div class="hint-container info"><p class="hint-container-title">메모장에서 hosts 파일이 보이지 않는다면?</p><p>메모장에서 hosts 파일이 보이지 않는다면, 열기 창에서 <strong>열기(O)</strong> 버튼 위의 **텍스트 문서(*.txt)**를 **모든 파일 (*.*)**로 바꿔주면 됩니다.</p></div><p>웹 브라우저를 열고 <a href="http://nginx.hello.com" target="_blank" rel="nofollow">http://nginx.hello.com</a> 접속하면 **Welcome to nginx!**가 표시될 것입니다.</p><p>즉, 지금까지 구축했던 Kubernetes 클러스터를 그림으로 표현하면 다음과 같은 모양이 됩니다.</p><figure><img src="https://pyrasis.com/assets/images/jHLsAlwaysUpToDateKubernetes/Unit07/6.png" alt="Kubernetes 클러스터" tabindex="0" loading="lazy"><figcaption>Kubernetes 클러스터</figcaption></figure><p>실습이 끝났으면 다음 명령을 실행하여 클러스터를 삭제합니다.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">kops delete cluster <span class="token parameter variable">--name</span> k8s.ap-northeast-2.aws.hello.com <span class="token parameter variable">--yes</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">EC2 비용 문제</p><p>AWS에서 EC2, ELB를 사용할 때는 시간당 비용이 청구됩니다. 따라서 실습은 신속히 끝내는 것이 유리하며 실습이 끝나면 반드시 모든 인스턴스와 ELB(NLB)를 삭제(terminate)해야 합니다. 삭제하지 않고 그냥 잊고 있었다가는 요금 폭탄을 맞을 수 있으니 이 부분은 정말 주의해야 합니다.</p></div><hr>`,8);function cn(h,pn){const r=o("VPCard"),p=o("router-link"),a=o("FontIcon"),m=o("Tabs");return g(),v("div",null,[n("h1",f,[n("a",_,[n("span",null,k(h.$frontmatter.title)+" 관련",1)])]),e(r,d(u({title:"목차",desc:"언제나 최신 Kubernetes",link:"/k8s/always-up-to-date-kubernetes/README.md",logo:"https://pyrasis.com/assets/images/pyrasis.png",background:"rgba(31,41,55,0.2)"})),null,16),n("nav",x,[n("ul",null,[n("li",null,[e(p,{to:"#인그레스-컨트롤러-설치하기"},{default:l(()=>[s("인그레스 컨트롤러 설치하기")]),_:1})]),n("li",null,[e(p,{to:"#디플로이먼트-서비스-생성하기"},{default:l(()=>[s("디플로이먼트, 서비스 생성하기")]),_:1})]),n("li",null,[e(p,{to:"#인그레스-만들기"},{default:l(()=>[s("인그레스 만들기")]),_:1}),n("ul",null,[n("li",null,[e(p,{to:"#도메인을-구입한-경우"},{default:l(()=>[s("도메인을 구입한 경우")]),_:1})]),n("li",null,[e(p,{to:"#도메인을-구입하지-않은-경우"},{default:l(()=>[s("도메인을 구입하지 않은 경우")]),_:1})])])])])]),w,e(r,d(u({title:"Unit 7.4 인그레스와 ELB LoadBalancer 서비스 생성하기",desc:"언제나 최신 Kubernetes",link:"https://pyrasis.com/jHLsAlwaysUpToDateKubernetes/Unit07/04",logo:"https://pyrasis.com/assets/images/pyrasis.png",background:"rgba(31,41,55,0.2)"})),null,16),L,E,B,S,j,e(r,d(u({title:"Installation Guide - Ingress-Nginx Controller",desc:"There are multiple ways to install the Ingress-Nginx Controller:",link:"https://kubernetes.github.io/ingress-nginx/deploy/#aws",logo:"https://kubernetes.github.io/ingress-nginx/assets/images/favicon.png",background:"rgba(0,148,133,0.2)"})),null,16),T,n("blockquote",null,[e(a,{icon:"iconfont icon-yaml"}),P]),A,n("blockquote",null,[e(a,{icon:"iconfont icon-yaml"}),D]),I,n("blockquote",null,[e(a,{icon:"iconfont icon-yaml"}),C]),N,n("p",null,[s("만약 도메인을 바꾸고 싶다면 "),e(a,{icon:"iconfont icon-yaml"}),K,s("에서 도메인을 수정한 뒤 "),R,s("를 해서는 Route 53에 적용이 되지 않습니다. 이때는 인그레스를 삭제 후 다시 생성해야 합니다.")]),U,n("blockquote",null,[e(a,{icon:"iconfont icon-yaml"}),O]),q,e(m,{id:"167",data:[{id:'<FontIcon icon="fa-brands fa-linux"/>리눅스 <FontIcon icon="iconfont icon-macos"/>macOS'},{id:'<FontIcon icon="fa-brands fa-windows"/>윈도우'}],active:1},{title0:l(({value:t,isActive:i})=>[e(a,{icon:"fa-brands fa-linux"}),s("리눅스 "),e(a,{icon:"iconfont icon-macos"}),s("macOS")]),title1:l(({value:t,isActive:i})=>[e(a,{icon:"fa-brands fa-windows"}),s("윈도우")]),tab0:l(({value:t,isActive:i})=>[H]),tab1:l(({value:t,isActive:i})=>[z]),_:1}),V,e(m,{id:"178",data:[{id:'<FontIcon icon="fa-brands fa-linux"/>리눅스 <FontIcon icon="iconfont icon-macos"/>macOS'},{id:'<FontIcon icon="fa-brands fa-windows"/>윈도우'}]},{title0:l(({value:t,isActive:i})=>[e(a,{icon:"fa-brands fa-linux"}),s("리눅스 "),e(a,{icon:"iconfont icon-macos"}),s("macOS")]),title1:l(({value:t,isActive:i})=>[e(a,{icon:"fa-brands fa-windows"}),s("윈도우")]),tab0:l(({value:t,isActive:i})=>[n("p",null,[s("리눅스, macOS는 "),e(a,{icon:"fas fa-folder-open"}),W,e(a,{icon:"fas fa-file-lines"}),F,s(" 파일을 수정해야 합니다. root 권한이 있어야 하므로 "),Z,s("으로 수정합니다.")]),G,M,n("blockquote",null,[e(a,{icon:"fas fa-folder-open"}),X,e(a,{icon:"fas fa-file-lines"}),Y]),J]),tab1:l(({value:t,isActive:i})=>[n("p",null,[s("윈도우는 "),e(a,{icon:"fas fa-folder-open"}),$,e(a,{icon:"fas fa-file-lines"}),Q,s(" 파일을 수정해야 합니다. 관리자 권한이 필요하므로, 메모장을 관리자 권한으로 실행한 뒤 파일을 엽니다.")]),n("p",null,[s(". "),e(a,{icon:"fas fa-folder-open"}),nn,e(a,{icon:"fas fa-file-lines"}),sn,s(" 파일의 마지막 부분에 다음 내용을 추가한 뒤 저장합니다.")]),n("blockquote",null,[n("p",null,[en,e(a,{icon:"fas fa-file-lines"}),an])]),ln]),_:1}),tn])}const dn=b(y,[["render",cn],["__file","07D.html.vue"]]),un=JSON.parse('{"path":"/k8s/always-up-to-date-kubernetes/07D.html","title":"07D. 인그레스와 ELB LoadBalancer 서비스 생성하기","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"07D. 인그레스와 ELB LoadBalancer 서비스 생성하기","description":"언제나 최신 Kubernetes > 07D. 인그레스와 ELB LoadBalancer 서비스 생성하기","category":["Kubernetes"],"tag":["crashcourse","digitalocean","kubernetes","minkube","kubctl"],"head":[[{"meta":null},{"property":"og:title","content":"언제나 최신 Kubernetes > 07D. 인그레스와 ELB LoadBalancer 서비스 생성하기"},{"property":"og:description","content":"07D. 인그레스와 ELB LoadBalancer 서비스 생성하기"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/k8s/always-up-to-date-kubernetes/07D.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/k8s/always-up-to-date-kubernetes/07D.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"07D. 인그레스와 ELB LoadBalancer 서비스 생성하기"}],["meta",{"property":"og:description","content":"언제나 최신 Kubernetes > 07D. 인그레스와 ELB LoadBalancer 서비스 생성하기"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateKubernetes/Unit07/6.png"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateKubernetes/Unit07/6.png"}],["meta",{"name":"twitter:image:alt","content":"07D. 인그레스와 ELB LoadBalancer 서비스 생성하기"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"digitalocean"}],["meta",{"property":"article:tag","content":"kubernetes"}],["meta",{"property":"article:tag","content":"minkube"}],["meta",{"property":"article:tag","content":"kubctl"}],["meta",{"property":"article:published_time","content":"2022-10-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"07D. 인그레스와 ELB LoadBalancer 서비스 생성하기\\",\\"image\\":[\\"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateKubernetes/Unit07/6.png\\"],\\"datePublished\\":\\"2022-10-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]],"next":"/k8s/always-up-to-date-kubernetes/08.md","date":"2022-10-22T00:00:00.000Z","isOrignial":false,"cover":"https://pyrasis.com/assets/images/jHLsAlwaysUpToDateKubernetes/Unit07/6.png"},"headers":[{"level":2,"title":"인그레스 컨트롤러 설치하기","slug":"인그레스-컨트롤러-설치하기","link":"#인그레스-컨트롤러-설치하기","children":[]},{"level":2,"title":"디플로이먼트, 서비스 생성하기","slug":"디플로이먼트-서비스-생성하기","link":"#디플로이먼트-서비스-생성하기","children":[]},{"level":2,"title":"인그레스 만들기","slug":"인그레스-만들기","link":"#인그레스-만들기","children":[{"level":3,"title":"도메인을 구입한 경우","slug":"도메인을-구입한-경우","link":"#도메인을-구입한-경우","children":[]},{"level":3,"title":"도메인을 구입하지 않은 경우","slug":"도메인을-구입하지-않은-경우","link":"#도메인을-구입하지-않은-경우","children":[]}]}],"git":{"createdTime":1712118043000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":3}]},"readingTime":{"minutes":3.04,"words":913},"filePathRelative":"k8s/always-up-to-date-kubernetes/07D.md","localizedDate":"2022년 10월 22일","excerpt":"\\n"}');export{dn as comp,un as data};
