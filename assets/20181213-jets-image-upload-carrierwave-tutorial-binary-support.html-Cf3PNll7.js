import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,a as e,t as h,b as s,w as t,n as m,g,d as a,e as o,r as i,o as v}from"./app-U_bew1in.js";const b={},f={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},_={class:"table-of-contents"},w=e("hr",null,null,-1),y=e("hr",null,null,-1),C=e("a",{href:"http://rubyonjets.com/",target:"_blank",rel:"noopener noreferrer"},"Jets",-1),A=e("a",{href:"https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-content-encodings-examples.html",target:"_blank",rel:"noopener noreferrer"},"API Gateway Binary Support",-1),S=e("a",{href:"http://rubyonjets.com/",target:"_blank",rel:"noopener noreferrer"},"Jets",-1),j={href:"https://github.com/carrierwaveuploader/carrierwave",target:"_blank",rel:"noopener noreferrer"},R=e("code",null,"carrierwaveuploader/carrierwave",-1),E=e("a",{href:"https://upload.demo.rubyonjets.com/",target:"_blank",rel:"noopener noreferrer"},"Live Demo",-1),x={href:"https://github.com/tongueroo/jets-example-upload",target:"_blank",rel:"noopener noreferrer"},W=e("code",null,"tongueroo/jets-example-upload",-1),I=o(`<hr><h2 id="brand-new-app" tabindex="-1"><a class="header-anchor" href="#brand-new-app"><span>Brand New App</span></a></h2><p>Create a brand new Jets app with scaffolding.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">gem <span class="token function">install</span> jets</span>
<span class="line">jets new upload</span>
<span class="line"><span class="token builtin class-name">cd</span> upload</span>
<span class="line">jets generate scaffold Post title:string photo:string</span>
<span class="line"><span class="token function">vim</span> .env.development <span class="token comment"># edit with local db settings</span></span>
<span class="line">jets db:create db:migrate</span>
<span class="line">jets server</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The app has a Post model with title and photo fields.</p><figure><img src="https://blog.boltops.com/img/posts/2018/12/upload-posts-index.png" alt="You should be able to now go to http://localhost:8888/posts, create a Post record, and see something like this" tabindex="0" loading="lazy"><figcaption>You should be able to now go to <a href="http://localhost:8888/posts" target="_blank" rel="noopener noreferrer">http://localhost:8888/posts</a>, create a Post record, and see something like this</figcaption></figure><hr><h2 id="update-form" tabindex="-1"><a class="header-anchor" href="#update-form"><span>Update form</span></a></h2><p>The starter scaffold provided us with basic CRUD abilities. However, the form does not handle uploading files yet. We’ll modify it so it does. Do the following to add a file input field:</p><ul><li>Update the form with <code>multipart: true</code></li><li>IMPORTANT: Get rid of the: <code>&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;put&quot; /&gt;</code></li><li>For multipart form data, we need to route the request and POST to the resource.</li><li>Replace <code>&lt;%= text_field_tag &quot;post[photo]&quot;, post.photo %&gt;</code> with <code>&lt;%= file_field_tag &quot;post[photo]&quot; %&gt;</code></li></ul><p>The form html should look something like this:</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line">&lt;%= form_tag(action, multipart: true) do %&gt;</span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>field<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    &lt;%= label_tag :title %&gt;</span>
<span class="line">    &lt;%= text_field_tag &quot;post[title]&quot;, post.title %&gt;</span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>field<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    &lt;%= label_tag :photo %&gt;</span>
<span class="line">    &lt;%= file_field_tag &quot;post[photo]&quot; %&gt;</span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here’s the full source code of the <a href="https://github.com/tongueroo/jets-example-upload/blob/master/app/views/posts/_form.html.erb" target="_blank" rel="noopener noreferrer">form</a>.</p><p>Upload the form again and you’ll notice that a text field value gets save to something like this now: <code>#&lt;ActionDispatch::Http::UploadedFile:0x00007fbe42cd1948&gt;</code></p><p>By changing the form to send multipart data, the controller now receives an <code>ActionDispatch::Http::UploadedFile</code> object. The <code>#&lt;ActionDispatch::Http::UploadedFile:0x00007fbe42cd1948&gt;</code> is a String representation of the file handle. We’re getting closer. This is the first step to getting image uploads working.</p><hr><h2 id="enter-carrierwave" tabindex="-1"><a class="header-anchor" href="#enter-carrierwave"><span>Enter Carrierwave</span></a></h2><p>Now we’ll add the <code>carrierwave</code> and <code>fog-aws</code> gems to save the actual uploaded data instead of just a text String representation of the upload. Add the following to your Gemfile:</p><div class="language-gemfile line-numbers-mode" data-highlighter="prismjs" data-ext="gemfile" data-title="gemfile"><pre><code><span class="line">gem &quot;carrierwave&quot;, git: &quot;https://github.com/tongueroo/carrierwave.git&quot;</span>
<span class="line">gem &quot;fog-aws&quot; # to use s3 as the storage backend</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,19),T={class:"hint-container tip"},q=e("p",{class:"hint-container-title"},"Note",-1),U={href:"https://github.com/tongueroo/carrierwave",target:"_blank",rel:"noopener noreferrer"},N=e("a",{href:"http://rubyonjets.com/docs/jets-turbines/",target:"_blank",rel:"noopener noreferrer"},"Turbines",-1),B=o(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">bundle <span class="token function">install</span></span>
<span class="line">jets generate uploader Photo</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment">#       create  app/uploaders/photo_uploader.rb</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Enable the uploader by overriding the Post model photo setter and getter methods with <code>mount_uploader</code>.</p>`,2),P=e("code",null,"app/models/",-1),D=e("code",null,"post.rb",-1),V=o(`<div class="language-ruby line-numbers-mode" data-highlighter="prismjs" data-ext="rb" data-title="rb"><pre><code><span class="line"><span class="token keyword">require</span> <span class="token string-literal"><span class="token string">&#39;carrierwave/orm/activerecord&#39;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Post</span> <span class="token operator">&lt;</span> ApplicationRecord</span>
<span class="line">  mount_uploader <span class="token symbol">:photo</span><span class="token punctuation">,</span> PhotoUploader <span class="token comment"># overrides photo</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="change-carrierwave-to-s3-storage" tabindex="-1"><a class="header-anchor" href="#change-carrierwave-to-s3-storage"><span>Change CarrierWave to S3 Storage</span></a></h2><p>By default, the generated CarrierWave uploader persists the upload to the filesystem. In the Serverless world, this doesn’t make sense. Instead, we’ll configure the uploader to save to s3.</p>`,4),L=e("code",null,"photo_uploader.rb",-1),z=e("code",null,"storage: fog",-1),J=e("code",null,"storage: file",-1),F=o(`<div class="language-RB line-numbers-mode" data-highlighter="prismjs" data-ext="RB" data-title="RB"><pre><code><span class="line">class PhotoUploader &lt; CarrierWave::Uploader::Base</span>
<span class="line">  storage :fog # we want to use the fog backend for s3 support</span>
<span class="line">  # ...</span>
<span class="line">end</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),G=e("code",null,"config/initializers/",-1),K=e("code",null,"carrierwave.rb",-1),M=o(`<div class="language-ruby line-numbers-mode" data-highlighter="prismjs" data-ext="rb" data-title="rb"><pre><code><span class="line">CarrierWave<span class="token punctuation">.</span>configure <span class="token keyword">do</span> <span class="token operator">|</span>config<span class="token operator">|</span></span>
<span class="line">  config<span class="token punctuation">.</span>fog_provider <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&#39;fog/aws&#39;</span></span></span>
<span class="line">  config<span class="token punctuation">.</span>fog_credentials <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token symbol">provider</span><span class="token operator">:</span>              <span class="token string-literal"><span class="token string">&#39;AWS&#39;</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token symbol">aws_access_key_id</span><span class="token operator">:</span>     <span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;CARRIERWAVE_AWS_ACCESS_KEY_ID&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token symbol">aws_secret_access_key</span><span class="token operator">:</span> <span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;CARRIERWAVE_AWS_SECRET_ACCESS_KEY&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment"># use_iam_profile:       true,                         # optional, defaults to false</span></span>
<span class="line">    <span class="token symbol">region</span><span class="token operator">:</span>                <span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;CARRIERWAVE_AWS_REGION&#39;</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  config<span class="token punctuation">.</span>fog_directory  <span class="token operator">=</span> <span class="token constant">ENV</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&#39;CARRIERWAVE_S3_BUCKET&#39;</span></span><span class="token punctuation">]</span></span>
<span class="line">  config<span class="token punctuation">.</span>fog_public     <span class="token operator">=</span> <span class="token boolean">true</span>                                                  <span class="token comment"># optional, defaults to true</span></span>
<span class="line">  config<span class="token punctuation">.</span>fog_attributes <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token symbol">cache_control</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">&quot;public, max-age=</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content"><span class="token number">1.</span>hour<span class="token punctuation">.</span>to_i</span><span class="token delimiter punctuation">}</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span> <span class="token comment"># optional, defaults to {}</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CarrierWave uses it’s own homegrown AWS client internally instead of the aws-sdk and currently does not support the use of <code>AWS_PROFILE</code>. So we’ll need to create an IAM user and generate AWS access key for it. For the instructions to create AWS access keys refer to these docs: <a href="https://aws.amazon.com/premiumsupport/knowledge-center/create-access-key/" target="_blank" rel="noopener noreferrer">How do I create an AWS access key</a>?</p><p>Next, create the s3 bucket:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">aws s3 mb s3://demo-uploads-<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%s<span class="token variable">)</span></span></span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># make_bucket: demo-uploads-1544733003</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We’re using <code>date +%s</code> to just add a timestamp to the bucket name. Note the S3 bucket name in my case is <code>demo-uploads-1544733003</code>, yours will be different.</p>`,5),O={href:"http://rubyonjets.com/docs/env-files/",target:"_blank",rel:"noopener noreferrer"},Y=e("code",null,".env.development",-1),H=e("code",null,"config/initializers/",-1),X=e("code",null,"carrierwave.rb",-1),Z=e("code",null,".env.development",-1),$=e("p",null,"It should look something like this:",-1),Q=e("code",null,".env.development",-1),ee=o(`<div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">CARRIERWAVE_AWS_ACCESS_KEY_ID=AKIAI7KI5LIKEXAMPLE</span>
<span class="line">CARRIERWAVE_AWS_SECRET_ACCESS_KEY=XOGuscz2lNyGFo1ChFntigzBp3IMMGdEXAMPLE</span>
<span class="line">CARRIERWAVE_AWS_REGION=us-west-2</span>
<span class="line">CARRIERWAVE_S3_BUCKET=demo-uploads-1544733003 # remember yours will be different</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="test-carrierwave" tabindex="-1"><a class="header-anchor" href="#test-carrierwave"><span>Test CarrierWave</span></a></h2><p>Now we’re ready to start the server and test real uploading with CarrierWave:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">jets server</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Go through the <a href="http://localhost:8888/posts" target="_blank" rel="noopener noreferrer">http://localhost:8888/posts</a> form again and upload an image.</p><p>![https://blog.boltops.com/img/posts/2018/12/upload-posts-show-text.png](This time you should see that the photo field has an s3 url. Something like: <code>https://demo-uploads-1544733003.s3.amazonaws.com/uploads/post/photo/1/jets.png</code>)</p><p>Let’s change the show page so that the photo shows up, change the photo ERB line to <code>&lt;%= image_tag(@post.photo) %&gt;</code>. The code should look something like this:</p>`,8),ae=e("code",null,"app/views/posts/",-1),se=e("code",null,"show.html.erb",-1),ne=o(`<div class="language-ruby line-numbers-mode" data-highlighter="prismjs" data-ext="rb" data-title="rb"><pre><code><span class="line"><span class="token operator">&lt;</span>p<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span>strong<span class="token operator">&gt;</span>Photo<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>strong<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span><span class="token operator">%=</span> image_tag<span class="token punctuation">(</span><span class="token variable">@post</span><span class="token punctuation">.</span>photo<span class="token punctuation">)</span> <span class="token string-literal"><span class="token string">%&gt;</span>
<span class="line">&lt;/p&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://blog.boltops.com/img/posts/2018/12/upload-posts-show-image.png" alt="The posts show page now looks like this" tabindex="0" loading="lazy"><figcaption>The posts show page now looks like this</figcaption></figure><p>We have successfully uploaded an image to s3 locally! 🎉</p><hr><h2 id="deploy-to-aws-lambda" tabindex="-1"><a class="header-anchor" href="#deploy-to-aws-lambda"><span>Deploy to AWS Lambda</span></a></h2>`,5),te=e("code",null,".env.development.remote",-1),oe=e("a",{href:"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Tutorials.WebServerDB.CreateDBInstance.html",target:"_blank",rel:"noopener noreferrer"},"Step 1: Create an RDS DB Instance",-1),le=o(`<p>Also, remember to migrate your remote database:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token assign-left variable">JETS_ENV_REMOTE</span><span class="token operator">=</span><span class="token number">1</span> jets db:create db:migrate</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now we’re ready to deploy:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">jets deploy</span>
<span class="line"><span class="token comment">#</span></span>
<span class="line"><span class="token comment"># ...</span></span>
<span class="line"><span class="token comment"># https://mf3z5ou0b1.execute-api.us-west-2.amazonaws.com/dev/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Go to the url provided at the end of the deploy.</p><figure><img src="https://blog.boltops.com/img/posts/2018/12/upload-posts-show-image-lambda.png" alt="You should be able to upload the same way you did locally and should see a similar posts show page" tabindex="0" loading="lazy"><figcaption>You should be able to upload the same way you did locally and should see a similar posts show page</figcaption></figure><hr><h2 id="more-info" tabindex="-1"><a class="header-anchor" href="#more-info"><span>More info</span></a></h2>`,8),ie=e("li",null,[a("Also more info at: "),e("a",{href:"http://rubyonjets.com/",target:"_blank",rel:"noopener noreferrer"},"Jets documentation site"),a(".")],-1),re=e("hr",null,null,-1);function pe(p,ce){const l=i("router-link"),c=i("VPCard"),n=i("FontIcon"),r=i("RouteLink");return v(),u("div",null,[e("h1",f,[e("a",k,[e("span",null,h(p.$frontmatter.title)+" 관련",1)])]),e("nav",_,[e("ul",null,[e("li",null,[s(l,{to:"#brand-new-app"},{default:t(()=>[a("Brand New App")]),_:1})]),e("li",null,[s(l,{to:"#update-form"},{default:t(()=>[a("Update form")]),_:1})]),e("li",null,[s(l,{to:"#enter-carrierwave"},{default:t(()=>[a("Enter Carrierwave")]),_:1})]),e("li",null,[s(l,{to:"#change-carrierwave-to-s3-storage"},{default:t(()=>[a("Change CarrierWave to S3 Storage")]),_:1})]),e("li",null,[s(l,{to:"#test-carrierwave"},{default:t(()=>[a("Test CarrierWave")]),_:1})]),e("li",null,[s(l,{to:"#deploy-to-aws-lambda"},{default:t(()=>[a("Deploy to AWS Lambda")]),_:1})]),e("li",null,[s(l,{to:"#more-info"},{default:t(()=>[a("More info")]),_:1})])])]),w,s(c,m(g({title:"Image Upload Carrierwave Tutorial",desc:"Jets Image Upload Carrierwave Tutorial - Binary Support",link:"https://blog.boltops.com/2018/12/13/jets-image-upload-carrierwave-tutorial-binary-support",logo:"https://res.cloudinary.com/boltops/image/fetch/c_limit,f_auto,q_auto,w_490/https://blog.boltops.com/img/posts/2018/12/image-upload-tutorial-v1.png",background:"rgba(54,70,153,0.2)"})),null,16),y,e("p",null,[C,a(", a Ruby Serverless Framework, makes use of "),A,a(" to make uploading images and files from AWS Lambda a straightforward task. We’ll cover how to upload images or any file with "),S,a(" and "),e("a",j,[s(n,{icon:"iconfont icon-github"}),R]),a(" in this tutorial guide. Note, please use Jets v1.3.1 and above for this tutorial guide as the jets new generator was updated for it. Here’s the "),E,a(" of this tutorial. The full source code is on Github: "),e("a",x,[s(n,{icon:"iconfont icon-github"}),W]),a(".")]),I,e("div",T,[q,e("p",null,[a("we’re using a "),e("a",U,[s(n,{icon:"iconfont icon-github"}),a("fork of Carriewave")]),a(" which adds Jets support via "),N,a(".")])]),B,e("blockquote",null,[s(n,{icon:"fas fa-folder-open"}),P,s(n,{icon:"iconfont icon-advanced"}),D,a(":")]),V,e("p",null,[a("Open up "),s(n,{icon:"iconfont icon-advanced"}),L,a(" and make sure that "),z,a(" is used instead of the default "),J,a(".")]),F,e("p",null,[a("Add an "),s(n,{icon:"fas fa-folder-open"}),G,s(n,{icon:"iconfont icon-advanced"}),K,a(":")]),M,e("p",null,[a("Add these values to the "),e("a",O,[s(n,{icon:"fas fa-file-lines"}),Y]),a(" file so they get picked up by "),s(n,{icon:"fas fa-folder-open"}),H,s(n,{icon:"iconfont icon-advanced"}),X,a(". You can use a different .env.production file for different settings like an s3 bucket. We’re working only with "),s(n,{icon:"fas fa-file-lines"}),Z,a(" for the sake of this tutorial.")]),$,e("blockquote",null,[s(n,{icon:"fas fa-file-lines"}),Q,a(":")]),ee,e("blockquote",null,[s(n,{icon:"fas fa-folder-open"}),ae,s(n,{icon:"iconfont icon-advanced"}),se,a(":")]),ne,e("p",null,[a("Before deploying to AWS Lambda, adjust your "),s(n,{icon:"fas fa-file-lines"}),te,a(" to point to an RDS database. Setting up an RDS database is covered in "),oe,a(". It is also briefly mentioned in this video: "),s(r,{to:"/ruby/rubyonjets-learning-content/20180908-jets-tutorial-deploy-to-aws-lambda-part-2.html"},{default:t(()=>[a("Jets Tutorial Deploy to AWS Lambda Part 2: AWS Lambda Ruby")]),_:1}),a(".")]),le,e("ul",null,[e("li",null,[a("For an Jets Introduction: "),s(r,{to:"/ruby/rubyonjets-learning-content/20180818-introducing-jets-a-ruby-serverless-framework.html"},{default:t(()=>[a("Introducing Jets: A Ruby Serverless Framework")]),_:1}),a(".")]),ie]),re])}const he=d(b,[["render",pe],["__file","20181213-jets-image-upload-carrierwave-tutorial-binary-support.html.vue"]]),me=JSON.parse('{"path":"/ruby/rubyonjets-learning-content/20181213-jets-image-upload-carrierwave-tutorial-binary-support.html","title":"Image Upload Carrierwave Tutorial","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Image Upload Carrierwave Tutorial","description":"Jets - Learning Content > Image Upload Carrierwave Tutorial","category":["Ruby"],"tag":["crashcourse","ruby","jets","aws","aws-lambda","cloudwatch"],"head":[[{"meta":null},{"property":"og:title","content":"Jets - Learning Content > Image Upload Carrierwave Tutorial"},{"property":"og:description","content":"Image Upload Carrierwave Tutorial"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/ruby/rubyonjets-learning-content/20181213-jets-image-upload-carrierwave-tutorial-binary-support.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/ruby/rubyonjets-learning-content/20181213-jets-image-upload-carrierwave-tutorial-binary-support.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Image Upload Carrierwave Tutorial"}],["meta",{"property":"og:description","content":"Jets - Learning Content > Image Upload Carrierwave Tutorial"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://localhost:8888/posts"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"ruby"}],["meta",{"property":"article:tag","content":"jets"}],["meta",{"property":"article:tag","content":"aws"}],["meta",{"property":"article:tag","content":"aws-lambda"}],["meta",{"property":"article:tag","content":"cloudwatch"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Image Upload Carrierwave Tutorial\\",\\"image\\":[\\"http://localhost:8888/posts\\",\\"https://blog.boltops.com/img/posts/2018/12/upload-posts-show-image.png\\",\\"https://blog.boltops.com/img/posts/2018/12/upload-posts-show-image-lambda.png\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Brand New App","slug":"brand-new-app","link":"#brand-new-app","children":[]},{"level":2,"title":"Update form","slug":"update-form","link":"#update-form","children":[]},{"level":2,"title":"Enter Carrierwave","slug":"enter-carrierwave","link":"#enter-carrierwave","children":[]},{"level":2,"title":"Change CarrierWave to S3 Storage","slug":"change-carrierwave-to-s3-storage","link":"#change-carrierwave-to-s3-storage","children":[]},{"level":2,"title":"Test CarrierWave","slug":"test-carrierwave","link":"#test-carrierwave","children":[]},{"level":2,"title":"Deploy to AWS Lambda","slug":"deploy-to-aws-lambda","link":"#deploy-to-aws-lambda","children":[]},{"level":2,"title":"More info","slug":"more-info","link":"#more-info","children":[]}],"git":{"createdTime":1703739559000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":10}]},"readingTime":{"minutes":4.25,"words":1275},"filePathRelative":"ruby/rubyonjets-learning-content/20181213-jets-image-upload-carrierwave-tutorial-binary-support.md","localizedDate":"2023년 12월 28일","excerpt":"\\n\\n<hr>\\n"}');export{he as comp,me as data};
