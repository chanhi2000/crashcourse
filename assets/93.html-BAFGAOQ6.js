import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,a as n,t as m,b as s,w as t,n as p,g as o,e as c,r as u,o as h,d as i}from"./app-U_bew1in.js";const v={},f={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},g={class:"table-of-contents"},b=n("hr",null,null,-1),y=c('<h2 id="project-18-part-2" tabindex="-1"><a class="header-anchor" href="#project-18-part-2"><span>Project 18, part 2</span></a></h2><p>Today we’re continuing our technique project on view layout, exploring one of the most powerful layout views we have available to us: <code>GeometryReader</code>. This lets us read the size and position for a view at runtime, and <em>keep</em> reading those values as they change over time.</p><p>I realize that probably doesn’t sound terribly special, but it opens the door to a number of fascinating effects that look great and only take one or two lines of code to create. Yes, <em>one or two</em> – once you understand how <code>GeometryReader</code> works I really hope you’re able to take some time to experiment!</p><p>As the British poet William Blake once said, “the true method of knowledge is experiment,” so if you really want this stuff to stick in your head you should play around with it!</p><p><strong>Today you have four topics to work through, in which you’ll learn about frames, coordinate spaces, <code>GeometryReader</code>, and more.</strong></p><h3 id="resizing-images-to-fit-the-screen-using-geometryreader" tabindex="-1"><a class="header-anchor" href="#resizing-images-to-fit-the-screen-using-geometryreader"><span>Resizing images to fit the screen using GeometryReader</span></a></h3>',6),x={class:"hint-container details"},R=n("summary",null,"Resizing images to fit the screen using GeometryReader",-1),T=c(`<p>SwiftUI lets us create views with exact sizes like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">.</span>example<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>All this works great if we want fixed-sized views, but very often you want images that automatically scale up to fill more of the screen in one or both dimensions. That is, rather than hard-coding a width of 300, what you <em>really</em> want to say is “make this image fill 80% of the width of the screen.”</p><p>One option is to use the <code>containerRelativeFrame()</code> modifier, which we covered back in project 8. But SwiftUI also gives us a dedicated type for this work called <code>GeometryReader</code>, and it’s remarkably powerful.</p><p>We’ll go into much more detail on <code>GeometryReader</code> shortly, but for now we’re going to use it for one job: to make sure our image fills some percentage of its container&#39;s width.</p><p><code>GeometryReader</code> is a view just like the others we’ve used, except when we create it we’ll be handed a GeometryProxy object to use. This lets us query the environment: how big is the container? What position is our view? Are there any safe area insets? And so on.</p><p>In principle that seems simple enough, but in practice you need to use <code>GeometryReader</code> carefully because it automatically expands to take up available space in your layout, then positions its own content aligned to the top-left corner.</p><p>For example, we could make an image that’s 80% the width of the screen, with a fixed height of 300:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">GeometryReader</span> <span class="token punctuation">{</span> proxy <span class="token keyword">in</span></span>
<span class="line">    <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">.</span>example<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> proxy<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can even remove the <code>height</code> from the image, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">GeometryReader</span> <span class="token punctuation">{</span> proxy <span class="token keyword">in</span></span>
<span class="line">    <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">.</span>example<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> proxy<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We’ve given SwiftUI enough information that it can automatically figure out the height: it knows the original width, it knows our target width, and it knows our content mode, so it understands how the target height of the image will be proportional to the target width.</p><p>Now, you&#39;re probably wondering how this is any different from using <code>containerRelativeFrame()</code>. Well, the problem is that <code>containerRelativeFrame()</code> has a very precise definition of what constitutes a &quot;container&quot;: it might be the whole screen, it might be a <code>NavigationStack</code>, it might be a <code>List</code> or a <code>ScrollView</code>, and so on, but it <em>won&#39;t</em> consider a <code>HStack</code> or a <code>VStack</code> a container.</p><p>This causes problems when using views in stacks, because you can&#39;t easily subdivide them using <code>containerRelativeFrame()</code>. For example, the code below places two views in a <code>HStack</code>, with one being given a fixed width and the other using a container relative frame:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">HStack</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;IMPORTANT&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">.</span>example<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">containerRelativeFrame</span><span class="token punctuation">(</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">)</span> <span class="token punctuation">{</span> size<span class="token punctuation">,</span> axis <span class="token keyword">in</span></span>
<span class="line">            size <span class="token operator">*</span> <span class="token number">0.8</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That&#39;s not going to lay out well at all, because the <code>containerRelativeFrame()</code> will read the whole screen width for its size, meaning that image will be 80% the screen width despite 200 points of the screen being a text view.</p><p>On the other hand, using a <code>GeometryReader</code> <em>will</em> subdivide the space correctly:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">GeometryReader</span> <span class="token punctuation">{</span> proxy <span class="token keyword">in</span></span>
<span class="line">    <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">.</span>example<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> proxy<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Of course, that introduces a different problem: our image is now aligned to the top-left corner of the <code>GeometryReader</code>!</p><p>Fortunately, this is easily solved. If you ever want to center a view inside a <code>GeometryReader</code>, rather than aligning to the top-left corner, add a second frame that makes it fill the full space of the container, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">GeometryReader</span> <span class="token punctuation">{</span> proxy <span class="token keyword">in</span></span>
<span class="line">    <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">.</span>example<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">resizable</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">scaledToFit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> proxy<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> proxy<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token punctuation">,</span> height<span class="token punctuation">:</span> proxy<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),_=n("h3",{id:"understanding-frames-and-coordinates-inside-geometryreader",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#understanding-frames-and-coordinates-inside-geometryreader"},[n("span",null,"Understanding frames and coordinates inside GeometryReader")])],-1),S={class:"hint-container details"},G=n("summary",null,"Understanding frames and coordinates inside GeometryReader",-1),V=c(`<p>SwiftUI’s <code>GeometryReader</code> allows us to use its size and coordinates to determine a child view’s layout, and it’s the key to creating some of the most remarkable effects in SwiftUI.</p><p>You should always keep in mind SwiftUI’s three-step layout system when working with <code>GeometryReader</code>: parent proposes a size for the child, the child uses that to determine its own size, and parent uses that to position the child appropriately.</p><p>In its most basic usage, what <code>GeometryReader</code> does is let us read the size that was proposed by the parent, then use that to manipulate our view. For example, we could use <code>GeometryReader</code> to make a text view have 90% of all available width regardless of its content:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">GeometryReader</span> <span class="token punctuation">{</span> proxy <span class="token keyword">in</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, World!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> proxy<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token number">0.9</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That <code>proxy</code> parameter that comes in is a <code>GeometryProxy</code>, and it contains the proposed size, any safe area insets that have been applied, plus a method for reading frame values that we’ll look at in a moment.</p><p><code>GeometryReader</code> has an interesting side effect that might catch you out at first: the view that gets returned has a flexible preferred size, which means it will expand to take up more space as needed. You can see this in action if you place the <code>GeometryReader</code> into a <code>VStack</code> then put some more text below it, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">GeometryReader</span> <span class="token punctuation">{</span> proxy <span class="token keyword">in</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, World!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> proxy<span class="token punctuation">.</span>size<span class="token punctuation">.</span>width <span class="token operator">*</span> <span class="token number">0.9</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;More text&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You’ll see “More text” gets pushed right to the bottom of the screen, because the <code>GeometryReader</code> takes up all remaining space. To see it in action, add <code>background(.green)</code> as a modifier to the <code>GeometryReader</code> and you’ll see just how big it is. Note: This is a <em>preferred</em> size, not an <em>absolute</em> size, which means it’s still flexible depending on its parent.</p><p>When it comes to reading the frame of a view, <code>GeometryProxy</code> provides a <code>frame(in:)</code> method rather than simple properties. This is because the concept of a “frame” includes X and Y coordinates, which don’t make any sense in isolation – do you want the view’s absolute X and Y coordinates, or their X and Y coordinates compared to their parent?</p><p>SwiftUI calls these options <em>coordinate spaces</em>, and those two in particular are called the global space (measuring our view’s frame relative to the whole screen), and the local space (measuring our view’s frame relative to its parent). We can also create custom coordinate spaces by attaching the <code>coordinateSpace()</code> modifier to a view – any children of that can then read its frame relative to that coordinate space.</p><p>To demonstrate how coordinate spaces work, we could create some example views in various stacks, attach a custom coordinate space to the outermost view, then add an <code>onTapGesture</code> to one of the views inside it so it can print out the frame globally, locally, and using the custom coordinate space.</p><p>Try this code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">OuterView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Top&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token class-name">InnerView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Bottom&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">InnerView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">HStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Left&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token class-name">GeometryReader</span> <span class="token punctuation">{</span> proxy <span class="token keyword">in</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Center&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>blue<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span>onTapGesture <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Global center: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">proxy<span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>global<span class="token punctuation">)</span><span class="token punctuation">.</span>midX</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> x </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">proxy<span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>global<span class="token punctuation">)</span><span class="token punctuation">.</span>midY</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token function">print</span><span class="token punctuation">(</span>&quot;<span class="token class-name">Custom</span> center<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Custom&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>midX<span class="token punctuation">)</span> x <span class="token punctuation">\\</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Custom&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>midY<span class="token punctuation">)</span>&quot;<span class="token punctuation">)</span></span>
<span class="line">                        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Local center: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">proxy<span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>local<span class="token punctuation">)</span><span class="token punctuation">.</span>midX</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> x </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">proxy<span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>local<span class="token punctuation">)</span><span class="token punctuation">.</span>midY</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>orange<span class="token punctuation">)</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Right&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">OuterView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">coordinateSpace</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Custom&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The output you get when that code runs depends on the device you’re using, but here’s what I got:</p><ul><li>Global center: 191.33 x 440.60</li><li>Custom center: 191.33 x 381.60</li><li>Local center: 153.66 x 350.63</li></ul><p>Those sizes are mostly different, so hopefully you can see the full range of how these frame work:</p><ul><li>A global center X of 191 means that the center of the geometry reader is 191 points from the left edge of the screen.</li><li>A global center Y of 440 means the center of the geometry reader is 440 points from the top edge of the screen. This isn’t dead in the center of the screen because there is more safe area at the top than the bottom.</li><li>A custom center X of 191 means the center of the geometry reader is 191 points from the left edge of whichever view owns the “Custom” coordinate space, which in our case is <code>OuterView</code> because we attach it in <code>ContentView</code>. This number matches the global position because <code>OuterView</code> runs edge to edge horizontally.</li><li>A custom center Y of 381 means the center of the geometry reader is 381 points from the top edge of <code>OuterView</code>. This value is smaller than the global center Y because <code>OuterView</code> doesn’t extend into the safe area.</li><li>A local center X of 153 means the center of the geometry reader is 153 points from the left edge of its direct container.</li><li>A local center Y of 350 means the center of the geometry reader is 350 points from the top edge of its direct container.</li></ul><p>Which coordinate space you want to use depends on what question you want to answer:</p><ul><li>Want to know where this view is on the screen? Use the global space.</li><li>Want to know where this view is relative to its parent? Use the local space.</li><li>What to know where this view is relative to some other view? Use a custom space.</li></ul>`,19),z=n("h3",{id:"scrollview-effects-using-geometryreader",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#scrollview-effects-using-geometryreader"},[n("span",null,"ScrollView effects using GeometryReader")])],-1),I={class:"hint-container details"},q=n("summary",null,"ScrollView effects using GeometryReader",-1),j=c(`<p>When we use the <code>frame(in:)</code> method of a <code>GeometryProxy</code>, SwiftUI will calculate the view’s current position in the coordinate space we ask for. However, as the view <em>moves</em> those values will change, and SwiftUI will automatically make sure <code>GeometryReader</code> stays updated.</p><p>Previously we used <code>DragGesture</code> to store a width and height as an @<code>State</code> property, because it allowed us to adjust other properties based on the drag amount to create neat effects. However, with <code>GeometryReader</code> we can grab values from a view’s environment dynamically, feeding in its absolute or relative position into various modifiers. Even better, you can nest geometry readers if needed, so that one can read the geometry for a higher-up view and the other can read the geometry for something further down the tree.</p><p>To try some effects with <code>GeometryReader</code>, we could create a spinning helix effect by creating 50 text views in a vertical scroll view, each of which has an infinite maximum width so they take up all the screen space, then apply a 3D rotation effect based on their own position.</p><p>Start by making a basic <code>ScrollView</code> of text views with varying background colors:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Color</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>red<span class="token punctuation">,</span> <span class="token punctuation">.</span>green<span class="token punctuation">,</span> <span class="token punctuation">.</span>blue<span class="token punctuation">,</span> <span class="token punctuation">.</span>orange<span class="token punctuation">,</span> <span class="token punctuation">.</span>pink<span class="token punctuation">,</span> <span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>yellow<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ScrollView</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> index <span class="token keyword">in</span></span>
<span class="line">                <span class="token class-name">GeometryReader</span> <span class="token punctuation">{</span> proxy <span class="token keyword">in</span></span>
<span class="line">                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Row #</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">index</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">:</span> <span class="token punctuation">.</span>infinity<span class="token punctuation">)</span></span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span>index <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To apply a helix-style spinning effect, place this <code>rotation3DEffect()</code> directly below the <code>background()</code> modifier:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">rotation3DEffect</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">degrees</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>global<span class="token punctuation">)</span><span class="token punctuation">.</span>minY <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> z<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>When you run that back you’ll see that text views at the bottom of the screen are flipped, those at the center are rotated about 90 degrees, and those at the very top are normal. More importantly, as you scroll around they all rotate as you move in the scroll view.</p><p>That’s a neat effect, but it’s also problematic because the views only reach their natural orientation when they are at the very top – it’s really hard to read. To fix this, we can apply a more complex <code>rotation3DEffect()</code> that subtracts half the height of the main view, but that means using a <em>second</em> <code>GeometryReader</code> to get the size of the main view:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> colors<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">Color</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>red<span class="token punctuation">,</span> <span class="token punctuation">.</span>green<span class="token punctuation">,</span> <span class="token punctuation">.</span>blue<span class="token punctuation">,</span> <span class="token punctuation">.</span>orange<span class="token punctuation">,</span> <span class="token punctuation">.</span>pink<span class="token punctuation">,</span> <span class="token punctuation">.</span>purple<span class="token punctuation">,</span> <span class="token punctuation">.</span>yellow<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">GeometryReader</span> <span class="token punctuation">{</span> fullView <span class="token keyword">in</span></span>
<span class="line">            <span class="token class-name">ScrollView</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> index <span class="token keyword">in</span></span>
<span class="line">                    <span class="token class-name">GeometryReader</span> <span class="token punctuation">{</span> proxy <span class="token keyword">in</span></span>
<span class="line">                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Row #</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">index</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>maxWidth<span class="token punctuation">:</span> <span class="token punctuation">.</span>infinity<span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span>colors<span class="token punctuation">[</span>index <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">rotation3DEffect</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">degrees</span><span class="token punctuation">(</span>proxy<span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>global<span class="token punctuation">)</span><span class="token punctuation">.</span>minY <span class="token operator">-</span> fullView<span class="token punctuation">.</span>size<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">,</span> axis<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> z<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>height<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>With that in place, the views will reach a natural orientation nearer the center of the screen, which will look better.</p><p>We can use a similar technique to create CoverFlow-style scrolling rectangles:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span>   </span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ScrollView</span><span class="token punctuation">(</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">,</span> showsIndicators<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">HStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">..&lt;</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> num <span class="token keyword">in</span></span>
<span class="line">                    <span class="token class-name">GeometryReader</span> <span class="token punctuation">{</span> proxy <span class="token keyword">in</span></span>
<span class="line">                        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Number </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">num</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">rotation3DEffect</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">degrees</span><span class="token punctuation">(</span><span class="token operator">-</span>proxy<span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>global<span class="token punctuation">)</span><span class="token punctuation">.</span>minX<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">,</span> axis<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> z<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>All this code works well, and I think you&#39;ll agree these are fun effects. But they aren&#39;t exactly <em>easy</em>. Fortunately, SwiftUI provides better options – let&#39;s look at them next…</p>`,14),D=n("h3",{id:"scrollview-effects-using-visualeffect-and-scrolltargetbehavior",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#scrollview-effects-using-visualeffect-and-scrolltargetbehavior"},[n("span",null,"ScrollView effects using visualEffect() and scrollTargetBehavior()")])],-1),U={class:"hint-container details"},E=n("summary",null,"ScrollView effects using visualEffect() and scrollTargetBehavior()",-1),F=c(`<p>Previously we looked at how to use <code>GeometryReader</code> to create varying effects based on where a view is on the screen. That code all works fine, and you&#39;ll certainly see it in lots of apps, but SwiftUI provides some helpful alternatives that can be much easier.</p><p>First, let&#39;s look again at some previous code – this creates a simple CoverFlow-style effect, where we can swipe horizontally to see views moving in 3D space:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">ScrollView</span><span class="token punctuation">(</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">,</span> showsIndicators<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">HStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">..&lt;</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> num <span class="token keyword">in</span></span>
<span class="line">            <span class="token class-name">GeometryReader</span> <span class="token punctuation">{</span> proxy <span class="token keyword">in</span></span>
<span class="line">                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Number </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">num</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">rotation3DEffect</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">degrees</span><span class="token punctuation">(</span><span class="token operator">-</span>proxy<span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>global<span class="token punctuation">)</span><span class="token punctuation">.</span>minX<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">,</span> axis<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> z<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That code uses <code>GeometryReader</code> to read each view&#39;s position in the scroll view, but we&#39;ve needed to add an explicit width and height to make stop our <code>GeometryReader</code> from automatically expanding to take up all available space.</p><p>SwiftUI gives us an alternative called <code>visualEffect()</code>, and it has a very specific purpose and a very specific restriction: it lets us apply effects that change the way something looks, which in practice means it <em>can&#39;t</em> do anything that affects the actual layout position or frame of a view.</p><p>This modifier works in a very interesting way: we pass it a closure to run, and we&#39;ll be given the content we&#39;re modifying as well as a <code>GeometryProxy</code> for it. That content we&#39;re modifying is our view, but we <em>can&#39;t</em> just apply any modifiers we want like we normally would – again, we can&#39;t do anything that affects the layout position of the view.</p><p>Fortunately, that still leaves lots of modifiers for us to use, including some that might surprise you – we can use <code>rotationEffect()</code>, <code>rotation3DEffect()</code>, and even <code>offset()</code>, because although they effect how views are drawn, they don&#39;t change the frame of the view.</p><p>So, we can rewrite our code using <code>visualEffect()</code> like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">ScrollView</span><span class="token punctuation">(</span><span class="token punctuation">.</span>horizontal<span class="token punctuation">,</span> showsIndicators<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">HStack</span><span class="token punctuation">(</span>spacing<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ForEach</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">..&lt;</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> num <span class="token keyword">in</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Number </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">num</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>largeTitle<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">background</span><span class="token punctuation">(</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span>visualEffect <span class="token punctuation">{</span> content<span class="token punctuation">,</span> proxy <span class="token keyword">in</span></span>
<span class="line">                    content</span>
<span class="line">                        <span class="token punctuation">.</span><span class="token function">rotation3DEffect</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">degrees</span><span class="token punctuation">(</span><span class="token operator">-</span>proxy<span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span><span class="token keyword">in</span><span class="token punctuation">:</span> <span class="token punctuation">.</span>global<span class="token punctuation">)</span><span class="token punctuation">.</span>minX<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">,</span> axis<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> z<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Although the code is only a little shorter, this is a much neater solution than using <code>GeometryReader</code> because we no longer need to add a second <code>frame()</code> modifier to stop things taking up the full screen – this scroll view can fit alongside other parts of our SwiftUI layout without screwing things up.</p><p>What we have now is a lot nicer, but with just two extra modifiers we can make this effect work a lot better.</p><p>The first is <code>scrollTargetLayout()</code>, which I&#39;d like you to apply to the <code>HStack</code>. That tells SwiftUI we want to make each view inside this <code>HStack</code> a scroll target – something that is considered important when it comes to scrolling around.</p><p>The second is <code>.scrollTargetBehavior(.viewAligned)</code>, which I&#39;d like you to apply to the <code>ScrollView</code>. That tells SwiftUI it should make this scroll view move smoothly between all scroll targets, which we just defined as being every view inside our <code>HStack</code>.</p><p>If you put those two together, the result is lovely: we can now scroll smoothly between our text views, and whenever we let go SwiftUI will automatically ensure one view snaps to the left edge.</p>`,14),C=n("p",null,"If you make some fun effects, try recording a video and sharing it online – it’s a great way to stay accountable, but also to show folks how far you’ve come!",-1),W=n("hr",null,null,-1);function Y(r,P){const a=u("router-link"),e=u("VPCard"),l=u("VidStack");return h(),k("div",null,[n("h1",f,[n("a",w,[n("span",null,m(r.$frontmatter.title)+" 관련",1)])]),n("nav",g,[n("ul",null,[n("li",null,[s(a,{to:"#project-18-part-2"},{default:t(()=>[i("Project 18, part 2")]),_:1}),n("ul",null,[n("li",null,[s(a,{to:"#resizing-images-to-fit-the-screen-using-geometryreader"},{default:t(()=>[i("Resizing images to fit the screen using GeometryReader")]),_:1})]),n("li",null,[s(a,{to:"#understanding-frames-and-coordinates-inside-geometryreader"},{default:t(()=>[i("Understanding frames and coordinates inside GeometryReader")]),_:1})]),n("li",null,[s(a,{to:"#scrollview-effects-using-geometryreader"},{default:t(()=>[i("ScrollView effects using GeometryReader")]),_:1})]),n("li",null,[s(a,{to:"#scrollview-effects-using-visualeffect-and-scrolltargetbehavior"},{default:t(()=>[i("ScrollView effects using visualEffect() and scrollTargetBehavior()")]),_:1})])])])])]),b,s(e,p(o({title:"100 Days of SwiftUI - Day 93",desc:"Project 18, part 2",link:"https://www.hackingwithswift.com/100/swiftui/93",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),y,n("details",x,[R,s(e,p(o({title:"100 Days of SwiftUI - Day 93 - Resizing images to fit the screen using GeometryReader",desc:"Resizing images to fit the screen using GeometryReader",link:"https://www.hackingwithswift.com/books/ios-swiftui/resizing-images-to-fit-the-screen-using-geometryreader",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(l,{src:"youtube/SENZiZ_IFgU"}),T]),_,n("details",S,[G,s(e,p(o({title:"100 Days of SwiftUI - Day 93 - Understanding frames and coordinates inside GeometryReader",desc:"Understanding frames and coordinates inside GeometryReader",link:"https://www.hackingwithswift.com/books/ios-swiftui/understanding-frames-and-coordinates-inside-geometryreader",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(l,{src:"youtube/cE5d9uxQ-10"}),V]),z,n("details",I,[q,s(e,p(o({title:"100 Days of SwiftUI - Day 93 - ScrollView effects using GeometryReader",desc:"ScrollView effects using GeometryReader",link:"https://www.hackingwithswift.com/books/ios-swiftui/scrollview-effects-using-geometryreader",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(l,{src:"youtube/bh-fRo7WZNY"}),j]),D,n("details",U,[E,s(e,p(o({title:"100 Days of SwiftUI - Day 93 - ScrollView effects using visualEffect() and scrollTargetBehavior()",desc:"ScrollView effects using visualEffect() and scrollTargetBehavior()",link:"https://www.hackingwithswift.com/books/ios-swiftui/scrollview-effects-using-visualeffect-and-scrollTargetBehavior",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(l,{src:"youtube/c7QE4XOQ_nA"}),F]),C,W])}const H=d(v,[["render",Y],["__file","93.html.vue"]]),N=JSON.parse('{"path":"/swift/100-days-of-swiftui/93.html","title":"Day 93","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 93","description":"100 Days of SwiftUI > Day 93","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 93"},{"property":"og:description","content":"Day 93"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/93.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/93.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 93"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 93"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 93\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 18, part 2","slug":"project-18-part-2","link":"#project-18-part-2","children":[{"level":3,"title":"Resizing images to fit the screen using GeometryReader","slug":"resizing-images-to-fit-the-screen-using-geometryreader","link":"#resizing-images-to-fit-the-screen-using-geometryreader","children":[]},{"level":3,"title":"Understanding frames and coordinates inside GeometryReader","slug":"understanding-frames-and-coordinates-inside-geometryreader","link":"#understanding-frames-and-coordinates-inside-geometryreader","children":[]},{"level":3,"title":"ScrollView effects using GeometryReader","slug":"scrollview-effects-using-geometryreader","link":"#scrollview-effects-using-geometryreader","children":[]},{"level":3,"title":"ScrollView effects using visualEffect() and scrollTargetBehavior()","slug":"scrollview-effects-using-visualeffect-and-scrolltargetbehavior","link":"#scrollview-effects-using-visualeffect-and-scrolltargetbehavior","children":[]}]}],"git":{"createdTime":1709774784000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":6}]},"readingTime":{"minutes":10.62,"words":3186},"filePathRelative":"swift/100-days-of-swiftui/93.md","localizedDate":"2024년 3월 7일","excerpt":"\\n\\n<hr>\\n"}');export{H as comp,N as data};
