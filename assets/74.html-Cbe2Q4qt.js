import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as u,a as e,t as h,b as t,w as a,n as o,g as i,e as c,r as p,o as m,d as l}from"./app-U_bew1in.js";const w={},k={id:"frontmatter-title-관련",tabindex:"-1"},f={class:"header-anchor",href:"#frontmatter-title-관련"},g={class:"table-of-contents"},y=e("hr",null,null,-1),v=c('<h2 id="milestone-projects-19-21" tabindex="-1"><a class="header-anchor" href="#milestone-projects-19-21"><span>Milestone: Projects 19-21</span></a></h2><p>In the last week your brain has been crammed full of important Swift and iOS skills. Don’t believe me? Here’s a list that’s not even complete: extensions, <code>NotificationCenter</code>, <code>UITextView</code>, color blending, shake gestures, <code>for case let</code>, reversing arrays, local notifications, and more – and that’s just in one week, while also building an app and a game!</p><p>Of course, just <em>learning</em> something new isn’t enough – it’s important to put that learning into practice, not only so that it really starts to stick in your head, but also so that you can take another step towards your goal of being an app developer. After all, it’s fun learning and I hope you’ll carry on discovering great new things in iOS and Swift for years to come, but I hope you have a greater goal in mind.</p><p>Henry Petroski, a professor of engineering at Duke University in the US, said “as engineers, we’re going to be in a position to change the world, not just study it.” Now that the end of the 100 days challenge is almost in sight, how do <em>you</em> plan to change the world?</p><p><strong>Today you have three topics to work through, one of which of is your challenge.</strong></p><h3 id="what-you-learned" tabindex="-1"><a class="header-anchor" href="#what-you-learned"><span>What you learned</span></a></h3>',6),b={class:"hint-container details"},_=e("summary",null,"What you learned",-1),x=c("<p>These three projects were a mixed bag in terms of difficulty: although Safari extensions are clearly a bit of a wart in Apple’s APIs, it’s still marvelous to be able to add features directly to one of the most important features in iOS. As for the Fireworks Night project, I hope it showed you it doesn’t take much in the way of graphics to make something fun!</p><p>You also learned about local notifications, which might seem trivial at first but actually open up a huge range of possibilities for your apps because you can prompt users to take action even when your app isn’t running.</p><p>The best example of this is the Duolingo app – it sets “You should practice your language!” reminders for 1 day, 2 days, and 3 days after the app was most recently launched. If you launch the app before the reminders appear, they just clear them and reset the timer so you never notice them.</p><p>Here’s a quick reminder of the things we covered:</p><ul><li>How to make extensions for Safari by connecting Swift code to JavaScript. Getting the connection working isn’t too easy, but once it’s set up you can send whatever you want between the two.</li><li>Editing multi-line text using <code>UITextView</code>. This is used by apps like Mail, Messages, and Notes, so you’ll definitely use it in your own apps.</li><li>You met Objective-C’s <code>NSDictionary</code> type. It’s not used much in Swift because you lose Swift’s strong typing, but it’s occasionally unavoidable.</li><li>We used the iOS <code>NotificationCenter</code> center class to receive system messages. Specifically, we requested that a method be called when the keyboard was shown or hidden so that we can adjust the insets of our text view. We’ll be using this again in a later project, so you have ample chance for practice.</li><li>The <code>follow()</code> SKAction, which causes a node to follow a bezier path that you specify. Use <code>orientToPath: true</code> to make the sprite rotate as it follows.</li><li>The <code>color</code> and <code>colorBlendFactor</code> properties for <code>SKSpriteNode</code>, which let you dynamically recolor your sprite.</li><li>The <code>motionBegan()</code> method, which gets called on your view controllers when the user shakes their device.</li><li>Swift’s <code>for case let</code> syntax for adding a condition to a loop. The <code>UserNotifications</code> framework, which allows you to create notifications and attach them to triggers.</li></ul>",5),j=e("h3",{id:"key-points",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#key-points"},[e("span",null,"Key points")])],-1),I={class:"hint-container details"},N=e("summary",null,"Key points",-1),S=c(`<p>There are three pieces of code I’d like to review, just to make sure you understand them fully.</p><p>The first thing I’d like to recap is <code>NotificationCenter</code>, which is a system-wide broadcasting framework that lets you send and receive messages. These messages come in two forms: messages that come from iOS, and messages you send yourself. Regardless of whether the messages come from, <code>NotificationCenter</code> is a good example of <em>loose coupling</em> – you don’t care who subscribes to receive your messages, or indeed if anyone at all does; you’re just responsible for posting them.</p><p>In project 19 we used <code>NotificationCenter</code> so that iOS notified us when the keyboard was shown or hidden. This meant registering for the <code>Notification.Name.UIKeyboardWillChangeFrame</code> and <code>Notification.Name.UIKeyboardWillHide</code>: we told iOS we want to be notified when those events occurred, and asked it to execute our <code>adjustForKeyboard()</code> method. Here’s the code we used:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> notificationCenter <span class="token operator">=</span> <span class="token class-name">NotificationCenter</span><span class="token punctuation">.</span><span class="token keyword">default</span></span>
<span class="line">notificationCenter<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> selector<span class="token punctuation">:</span> <span class="token other-directive property">#selector</span><span class="token punctuation">(</span>adjustForKeyboard<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token class-name">Notification</span><span class="token punctuation">.</span><span class="token class-name">Name</span><span class="token punctuation">.</span><span class="token class-name">UIKeyboardWillHide</span><span class="token punctuation">,</span> object<span class="token punctuation">:</span> <span class="token nil constant">nil</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>There are lots of these events – just try typing <code>Notification.Name</code>. and letting autocomplete show you what’s available. For example, in project 28 we use the <code>Notification.Name.UIApplicationWillResignActive</code> event to detect when the app moves to the background.</p><p>Like I said, it’s also possible to send your own notifications using <code>NotificationCenter</code>. Their names are just strings, and only your application ever sees them, so you can go ahead and make as many as you like. For example, to post a “UserLoggedIn” notification, you would write this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> notificationCenter <span class="token operator">=</span> <span class="token class-name">NotificationCenter</span><span class="token punctuation">.</span><span class="token keyword">default</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>notificationCenter.post(name: Notification.Name(&quot;UserLoggedIn&quot;), object: nil) If no other part of your app has subscribed to receive that notification, nothing will happen. But you can make any other objects subscribe to that notification – it could be one thing, or ten things, it doesn’t matter. This is the essence of loose coupling: you’re transmitting the event to everyone, with no direct knowledge of who your receivers are.</p><p>The second piece of code I’d like to review is this, taken from project 21:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> center <span class="token operator">=</span> <span class="token class-name">UNUserNotificationCenter</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">center<span class="token punctuation">.</span><span class="token function">requestAuthorization</span><span class="token punctuation">(</span>options<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">.</span>alert<span class="token punctuation">,</span> <span class="token punctuation">.</span>badge<span class="token punctuation">,</span> <span class="token punctuation">.</span>sound<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>granted<span class="token punctuation">,</span> error<span class="token punctuation">)</span> <span class="token keyword">in</span></span>
<span class="line">    <span class="token keyword">if</span> granted <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Yay!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;D&#39;oh&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In that code, everything from <code>{ (granted, error) in</code> to the end is a closure: that code <em>won’t</em> get run straight away. Instead, it gets passed as the second parameter to the <code>requestAuthorization()</code> method, which stores the code. This is important – in fact essential – to the working of this code, because iOS needs to ask the user for permission to show notifications.</p><p>iPhones can do literally billions of things every second, so in the time it takes for the “Do you want to allow notifications” message to appear, then for the user to read it, consider it, then make a choice, the iPhone CPU has done countless other things.</p><p>It would be a pretty poor experience if your app had to pause completely while the user was thinking, which is why closures are used: you tell iOS what to do when the user has made a decision, but that code only gets called when that decision is finally made. As soon as you call <code>requestAuthorization()</code>, execution continues immediately on the very next line after it – iOS doesn’t stop while the user thinks. Instead, you sent the closure – the code to run – to the notification center, and that’s what will get called when the user makes a choice.</p><p>Finally, let’s take another look at <code>for case let</code> syntax. Its job is to perform some sort of filtering on our data based on the result of a check, which means inside the Swift loop the compiler has more information about the data it’s working with.</p><p>For example, if we wanted to loop over all the subviews of a <code>UIView</code>, we’d write this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">for</span> subview <span class="token keyword">in</span> view<span class="token punctuation">.</span>subviews <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Found a subview with the tag: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">subview<span class="token punctuation">.</span>tag</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>All views have a tag, which is an identifying number we can use to distinguish between views in some specific circumstances.</p><p>However, what if wanted to find all the labels in our subviews and print out their text? We can’t print out the text above, because a regular <code>UIView</code> doesn’t have a <code>text</code> property, so we’d probably write something like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">for</span> subview <span class="token keyword">in</span> view<span class="token punctuation">.</span>subviews <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">guard</span> <span class="token keyword">let</span> label <span class="token operator">=</span> subview <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">UILabel</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">continue</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Found a label with the text: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">label<span class="token punctuation">.</span>text</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That certainly works, but this is a case where <code>for case let</code> can do the same job in less code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token keyword">case</span> <span class="token keyword">let</span> label <span class="token keyword">as</span> <span class="token class-name">UILabel</span> <span class="token keyword">in</span> view<span class="token punctuation">.</span>subviews <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Found a label with text </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">label<span class="token punctuation">.</span>text</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>for case let</code> can also do the job of checking optionals for a value. If it finds a value inside it will unwrap it and provide that inside the loop; if there is no value that element will be skipped.</p><p>The syntax for this is a little curious, but I think you’ll appreciate its simplicity:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Bill&quot;</span></span><span class="token punctuation">,</span> <span class="token nil constant">nil</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Ted&quot;</span></span><span class="token punctuation">,</span> <span class="token nil constant">nil</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token keyword">case</span> <span class="token keyword">let</span> name<span class="token operator">?</span> <span class="token keyword">in</span> names <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In that code the <code>names</code> array will be inferred as <code>[String?]</code> because elements are either strings or <code>nil</code>. Using <code>for case let</code> there will skip the two <code>nil</code> values, and unwrap and print the two strings.</p>`,25),C=e("h3",{id:"challenge",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#challenge"},[e("span",null,"Challenge")])],-1),T={class:"hint-container details"},D=e("summary",null,"Challenge",-1),P=c("<p>Have you ever heard the phrase, “imitation is the highest form of flattery”? I can’t think of anywhere it’s more true than on iOS: Apple sets an extremely high standard for apps, and encourages us all to follow suit by releasing a vast collection of powerful, flexible APIs to work with.</p><p>Your challenge for this milestone is to use those API to imitate Apple as closely as you can: I’d like you to recreate the iOS Notes app. I suggest you follow the iPhone version, because it’s fairly simple: a navigation controller, a table view controller, and a detail view controller with a full-screen text view.</p><p>How much of the app you imitate is down to you, but I suggest you work through this list:</p><ol><li>Create a table view controller that lists notes. Place it inside a navigation controller. (Project 1)</li><li>Tapping on a note should slide in a detail view controller that contains a full-screen text view. (Project 19)</li><li>Notes should be loaded and saved using <code>Codable</code>. You can use <code>UserDefaults</code> if you want, or write to a file. (Project 12)</li><li>Add some toolbar items to the detail view controller – “delete” and “compose” seem like good choices. (Project 4)</li><li>Add an action button to the navigation bar in the detail view controller that shares the text using <code>UIActivityViewController</code>. (Project 3)</li></ol><p>Once you’ve done those, try using Interface Builder to customize the UI – how close can you make it look like Notes?</p><p><strong>Note</strong>: the official Apple Notes app supports rich text input and media; don’t worry about that, focus on plain text.</p><p>Go ahead and try now. Remember: don’t fret if it sounds hard – it’s <em>supposed</em> to stretch you.</p><p>Here are some hints in case you hit a problem:</p><ul><li>You could represent each note using a custom <code>Note</code> class if you wanted, but to begin with perhaps just make each note a string that gets stored in a <code>notes</code> array.</li><li>If you do intend to go down the custom class route for notes, make sure you conform to <code>Codable</code> – you might need to re-read project 12.</li><li>Make sure you use <code>NotificationCenter</code> to update the insets for your detail text view when the keyboard is shown or hidden.</li><li>Try changing the <code>tintColor</code> property in Interface Builder. This controls the color of icons in the navigation bar and toolbar, amongst other things.</li></ul>",9),U=e("div",{class:"hint-container tip"},[e("p",{class:"hint-container-title"},"Note"),e("p",null,"Don’t worry if you don’t complete challenges in the day they were assigned – in future days you’ll find you have some time to spare here and there, so challenges are something you can return back to in the future.")],-1),q=e("hr",null,null,-1);function A(r,O){const n=p("router-link"),s=p("VPCard");return m(),u("div",null,[e("h1",k,[e("a",f,[e("span",null,h(r.$frontmatter.title)+" 관련",1)])]),e("nav",g,[e("ul",null,[e("li",null,[t(n,{to:"#milestone-projects-19-21"},{default:a(()=>[l("Milestone: Projects 19-21")]),_:1}),e("ul",null,[e("li",null,[t(n,{to:"#what-you-learned"},{default:a(()=>[l("What you learned")]),_:1})]),e("li",null,[t(n,{to:"#key-points"},{default:a(()=>[l("Key points")]),_:1})]),e("li",null,[t(n,{to:"#challenge"},{default:a(()=>[l("Challenge")]),_:1})])])])])]),y,t(s,o(i({title:"100 Days of Swift - Day 74",desc:"Milestone - Projects 19-21",link:"https://www.hackingwithswift.com/100/74",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),v,e("details",b,[_,t(s,o(i({title:"100 Days of Swift - Day 74 - What you learned",desc:"What you learned",link:"https://www.hackingwithswift.com/guide/8/1/what-you-learned",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),x]),j,e("details",I,[N,t(s,o(i({title:"100 Days of Swift - Day 74 - Key points",desc:"Key points",link:"https://www.hackingwithswift.com/guide/8/2/key-points",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),S]),C,e("details",T,[D,t(s,o(i({title:"100 Days of Swift - Day 74 - Challenge",desc:"Challenge",link:"https://www.hackingwithswift.com/guide/8/3/challenge",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),P]),U,q])}const F=d(w,[["render",A],["__file","74.html.vue"]]),H=JSON.parse('{"path":"/swift/100-days-of-swift/74.html","title":"Day 74","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 74","description":"100 Days of Swift > Day 74","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of Swift > Day 74"},{"property":"og:description","content":"Day 74"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swift/74.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swift/74.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 74"}],["meta",{"property":"og:description","content":"100 Days of Swift > Day 74"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 74\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Milestone: Projects 19-21","slug":"milestone-projects-19-21","link":"#milestone-projects-19-21","children":[{"level":3,"title":"What you learned","slug":"what-you-learned","link":"#what-you-learned","children":[]},{"level":3,"title":"Key points","slug":"key-points","link":"#key-points","children":[]},{"level":3,"title":"Challenge","slug":"challenge","link":"#challenge","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":12}]},"readingTime":{"minutes":7.05,"words":2115},"filePathRelative":"swift/100-days-of-swift/74.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{F as comp,H as data};
