import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as b,a as n,t as v,b as l,n as h,g,w as a,d as s,e as o,r as u,o as y}from"./app-U_bew1in.js";const f={},w={id:"frontmatter-title-관련",tabindex:"-1"},_={class:"header-anchor",href:"#frontmatter-title-관련"},x={class:"table-of-contents"},S=n("hr",null,null,-1),A=o(`<h2 id="data-types" tabindex="-1"><a class="header-anchor" href="#data-types"><span>Data Types</span></a></h2><h3 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h3><p>Every value in Rust is of a certain <em>data type</em>, which tells Rust what kind of data is being specified so it knows how to work with that data. We’ll look at two data type subsets: scalar and compound.</p><p>Keep in mind that Rust is a <em>statically typed</em> language, which means that it must know the types of all variables at compile time. The compiler can usually infer what type we want to use based on the value and how we use it. In cases when many types are possible, such as when we converted a String to a numeric type using parse in the <a href="https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html#comparing-the-guess-to-the-secret-number" target="_blank" rel="noopener noreferrer">“Comparing the Guess to the Secret Number”</a> section in Chapter 2, we must add a type annotation, like this:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">let</span> guess<span class="token punctuation">:</span> <span class="token keyword">u32</span> <span class="token operator">=</span> <span class="token string">&quot;42&quot;</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Not a number!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>If we don’t add the <code>: u32</code> type annotation shown in the preceding code, Rust will display the following error, which means the compiler needs more information from us to know which type we want to use:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cargo</span> build</span>
<span class="line"><span class="token comment">#    Compiling no_type_annotations v0.1.0 (file:///projects/no_type_annotations)</span></span>
<span class="line"><span class="token comment"># error[E0282]: type annotations needed</span></span>
<span class="line"><span class="token comment">#  --&gt; src/main.rs:2:9</span></span>
<span class="line"><span class="token comment">#   |</span></span>
<span class="line"><span class="token comment"># 2 |     let guess = &quot;42&quot;.parse().expect(&quot;Not a number!&quot;);</span></span>
<span class="line"><span class="token comment">#   |         ^^^^^</span></span>
<span class="line"><span class="token comment">#   |</span></span>
<span class="line"><span class="token comment"># help: consider giving \`guess\` an explicit type</span></span>
<span class="line"><span class="token comment">#   |</span></span>
<span class="line"><span class="token comment"># 2 |     let guess: _ = &quot;42&quot;.parse().expect(&quot;Not a number!&quot;);</span></span>
<span class="line"><span class="token comment">#   |              +++</span></span>
<span class="line"><span class="token comment"># </span></span>
<span class="line"><span class="token comment"># For more information about this error, try \`rustc --explain E0282\`.</span></span>
<span class="line"><span class="token comment"># error: could not compile \`no_type_annotations\` due to previous error</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You’ll see different type annotations for other data types.</p><h3 id="scalar-types" tabindex="-1"><a class="header-anchor" href="#scalar-types"><span>Scalar Types</span></a></h3><p>A <em>scalar</em> type represents a single value. Rust has four primary scalar types: integers, floating-point numbers, Booleans, and characters. You may recognize these from other programming languages. Let’s jump into how they work in Rust.</p><h4 id="integer-types" tabindex="-1"><a class="header-anchor" href="#integer-types"><span>Integer Types</span></a></h4><p>An <em>integer</em> is a number without a fractional component. We used one integer type in Chapter 2, the <code>u32</code> type. This type declaration indicates that the value it’s associated with should be an unsigned integer (signed integer types start with i instead of u) that takes up 32 bits of space. Table 3-1 shows the built-in integer types in Rust. We can use any of these variants to declare the type of an integer value.</p><h5 id="table-3-1-integer-types-in-rust" tabindex="-1"><a class="header-anchor" href="#table-3-1-integer-types-in-rust"><span>Table 3-1: Integer Types in Rust</span></a></h5><table><thead><tr><th style="text-align:left;">Length</th><th style="text-align:left;">Sigend</th><th style="text-align:left;">Unsigned</th></tr></thead><tbody><tr><td style="text-align:left;">8-bit</td><td style="text-align:left;"><code>i8</code></td><td style="text-align:left;"><code>u8</code></td></tr><tr><td style="text-align:left;">16-bit</td><td style="text-align:left;"><code>i16</code></td><td style="text-align:left;"><code>u16</code></td></tr><tr><td style="text-align:left;">32-bit</td><td style="text-align:left;"><code>i32</code></td><td style="text-align:left;"><code>u32</code></td></tr><tr><td style="text-align:left;">64-bit</td><td style="text-align:left;"><code>i64</code></td><td style="text-align:left;"><code>u64</code></td></tr><tr><td style="text-align:left;">128-bit</td><td style="text-align:left;"><code>i128</code></td><td style="text-align:left;"><code>u128</code></td></tr><tr><td style="text-align:left;">arch</td><td style="text-align:left;"><code>isize</code></td><td style="text-align:left;"><code>usize</code></td></tr></tbody></table><p>Each variant can be either signed or unsigned and has an explicit size. <code>Signed</code> and <code>unsigned</code> refer to whether it’s possible for the number to be negative—in other words, whether the number needs to have a sign with it (signed) or whether it will only ever be positive and can therefore be represented without a sign (unsigned). It’s like writing numbers on paper: when the sign matters, a number is shown with a plus sign or a minus sign; however, when it’s safe to assume the number is positive, it’s shown with no sign. Signed numbers are stored using <a href="https://en.wikipedia.org/wiki/Two%27s_complement" target="_blank" rel="noopener noreferrer">two’s complement</a> representation.</p>`,15),T=n("p",null,[s("Each signed variant can store numbers from "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",null,"−"),n("mo",{stretchy:"false"},"("),n("msup",null,[n("mn",null,"2"),n("mrow",null,[n("mi",null,"n"),n("mo",null,"−"),n("mn",null,"1")])]),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"-(2^{n-1})")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"−"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"n"),n("span",{class:"mbin mtight"},"−"),n("span",{class:"mord mtight"},"1")])])])])])])])]),n("span",{class:"mclose"},")")])])]),s(" to "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mrow",null,[n("mi",null,"n"),n("mo",null,"−"),n("mn",null,"1")])]),n("mo",null,"−"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"2^{n-1} - 1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mathnormal mtight"},"n"),n("span",{class:"mbin mtight"},"−"),n("span",{class:"mord mtight"},"1")])])])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"1")])])]),s(" inclusive, where "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"n")]),n("annotation",{encoding:"application/x-tex"},"n")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"n")])])]),s(" is the number of bits that variant uses. So an i8 can store numbers from "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",null,"−"),n("mo",{stretchy:"false"},"("),n("msup",null,[n("mn",null,"2"),n("mn",null,"7")]),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"-(2^7)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"−"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"7")])])])])])])]),n("span",{class:"mclose"},")")])])]),s(" to "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mn",null,"7")]),n("mo",null,"−"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"2^7-1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"7")])])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"1")])])]),s(", which equals "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",null,"−"),n("mn",null,"128")]),n("annotation",{encoding:"application/x-tex"},"-128")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"−"),n("span",{class:"mord"},"128")])])]),s(" to "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"127")]),n("annotation",{encoding:"application/x-tex"},"127")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"127")])])]),s(". Unsigned variants can store numbers from "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"0")]),n("annotation",{encoding:"application/x-tex"},"0")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"0")])])]),s(" to "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mi",null,"n")]),n("mo",null,"−"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"2^n-1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7477em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.6644em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mathnormal mtight"},"n")])])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"1")])])]),s(", so a "),n("code",null,"u8"),s(" can store numbers from "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"0")]),n("annotation",{encoding:"application/x-tex"},"0")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"0")])])]),s(" to "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mn",null,"8")]),n("mo",null,"−"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"2^8-1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},"8")])])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"1")])])]),s(", which equals "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"0")]),n("annotation",{encoding:"application/x-tex"},"0")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"0")])])]),s(" to "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mn",null,"255")]),n("annotation",{encoding:"application/x-tex"},"255")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"255")])])]),s(".")],-1),R=o('<p>Additionally, the <code>isize</code> and <code>usize</code> types depend on the architecture of the computer your program is running on, which is denoted in the table as “arch”: 64 bits if you’re on a 64-bit architecture and 32 bits if you’re on a 32-bit architecture.</p><p>You can write integer literals in any of the forms shown in Table 3-2. Note that number literals that can be multiple numeric types allow a type suffix, such as <code>57u8</code>, to designate the type. Number literals can also use _ as a visual separator to make the number easier to read, such as 1_000, which will have the same value as if you had specified 1000.</p><h5 id="table-3-2-integer-literals-in-rust" tabindex="-1"><a class="header-anchor" href="#table-3-2-integer-literals-in-rust"><span>Table 3-2 Integer Literals in Rust</span></a></h5><table><thead><tr><th style="text-align:left;">Number literals</th><th style="text-align:left;">Example</th></tr></thead><tbody><tr><td style="text-align:left;">Decimal</td><td style="text-align:left;"><code>98_222</code></td></tr><tr><td style="text-align:left;">Hex</td><td style="text-align:left;"><code>0xff</code></td></tr><tr><td style="text-align:left;">Octal</td><td style="text-align:left;"><code>0o77</code></td></tr><tr><td style="text-align:left;">Binary</td><td style="text-align:left;"><code>0b1111_0000</code></td></tr><tr><td style="text-align:left;">Byte (<code>u8</code> only)</td><td style="text-align:left;"><code>b&#39;A&#39;</code></td></tr></tbody></table><p>So how do you know which type of integer to use? If you’re unsure, Rust’s defaults are generally good places to start: integer types default to <code>i32</code>. The primary situation in which you’d use <code>isize</code> or <code>usize</code> is when indexing some sort of collection.</p><div class="hint-container info"><p class="hint-container-title">Integer Overflow</p><p>Let’s say you have a variable of type <code>u8</code> that can hold values between 0 and 255. If you try to change the variable to a value outside that range, such as 256, <em>integer overflow</em> will occur, which can result in one of two behaviors. When you’re compiling in debug mode, Rust includes checks for integer overflow that cause your program to <em>panic</em> at runtime if this behavior occurs. Rust uses the term <em>panicking</em> when a program exits with an error; we’ll discuss panics in more depth in the <a href="https://doc.rust-lang.org/book/ch09-01-unrecoverable-errors-with-panic.html" target="_blank" rel="noopener noreferrer">“Unrecoverable Errors with <code>panic</code>!”</a> section in Chapter 9.</p><p>When you’re compiling in release mode with the <code>--release</code> flag, Rust does <em>not</em> include checks for integer overflow that cause panics. Instead, if overflow occurs, Rust performs <em>two’s complement wrapping</em>. In short, values greater than the maximum value the type can hold “wrap around” to the minimum of the values the type can hold. In the case of a <code>u8</code>, the value 256 becomes 0, the value 257 becomes 1, and so on. The program won’t panic, but the variable will have a value that probably isn’t what you were expecting it to have. Relying on integer overflow’s wrapping behavior is considered an error.</p><p>To explicitly handle the possibility of overflow, you can use these families of methods provided by the standard library for primitive numeric types:</p><ul><li>Wrap in all modes with the <code>wrapping_*</code> methods, such as <code>wrapping_add</code>.</li><li>Return the <code>None</code> value if there is overflow with the <code>checked_*</code> methods.</li><li>Return the value and a boolean indicating whether there was overflow with the <code>overflowing_*</code> methods.</li><li>Saturate at the value’s minimum or maximum values with the <code>saturating_*</code> methods.</li></ul></div><h4 id="floating-point-types" tabindex="-1"><a class="header-anchor" href="#floating-point-types"><span>Floating-Point Types</span></a></h4><p>Rust also has two primitive types for <em>floating-point numbers</em>, which are numbers with decimal points. Rust’s floating-point types are <code>f32</code> and <code>f64</code>, which are 32 bits and 64 bits in size, respectively. The default type is <code>f64</code> because on modern CPUs, it’s roughly the same speed as <code>f32</code> but is capable of more precision. All floating-point types are signed.</p><p>Here’s an example that shows floating-point numbers in action:</p>',9),q=n("code",null,"src/main.rs",-1),E=o(`<div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">;</span> <span class="token comment">// f64</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> y<span class="token punctuation">:</span> <span class="token keyword">f32</span> <span class="token operator">=</span> <span class="token number">3.0</span><span class="token punctuation">;</span> <span class="token comment">// f32</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Floating-point numbers are represented according to the IEEE-754 standard. The <code>f32</code> type is a single-precision float, and <code>f64</code> has double precision.</p><h4 id="numeric-operations" tabindex="-1"><a class="header-anchor" href="#numeric-operations"><span>Numeric Operations</span></a></h4><p>Rust supports the basic mathematical operations you’d expect for all the number types: addition, subtraction, multiplication, division, and remainder. Integer division truncates toward zero to the nearest integer. The following code shows how you’d use each numeric operation in a <code>let</code> statement:</p>`,4),I=n("code",null,"src/main.rs",-1),F=o(`<div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// addition</span></span>
<span class="line">    <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// subtraction</span></span>
<span class="line">    <span class="token keyword">let</span> difference <span class="token operator">=</span> <span class="token number">95.5</span> <span class="token operator">-</span> <span class="token number">4.3</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// multiplication</span></span>
<span class="line">    <span class="token keyword">let</span> product <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// division</span></span>
<span class="line">    <span class="token keyword">let</span> quotient <span class="token operator">=</span> <span class="token number">56.7</span> <span class="token operator">/</span> <span class="token number">32.2</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> truncated <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// Results in -1</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// remainder</span></span>
<span class="line">    <span class="token keyword">let</span> remainder <span class="token operator">=</span> <span class="token number">43</span> <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),z={href:"https://doc.rust-lang.org/book/appendix-02-operators.html",target:"_blank",rel:"noopener noreferrer"},M=n("h4",{id:"the-boolean-type",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#the-boolean-type"},[n("span",null,"The Boolean Type")])],-1),C=n("p",null,[s("As in most other programming languages, a Boolean type in Rust has two possible values: "),n("code",null,"true"),s(" and "),n("code",null,"false"),s(". Booleans are one byte in size. The Boolean type in Rust is specified using "),n("code",null,"bool"),s(". For example:")],-1),j=n("code",null,"src/main.rs",-1),P=o(`<div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> f<span class="token punctuation">:</span> <span class="token keyword">bool</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// with explicit type annotation</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The main way to use Boolean values is through conditionals, such as an <code>if</code> expression. We’ll cover how if expressions work in Rust in the <a href="https://doc.rust-lang.org/book/ch03-05-control-flow.html#control-flow" target="_blank" rel="noopener noreferrer">“Control Flow”</a> section.</p><h4 id="the-character-type" tabindex="-1"><a class="header-anchor" href="#the-character-type"><span>The Character Type</span></a></h4><p>Rust’s <code>char</code> type is the language’s most primitive alphabetic type. Here are some examples of declaring <code>char</code> values:</p>`,4),N=n("code",null,"src/main.rs",-1),O=o(`<div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token char">&#39;z&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> z<span class="token punctuation">:</span> <span class="token keyword">char</span> <span class="token operator">=</span> <span class="token char">&#39;ℤ&#39;</span><span class="token punctuation">;</span> <span class="token comment">// with explicit type annotation</span></span>
<span class="line">    <span class="token keyword">let</span> heart_eyed_cat <span class="token operator">=</span> &#39;😻&#39;<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),D=n("code",null,"char",-1),L=n("code",null,"char",-1),B=n("code",null,"char",-1),U=n("code",null,"U+0000",-1),K=n("code",null,"U+D7FF",-1),W=n("code",null,"U+E000",-1),H=n("code",null,"U+10FFFF",-1),X=n("code",null,"char",-1),V={href:"https://doc.rust-lang.org/book/ch08-02-strings.html#storing-utf-8-encoded-text-with-strings",target:"_blank",rel:"noopener noreferrer"},Y=n("h3",{id:"compound-types",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#compound-types"},[n("span",null,"Compound Types")])],-1),Z=n("p",null,[n("em",null,"Compound types"),s(" can group multiple values into one type. Rust has two primitive compound types: tuples and arrays.")],-1),J=n("h4",{id:"the-tuple-type",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#the-tuple-type"},[n("span",null,"The Tuple Type")])],-1),G=n("p",null,[s("A "),n("em",null,"tuple"),s(" is a general way of grouping together a number of values with a variety of types into one compound type. Tuples have a fixed length: once declared, they cannot grow or shrink in size.")],-1),$=n("p",null,"We create a tuple by writing a comma-separated list of values inside parentheses. Each position in the tuple has a type, and the types of the different values in the tuple don’t have to be the same. We’ve added optional type annotations in this example:",-1),Q=n("code",null,"src/",-1),nn=n("code",null,"main.rs",-1),sn=o(`<div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> tup<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> <span class="token keyword">u8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">6.4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The variable <code>tup</code> binds to the entire tuple because a tuple is considered a single compound element. To get the individual values out of a tuple, we can use pattern matching to destructure a tuple value, like this:</p>`,2),an=n("code",null,"src/main.rs",-1),en=o(`<div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">6.4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span> <span class="token operator">=</span> tup<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of y is: {y}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This program first creates a tuple and binds it to the variable <code>tup</code>. It then uses a pattern with let to take tup and turn it into three separate variables, <code>x</code>, <code>y</code>, and <code>z</code>. This is called <em>destructuring</em> because it breaks the single tuple into three parts. Finally, the program prints the value of <code>y</code>, which is <code>6.4</code>.</p><p>We can also access a tuple element directly by using a period (<code>.</code>) followed by the index of the value we want to access. For example:</p>`,3),tn=n("code",null,"src/main.rs",-1),ln=o(`<div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> <span class="token keyword">u8</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">6.4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> five_hundred <span class="token operator">=</span> x<span class="token number">.0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> six_point_four <span class="token operator">=</span> x<span class="token number">.1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> one <span class="token operator">=</span> x<span class="token number">.2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This program creates the tuple <code>x</code> and then accesses each element of the tuple using their respective indices. As with most programming languages, the first index in a tuple is 0.</p><p>The tuple without any values has a special name, <em>unit</em>. This value and its corresponding type are both written <code>()</code> and represent an empty value or an empty return type. Expressions implicitly return the unit value if they don’t return any other value.</p><h4 id="the-array-type" tabindex="-1"><a class="header-anchor" href="#the-array-type"><span>The Array Type</span></a></h4><p>Another way to have a collection of multiple values is with an <em>array</em>. Unlike a tuple, every element of an array must have the same type. Unlike arrays in some other languages, arrays in Rust have a fixed length.</p><p>We write the values in an array as a comma-separated list inside square brackets:</p>`,6),cn=n("code",null,"src/main.rs",-1),on=o(`<div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Arrays are useful when you want your data allocated on the stack rather than the heap (we will discuss the stack and the heap more in <a href="https://doc.rust-lang.org/book/ch04-01-what-is-ownership.html#the-stack-and-the-heap" target="_blank" rel="noopener noreferrer">Chapter 4</a>) or when you want to ensure you always have a fixed number of elements. An array isn’t as flexible as the vector type, though. A <em>vector</em> is a similar collection type provided by the standard library that <em>is</em> allowed to grow or shrink in size. If you’re unsure whether to use an array or a vector, chances are you should use a vector. <a href="https://doc.rust-lang.org/book/ch08-01-vectors.html" target="_blank" rel="noopener noreferrer">Chapter 8</a> discusses vectors in more detail.</p><p>However, arrays are more useful when you know the number of elements will not need to change. For example, if you were using the names of the month in a program, you would probably use an array rather than a vector because you know it will always contain 12 elements:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">let</span> months <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;January&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;February&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;March&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;April&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;May&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;June&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;July&quot;</span><span class="token punctuation">,</span></span>
<span class="line">              <span class="token string">&quot;August&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;September&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;October&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;November&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;December&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>You write an array’s type using square brackets with the type of each element, a semicolon, and then the number of elements in the array, like so:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">;</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Here, <code>i32</code> is the type of each element. After the semicolon, the number <code>5</code> indicates the array contains five elements.</p><p>You can also initialize an array to contain the same value for each element by specifying the initial value, followed by a semicolon, and then the length of the array in square brackets, as shown here:</p><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>The array named <code>a</code> will contain <code>5</code> elements that will all be set to the value <code>3</code> initially. This is the same as writing <code>let a = [3, 3, 3, 3, 3];</code> but in a more concise way.</p><h5 id="accessing-array-elements" tabindex="-1"><a class="header-anchor" href="#accessing-array-elements"><span>Accessing Array Elements</span></a></h5><p>An array is a single chunk of memory of a known, fixed size that can be allocated on the stack. You can access elements of an array using indexing, like this:</p>`,12),pn=n("code",null,"src/main.rs",-1),un=o(`<div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> first <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">let</span> second <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In this example, the variable named <code>first</code> will get the value <code>1</code> because that is the value at index <code>[0]</code> in the array. The variable named <code>second</code> will get the value <code>2</code> from index <code>[1]</code> in the array.</p><h5 id="invalid-array-element-access" tabindex="-1"><a class="header-anchor" href="#invalid-array-element-access"><span>Invalid Array Element Access</span></a></h5><p>Let’s see what happens if you try to access an element of an array that is past the end of the array. Say you run this code, similar to the guessing game in Chapter 2, to get an array index from the user:</p>`,4),rn=n("code",null,"src/main.rs",-1),dn=o(`<figure><img src="https://doc.rust-lang.org/book/ch00-00-introduction.html#ferris" alt="This code panics! x80" tabindex="0" loading="lazy"><figcaption>This code panics! x80</figcaption></figure><div class="language-rust line-numbers-mode" data-highlighter="prismjs" data-ext="rs" data-title="rs"><pre><code><span class="line"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>io<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Please enter an array index.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> <span class="token keyword">mut</span> index <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token function">stdin</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">read_line</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> index<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to read line&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> index<span class="token punctuation">:</span> <span class="token keyword">usize</span> <span class="token operator">=</span> index</span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;Index entered was not a number&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> element <span class="token operator">=</span> a<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;The value of the element at index {index} is: {element}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This code compiles successfully. If you run this code using <code>cargo run</code> and enter <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, or <code>4</code>, the program will print out the corresponding value at that index in the array. If you instead enter a number past the end of the array, such as <code>10</code>, you’ll see output like this:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cargo</span> run</span>
<span class="line"><span class="token comment"># thread &#39;main&#39; panicked at &#39;index out of bounds: the len is 5 but the index is 10&#39;, src/main.rs:19:19</span></span>
<span class="line"><span class="token comment"># note: run with \`RUST_BACKTRACE=1\` environment variable to display a backtrace</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The program resulted in a <em>runtime</em> error at the point of using an invalid value in the indexing operation. The program exited with an error message and didn’t execute the final println! statement. When you attempt to access an element using indexing, Rust will check that the index you’ve specified is less than the array length. If the index is greater than or equal to the length, Rust will panic. This check has to happen at runtime, especially in this case, because the compiler can’t possibly know what value a user will enter when they run the code later.</p><p>This is an example of Rust’s memory safety principles in action. In many low-level languages, this kind of check is not done, and when you provide an incorrect index, invalid memory can be accessed. Rust protects you against this kind of error by immediately exiting instead of allowing the memory access and continuing. Chapter 9 discusses more of Rust’s error handling and how you can write readable, safe code that neither panics nor allows invalid memory access.</p><hr><h2 id="numbers" tabindex="-1"><a class="header-anchor" href="#numbers"><span>Numbers</span></a></h2><h3 id="integer" tabindex="-1"><a class="header-anchor" href="#integer"><span>Integer</span></a></h3><h4 id="_1-🌟" tabindex="-1"><a class="header-anchor" href="#_1-🌟"><span>1. 🌟</span></a></h4><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>If we don&#39;t explicitly assign a type to a variable, then the compiler will infer one for us.</p></div>`,11),mn=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"// Remove something to make it work")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"let"),s(" x"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"i32"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" y"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"u32"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    y "),n("span",{class:"token operator"},"="),s(" x"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},"    "),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"let"),s(" z "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// Type of z ? ")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Success!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//    Compiling playground v0.0.1 (/playground)")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// error[E0308]: mismatched types")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//  --> src/main.rs:7:9")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//   |")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// 5 |     let mut y: u32 = 5;")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//   |                --- expected due to this type")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// 6 |")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// 7 |     y = x;")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//   |         ^ expected `u32`, found `i32`")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// ")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// For more information about this error, try `rustc --explain E0308`.")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},'// error: could not compile `playground` (bin "playground") due to previous error')]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),kn=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"// Remove something to make it work")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"let"),s(" x"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"i32"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" y "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    y "),n("span",{class:"token operator"},"="),s(" x"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},"    "),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"let"),s(" z "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// type of z : i32")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Success!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/*"),s(`
`),n("span",{class:"line"},"  Success!"),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),bn=n("h4",{id:"_2-🌟",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-🌟"},[n("span",null,"2. 🌟")])],-1),vn=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"// Fill the blank")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"let"),s(" v"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"u16"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"38_u8"),s(),n("span",{class:"token keyword"},"as"),s(),n("span",{class:"token constant"},"__"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Success!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//    Compiling playground v0.0.1 (/playground)")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// error[E0412]: cannot find type `__` in this scope")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//  --> src/main.rs:4:27")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//   |")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// 4 |     let v: u16 = 38_u8 as __;")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//   |                           ^^ not found in this scope")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// ")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// For more information about this error, try `rustc --explain E0412`.")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},'// error: could not compile `playground` (bin "playground") due to previous error')]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),hn=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"// Fill the blank")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"let"),s(" v"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"u16"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"38_u8"),s(),n("span",{class:"token keyword"},"as"),s(),n("span",{class:"token keyword"},"u16"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Success!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/*"),s(`
`),n("span",{class:"line"},"  Success!"),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),gn=n("h4",{id:"_3-🌟🌟🌟",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-🌟🌟🌟"},[n("span",null,"3. 🌟🌟🌟")])],-1),yn=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"Tips"),n("p",null,"If we don't explicitly assign a type to a variable, then the compiler will infer one for us.")],-1),fn=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"// Modify `assert_eq!` to make it work")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"let"),s(" x "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert_eq!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"u32"'),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"to_string"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"type_of"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Success!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},'// Get the type of given variable, return a string representation of the type  , e.g "i8", "u8", "i32", "u32"')]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"type_of"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),s("_"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token class-name"},"String"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"format!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"{}"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token namespace"},[s("std"),n("span",{class:"token punctuation"},"::"),s("any"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"type_name"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//    Compiling playground v0.0.1 (/playground)")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//     Finished dev [unoptimized + debuginfo] target(s) in 0.98s")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//      Running `target/debug/playground`")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// thread 'main' panicked at 'assertion failed: `(left == right)`")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},'//   left: `"u32"`,')]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},'//  right: `"i32"`\', src/main.rs:5:5')]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),wn=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"// Modify `assert_eq!` to make it work")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"let"),s(" x "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert_eq!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"i32"'),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"to_string"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"type_of"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Success!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},'// Get the type of given variable, return a string representation of the type  , e.g "i8", "u8", "i32", "u32"')]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"type_of"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),s("_"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token class-name"},"String"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"format!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"{}"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token namespace"},[s("std"),n("span",{class:"token punctuation"},"::"),s("any"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"type_name"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/*"),s(`
`),n("span",{class:"line"},"  Success!"),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_n=n("h4",{id:"_4-🌟🌟",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-🌟🌟"},[n("span",null,"4. 🌟🌟")])],-1),xn=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"// Fill the blanks to make it work")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert_eq!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"i8"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token constant"},"MAX"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"__"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s()]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert_eq!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"u8"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token constant"},"MAX"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"__"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s()]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Success!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/*"),s(`
`),n("span",{class:"line"},"      Compiling playground v0.0.1 (/playground)"),s(`
`),n("span",{class:"line"},"   error[E0425]: cannot find value `__` in this scope"),s(`
`),n("span",{class:"line"},"    --> src/main.rs:4:25"),s(`
`),n("span",{class:"line"},"     |"),s(`
`),n("span",{class:"line"},"   4 |     assert_eq!(i8::MAX, __); "),s(`
`),n("span",{class:"line"},"     |                         ^^ not found in this scope"),s(`
`),n("span",{class:"line"},"   "),s(`
`),n("span",{class:"line"},"   error[E0425]: cannot find value `__` in this scope"),s(`
`),n("span",{class:"line"},"    --> src/main.rs:5:25"),s(`
`),n("span",{class:"line"},"     |"),s(`
`),n("span",{class:"line"},"   5 |     assert_eq!(u8::MAX, __); "),s(`
`),n("span",{class:"line"},"     |                         ^^ not found in this scope"),s(`
`),n("span",{class:"line"},"   "),s(`
`),n("span",{class:"line"},"   For more information about this error, try `rustc --explain E0425`."),s(`
`),n("span",{class:"line"},'   error: could not compile `playground` (bin "playground") due to 2 previous errors'),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Sn=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"// Fill the blanks to make it work")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert_eq!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"i8"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token constant"},"MAX"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"127"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s()]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert_eq!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"u8"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token constant"},"MAX"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"255"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s()]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Success!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/*"),s(`
`),n("span",{class:"line"},"  Success!"),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),An=n("h4",{id:"_5-🌟🌟",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-🌟🌟"},[n("span",null,"5. 🌟🌟")])],-1),Tn=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"// Fix errors and panics to make it work")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("   "),n("span",{class:"token keyword"},"let"),s(" v1 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"251_u8"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"8"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("   "),n("span",{class:"token keyword"},"let"),s(" v2 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"i8"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"checked_add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"251"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"8"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"unwrap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("   "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"{},{}"'),n("span",{class:"token punctuation"},","),s("v1"),n("span",{class:"token punctuation"},","),s("v2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/*    "),s(`
`),n("span",{class:"line"},"      Compiling playground v0.0.1 (/playground)"),s(`
`),n("span",{class:"line"},"   error: literal out of range for `i8`"),s(`
`),n("span",{class:"line"},"    --> src/main.rs:5:29"),s(`
`),n("span",{class:"line"},"     |"),s(`
`),n("span",{class:"line"},"   5 |    let v2 = i8::checked_add(251, 8).unwrap();"),s(`
`),n("span",{class:"line"},"     |                             ^^^"),s(`
`),n("span",{class:"line"},"     |"),s(`
`),n("span",{class:"line"},"     = note: the literal `251` does not fit into the type `i8` whose range is `-128..=127`"),s(`
`),n("span",{class:"line"},"     = help: consider using the type `u8` instead"),s(`
`),n("span",{class:"line"},"     = note: `#[deny(overflowing_literals)]` on by default"),s(`
`),n("span",{class:"line"},"   "),s(`
`),n("span",{class:"line"},'   error: could not compile `playground` (bin "playground") due to previous error'),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Rn=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"// Fix errors and panics to make it work")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("   "),n("span",{class:"token keyword"},"let"),s(" v1 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"247_u8"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"8"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("   "),n("span",{class:"token keyword"},"let"),s(" v2 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"i8"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"checked_add"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"119"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"8"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"unwrap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("   "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"{},{}"'),n("span",{class:"token punctuation"},","),s("v1"),n("span",{class:"token punctuation"},","),s("v2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/*"),s(`
`),n("span",{class:"line"},"  255,127"),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),qn=n("h4",{id:"_6-🌟🌟",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_6-🌟🌟"},[n("span",null,"6. 🌟🌟")])],-1),En=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"// Modify `assert!` to make it work")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"let"),s(" v "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1_024"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"0xff"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"0o77"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"0b1111_1111"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert!"),n("span",{class:"token punctuation"},"("),s("v "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"1579"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Success!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/* "),s(`
`),n("span",{class:"line"},"      Compiling playground v0.0.1 (/playground)"),s(`
`),n("span",{class:"line"},"       Finished dev [unoptimized + debuginfo] target(s) in 0.55s"),s(`
`),n("span",{class:"line"},"        Running `target/debug/playground`"),s(`
`),n("span",{class:"line"},"   thread 'main' panicked at 'assertion failed: v == 1579', src/main.rs:5:5"),s(`
`),n("span",{class:"line"},"   note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),In=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"// Modify `assert!` to make it work")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"let"),s(" v "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1_024"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"0xff"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"0o77"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"0b1111_1111"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert!"),n("span",{class:"token punctuation"},"("),s("v "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"1597"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Success!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/*"),s(`
`),n("span",{class:"line"},"  Success!"),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Fn=n("h3",{id:"floating-point",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#floating-point"},[n("span",null,"Floating-Point")])],-1),zn=n("h4",{id:"_7-🌟",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_7-🌟"},[n("span",null,"7. 🌟")])],-1),Mn=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"// Fill the blank to make it work")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"let"),s(" x "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1_000.000_1"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// ?")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"let"),s(" y"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"f32"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0.12"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// f32")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"let"),s(" z "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0.01_f64"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// f64")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert_eq!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"type_of"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"__"'),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"to_string"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Success!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"type_of"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),s("_"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token class-name"},"String"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"format!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"{}"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token namespace"},[s("std"),n("span",{class:"token punctuation"},"::"),s("any"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"type_name"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/*"),s(`
`),n("span",{class:"line"},"     Compiling playground v0.0.1 (/playground)"),s(`
`),n("span",{class:"line"},"  warning: unused variable: `y`"),s(`
`),n("span",{class:"line"},"   --> src/main.rs:5:9"),s(`
`),n("span",{class:"line"},"    |"),s(`
`),n("span",{class:"line"},"  5 |     let y: f32 = 0.12; // f32"),s(`
`),n("span",{class:"line"},"    |         ^ help: if this is intentional, prefix it with an underscore: `_y`"),s(`
`),n("span",{class:"line"},"    |"),s(`
`),n("span",{class:"line"},"    = note: `#[warn(unused_variables)]` on by default"),s(`
`),n("span",{class:"line"},"  "),s(`
`),n("span",{class:"line"},"  warning: unused variable: `z`"),s(`
`),n("span",{class:"line"},"   --> src/main.rs:6:9"),s(`
`),n("span",{class:"line"},"    |"),s(`
`),n("span",{class:"line"},"  6 |     let z = 0.01_f64; // f64"),s(`
`),n("span",{class:"line"},"    |         ^ help: if this is intentional, prefix it with an underscore: `_z`"),s(`
`),n("span",{class:"line"},"  "),s(`
`),n("span",{class:"line"},'  warning: `playground` (bin "playground") generated 2 warnings (run `cargo fix --bin "playground"` to apply 2 suggestions)'),s(`
`),n("span",{class:"line"},"      Finished dev [unoptimized + debuginfo] target(s) in 0.58s"),s(`
`),n("span",{class:"line"},"       Running `target/debug/playground`"),s(`
`),n("span",{class:"line"},"  thread 'main' panicked at 'assertion failed: `(left == right)`"),s(`
`),n("span",{class:"line"},'    left: `"f64"`,'),s(`
`),n("span",{class:"line"},'   right: `"__"`\', src/main.rs:8:5'),s(`
`),n("span",{class:"line"},"  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Cn=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"// Fill the blank to make it work")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"let"),s(" x "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1_000.000_1"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// f64")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"let"),s(" y"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"f32"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0.12"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// f32")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"let"),s(" z "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0.01_f64"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// f64")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert_eq!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"type_of"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("x"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"f64"'),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"to_string"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Success!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"type_of"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),s("_"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token class-name"},"String"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"format!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"{}"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token namespace"},[s("std"),n("span",{class:"token punctuation"},"::"),s("any"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"type_name"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/*"),s(`
`),n("span",{class:"line"},"  Success!"),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),jn=n("h4",{id:"_8-🌟🌟-make-it-work-in-two-distinct-ways",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_8-🌟🌟-make-it-work-in-two-distinct-ways"},[n("span",null,"8. 🌟🌟 Make it work in two distinct ways")])],-1),Pn=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0.1"),n("span",{class:"token operator"},"+"),n("span",{class:"token number"},"0.2"),n("span",{class:"token operator"},"=="),n("span",{class:"token number"},"0.3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Success!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/*"),s(`
`),n("span",{class:"line"},"     Compiling playground v0.0.1 (/playground)"),s(`
`),n("span",{class:"line"},"      Finished dev [unoptimized + debuginfo] target(s) in 0.55s"),s(`
`),n("span",{class:"line"},"       Running `target/debug/playground`"),s(`
`),n("span",{class:"line"},"  thread 'main' panicked at 'assertion failed: 0.1 + 0.2 == 0.3', src/main.rs:3:5"),s(`
`),n("span",{class:"line"},"  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Nn=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0.1_f32"),n("span",{class:"token operator"},"+"),n("span",{class:"token number"},"0.2_f32"),n("span",{class:"token operator"},"=="),n("span",{class:"token number"},"0.3_f32"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Success!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/*"),s(`
`),n("span",{class:"line"},"  Success!"),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),On=o('<h3 id="range" tabindex="-1"><a class="header-anchor" href="#range"><span>Range</span></a></h3><h4 id="_9-🌟🌟" tabindex="-1"><a class="header-anchor" href="#_9-🌟🌟"><span>9. 🌟🌟</span></a></h4><p>Two goals:</p><ol><li>Modify assert! to make it work</li><li>Make <code>println!</code> output: <code>97 - 122</code></li></ol>',4),Dn=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" sum "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"for"),s(" i "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},".."),n("span",{class:"token number"},"2"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        sum "),n("span",{class:"token operator"},"+="),s(" i")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert!"),n("span",{class:"token punctuation"},"("),s("sum "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"for"),s(" c "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token char"},"'a'"),n("span",{class:"token punctuation"},"..="),n("span",{class:"token char"},"'z'"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"{}"'),n("span",{class:"token punctuation"},","),s("c"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/*"),s(`
`),n("span",{class:"line"},"     Compiling playground v0.0.1 (/playground)"),s(`
`),n("span",{class:"line"},"      Finished dev [unoptimized + debuginfo] target(s) in 2.13s"),s(`
`),n("span",{class:"line"},"       Running `target/debug/playground`"),s(`
`),n("span",{class:"line"},"  thread 'main' panicked at 'assertion failed: sum == -3', src/main.rs:7:5"),s(`
`),n("span",{class:"line"},"  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Ln=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" sum "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"for"),s(" i "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},".."),n("span",{class:"token number"},"2"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        sum "),n("span",{class:"token operator"},"+="),s(" i")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert!"),n("span",{class:"token punctuation"},"("),s("sum "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"for"),s(" c "),n("span",{class:"token keyword"},"in"),s(),n("span",{class:"token char"},"'a'"),n("span",{class:"token punctuation"},"..="),n("span",{class:"token char"},"'z'"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"{}"'),n("span",{class:"token punctuation"},","),s("c "),n("span",{class:"token keyword"},"as"),s(),n("span",{class:"token keyword"},"u8"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/*"),s(`
`),n("span",{class:"line"},"97"),s(`
`),n("span",{class:"line"},"98"),s(`
`),n("span",{class:"line"},"99"),s(`
`),n("span",{class:"line"},"100"),s(`
`),n("span",{class:"line"},"101"),s(`
`),n("span",{class:"line"},"102"),s(`
`),n("span",{class:"line"},"103"),s(`
`),n("span",{class:"line"},"104"),s(`
`),n("span",{class:"line"},"105"),s(`
`),n("span",{class:"line"},"106"),s(`
`),n("span",{class:"line"},"107"),s(`
`),n("span",{class:"line"},"108"),s(`
`),n("span",{class:"line"},"109"),s(`
`),n("span",{class:"line"},"110"),s(`
`),n("span",{class:"line"},"111"),s(`
`),n("span",{class:"line"},"112"),s(`
`),n("span",{class:"line"},"113"),s(`
`),n("span",{class:"line"},"114"),s(`
`),n("span",{class:"line"},"115"),s(`
`),n("span",{class:"line"},"116"),s(`
`),n("span",{class:"line"},"117"),s(`
`),n("span",{class:"line"},"118"),s(`
`),n("span",{class:"line"},"119"),s(`
`),n("span",{class:"line"},"120"),s(`
`),n("span",{class:"line"},"121"),s(`
`),n("span",{class:"line"},"122"),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Bn=n("h4",{id:"_10-🌟🌟",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_10-🌟🌟"},[n("span",null,"10. 🌟🌟")])],-1),Un=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"// Fill the blanks")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token namespace"},[s("std"),n("span",{class:"token punctuation"},"::"),s("ops"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token punctuation"},"{"),n("span",{class:"token class-name"},"Range"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"RangeInclusive"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert_eq!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},".."),n("span",{class:"token constant"},"__"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Range"),n("span",{class:"token punctuation"},"{"),s(" start"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(" end"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"5"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert_eq!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},".."),n("span",{class:"token constant"},"__"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"RangeInclusive"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Success!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/*"),s(`
`),n("span",{class:"line"},"     Compiling playground v0.0.1 (/playground)"),s(`
`),n("span",{class:"line"},"  error[E0425]: cannot find value `__` in this scope"),s(`
`),n("span",{class:"line"},"   --> src/main.rs:5:20"),s(`
`),n("span",{class:"line"},"    |"),s(`
`),n("span",{class:"line"},"  5 |     assert_eq!((1..__), Range{ start: 1, end: 5 });"),s(`
`),n("span",{class:"line"},"    |                    ^^ not found in this scope"),s(`
`),n("span",{class:"line"},"    |"),s(`
`),n("span",{class:"line"},"  help: you might have meant to write `.` instead of `..`"),s(`
`),n("span",{class:"line"},"    |"),s(`
`),n("span",{class:"line"},"  5 -     assert_eq!((1..__), Range{ start: 1, end: 5 });"),s(`
`),n("span",{class:"line"},"  5 +     assert_eq!((1.__), Range{ start: 1, end: 5 });"),s(`
`),n("span",{class:"line"},"    |"),s(`
`),n("span",{class:"line"},"  "),s(`
`),n("span",{class:"line"},"  error[E0425]: cannot find value `__` in this scope"),s(`
`),n("span",{class:"line"},"   --> src/main.rs:6:20"),s(`
`),n("span",{class:"line"},"    |"),s(`
`),n("span",{class:"line"},"  6 |     assert_eq!((1..__), RangeInclusive::new(1, 5));"),s(`
`),n("span",{class:"line"},"    |                    ^^ not found in this scope"),s(`
`),n("span",{class:"line"},"    |"),s(`
`),n("span",{class:"line"},"  help: you might have meant to write `.` instead of `..`"),s(`
`),n("span",{class:"line"},"    |"),s(`
`),n("span",{class:"line"},"  6 -     assert_eq!((1..__), RangeInclusive::new(1, 5));"),s(`
`),n("span",{class:"line"},"  6 +     assert_eq!((1.__), RangeInclusive::new(1, 5));"),s(`
`),n("span",{class:"line"},"    |"),s(`
`),n("span",{class:"line"},"  "),s(`
`),n("span",{class:"line"},"  error[E0277]: can't compare `std::ops::Range<{integer}>` with `RangeInclusive<{integer}>`"),s(`
`),n("span",{class:"line"},"   --> src/main.rs:6:5"),s(`
`),n("span",{class:"line"},"    |"),s(`
`),n("span",{class:"line"},"  6 |     assert_eq!((1..__), RangeInclusive::new(1, 5));"),s(`
`),n("span",{class:"line"},"    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `std::ops::Range<{integer}> == RangeInclusive<{integer}>`"),s(`
`),n("span",{class:"line"},"    |"),s(`
`),n("span",{class:"line"},"    = help: the trait `PartialEq<RangeInclusive<{integer}>>` is not implemented for `std::ops::Range<{integer}>`"),s(`
`),n("span",{class:"line"},"    = help: the following other types implement trait `PartialEq<Rhs>`:"),s(`
`),n("span",{class:"line"},"              <std::ops::Range<Idx> as PartialEq>"),s(`
`),n("span",{class:"line"},"              <std::ops::Range<usize> as PartialEq<aho_corasick::Span>>"),s(`
`),n("span",{class:"line"},"    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)"),s(`
`),n("span",{class:"line"},"  "),s(`
`),n("span",{class:"line"},"  Some errors have detailed explanations: E0277, E0425."),s(`
`),n("span",{class:"line"},"  For more information about an error, try `rustc --explain E0277`."),s(`
`),n("span",{class:"line"},'  error: could not compile `playground` (bin "playground") due to 3 previous errors'),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Kn=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"// Fill the blanks")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token namespace"},[s("std"),n("span",{class:"token punctuation"},"::"),s("ops"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token punctuation"},"{"),n("span",{class:"token class-name"},"Range"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"RangeInclusive"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert_eq!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},".."),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Range"),n("span",{class:"token punctuation"},"{"),s(" start"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(" end"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token number"},"5"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert_eq!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"..="),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"RangeInclusive"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Success!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/*"),s(`
`),n("span",{class:"line"},"  Success!"),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Wn=n("h3",{id:"computations",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#computations"},[n("span",null,"Computations")])],-1),Hn=n("h4",{id:"_11-🌟",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_11-🌟"},[n("span",null,"11. 🌟")])],-1),Xn=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"// Fill the blanks and fix the errors")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// Integer addition")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1u32"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token constant"},"__"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// Integer subtraction")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1i32"),s(),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token constant"},"__"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1u8"),s(),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s()]),s(`
`),n("span",{class:"line"},"    "),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"3"),s(),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"50"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token constant"},"__"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"9.6"),s(),n("span",{class:"token operator"},"/"),s(),n("span",{class:"token number"},"3.2"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"3.0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// error ! make it work")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"24"),s(),n("span",{class:"token operator"},"%"),s(),n("span",{class:"token number"},"5"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token constant"},"__"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// Short-circuiting boolean logic")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"true"),s(),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token boolean"},"false"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token constant"},"__"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"true"),s(),n("span",{class:"token operator"},"||"),s(),n("span",{class:"token boolean"},"false"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token constant"},"__"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),n("span",{class:"token boolean"},"true"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token constant"},"__"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// Bitwise operations")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"0011 AND 0101 is {:04b}"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0b0011u32"),s(),n("span",{class:"token operator"},"&"),s(),n("span",{class:"token number"},"0b0101"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"0011 OR 0101 is {:04b}"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0b0011u32"),s(),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token number"},"0b0101"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"0011 XOR 0101 is {:04b}"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0b0011u32"),s(),n("span",{class:"token operator"},"^"),s(),n("span",{class:"token number"},"0b0101"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"1 << 5 is {}"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1u32"),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"0x80 >> 2 is 0x{:x}"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0x80u32"),s(),n("span",{class:"token operator"},">>"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/*"),s(`
`),n("span",{class:"line"},"     Compiling playground v0.0.1 (/playground)"),s(`
`),n("span",{class:"line"},"  error[E0425]: cannot find value `__` in this scope"),s(`
`),n("span",{class:"line"},"   --> src/main.rs:5:25"),s(`
`),n("span",{class:"line"},"    |"),s(`
`),n("span",{class:"line"},"  5 |     assert!(1u32 + 2 == __);"),s(`
`),n("span",{class:"line"},"    |                         ^^ not found in this scope"),s(`
`),n("span",{class:"line"},"  "),s(`
`),n("span",{class:"line"},"  error[E0425]: cannot find value `__` in this scope"),s(`
`),n("span",{class:"line"},"   --> src/main.rs:8:25"),s(`
`),n("span",{class:"line"},"    |"),s(`
`),n("span",{class:"line"},"  8 |     assert!(1i32 - 2 == __);"),s(`
`),n("span",{class:"line"},"    |                         ^^ not found in this scope"),s(`
`),n("span",{class:"line"},"  "),s(`
`),n("span",{class:"line"},"  error[E0425]: cannot find value `__` in this scope"),s(`
`),n("span",{class:"line"},"    --> src/main.rs:11:23"),s(`
`),n("span",{class:"line"},"     |"),s(`
`),n("span",{class:"line"},"  11 |     assert!(3 * 50 == __);"),s(`
`),n("span",{class:"line"},"     |                       ^^ not found in this scope"),s(`
`),n("span",{class:"line"},"  "),s(`
`),n("span",{class:"line"},"  error[E0425]: cannot find value `__` in this scope"),s(`
`),n("span",{class:"line"},"    --> src/main.rs:15:23"),s(`
`),n("span",{class:"line"},"     |"),s(`
`),n("span",{class:"line"},"  15 |     assert!(24 % 5 == __);"),s(`
`),n("span",{class:"line"},"     |                       ^^ not found in this scope"),s(`
`),n("span",{class:"line"},"  "),s(`
`),n("span",{class:"line"},"  error[E0425]: cannot find value `__` in this scope"),s(`
`),n("span",{class:"line"},"    --> src/main.rs:17:30"),s(`
`),n("span",{class:"line"},"     |"),s(`
`),n("span",{class:"line"},"  17 |     assert!(true && false == __);"),s(`
`),n("span",{class:"line"},"     |                              ^^ not found in this scope"),s(`
`),n("span",{class:"line"},"  "),s(`
`),n("span",{class:"line"},"  error[E0425]: cannot find value `__` in this scope"),s(`
`),n("span",{class:"line"},"    --> src/main.rs:18:30"),s(`
`),n("span",{class:"line"},"     |"),s(`
`),n("span",{class:"line"},"  18 |     assert!(true || false == __);"),s(`
`),n("span",{class:"line"},"     |                              ^^ not found in this scope"),s(`
`),n("span",{class:"line"},"  "),s(`
`),n("span",{class:"line"},"  error[E0425]: cannot find value `__` in this scope"),s(`
`),n("span",{class:"line"},"    --> src/main.rs:19:22"),s(`
`),n("span",{class:"line"},"     |"),s(`
`),n("span",{class:"line"},"  19 |     assert!(!true == __);"),s(`
`),n("span",{class:"line"},"     |                      ^^ not found in this scope"),s(`
`),n("span",{class:"line"},"  "),s(`
`),n("span",{class:"line"},"  error[E0277]: the trait bound `u8: Neg` is not satisfied"),s(`
`),n("span",{class:"line"},"   --> src/main.rs:9:24"),s(`
`),n("span",{class:"line"},"    |"),s(`
`),n("span",{class:"line"},"  9 |     assert!(1u8 - 2 == -1); "),s(`
`),n("span",{class:"line"},"    |                        ^^ the trait `Neg` is not implemented for `u8`"),s(`
`),n("span",{class:"line"},"    |"),s(`
`),n("span",{class:"line"},"    = help: the following other types implement trait `Neg`:"),s(`
`),n("span",{class:"line"},"              &f32"),s(`
`),n("span",{class:"line"},"              &f64"),s(`
`),n("span",{class:"line"},"              &i128"),s(`
`),n("span",{class:"line"},"              &i16"),s(`
`),n("span",{class:"line"},"              &i32"),s(`
`),n("span",{class:"line"},"              &i64"),s(`
`),n("span",{class:"line"},"              &i8"),s(`
`),n("span",{class:"line"},"              &isize"),s(`
`),n("span",{class:"line"},"            and 8 others"),s(`
`),n("span",{class:"line"},"  "),s(`
`),n("span",{class:"line"},"  Some errors have detailed explanations: E0277, E0425."),s(`
`),n("span",{class:"line"},"  For more information about an error, try `rustc --explain E0277`."),s(`
`),n("span",{class:"line"},'  error: could not compile `playground` (bin "playground") due to 8 previous errors'),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Vn=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"// Fill the blanks and fix the errors")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// Integer addition")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1u32"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// Integer subtraction")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1i32"),s(),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1i8"),s(),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"2"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},"    "),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"3"),s(),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"50"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"150"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"9"),s(),n("span",{class:"token operator"},"/"),s(),n("span",{class:"token number"},"3"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// error ! make it work")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"24"),s(),n("span",{class:"token operator"},"%"),s(),n("span",{class:"token number"},"5"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// Short-circuiting boolean logic")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"true"),s(),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token boolean"},"false"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"true"),s(),n("span",{class:"token operator"},"||"),s(),n("span",{class:"token boolean"},"false"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),n("span",{class:"token boolean"},"true"),s(),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// Bitwise operations")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"0011 AND 0101 is {:04b}"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0b0011u32"),s(),n("span",{class:"token operator"},"&"),s(),n("span",{class:"token number"},"0b0101"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"0011 OR 0101 is {:04b}"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0b0011u32"),s(),n("span",{class:"token operator"},"|"),s(),n("span",{class:"token number"},"0b0101"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"0011 XOR 0101 is {:04b}"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0b0011u32"),s(),n("span",{class:"token operator"},"^"),s(),n("span",{class:"token number"},"0b0101"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"1 << 5 is {}"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"1u32"),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"0x80 >> 2 is 0x{:x}"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0x80u32"),s(),n("span",{class:"token operator"},">>"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/*"),s(`
`),n("span",{class:"line"},"  0011 AND 0101 is 0001"),s(`
`),n("span",{class:"line"},"  0011 OR 0101 is 0111"),s(`
`),n("span",{class:"line"},"  0011 XOR 0101 is 0110"),s(`
`),n("span",{class:"line"},"  1 << 5 is 32"),s(`
`),n("span",{class:"line"},"  0x80 >> 2 is 0x20"),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Yn=n("hr",null,null,-1),Zn=n("h2",{id:"functions",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#functions"},[n("span",null,"Functions")])],-1),Jn=n("h4",{id:"_1-🌟🌟🌟",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-🌟🌟🌟"},[n("span",null,"1. 🌟🌟🌟")])],-1),Gn=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// Don't modify the following two lines!")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token punctuation"},"("),s("x"),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"let"),s(" s "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"sum"),n("span",{class:"token punctuation"},"("),s("x"),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert_eq!"),n("span",{class:"token punctuation"},"("),s("s"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Success!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"sum"),n("span",{class:"token punctuation"},"("),s("x"),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"i32"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    x "),n("span",{class:"token operator"},"+"),s(" y"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/*"),s(`
`),n("span",{class:"line"},"     Compiling playground v0.0.1 (/playground)"),s(`
`),n("span",{class:"line"},"  error: expected one of `:`, `@`, or `|`, found `,`"),s(`
`),n("span",{class:"line"},"    --> src/main.rs:12:9"),s(`
`),n("span",{class:"line"},"     |"),s(`
`),n("span",{class:"line"},"  12 | fn sum(x, y: i32) {"),s(`
`),n("span",{class:"line"},"     |         ^ expected one of `:`, `@`, or `|`"),s(`
`),n("span",{class:"line"},"     |"),s(`
`),n("span",{class:"line"},"     = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)"),s(`
`),n("span",{class:"line"},"  help: if this is a `self` type, give it a parameter name"),s(`
`),n("span",{class:"line"},"     |"),s(`
`),n("span",{class:"line"},"  12 | fn sum(self: x, y: i32) {"),s(`
`),n("span",{class:"line"},"     |        +++++"),s(`
`),n("span",{class:"line"},"  help: if this is a parameter name, give it a type"),s(`
`),n("span",{class:"line"},"     |"),s(`
`),n("span",{class:"line"},"  12 | fn sum(x: TypeName, y: i32) {"),s(`
`),n("span",{class:"line"},"     |         ++++++++++"),s(`
`),n("span",{class:"line"},"  help: if this is a type, explicitly ignore the parameter name"),s(`
`),n("span",{class:"line"},"     |"),s(`
`),n("span",{class:"line"},"  12 | fn sum(_: x, y: i32) {"),s(`
`),n("span",{class:"line"},"     |        ++"),s(`
`),n("span",{class:"line"},"  "),s(`
`),n("span",{class:"line"},"  error[E0308]: mismatched types"),s(`
`),n("span",{class:"line"},"   --> src/main.rs:7:5"),s(`
`),n("span",{class:"line"},"    |"),s(`
`),n("span",{class:"line"},"  7 |     assert_eq!(s, 3);"),s(`
`),n("span",{class:"line"},"    |     ^^^^^^^^^^^^^^^^"),s(`
`),n("span",{class:"line"},"    |     |"),s(`
`),n("span",{class:"line"},"    |     expected `()`, found integer"),s(`
`),n("span",{class:"line"},"    |     expected because this is `()`"),s(`
`),n("span",{class:"line"},"    |"),s(`
`),n("span",{class:"line"},"    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)"),s(`
`),n("span",{class:"line"},"  "),s(`
`),n("span",{class:"line"},"  For more information about this error, try `rustc --explain E0308`."),s(`
`),n("span",{class:"line"},'  error: could not compile `playground` (bin "playground") due to 2 previous errors '),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),$n=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// Don't modify the following two lines!")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token punctuation"},"("),s("x"),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"let"),s(" s "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"sum"),n("span",{class:"token punctuation"},"("),s("x"),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"assert_eq!"),n("span",{class:"token punctuation"},"("),s("s"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Success!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"sum"),n("span",{class:"token punctuation"},"("),s("x"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"i32"),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"i32"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token keyword"},"i32"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    x "),n("span",{class:"token operator"},"+"),s(" y")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/*"),s(`
`),n("span",{class:"line"},"  Success!"),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Qn=n("h4",{id:"_2-🌟-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-🌟-1"},[n("span",null,"2. 🌟")])],-1),ns=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("   "),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// Replace i32 with another type")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token keyword"},"i32"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("   "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Success!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/*"),s(`
`),n("span",{class:"line"},"     Compiling playground v0.0.1 (/playground)"),s(`
`),n("span",{class:"line"},"  error[E0308]: mismatched types"),s(`
`),n("span",{class:"line"},"   --> src/main.rs:6:15"),s(`
`),n("span",{class:"line"},"    |"),s(`
`),n("span",{class:"line"},"  6 | fn print() -> i32 {"),s(`
`),n("span",{class:"line"},"    |    -----      ^^^ expected `i32`, found `()`"),s(`
`),n("span",{class:"line"},"    |    |"),s(`
`),n("span",{class:"line"},"    |    implicitly returns `()` as its body has no tail or `return` expression"),s(`
`),n("span",{class:"line"},"  "),s(`
`),n("span",{class:"line"},"  For more information about this error, try `rustc --explain E0308`."),s(`
`),n("span",{class:"line"},'  error: could not compile `playground` (bin "playground") due to previous error'),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),ss=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("   "),n("span",{class:"token function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// replace i32 with another type")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"print"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"hello,world"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/*"),s(`
`),n("span",{class:"line"},"  hello,world"),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),as=n("h4",{id:"_3-🌟🌟🌟-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-🌟🌟🌟-1"},[n("span",null,"3. 🌟🌟🌟")])],-1),es=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"// Solve it in two ways")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// DON'T let `println!` works")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token function"},"never_return"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Failed!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"never_return"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token operator"},"!"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// Implement this function, don't modify the fn signatures")]),s(`
`),n("span",{class:"line"},"    "),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/*"),s(`
`),n("span",{class:"line"},"     Compiling playground v0.0.1 (/playground)"),s(`
`),n("span",{class:"line"},"  warning: unreachable statement"),s(`
`),n("span",{class:"line"},"   --> src/main.rs:6:5"),s(`
`),n("span",{class:"line"},"    |"),s(`
`),n("span",{class:"line"},"  4 |     never_return();"),s(`
`),n("span",{class:"line"},"    |     -------------- any code following this expression is unreachable"),s(`
`),n("span",{class:"line"},"  5 |"),s(`
`),n("span",{class:"line"},'  6 |     println!("Failed!");'),s(`
`),n("span",{class:"line"},"    |     ^^^^^^^^^^^^^^^^^^^ unreachable statement"),s(`
`),n("span",{class:"line"},"    |"),s(`
`),n("span",{class:"line"},"    = note: `#[warn(unreachable_code)]` on by default"),s(`
`),n("span",{class:"line"},"    = note: this warning originates in the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)"),s(`
`),n("span",{class:"line"},"  "),s(`
`),n("span",{class:"line"},"  error[E0308]: mismatched types"),s(`
`),n("span",{class:"line"},"   --> src/main.rs:9:22"),s(`
`),n("span",{class:"line"},"    |"),s(`
`),n("span",{class:"line"},"  9 | fn never_return() -> ! {"),s(`
`),n("span",{class:"line"},"    |    ------------      ^ expected `!`, found `()`"),s(`
`),n("span",{class:"line"},"    |    |"),s(`
`),n("span",{class:"line"},"    |    implicitly returns `()` as its body has no tail or `return` expression"),s(`
`),n("span",{class:"line"},"    |"),s(`
`),n("span",{class:"line"},"    = note:   expected type `!`"),s(`
`),n("span",{class:"line"},"            found unit type `()`"),s(`
`),n("span",{class:"line"},"  "),s(`
`),n("span",{class:"line"},"  For more information about this error, try `rustc --explain E0308`."),s(`
`),n("span",{class:"line"},'  warning: `playground` (bin "playground") generated 1 warning'),s(`
`),n("span",{class:"line"},'  error: could not compile `playground` (bin "playground") due to previous error; 1 warning emitted'),s(`
`),n("span",{class:"line"}," */")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),ts=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"// Solve it in two ways")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// DON'T let `println!` works")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token function"},"never_return"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"never_return"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token operator"},"!"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// implement this function, don't modify fn signatures")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"panic!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"I return nothing!"'),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/*"),s(`
`),n("span",{class:"line"},"     Compiling playground v0.0.1 (/playground)"),s(`
`),n("span",{class:"line"},"      Finished dev [unoptimized + debuginfo] target(s) in 0.54s"),s(`
`),n("span",{class:"line"},"       Running `target/debug/playground`"),s(`
`),n("span",{class:"line"},"  thread 'main' panicked at 'I return nothing!', src/main.rs:8:5"),s(`
`),n("span",{class:"line"},"  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),ls=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"// Solve it in two ways")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// DON'T let `println!` works")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token function"},"never_return"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token namespace"},[s("std"),n("span",{class:"token punctuation"},"::")]),s("thread"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token namespace"},[s("std"),n("span",{class:"token punctuation"},"::")]),s("time"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"never_return"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token operator"},"!"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// implement this function, don't modify fn signatures")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"loop"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"I return nothing"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"// sleeping for 1 second to avoid exhausting the cpu resource")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token namespace"},[s("thread"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"sleep"),n("span",{class:"token punctuation"},"("),n("span",{class:"token namespace"},[s("time"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token class-name"},"Duration"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"from_secs"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/*"),s(`
`),n("span",{class:"line"},"     Compiling playground v0.0.1 (/playground)"),s(`
`),n("span",{class:"line"},"      Finished dev [unoptimized + debuginfo] target(s) in 0.53s"),s(`
`),n("span",{class:"line"},"       Running `target/debug/playground`"),s(`
`),n("span",{class:"line"},'  /playground/tools/entrypoint.sh: line 11:     8 Killed                  timeout --signal=KILL ${timeout} "$@"'),s(`
`),n("span",{class:"line"},"  I return nothing"),s(`
`),n("span",{class:"line"},"  I return nothing"),s(`
`),n("span",{class:"line"},"  I return nothing"),s(`
`),n("span",{class:"line"},"  I return nothing"),s(`
`),n("span",{class:"line"},"  I return nothing"),s(`
`),n("span",{class:"line"},"  I return nothing"),s(`
`),n("span",{class:"line"},"  I return nothing"),s(`
`),n("span",{class:"line"},"  I return nothing"),s(`
`),n("span",{class:"line"},"  I return nothing"),s(`
`),n("span",{class:"line"},"  I return nothing "),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),is=n("h3",{id:"diverging-functions",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#diverging-functions"},[n("span",null,"Diverging functions")])],-1),cs=n("p",null,"Diverging functions never return to the caller, so they may be used in places where a value of any type is expected.",-1),os=n("h4",{id:"_4-🌟🌟-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-🌟🌟-1"},[n("span",null,"4. 🌟🌟")])],-1),ps=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Success!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"get_option"),n("span",{class:"token punctuation"},"("),s("tp"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"u8"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token class-name"},"Option"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"i32"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"match"),s(" tp "),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token comment"},"// TODO")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("        _ "),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token comment"},"// TODO")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},"    "),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// Rather than returning a None, we use a diverging function instead")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token function"},"never_return_fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// IMPLEMENT this function in THREE ways")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"never_return_fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token operator"},"!"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},"    "),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/*"),s(`
`),n("span",{class:"line"},"     Compiling playground v0.0.1 (/playground)"),s(`
`),n("span",{class:"line"},"  error[E0308]: mismatched types"),s(`
`),n("span",{class:"line"},"    --> src/main.rs:21:25"),s(`
`),n("span",{class:"line"},"     |"),s(`
`),n("span",{class:"line"},"  21 | fn never_return_fn() -> ! {"),s(`
`),n("span",{class:"line"},"     |    ---------------      ^ expected `!`, found `()`"),s(`
`),n("span",{class:"line"},"     |    |"),s(`
`),n("span",{class:"line"},"     |    implicitly returns `()` as its body has no tail or `return` expression"),s(`
`),n("span",{class:"line"},"     |"),s(`
`),n("span",{class:"line"},"     = note:   expected type `!`"),s(`
`),n("span",{class:"line"},"             found unit type `()`"),s(`
`),n("span",{class:"line"},"  "),s(`
`),n("span",{class:"line"},"  For more information about this error, try `rustc --explain E0308`."),s(`
`),n("span",{class:"line"},'  error: could not compile `playground` (bin "playground") due to previous error'),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),us=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Success!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"get_option"),n("span",{class:"token punctuation"},"("),s("tp"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"u8"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token class-name"},"Option"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"i32"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"match"),s(" tp "),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token comment"},"// TODO")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("        _ "),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token comment"},"// TODO")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},"    "),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// Rather than returning a None, we use a diverging function instead")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token function"},"never_return_fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// IMPLEMENT this function in THREE ways")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"never_return_fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token operator"},"!"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"unimplemented!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/* Success! */")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),rs=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Success!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"get_option"),n("span",{class:"token punctuation"},"("),s("tp"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"u8"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token class-name"},"Option"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"i32"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"match"),s(" tp "),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token comment"},"// TODO")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("        _ "),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token comment"},"// TODO")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},"    "),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// Rather than returning a None, we use a diverging function instead")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token function"},"never_return_fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// IMPLEMENT this function in THREE ways")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"never_return_fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token operator"},"!"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"panic!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/* Success! */")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),ds=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Success!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"get_option"),n("span",{class:"token punctuation"},"("),s("tp"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"u8"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token class-name"},"Option"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"i32"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"match"),s(" tp "),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token comment"},"// TODO")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("        _ "),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token comment"},"// TODO")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},"    "),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// Rather than returning a None, we use a diverging function instead")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token function"},"never_return_fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// IMPLEMENT this function in THREE ways")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"never_return_fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token operator"},"!"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"todo!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/* Success! */")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),ms=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Success!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"get_option"),n("span",{class:"token punctuation"},"("),s("tp"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token keyword"},"u8"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token class-name"},"Option"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"i32"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"match"),s(" tp "),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token comment"},"// TODO")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("        _ "),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token comment"},"// TODO")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},"    "),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// Rather than returning a None, we use a diverging function instead")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token function"},"never_return_fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// IMPLEMENT this function in THREE ways")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"never_return_fn"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token operator"},"!"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"loop"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token namespace"},[s("std"),n("span",{class:"token punctuation"},"::"),s("thread"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"sleep"),n("span",{class:"token punctuation"},"("),n("span",{class:"token namespace"},[s("std"),n("span",{class:"token punctuation"},"::"),s("time"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token class-name"},"Duration"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"from_secs"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/* "),s(`
`),n("span",{class:"line"},"  Success! "),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),ks=n("h4",{id:"_5-🌟🌟-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-🌟🌟-1"},[n("span",null,"5. 🌟🌟")])],-1),bs=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// FILL in the blank")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"let"),s(" b "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token constant"},"__"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"let"),s(" _v "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"match"),s(" b "),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token boolean"},"true"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"// Diverging functions can also be used in match expression to replace a value of any value")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token boolean"},"false"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Success!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token macro property"},"panic!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"we have no value for `false`, but we can panic"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Exercise Failed if printing out this line!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/*"),s(`
`),n("span",{class:"line"},"     Compiling playground v0.0.1 (/playground)"),s(`
`),n("span",{class:"line"},"  error[E0425]: cannot find value `__` in this scope"),s(`
`),n("span",{class:"line"},"   --> src/main.rs:4:13"),s(`
`),n("span",{class:"line"},"    |"),s(`
`),n("span",{class:"line"},"  4 |     let b = __;"),s(`
`),n("span",{class:"line"},"    |             ^^ not found in this scope"),s(`
`),n("span",{class:"line"},"  "),s(`
`),n("span",{class:"line"},"  For more information about this error, try `rustc --explain E0425`."),s(`
`),n("span",{class:"line"},'  error: could not compile `playground` (bin "playground") due to previous error'),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),vs=n("div",{class:"language-rust line-numbers-mode","data-highlighter":"prismjs","data-ext":"rs","data-title":"rs"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"main"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// FILL in the blank")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"let"),s(" b "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"let"),s(" _v "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"match"),s(" b "),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token boolean"},"true"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"// Diverging functions can also be used in match expression")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token boolean"},"false"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Success!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token macro property"},"panic!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"we have no value for `false`, but we can panic"'),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token macro property"},"println!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Exercise Failed if printing out this line!"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"//")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"/*"),s(`
`),n("span",{class:"line"},"    Compiling playground v0.0.1 (/playground)"),s(`
`),n("span",{class:"line"},"    Finished dev [unoptimized + debuginfo] target(s) in 0.53s"),s(`
`),n("span",{class:"line"},"     Running `target/debug/playground`"),s(`
`),n("span",{class:"line"},"  thread 'main' panicked at 'we have no value for `false`, but we can panic', src/main.rs:10:13"),s(`
`),n("span",{class:"line"},"  note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"),s(`
`),n("span",{class:"line"},"  Success!"),s(`
`),n("span",{class:"line"},"*/")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),hs={class:"hint-container tip"},gs=n("p",{class:"hint-container-title"},"Note",-1),ys={href:"https://github.com/sunface/rust-by-practice",target:"_blank",rel:"noopener noreferrer"},fs=n("code",null,"sunface/rust-by-practice",-1),ws=n("hr",null,null,-1);function _s(r,xs){const d=u("VPCard"),p=u("router-link"),m=u("SiteInfo"),c=u("FontIcon"),i=u("Tabs");return y(),b("div",null,[n("h1",w,[n("a",_,[n("span",null,v(r.$frontmatter.title)+" 관련",1)])]),l(d,h(g({title:"Rust By Practice",desc:"Rust By Practice",link:"/rust/rust-by-practice/README.md",logo:"https://practice.course.rs/favicon.svg",background:"rgba(22,25,35,0.2)"})),null,16),n("nav",x,[n("ul",null,[n("li",null,[l(p,{to:"#data-types"},{default:a(()=>[s("Data Types")]),_:1}),n("ul",null,[n("li",null,[l(p,{to:"#introduction"},{default:a(()=>[s("Introduction")]),_:1})]),n("li",null,[l(p,{to:"#scalar-types"},{default:a(()=>[s("Scalar Types")]),_:1})]),n("li",null,[l(p,{to:"#compound-types"},{default:a(()=>[s("Compound Types")]),_:1})])])]),n("li",null,[l(p,{to:"#numbers"},{default:a(()=>[s("Numbers")]),_:1}),n("ul",null,[n("li",null,[l(p,{to:"#integer"},{default:a(()=>[s("Integer")]),_:1})]),n("li",null,[l(p,{to:"#floating-point"},{default:a(()=>[s("Floating-Point")]),_:1})]),n("li",null,[l(p,{to:"#range"},{default:a(()=>[s("Range")]),_:1})]),n("li",null,[l(p,{to:"#computations"},{default:a(()=>[s("Computations")]),_:1})])])]),n("li",null,[l(p,{to:"#functions"},{default:a(()=>[s("Functions")]),_:1}),n("ul",null,[n("li",null,[l(p,{to:"#diverging-functions"},{default:a(()=>[s("Diverging functions")]),_:1})])])])])]),S,l(m,{name:"4.1. Numbers | Rust By Practice",desc:"4.1. Numbers",url:"https://practice.rs/basic-types/numbers.html",logo:"https://practice.course.rs/favicon.svg",preview:"https://github.com/sunface/rust-by-practice/blob/master/en/assets/header.jpg?raw=true"}),A,T,R,n("p",null,[s("Filename: "),l(c,{icon:"fa-brands fa-rust"}),q]),E,n("p",null,[s("Filename: "),l(c,{icon:"fa-brands fa-rust"}),I]),F,n("p",null,[s("Each expression in these statements uses a mathematical operator and evaluates to a single value, which is then bound to a variable. "),n("a",z,[l(c,{icon:"fa-brands fa-rust"}),s("Appendix B")]),s(" contains a list of all operators that Rust provides.")]),M,C,n("p",null,[s("Filename: "),l(c,{icon:"fa-brands fa-rust"}),j]),P,n("p",null,[s("Filename: "),l(c,{icon:"fa-brands fa-rust"}),N]),O,n("p",null,[s("Note that we specify "),D,s(" literals with single quotes, as opposed to string literals, which use double quotes. Rust’s "),L,s(" type is four bytes in size and represents a Unicode Scalar Value, which means it can represent a lot more than just ASCII. Accented letters; Chinese, Japanese, and Korean characters; emoji; and zero-width spaces are all valid "),B,s(" values in Rust. Unicode Scalar Values range from "),U,s(" to "),K,s(" and "),W,s(" to "),H,s(" inclusive. However, a “character” isn’t really a concept in Unicode, so your human intuition for what a “character” is may not match up with what a "),X,s(" is in Rust. We’ll discuss this topic in detail in "),n("a",V,[l(c,{icon:"fa-brands fa-rust"}),s("“Storing UTF-8 Encoded Text with Strings”")]),s(" in Chapter 8.")]),Y,Z,J,G,$,n("blockquote",null,[l(c,{icon:"fas fa-folder-open"}),Q,l(c,{icon:"fa-brands fa-rust"}),nn]),sn,n("blockquote",null,[l(c,{icon:"fa-brands fa-rust"}),an]),en,n("p",null,[s("Filename: "),l(c,{icon:"fa-brands fa-rust"}),tn]),ln,n("p",null,[s("Filename: "),l(c,{icon:"fa-brands fa-rust"}),cn]),on,n("p",null,[s("Filename: "),l(c,{icon:"fa-brands fa-rust"}),pn]),un,n("p",null,[s("Filename: "),l(c,{icon:"fa-brands fa-rust"}),rn]),dn,l(i,{id:"417",data:[{id:"💀Problem"},{id:"Solution"}],active:0},{title0:a(({value:e,isActive:t})=>[s("💀Problem")]),title1:a(({value:e,isActive:t})=>[s("Solution")]),tab0:a(({value:e,isActive:t})=>[mn]),tab1:a(({value:e,isActive:t})=>[kn]),_:1}),bn,l(i,{id:"428",data:[{id:"💀Problem"},{id:"Solution"}],active:0},{title0:a(({value:e,isActive:t})=>[s("💀Problem")]),title1:a(({value:e,isActive:t})=>[s("Solution")]),tab0:a(({value:e,isActive:t})=>[vn]),tab1:a(({value:e,isActive:t})=>[hn]),_:1}),gn,yn,l(i,{id:"444",data:[{id:"💀Problem"},{id:"Solution"}],active:0},{title0:a(({value:e,isActive:t})=>[s("💀Problem")]),title1:a(({value:e,isActive:t})=>[s("Solution")]),tab0:a(({value:e,isActive:t})=>[fn]),tab1:a(({value:e,isActive:t})=>[wn]),_:1}),_n,l(i,{id:"455",data:[{id:"💀Problem"},{id:"Solution"}],active:0},{title0:a(({value:e,isActive:t})=>[s("💀Problem")]),title1:a(({value:e,isActive:t})=>[s("Solution")]),tab0:a(({value:e,isActive:t})=>[xn]),tab1:a(({value:e,isActive:t})=>[Sn]),_:1}),An,l(i,{id:"466",data:[{id:"💀Problem"},{id:"Solution"}],active:0},{title0:a(({value:e,isActive:t})=>[s("💀Problem")]),title1:a(({value:e,isActive:t})=>[s("Solution")]),tab0:a(({value:e,isActive:t})=>[Tn]),tab1:a(({value:e,isActive:t})=>[Rn]),_:1}),qn,l(i,{id:"477",data:[{id:"💀Problem"},{id:"Solution"}],active:0},{title0:a(({value:e,isActive:t})=>[s("💀Problem")]),title1:a(({value:e,isActive:t})=>[s("Solution")]),tab0:a(({value:e,isActive:t})=>[En]),tab1:a(({value:e,isActive:t})=>[In]),_:1}),Fn,zn,l(i,{id:"491",data:[{id:"💀Problem"},{id:"Solution"}],active:0},{title0:a(({value:e,isActive:t})=>[s("💀Problem")]),title1:a(({value:e,isActive:t})=>[s("Solution")]),tab0:a(({value:e,isActive:t})=>[Mn]),tab1:a(({value:e,isActive:t})=>[Cn]),_:1}),jn,l(i,{id:"502",data:[{id:"💀Problem"},{id:"Solution"}],active:0},{title0:a(({value:e,isActive:t})=>[s("💀Problem")]),title1:a(({value:e,isActive:t})=>[s("Solution")]),tab0:a(({value:e,isActive:t})=>[Pn]),tab1:a(({value:e,isActive:t})=>[Nn]),_:1}),On,l(i,{id:"531",data:[{id:"💀Problem"},{id:"Solution"}],active:0},{title0:a(({value:e,isActive:t})=>[s("💀Problem")]),title1:a(({value:e,isActive:t})=>[s("Solution")]),tab0:a(({value:e,isActive:t})=>[Dn]),tab1:a(({value:e,isActive:t})=>[Ln]),_:1}),Bn,l(i,{id:"542",data:[{id:"💀Problem"},{id:"Solution"}],active:0},{title0:a(({value:e,isActive:t})=>[s("💀Problem")]),title1:a(({value:e,isActive:t})=>[s("Solution")]),tab0:a(({value:e,isActive:t})=>[Un]),tab1:a(({value:e,isActive:t})=>[Kn]),_:1}),Wn,Hn,l(i,{id:"556",data:[{id:"💀Problem"},{id:"Solution"}],active:0},{title0:a(({value:e,isActive:t})=>[s("💀Problem")]),title1:a(({value:e,isActive:t})=>[s("Solution")]),tab0:a(({value:e,isActive:t})=>[Xn]),tab1:a(({value:e,isActive:t})=>[Vn]),_:1}),Yn,Zn,Jn,l(i,{id:"571",data:[{id:"💀Problem"},{id:"Solution"}],active:0},{title0:a(({value:e,isActive:t})=>[s("💀Problem")]),title1:a(({value:e,isActive:t})=>[s("Solution")]),tab0:a(({value:e,isActive:t})=>[Gn]),tab1:a(({value:e,isActive:t})=>[$n]),_:1}),Qn,l(i,{id:"582",data:[{id:"💀Problem"},{id:"Solution"}],active:0},{title0:a(({value:e,isActive:t})=>[s("💀Problem")]),title1:a(({value:e,isActive:t})=>[s("Solution")]),tab0:a(({value:e,isActive:t})=>[ns]),tab1:a(({value:e,isActive:t})=>[ss]),_:1}),as,l(i,{id:"593",data:[{id:"💀Problem"},{id:"Solution 1"},{id:"Solution 2"}],active:0},{title0:a(({value:e,isActive:t})=>[s("💀Problem")]),title1:a(({value:e,isActive:t})=>[s("Solution 1")]),title2:a(({value:e,isActive:t})=>[s("Solution 2")]),tab0:a(({value:e,isActive:t})=>[es]),tab1:a(({value:e,isActive:t})=>[ts]),tab2:a(({value:e,isActive:t})=>[ls]),_:1}),is,cs,os,l(i,{id:"613",data:[{id:"💀Problem"},{id:"Solution 1"},{id:"Solution 2"},{id:"Solution 3"},{id:"Solution 4"}],active:0},{title0:a(({value:e,isActive:t})=>[s("💀Problem")]),title1:a(({value:e,isActive:t})=>[s("Solution 1")]),title2:a(({value:e,isActive:t})=>[s("Solution 2")]),title3:a(({value:e,isActive:t})=>[s("Solution 3")]),title4:a(({value:e,isActive:t})=>[s("Solution 4")]),tab0:a(({value:e,isActive:t})=>[ps]),tab1:a(({value:e,isActive:t})=>[us]),tab2:a(({value:e,isActive:t})=>[rs]),tab3:a(({value:e,isActive:t})=>[ds]),tab4:a(({value:e,isActive:t})=>[ms]),_:1}),ks,l(i,{id:"633",data:[{id:"💀Problem"},{id:"Solution"}],active:0},{title0:a(({value:e,isActive:t})=>[s("💀Problem")]),title1:a(({value:e,isActive:t})=>[s("Solution")]),tab0:a(({value:e,isActive:t})=>[bs]),tab1:a(({value:e,isActive:t})=>[vs]),_:1}),n("div",hs,[gs,n("p",null,[s("You can find the solutions "),n("a",ys,[s("here ("),l(c,{icon:"iconfont icon-github"}),fs,s(")")]),s(" (under the solutions path), but only use it when you need it")])]),ws])}const Ts=k(f,[["render",_s],["__file","numbers.html.vue"]]),Rs=JSON.parse('{"path":"/rust/rust-by-practice/basic-types/numbers.html","title":"3.1. Numbers","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"3.1. Numbers","description":"Rust by Practice > 3.1. Numbers","category":["Rust"],"tag":["crashcourse","freecodecamp","zubiarfan","youtube","rust","rs","wasm","assembly"],"head":[[{"meta":null},{"property":"og:title","content":"Rust by Practice > 3.1. Numbers"},{"property":"og:description","content":"3.1. Numbers"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/rust/rust-by-practice/basic-types/numbers.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/rust/rust-by-practice/basic-types/numbers.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"3.1. Numbers"}],["meta",{"property":"og:description","content":"Rust by Practice > 3.1. Numbers"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://doc.rust-lang.org/book/ch00-00-introduction.html#ferris"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"freecodecamp"}],["meta",{"property":"article:tag","content":"zubiarfan"}],["meta",{"property":"article:tag","content":"youtube"}],["meta",{"property":"article:tag","content":"rust"}],["meta",{"property":"article:tag","content":"rs"}],["meta",{"property":"article:tag","content":"wasm"}],["meta",{"property":"article:tag","content":"assembly"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3.1. Numbers\\",\\"image\\":[\\"https://doc.rust-lang.org/book/ch00-00-introduction.html#ferris\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]],"prev":"/rust/rust-by-practice/variables.md","isOriginal":false},"headers":[{"level":2,"title":"Data Types","slug":"data-types","link":"#data-types","children":[{"level":3,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":3,"title":"Scalar Types","slug":"scalar-types","link":"#scalar-types","children":[]},{"level":3,"title":"Compound Types","slug":"compound-types","link":"#compound-types","children":[]}]},{"level":2,"title":"Numbers","slug":"numbers","link":"#numbers","children":[{"level":3,"title":"Integer","slug":"integer","link":"#integer","children":[]},{"level":3,"title":"Floating-Point","slug":"floating-point","link":"#floating-point","children":[]},{"level":3,"title":"Range","slug":"range","link":"#range","children":[]},{"level":3,"title":"Computations","slug":"computations","link":"#computations","children":[]}]},{"level":2,"title":"Functions","slug":"functions","link":"#functions","children":[{"level":3,"title":"Diverging functions","slug":"diverging-functions","link":"#diverging-functions","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":3}]},"readingTime":{"minutes":21,"words":6301},"filePathRelative":"rust/rust-by-practice/basic-types/numbers.md","localizedDate":"2023년 12월 27일","excerpt":"\\n"}');export{Ts as comp,Rs as data};
