import{_ as u}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as e,t as m,b as s,w as o,n as i,g as l,d as a,e as r,r as c,o as w}from"./app-U_bew1in.js";const y={},g={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},f={class:"table-of-contents"},v=e("hr",null,null,-1),b=e("h2",{id:"complex-data-types-part-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#complex-data-types-part-2"},[e("span",null,"Complex data types, part 2")])],-1),_=e("p",null,"Today we’re going to finish our look at data types by examining type annotation, which is Swift’s way of letting us dictate exactly what data type each variable and constant should be. Once that’s done we’ll summarize what’s covered, then try another checkpoint so you can evaluate what you’ve learned so far.",-1),S=e("p",null,"I know, you’re probably sick of data types at this point, but as Eric Raymond said, “good data structures and bad code works a lot better than the other way around.”",-1),x=e("p",null,[e("strong",null,"Today you’ll learn about type annotation, then go through the summary and checkpoint."),a(" There’s some optional extra reading that I recommend you read, along with a short test to help make sure you’ve understood what was taught.")],-1),q=e("p",null,"Today ought to take you a lot less than an hour to complete, but that’s okay – day 13 will probably take more than an hour, so it all balances out!",-1),I=e("h3",{id:"_1-how-to-use-type-annotations",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-how-to-use-type-annotations"},[e("span",null,"1. How to use type annotations")])],-1),T={class:"hint-container details"},D=e("summary",null,"1. How to use type annotations",-1),C=r(`<p>Swift is able to figure out what type of data a constant or variable holds based on what we assign to it. However, sometimes we don’t want to assign a value immediately, or sometimes we want to override Swift’s choice of type, and that’s where type annotations come in.</p><p>So far we’ve been making constants and variables like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> surname <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Lasso&quot;</span></span></span>
<span class="line"><span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>This uses <em>type inference</em>: Swift infers that <code>surname</code> is a string because we’re assigning text to it, and then infers that <code>score</code> is an integer because we’re assigning a whole number to it.</p><p>Type annotations let us be explicit about what data types we want, and look like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> surname<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Lasso&quot;</span></span></span>
<span class="line"><span class="token keyword">var</span> score<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we’re being explicit: <code>surname</code> must be a string, and <code>score</code> must be an integer. That’s exactly what Swift’s type inference would have done anyway, but sometimes it isn’t – sometimes you will want to choose a different type.</p><p>For example, maybe <code>score</code> is a decimal because the user can get half points, so you’d write this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> score<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Without the <code>: Double</code> part Swift would infer that to be an integer, but we’re overriding that and saying it’s definitely a decimal number.</p><p>We’ve looked at a few types of data so far, and it’s important you know their names so you can use the right type annotation when needed.</p><p><code>String</code> holds text:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> playerName<span class="token punctuation">:</span> <span class="token class-name">String</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Roy&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>Int</code> holds whole numbers:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> luckyNumber<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">13</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>Double</code> holds decimal numbers:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> pi<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">3.141</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>Bool</code> holds either true or false:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> isAuthenticated<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>Array</code> holds lots of different values, all in the order you add them. This must be specialized, such as <code>[String]</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> albums<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Red&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Fearless&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>Dictionary</code> holds lots of different values, where you get to decide how data should be accessed. This must be specialized, such as <code>[String: Int]</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> user<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;id&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;@twostraws&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>Set</code> holds lots of different values, but stores them in an order that’s optimized for checking what it contains. This must be specialized, such as <code>Set&lt;String&gt;</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> books<span class="token punctuation">:</span> <span class="token class-name">Set</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;The Bluest Eye&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Foundation&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Girl, Woman, Other&quot;</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Knowing all these types is important for times when you don’t want to provide initial values. For example, this creates an array of strings:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> soda<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Coke&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Pepsi&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Irn-Bru&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Type annotation isn’t needed there, because Swift can see you’re assigning an array of strings. However, if you wanted to create an empty array of strings, you’d need to know the type:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> teams<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Again, the type annotation isn’t required, but you still need to know that an array of strings is written as <code>[String]</code> so that you can make the thing. Remember, you need to add the open and close parentheses when making empty arrays, dictionaries, and sets, because it’s where Swift allows us to customize the way they are created.</p><p>Some people prefer to use type annotation, then assign an empty array to it like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> cities<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>I prefer to use type inference as much as possible, so I’d write this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> clues <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>As well as all those, there are enums. Enums are a little different from the others because they let us create new types of our own, such as an enum containing days of the week, an enum containing which UI theme the user wants, or even an enum containing which screen is currently showing in our app.</p><p>Values of an enum have the same type as the enum itself, so we could write something like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">UIStyle</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> light<span class="token punctuation">,</span> dark<span class="token punctuation">,</span> system</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> style <span class="token operator">=</span> <span class="token class-name">UIStyle</span><span class="token punctuation">.</span>light</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This is what allows Swift to remove the enum name for future assignments, so we can write <code>style = .dark</code> – it knows any new value for <code>style</code> must be some kind <code>UIStyle</code></p><p>Now, there’s a very good chance you’ll be asking when you should use type annotations, so it might be helpful for you to know that I prefer to use type inference as much as possible, meaning that I assign a value to a constant or variable and Swift chooses the correct type automatically. Sometimes this means using something like <code>var score = 0.0</code> so that I get a <code>Double</code>.</p><p>The most common exception to this is with constants I don’t have a value for yet. You see, Swift is really clever: you can create a constant that doesn’t have a value just yet, later on <em>provide</em> that value, and Swift will ensure we don’t accidentally use it until a value is present. It will also ensure that you only ever set the value once, so that it remains constant.</p><p>For example:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> username<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"><span class="token comment">// lots of complex logic</span></span>
<span class="line">username <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;@twostraws&quot;</span></span></span>
<span class="line"><span class="token comment">// lots more complex logic</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That code is legal: we’re saying <code>username</code> will contain a string at some point, and we provide a value before using it. If the assignment line – <code>username = &quot;@twostraws&quot;</code> – was missing, then Swift would refuse to build our code because <code>username</code> wouldn’t have a value, and similarly if we tried to set a value to <code>username</code> a second time Swift would also complain.</p><p>This kind of code requires a type annotation, because without an initial value being assigned Swift doesn’t know what kind of data <code>username</code> will contain.</p><p>Regardless of whether you use type inference or type annotation, there is one golden rule: Swift must at all times know what data types your constants and variables contain. This is at the core of being a type-safe language, and stops us doing nonsense things like <code>5 + true</code> or similar.</p><p><strong>Important</strong>: Although type annotation can let us override Swift’s type inference to a degree, our finished code must still be possible. For example, this is not allowed:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> score<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Zero&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Swift just can’t convert “Zero” to an integer for us, even with a type annotation requesting it, so the code just won’t build.</p>`,48),j=r('<div class="hint-container info"><p class="hint-container-title">1. How to use type annotations - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-have-type-annotations" target="_blank" rel="noopener noreferrer">Why does Swift have type annotations?</a></li><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-would-you-want-to-create-an-empty-collection" target="_blank" rel="noopener noreferrer">Why would you want to create an empty collection?</a></li><li>Test: <a href="https://hackingwithswift.com/review/sixty/type-annotations" target="_blank" rel="noopener noreferrer">Type annotations</a></li></ul></div><h3 id="_2-summary-complex-data" tabindex="-1"><a class="header-anchor" href="#_2-summary-complex-data"><span>2. Summary: Complex data</span></a></h3>',2),A={class:"hint-container details"},R=e("summary",null,"2. Summary: Complex data",-1),H=r("<p>We’ve gone beyond simple data types now, and started looking at ways to group them together and even create our own using enums. So, let’s recap:</p><ul><li>Arrays let us store lots of values in one place, then read them out using integer indices. Arrays must always be specialized so they contain one specific type, and they have helpful functionality such as <code>count</code>, <code>append()</code>, and <code>contains()</code>.</li><li>Dictionaries also let us store lots of values in one place, but let us read them out using keys we specify. They must be specialized to have one specific type for key and another for the value, and have similar functionality to arrays, such as <code>contains()</code> and <code>count</code>.</li><li>Sets are a <em>third</em> way of storing lots of values in one place, but we don’t get to choose the order in which they store those items. Sets are really efficient at finding whether they contain a specific item.</li><li>Enums let us create our own simple types in Swift so that we can specify a range of acceptable values such as a list of actions the user can perform, the types of files we are able to write, or the types of notification to send to the user.</li><li>Swift must always know the type of data inside a constant or variable, and mostly uses <em>type inference</em> to figure that out based on the data we assign. However, it’s also possible to use <em>type annotation</em> to force a particular type.</li></ul><p>Out of arrays, dictionaries, and sets, it’s safe to say that you’ll use arrays by far the most. After that comes dictionaries, and sets come a distant third. That doesn’t mean sets aren’t useful, but you’ll know when you need them!</p>",3),U=e("h3",{id:"_3-checkpoint-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_3-checkpoint-2"},[e("span",null,"3. Checkpoint 2")])],-1),V={class:"hint-container details"},z=e("summary",null,"3. Checkpoint 2",-1),N=r("<p>Now that you’ve met arrays, dictionaries, and sets, I want to pause for a moment to give you chance to solve a small coding challenge. It’s not designed to trip you up, but instead to encourage you to stop for a while and think about what you’ve learned.</p><p>This time the challenge is to create an array of strings, then write some code that prints the number of items in the array and also the number of unique items in the array.</p><p>I’ll provide some hints below, but please take the time to think about a solution before you read them. Trust me: forgetting what you’ve learned then re-learning it actually makes it sink in deeper!</p><p>Still here? Okay, here are some hints:</p><ol><li>You should start by creating an array of strings, using something like <code>let albums = [&quot;Red&quot;, &quot;Fearless&quot;]</code></li><li>You can read the number of items in your array using <code>albums.count</code>.</li><li><code>count</code> also exists for sets.</li><li>Sets can be made from arrays using <code>Set(someArray)</code></li><li>Sets never include duplicates.</li></ol>",5),B=e("div",{class:"hint-container info"},[e("p",{class:"hint-container-title"},"Tip"),e("p",null,"Even though the checkpoint doesn’t ask much, don’t be surprised if you spend some time kind of staring at the screen wondering what to do. That isn’t a bad sign – in fact, I’d say it’s a good sign. I firmly believe there is no learning without struggle, so don’t be afraid to fight for it!")],-1),F=e("hr",null,null,-1);function O(d,E){const t=c("router-link"),n=c("VPCard"),p=c("VidStack");return w(),h("div",null,[e("h1",g,[e("a",k,[e("span",null,m(d.$frontmatter.title)+" 관련",1)])]),e("nav",f,[e("ul",null,[e("li",null,[s(t,{to:"#complex-data-types-part-2"},{default:o(()=>[a("Complex data types, part 2")]),_:1}),e("ul",null,[e("li",null,[s(t,{to:"#_1-how-to-use-type-annotations"},{default:o(()=>[a("1. How to use type annotations")]),_:1})]),e("li",null,[s(t,{to:"#_2-summary-complex-data"},{default:o(()=>[a("2. Summary: Complex data")]),_:1})]),e("li",null,[s(t,{to:"#_3-checkpoint-2"},{default:o(()=>[a("3. Checkpoint 2")]),_:1})])])])])]),v,s(n,i(l({title:"100 Days of SwiftUI - Day 4",desc:"Complex data types, part 2",link:"https://www.hackingwithswift.com/100/swiftui/4",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),b,_,S,x,q,I,e("details",T,[D,s(n,i(l({title:"100 Days of SwiftUI - Day 4 - 1. How to use type annotations",desc:"1. How to use type annotations",link:"https://hackingwithswift.com/quick-start/beginners/how-to-use-type-annotations",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(p,{src:"youtube/_FX8xCBmbeA"}),C]),j,e("details",A,[R,s(n,i(l({title:"100 Days of SwiftUI - Day 4 - 2. Summary: Complex data",desc:"2. Summary: Complex data",link:"https://hackingwithswift.com/quick-start/beginners/summary-complex-data",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(p,{src:"youtube/VdqR02wVH3A"}),H]),U,e("details",V,[z,s(n,i(l({title:"100 Days of SwiftUI - Day 4 - 3. Checkpoint 2",desc:"3. Checkpoint 2",link:"https://hackingwithswift.com/quick-start/beginners/checkpoint-2",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),s(p,{src:"youtube/TSuyx7YcDeg"}),N]),B,F])}const Z=u(y,[["render",O],["__file","04.html.vue"]]),K=JSON.parse('{"path":"/swift/100-days-of-swiftui/04.html","title":"Day 04","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 04","description":"100 Days of SwiftUI > Day 04","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 04"},{"property":"og:description","content":"Day 04"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/04.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/04.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 04"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 04"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 04\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Complex data types, part 2","slug":"complex-data-types-part-2","link":"#complex-data-types-part-2","children":[{"level":3,"title":"1. How to use type annotations","slug":"_1-how-to-use-type-annotations","link":"#_1-how-to-use-type-annotations","children":[]},{"level":3,"title":"2. Summary: Complex data","slug":"_2-summary-complex-data","link":"#_2-summary-complex-data","children":[]},{"level":3,"title":"3. Checkpoint 2","slug":"_3-checkpoint-2","link":"#_3-checkpoint-2","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":8}]},"readingTime":{"minutes":6.85,"words":2054},"filePathRelative":"swift/100-days-of-swiftui/04.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{Z as comp,K as data};
