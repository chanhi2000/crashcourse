import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as k,a as e,t as m,b as s,w as p,n as l,g as r,d as n,e as t,r as a,o as w}from"./app-U_bew1in.js";const g={},f={id:"frontmatter-title-관련",tabindex:"-1"},v={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},b=e("hr",null,null,-1),_=t('<h2 id="project-20-part-two" tabindex="-1"><a class="header-anchor" href="#project-20-part-two"><span>Project 20, part two</span></a></h2><p>Even today, the shake gesture in iOS feels a bit odd, at least to me. It’s particularly odd on iPad, where devices can be up to 12.9-inches – they are hefty, so shaking them feels, well, <em>odd</em>.</p><p><a href="https://daringfireball.net/2018/08/shake_to_undo" target="_blank" rel="noopener noreferrer">John Gruber recounts an anecdote</a> he heard about how shake to undo came about, which might why it just doesn’t fit in with the rest of the platform:</p><blockquote><p>Scott Forstall charged the iOS team with devising an interface for Undo — everyone knew the iPhone should have it,1 but no one had a good idea how to do it. One engineer joked that they could just make you shake the iPhone to invoke it. Forstall said he loved the idea, and what was proposed as a joke has been with us as the Undo interface ever since.</p></blockquote><p>Still, when it works it works, and I think it feels satisfying to make things explode by giving your iPad a little shake!</p><p>There’s only a little bit more to do to our game to finish it up, and I hope you’re happy with how it all came together – SpriteKit is <em>fun</em>.</p><p><strong>Today you should work through the “Making things go bang” chapter and wrap up for project 20, complete its review, then work through all three of its challenges.</strong></p><h3 id="making-things-go-bang-skemitternode" tabindex="-1"><a class="header-anchor" href="#making-things-go-bang-skemitternode"><span>Making things go bang: <code>SKEmitterNode</code></span></a></h3>',8),x={class:"hint-container details"},S=e("summary",null,"Making things go bang: SKEmitterNode",-1),j=t(`<p>This is easily the best bit of the game, mostly because it involves even more particle systems. There are three things we need to create: a method to explode a single firework, a method to explode all the fireworks (which will call the single firework explosion method), and some code to detect and respond the device being shaken.</p><p>First, the code to explode a single firework. Put this somewhere in your game scene:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">explode</span><span class="token punctuation">(</span>firework<span class="token punctuation">:</span> <span class="token class-name">SKNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> emitter <span class="token operator">=</span> <span class="token class-name">SKEmitterNode</span><span class="token punctuation">(</span>fileNamed<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;explode&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        emitter<span class="token punctuation">.</span>position <span class="token operator">=</span> firework<span class="token punctuation">.</span>position</span>
<span class="line">        <span class="token function">addChild</span><span class="token punctuation">(</span>emitter<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    firework<span class="token punctuation">.</span><span class="token function">removeFromParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You should be able to read that once and know exactly what it does: it creates an explosion where the firework was, then removes the firework from the game scene.</p><p>The <code>explodeFireworks()</code> method is next, and is only fractionally more complicated. It will be triggered when the user wants to set off their selected fireworks, so it needs to loop through the <code>fireworks</code> array (backwards again!), pick out any selected ones, then call <code>explode()</code> on it.</p><p>As I said earlier, the player&#39;s score needs to go up by more when they select more fireworks, so about half of the <code>explodeFireworks()</code> method is taken up with figuring out what score to give the player.</p><p>There&#39;s one small piece of extra complexity: remember, the <code>fireworks</code> array stores the firework container node, so we need to read the firework image out of its <code>children</code> array.</p><p>Enough talk – here&#39;s the code:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">explodeFireworks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> numExploded <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> fireworkContainer<span class="token punctuation">)</span> <span class="token keyword">in</span> fireworks<span class="token punctuation">.</span><span class="token function">enumerated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">guard</span> <span class="token keyword">let</span> firework <span class="token operator">=</span> fireworkContainer<span class="token punctuation">.</span>children<span class="token punctuation">.</span>first <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">SKSpriteNode</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">continue</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> firework<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;selected&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// destroy this firework!</span></span>
<span class="line">            <span class="token function">explode</span><span class="token punctuation">(</span>firework<span class="token punctuation">:</span> fireworkContainer<span class="token punctuation">)</span></span>
<span class="line">            fireworks<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>at<span class="token punctuation">:</span> index<span class="token punctuation">)</span></span>
<span class="line">            numExploded <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">switch</span> numExploded <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment">// nothing – rubbish!</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token label important"></span>
<span class="line">    case</span> <span class="token number">1</span><span class="token punctuation">:</span></span>
<span class="line">        score <span class="token operator">+=</span> <span class="token number">200</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span></span>
<span class="line">        score <span class="token operator">+=</span> <span class="token number">500</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span></span>
<span class="line">        score <span class="token operator">+=</span> <span class="token number">1500</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span></span>
<span class="line">        score <span class="token operator">+=</span> <span class="token number">2500</span></span>
<span class="line">    <span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">        score <span class="token operator">+=</span> <span class="token number">4000</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As you can see, exploding five fireworks is worth 20x more points than exploding just one, hence the incentive to select groups by color!</p>`,10),P=e("code",null,"motionBegan()",-1),D=e("em",null,"that",-1),T=e("code",null,"GameViewController.swift",-1),C=e("code",null,"UIViewController",-1),K=e("code",null,"explodeFireworks()",-1),E=e("code",null,"prefersStatusBarHidden",-1),F=e("code",null,"GameViewController.swift",-1),N=t(`<div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">override</span> <span class="token keyword">func</span> <span class="token function-definition function">motionBegan</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> motion<span class="token punctuation">:</span> <span class="token class-name">UIEvent</span><span class="token punctuation">.</span><span class="token class-name">EventSubtype</span><span class="token punctuation">,</span> with event<span class="token punctuation">:</span> <span class="token class-name">UIEvent</span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">guard</span> <span class="token keyword">let</span> skView <span class="token operator">=</span> view <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">SKView</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">guard</span> <span class="token keyword">let</span> gameScene <span class="token operator">=</span> skView<span class="token punctuation">.</span>scene <span class="token keyword">as</span><span class="token operator">?</span> <span class="token class-name">GameScene</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">}</span></span>
<span class="line">    gameScene<span class="token punctuation">.</span><span class="token function">explodeFireworks</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That&#39;s it, your game is done. Obviously you can&#39;t shake your laptop to make the iOS Simulator respond, but you can use the keyboard shortcut <kbd>Ctrl</kbd>+<kbd>Cmd</kbd>+<kbd>Z</kbd> to get the same result. If you&#39;re testing on your iPad, make sure you give it a good shake in order to trigger the explosions!</p>`,2),I=e("h3",{id:"wrap-up",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#wrap-up"},[e("span",null,"Wrap up")])],-1),V={class:"hint-container details"},M=e("summary",null,"Wrap up",-1),O=t('<p>This wasn’t a <em>complicated</em> project, although it did involve quite a bit of code because of the various ways fireworks are launched. However, it’s a good example of where particle systems can really bring a game to life – we only have two different types here, but they still do wonders as simple special effects.</p><p>Plus of course you have yet more Swift coding experience under your belt, now complete with <code>follow()</code>, <code>UIBezierPath</code>, <code>for case let</code>, color blending, and, yes, even the shake gesture – although I wouldn&#39;t be surprised if you switch to having a button on the screen to make explosions easier!</p><h4 id="review-what-you-learned" tabindex="-1"><a class="header-anchor" href="#review-what-you-learned"><span>Review what you learned</span></a></h4><p>Anyone can sit through a tutorial, but it takes actual work to remember what was taught. It’s my job to make sure you take as much from these tutorials as possible, so I’ve prepared a short review to help you check your learning.</p><p><a href="https://www.hackingwithswift.com/review/hws/project-20-fireworks-night" target="_blank" rel="noopener noreferrer">Click here to review what you learned in project 20.</a></p><h4 id="challenge" tabindex="-1"><a class="header-anchor" href="#challenge"><span>Challenge</span></a></h4><p>One of the best ways to learn is to write your own code as often as possible, so here are three ways you should try your new knowledge to make sure you fully understand what’s going on:</p><ol><li>For an easy challenge try adding a score label that updates as the player’s score changes.</li><li>Make the game end after a certain number of launches. You will need to use the <code>invalidate()</code> method of <code>Timer</code> to stop it from repeating.</li><li>Use the <code>waitForDuration</code> and <code>removeFromParent</code> actions in a sequence to make sure explosion particle emitters are removed from the game scene when they are finished.</li></ol>',8),U=e("div",{class:"hint-container info"},[e("p",{class:"hint-container-title"},"Wrap up - Additional"),e("p",null,[e("a",{href:"https://www.hackingwithswift.com/review/hws/project-20-fireworks-night",target:"_blank",rel:"noopener noreferrer"},"Review for Project 20: Fireworks Night")])],-1),q=e("p",null,"That’s another project finished, and one that gives you the foundations for some major new projects of your own – share your progress with the world!",-1),W=e("hr",null,null,-1);function B(u,R){const o=a("router-link"),i=a("VPCard"),c=a("VidStack"),d=a("FontIcon");return w(),k("div",null,[e("h1",f,[e("a",v,[e("span",null,m(u.$frontmatter.title)+" 관련",1)])]),e("nav",y,[e("ul",null,[e("li",null,[s(o,{to:"#project-20-part-two"},{default:p(()=>[n("Project 20, part two")]),_:1}),e("ul",null,[e("li",null,[s(o,{to:"#making-things-go-bang-skemitternode"},{default:p(()=>[n("Making things go bang: SKEmitterNode")]),_:1})]),e("li",null,[s(o,{to:"#wrap-up"},{default:p(()=>[n("Wrap up")]),_:1})])])])])]),b,s(i,l(r({title:"100 Days of Swift - Day 71",desc:"Project 20, part two",link:"https://www.hackingwithswift.com/100/71",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,71,58,0.2)"})),null,16),_,e("details",x,[S,s(i,l(r({title:"100 Days of Swift - Day 71 - Making things go bang: SKEmitterNode",desc:"Making things go bang: SKEmitterNode",link:"https://www.hackingwithswift.com/read/20/4/making-things-go-bang-skemitternode",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,71,58,0.2)"})),null,16),s(c,{src:"youtube/90dlnvKUy3w"}),j,e("p",null,[n("There's one last thing to do before this game is complete, and that's to detect the device being shaken. This is easy enough to do because iOS will automatically call a method called "),P,n(" on our game when the device is shaken. Well, it's a little more complicated than "),D,n(" – what actually happens is that the method gets called in "),s(d,{icon:"fa-brands fa-swift"}),T,n(", which is the "),C,n(" that hosts our SpriteKit game scene.")]),e("p",null,[n("The default view controller doesn't know that it has a SpriteKit view, and certainly doesn't know what scene is showing, so we need to do a little typecasting. Once we have a reference to our actual game scene, we can call "),K,n(". Put this method just after the "),E,n(" property in "),s(d,{icon:"fa-brands fa-swift"}),F,n(":")]),N]),I,e("details",V,[M,s(i,l(r({title:"100 Days of Swift - Day 71 - Wrap up",desc:"Wrap up",link:"https://www.hackingwithswift.com/read/20/5/wrap-up",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,71,58,0.2)"})),null,16),s(c,{src:"youtube/0CdergUF130"}),O]),U,q,W])}const Z=h(g,[["render",B],["__file","71.html.vue"]]),z=JSON.parse('{"path":"/swift/100-days-of-swift/71.html","title":"Day 71","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 71","description":"100 Days of Swift > Day 71","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of Swift > Day 71"},{"property":"og:description","content":"Day 71"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swift/71.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swift/71.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 71"}],["meta",{"property":"og:description","content":"100 Days of Swift > Day 71"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 71\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 20, part two","slug":"project-20-part-two","link":"#project-20-part-two","children":[{"level":3,"title":"Making things go bang: SKEmitterNode","slug":"making-things-go-bang-skemitternode","link":"#making-things-go-bang-skemitternode","children":[]},{"level":3,"title":"Wrap up","slug":"wrap-up","link":"#wrap-up","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":12}]},"readingTime":{"minutes":4.25,"words":1274},"filePathRelative":"swift/100-days-of-swift/71.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{Z as comp,z as data};
