import{_ as h}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as b,a as e,t as v,b as t,w as n,n as k,g,d as s,e as o,r as d,o as f}from"./app-U_bew1in.js";const _={},x={id:"frontmatter-title-관련",tabindex:"-1"},w={class:"header-anchor",href:"#frontmatter-title-관련"},y={class:"table-of-contents"},A=e("hr",null,null,-1),E=e("hr",null,null,-1),C=e("p",null,[s("You've already seen various examples requiring conditional expressions. This chapter will revisit the "),e("code",null,"if-else"),s(" control structure and the ternary operator. Then you will see some examples with explicit loops (recall that "),e("code",null,"awk"),s(" is already looping over input records). Followed by keywords that control loop flow. Most of the syntax is very similar to the "),e("code",null,"C"),s(" language.")],-1),N={class:"hint-container info"},S=e("p",{class:"hint-container-title"},"Info",-1),j={href:"https://github.com/learnbyexample/learn_gnuawk/tree/master/example_files",target:"_blank",rel:"noopener noreferrer"},$=e("hr",null,null,-1),T=e("h2",{id:"if-else",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#if-else"},[e("span",null,[e("code",null,"if-else")])])],-1),F=e("p",null,"Mostly, when you need to use if control structure, you can get away with using the condX{actionX} blocks instead. But sometimes, you need additional condition checking within such action blocks. Or, you might need it inside loops. The syntax is if(cond){action} where the braces are optional if you need only one statement. if can be optionally followed by multiple else if conditions and a final else condition. These can also be nested as needed.",-1),q=e("p",null,[s("print all lines starting with '"),e("code",null,"b"),s("' additionally, if the last column is "),e("code",null,"> 0"),s(", then print some more text")],-1),I=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'/^b/{print; if($NF>0) print "------"}'`),s(" table.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# brown bread mat hair 42")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ------")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# blue cake mug shirt -7")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),R=e("p",null,"same as above, but uses the 'else' condition as well",-1),Q=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'/^b/{print; if($NF>0) print "------"; else print "======"}'`),s(" table.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# brown bread mat hair 42")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ------")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# blue cake mug shirt -7")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ======")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),G=e("p",null,[s("The ternary operator often reduces the need for single statement "),e("code",null,"if-else"),s(" control structures.")],-1),O=e("blockquote",null,[e("p",null,[s("same as: "),e("code",null,`awk '{if(NR%3) ORS="-" ; else ORS=RS} 1'`)])],-1),D=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"seq"),s(),e("span",{class:"token number"},"6"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'{ORS = NR%3 ? "-" : RS} 1'`)]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 1-2-3")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 4-5-6")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),H=e("p",null,"note that parentheses is necessary for print in this case",-1),B=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'/^b/{print; print($NF>0 ? "------" : "======")}'`),s(" table.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# brown bread mat hair 42")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ------")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# blue cake mug shirt -7")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ======")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),P=o('<div class="hint-container info"><p class="hint-container-title">Info</p><p>See also <a href="https://stackoverflow.com/a/29784278" target="_blank" rel="noopener noreferrer">stackoverflow: finding min and max value of a column</a> and <a href="https://www.gnu.org/software/gawk/manual/gawk.html#Switch-Statement" target="_blank" rel="noopener noreferrer">gawk manual: switch</a>.</p></div><hr><h2 id="loops" tabindex="-1"><a class="header-anchor" href="#loops"><span>loops</span></a></h2><p><code>for</code> loops are handy when you are working with arrays. Also for processing input fields, since <code>$N</code> syntax allows passing an expression instead of just fixed values.</p>',4),Y=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'BEGIN{for(i=2; i<7; i+=2) print i}'")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 2")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 4")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 6")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),W=e("p",null,"looping each field",-1),V=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token parameter variable"},"-v"),s(),e("span",{class:"token assign-left variable"},"OFS"),e("span",{class:"token operator"},"="),s(", "),e("span",{class:"token string"},`'{for(i=1; i<=NF; i++) if($i ~ /^[bm]/) $i="["$i"]"} 1'`),s(" table.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# [brown],[bread],[mat],hair,42")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# [blue],cake,[mug],shirt,-7")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# yellow,[banana],window,shoes,3.14")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),L=o(`<p>Here&#39;s an example of looping over a dynamically constructed array.</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> marks.txt</span>
<span class="line"><span class="token comment"># Dept    Name    Marks</span></span>
<span class="line"><span class="token comment"># ECE     Raj     53</span></span>
<span class="line"><span class="token comment"># ECE     Joel    72</span></span>
<span class="line"><span class="token comment"># EEE     Moi     68</span></span>
<span class="line"><span class="token comment"># CSE     Surya   81</span></span>
<span class="line"><span class="token comment"># EEE     Tia     59</span></span>
<span class="line"><span class="token comment"># ECE     Om      92</span></span>
<span class="line"><span class="token comment"># CSE     Amy     67</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),M=e("p",null,"average marks for each department",-1),X=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'NR>1{d[$1]+=$3; c[$1]++} END{for(k in d) print k, d[k]/c[k]}'"),s(" marks.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ECE 72.3333")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# EEE 63.5")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# CSE 74")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),U=e("p",null,[s("You can use "),e("code",null,"break"),s(" and "),e("code",null,"continue"),s(" to alter the normal flow of loops. "),e("code",null,"break"),s(" will cause the current loop to quit immediately without processing the remaining statements and iterations. "),e("code",null,"continue"),s(" will skip the remaining statements in the loop and start the next iteration.")],-1),K=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token parameter variable"},"-v"),s(),e("span",{class:"token assign-left variable"},"OFS"),e("span",{class:"token operator"},"="),s(", "),e("span",{class:"token string"},"'{for(i=1; i<=NF; i++) if($i ~ /b/){NF=i; break}} 1'"),s(" table.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# brown")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# blue")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# yellow,banana")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Z=e("div",{class:"hint-container info"},[e("p",{class:"hint-container-title"},"Info"),e("p",null,[s("See also "),e("a",{href:"https://stackoverflow.com/q/38491676/4082052",target:"_blank",rel:"noopener noreferrer"},"stackoverflow: find missing numbers from sequential list"),s(".")])],-1),z=e("p",null,[e("code",null,"awk"),s(" supports the "),e("code",null,"while"),s(" and "),e("code",null,"do-while"),s(" loop mechanisms as well.")],-1),J=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'BEGIN{i=6; while(i>0){print i; i-=2}}'")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 6")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 4")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 2")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ee=e("p",null,"recursive substitution",-1),se=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token builtin class-name"},"echo"),s(),e("span",{class:"token string"},"'titillate'"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'{while(gsub(/til/, "")) print}'`)]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# tilate")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ate")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token builtin class-name"},"echo"),s(),e("span",{class:"token string"},"'titillate'"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'{do{print} while(gsub(/til/, ""))}'`)]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# titillate")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# tilate")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ate")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ne=o('<hr><h2 id="next" tabindex="-1"><a class="header-anchor" href="#next"><span><code>next</code></span></a></h2><p><code>next</code> is similar to the <code>continue</code> statement but it acts on the default loop that goes through the input records. It doesn&#39;t affect <code>BEGIN</code> or <code>END</code> blocks as they are outside the record looping. When <code>next</code> is executed, rest of the statements will be skipped and next input record will be fetched for processing.</p>',3),ae=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'/\\<par/{print "%% " $0; next} {print /s/ ? "X" : "Y"}'`),s(" anchors.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# %% sub par")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# X")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Y")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# X")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# %% cart part tart mart")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),le=o('<p>You&#39;ll see more examples with <code>next</code> in the coming chapters.</p><hr><h2 id="exit" tabindex="-1"><a class="header-anchor" href="#exit"><span><code>exit</code></span></a></h2><p>You saw the use of <code>exit</code> earlier to quit early and avoid unnecessary processing of records. If an argument isn&#39;t passed, <code>awk</code> considers the command to have finished normally and the <strong>exit status</strong> will indicate success. You can pass a number argument for other cases.</p>',4),te=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"seq"),s(),e("span",{class:"token number"},"3542"),s(),e("span",{class:"token number"},"4623452"),s(),e("span",{class:"token operator"},"|"),s(),e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'NR==2452{print; exit}'")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 5993")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# $ echo $?")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 0")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ie=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'/^br/{print "invalid data"; exit 1}'`),s(" table.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# invalid data")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# $ echo $?")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 1")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ce=e("p",null,"any remaining files to be processed are also skipped",-1),oe=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'FNR==2{print; exit}'"),s(" table.txt greeting.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# blue cake mug shirt -7")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),re=e("p",null,[s("If "),e("code",null,"exit"),s(" is used in "),e("code",null,"BEGIN"),s(" or normal blocks, any code in the "),e("code",null,"END"),s(" block will still be executed. For more details and corner cases, see "),e("a",{href:"https://www.gnu.org/software/gawk/manual/gawk.html#Exit-Statement",target:"_blank",rel:"noopener noreferrer"},"gawk manual: exit"),s(".")],-1),de=e("p",null,[s("first print is executed on seeing exit, rest of "),e("code",null,"BEGIN"),s(" and normal blocks are skipped code in the "),e("code",null,"END"),s(" block is then executed")],-1),ue=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'BEGIN{print "hi"; exit; print "hello"}`),s(`
`),e("span",{class:"line"},"       /^b/;"),s(`
`),e("span",{class:"line"},`       END{print "bye"}'`),s(" table.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# hi")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# bye")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),pe=o('<hr><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><p>This chapter covered some of the control flow structures provided by <code>awk</code>. These features makes <code>awk</code> flexible and easier to use compared to <code>sed</code>.</p><p>Next chapter will discuss some of the built-in functions.</p><hr><hr><h2 id="exercises" tabindex="-1"><a class="header-anchor" href="#exercises"><span>Exercises</span></a></h2>',7),me={class:"hint-container info"},he=e("p",{class:"hint-container-title"},"Info",-1),be={href:"https://github.com/learnbyexample/learn_gnuawk/tree/master/exercises",target:"_blank",rel:"noopener noreferrer"},ve=e("h3",{id:"exercise-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#exercise-1"},[e("span",null,"Exercise 1")])],-1),ke=e("code",null,"nums.txt",-1),ge=o(`<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">cat</span> nums.txt</span>
<span class="line"><span class="token comment"># 42</span></span>
<span class="line"><span class="token comment"># -2</span></span>
<span class="line"><span class="token comment"># 10101</span></span>
<span class="line"><span class="token comment"># -3.14</span></span>
<span class="line"><span class="token comment"># -75</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),fe=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token comment"},"##### add your solution here")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# -42")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 2")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# -10101")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 3.14")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 75")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),_e=e("blockquote",null,[e("p",null,[s("same as: "),e("code",null,`awk '{$0 ~ /^-/ ? sub(/^-/, "") : sub(/^/, "-")} 1' nums.txt`)])],-1),xe=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'!sub(/^-/, ""){sub(/^/, "-")} 1'`),s(" nums.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# -42")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 2")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# -10101")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 3.14")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 75")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),we=e("h3",{id:"exercise-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#exercise-2"},[e("span",null,"Exercise 2")])],-1),ye=e("code",null,"table.txt",-1),Ae=e("code",null,",",-1),Ee=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token comment"},"##### add your solution here")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},'# "brown","bread","mat","hair",42')]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},'# "blue","cake","mug","shirt",-7')]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},'# "yellow","banana","window","shoes",3.14')]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Ce=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token parameter variable"},"-v"),s(),e("span",{class:"token assign-left variable"},"q"),e("span",{class:"token operator"},"="),e("span",{class:"token string"},`'"'`),s(),e("span",{class:"token parameter variable"},"-v"),s(),e("span",{class:"token assign-left variable"},"OFS"),e("span",{class:"token operator"},"="),s(", "),e("span",{class:"token string"},"'{for(i=1; i<=NF; i++) if($i !~ /[0-9]/) $i = q $i q} 1'"),s(" table.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},'# "brown'),e("span",{class:"token string"},'","'),s("bread"),e("span",{class:"token string"},'","'),s("mat"),e("span",{class:"token string"},'","'),s("hair"),e("span",{class:"token string"},'",42'),s(`
`),e("span",{class:"line"},'# "'),s("blue"),e("span",{class:"token string"},'","'),s("cake"),e("span",{class:"token string"},'","'),s("mug"),e("span",{class:"token string"},'","'),s("shirt"),e("span",{class:"token string"},'",-7'),s(`
`),e("span",{class:"line"},'# "'),s("yellow"),e("span",{class:"token string"},'","'),s("banana"),e("span",{class:"token string"},'","'),s("window"),e("span",{class:"token string"},'","'),s('shoes",3.14')]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Ne=e("h3",{id:"exercise-3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#exercise-3"},[e("span",null,"Exercise 3")])],-1),Se=e("code",null,"secrets.txt",-1),je=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"cat"),s(" secrets.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# stag area row tick")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# deaf chi rate tall glad")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Bi tac toe - 42")]),s(`
`),e("span",{class:"line"}),s(`
`),e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token comment"},"##### add your solution here")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# gawk")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# field")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ice-2")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),$e=e("blockquote",null,[e("p",null,[s("can also use: "),e("code",null,`awk '{print gensub(/[^ ]*(.)( |$)/, "\\\\1", "g")}'`),s(" can also use: "),e("code",null,"awk -v OFS= '{for(i=1; i<=NF; i++) $i = substr($i, length($i))} 1'")])],-1),Te=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token parameter variable"},"-v"),s(),e("span",{class:"token assign-left variable"},"OFS"),e("span",{class:"token operator"},"="),s(),e("span",{class:"token string"},`'{for(i=1; i<=NF; i++) $i = gensub(/.*(.)/, "\\\\1", 1, $i)} 1'`),s(" secrets.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# gawk")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# field")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ice-2")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Fe=e("h3",{id:"exercise-4",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#exercise-4"},[e("span",null,"Exercise 4")])],-1),qe=e("code",null,"sample.txt",-1),Ie=e("code",null,"q",-1),Re=e("code",null,"Q",-1),Qe=e("code",null,"sed",-1),Ge=e("p",null,[e("code",null,"sed '/are/q' sample.txt"),s(" will print till the line containing '"),e("code",null,"are"),s("'")],-1),Oe=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token comment"},"##### add your solution here")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Hello World")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Good day")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# How are you")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),De=e("p",null,[e("code",null,"sed '/are/Q' sample.txt"),s(" is similar to the 'q`' command, but the matching line won't be part of the output")],-1),He=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token comment"},"##### add your solution here")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Hello World")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Good day")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Be=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"sed"),s(),e("span",{class:"token string"},"'/are/q'"),s(" sample.txt will print till the line containing "),e("span",{class:"token string"},"'are'")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'1; /are/{exit}'"),s(" sample.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Hello World")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Good day")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# How are you")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Pe=e("p",null,[e("code",null,"sed '/are/Q' sample.txt"),s(" is similar to the '"),e("code",null,"q"),s("' command, but the matching line won't be part of the output")],-1),Ye=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},"'/are/{exit} 1'"),s(" sample.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Hello World")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# ")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Good day")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),We=e("h3",{id:"exercise-5",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#exercise-5"},[e("span",null,"Exercise 5")])],-1),Ve=e("code",null,"addr.txt",-1),Le=o("<ul><li>if a line contains <code>e</code><ul><li>delete all occurrences of <code>e</code></li><li>surround all consecutive repeated characters with <code>{}</code></li><li>assume that the input will not have more than two consecutive repeats</li></ul></li><li>if a line doesn&#39;t contain <code>e</code> but contains <code>u</code><ul><li>surround all lowercase vowels in that line with <code>[]</code></li></ul></li></ul>",1),Me=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token comment"},"##### add your solution here")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# H{ll}o World")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# How ar you")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# This gam is g{oo}d")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# T[o]d[a]y [i]s s[u]nny")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 12345")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# You ar fu{nn}y")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Xe=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token parameter variable"},"-F"),s(),e("span",{class:"token string"},"''"),s(),e("span",{class:"token parameter variable"},"-v"),s(),e("span",{class:"token assign-left variable"},"OFS"),e("span",{class:"token operator"},"="),s(),e("span",{class:"token string"},`'/e/{gsub(/e/, ""); for(i=1; i<NF; i++)`),s(`
`),e("span",{class:"line"},'                  if($i==$(i+1)){ $i = "{" $i; $(i+1) = $(i+1) "}" }'),s(`
`),e("span",{class:"line"},"                  print; next}"),s(`
`),e("span",{class:"line"},`                  /u/{gsub(/[aiou]/, "[&]")} 1'`),s(" addr.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# H{ll}o World")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# How ar you")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# This gam is g{oo}d")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# T[o]d[a]y [i]s s[u]nny")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# 12345")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# You ar fu{nn}y")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Ue=o('<h3 id="exercise-6" tabindex="-1"><a class="header-anchor" href="#exercise-6"><span>Exercise 6</span></a></h3><p>The goal is to print <code>found you</code> if the input file contains <code>you</code> and <code>not found</code> otherwise. However, both the <code>print</code> statements are executed in the <code>awk</code> code shown below. Change it to work as expected.</p>',2),Ke=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'/you/{print "found you"; exit} END{print "not found"}'`),s(" addr.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# found you")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# not found")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Ze=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'/you/{print "found you"; exit} END{print "not found"}'`),s(" addr.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# found you")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# not found")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),ze=e("p",null,"One way to solve such problems is to use a flag as shown below:",-1),Je=e("div",{class:"language-bash line-numbers-mode","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",null,[e("code",null,[e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'/you/{print "found you"; f=1; exit} END{if(!f) print "not found"}'`),s(" addr.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# found you")]),s(`
`),e("span",{class:"line"}),s(`
`),e("span",{class:"line"},[e("span",{class:"token function"},"awk"),s(),e("span",{class:"token string"},`'/you/{print "found you"; f=1; exit} END{if(!f) print "not found"}'`),s(" table.txt")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# not found")]),s(`
`),e("span",{class:"line"})])]),e("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),es=e("hr",null,null,-1);function ss(u,ns){const c=d("router-link"),p=d("VPCard"),r=d("FontIcon"),i=d("Tabs"),m=d("TagLinks");return f(),b("div",null,[e("h1",x,[e("a",w,[e("span",null,v(u.$frontmatter.title)+" 관련",1)])]),e("nav",y,[e("ul",null,[e("li",null,[t(c,{to:"#if-else"},{default:n(()=>[s("if-else")]),_:1})]),e("li",null,[t(c,{to:"#loops"},{default:n(()=>[s("loops")]),_:1})]),e("li",null,[t(c,{to:"#next"},{default:n(()=>[s("next")]),_:1})]),e("li",null,[t(c,{to:"#exit"},{default:n(()=>[s("exit")]),_:1})]),e("li",null,[t(c,{to:"#summary"},{default:n(()=>[s("Summary")]),_:1})]),e("li",null,[t(c,{to:"#exercises"},{default:n(()=>[s("Exercises")]),_:1}),e("ul",null,[e("li",null,[t(c,{to:"#exercise-1"},{default:n(()=>[s("Exercise 1")]),_:1})]),e("li",null,[t(c,{to:"#exercise-2"},{default:n(()=>[s("Exercise 2")]),_:1})]),e("li",null,[t(c,{to:"#exercise-3"},{default:n(()=>[s("Exercise 3")]),_:1})]),e("li",null,[t(c,{to:"#exercise-4"},{default:n(()=>[s("Exercise 4")]),_:1})]),e("li",null,[t(c,{to:"#exercise-5"},{default:n(()=>[s("Exercise 5")]),_:1})]),e("li",null,[t(c,{to:"#exercise-6"},{default:n(()=>[s("Exercise 6")]),_:1})])])])])]),A,t(p,k(g({title:"8. Control Structures",desc:"CLI Text Processing with GNU awk",link:"https://learnbyexample.github.io/learn_gnuawk/control-structures.html",logo:"https://learnbyexample.github.io/favicon.svg",background:"rgba(22,25,35,0.2)"})),null,16),E,C,e("div",N,[S,e("p",null,[s("The "),e("a",j,[t(r,{icon:"iconfont icon-github"}),s(" example_files")]),s(" directory has all the files used in the examples.")])]),$,T,F,t(i,{id:"24",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[s("Case 1")]),title1:n(({value:a,isActive:l})=>[s("Case 2")]),tab0:n(({value:a,isActive:l})=>[q,I]),tab1:n(({value:a,isActive:l})=>[R,Q]),_:1}),G,t(i,{id:"41",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[s("Case 1")]),title1:n(({value:a,isActive:l})=>[s("Case 2")]),tab0:n(({value:a,isActive:l})=>[O,D]),tab1:n(({value:a,isActive:l})=>[H,B]),_:1}),P,t(i,{id:"69",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[s("Case 1")]),title1:n(({value:a,isActive:l})=>[s("Case 2")]),tab0:n(({value:a,isActive:l})=>[Y]),tab1:n(({value:a,isActive:l})=>[W,V]),_:1}),L,t(i,{id:"84",data:[{id:"Case 1"}],active:0},{title0:n(({value:a,isActive:l})=>[s("Case 1")]),tab0:n(({value:a,isActive:l})=>[M,X]),_:1}),U,t(i,{id:"95",data:[{id:"Case 1"}],active:0},{title0:n(({value:a,isActive:l})=>[s("Case 1")]),tab0:n(({value:a,isActive:l})=>[K]),_:1}),Z,z,t(i,{id:"108",data:[{id:"Case 1"},{id:"Case 2"}],active:0},{title0:n(({value:a,isActive:l})=>[s("Case 1")]),title1:n(({value:a,isActive:l})=>[s("Case 2")]),tab0:n(({value:a,isActive:l})=>[J]),tab1:n(({value:a,isActive:l})=>[ee,se]),_:1}),ne,t(i,{id:"126",data:[{id:"Case 1"}],active:0},{title0:n(({value:a,isActive:l})=>[s("Case 1")]),tab0:n(({value:a,isActive:l})=>[ae]),_:1}),le,t(i,{id:"141",data:[{id:"Case 1"},{id:"Case 2"},{id:"Case 3"}],active:0},{title0:n(({value:a,isActive:l})=>[s("Case 1")]),title1:n(({value:a,isActive:l})=>[s("Case 2")]),title2:n(({value:a,isActive:l})=>[s("Case 3")]),tab0:n(({value:a,isActive:l})=>[te]),tab1:n(({value:a,isActive:l})=>[ie]),tab2:n(({value:a,isActive:l})=>[ce,oe]),_:1}),re,t(i,{id:"158",data:[{id:"Case 1"}],active:0},{title0:n(({value:a,isActive:l})=>[s("Case 1")]),tab0:n(({value:a,isActive:l})=>[de,ue]),_:1}),pe,e("div",me,[he,e("p",null,[s("The "),e("a",be,[t(r,{icon:"iconfont icon-github"}),s(" exercises")]),s(" directory has all the files used in this section.")])]),ve,e("p",null,[s("The input file "),t(r,{icon:"fas fa-file-lines"}),s(),ke,s(" contains a single column of numbers. Change positive numbers to negative and vice versa. Solution should use the sub function and shouldn't explicitly use the if-else control structure or the ternary operator.")]),ge,t(i,{id:"193",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[s("Question")]),title1:n(({value:a,isActive:l})=>[s("Answer")]),tab0:n(({value:a,isActive:l})=>[fe]),tab1:n(({value:a,isActive:l})=>[_e,xe]),_:1}),we,e("p",null,[s("For the input file "),t(r,{icon:"fas fa-file-lines"}),s(),ye,s(", change the field separator from space to the "),Ae,s(" character. Also, any field not containing digit characters should be surrounded by double quotes.")]),t(i,{id:"212",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[s("Question")]),title1:n(({value:a,isActive:l})=>[s("Answer")]),tab0:n(({value:a,isActive:l})=>[Ee]),tab1:n(({value:a,isActive:l})=>[Ce]),_:1}),Ne,e("p",null,[s("For each input line of the file "),t(r,{icon:"fas fa-file-lines"}),s(),Se,s(", remove all characters except the last character of each field. Assume space as the input field separator.")]),t(i,{id:"226",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[s("Question")]),title1:n(({value:a,isActive:l})=>[s("Answer")]),tab0:n(({value:a,isActive:l})=>[je]),tab1:n(({value:a,isActive:l})=>[$e,Te]),_:1}),Fe,e("p",null,[s("For the input file "),t(r,{icon:"fas fa-file-lines"}),s(),qe,s(", emulate the "),Ie,s(" and "),Re,s(" commands of "),Qe,s(" as shown below.")]),t(i,{id:"245",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[s("Question")]),title1:n(({value:a,isActive:l})=>[s("Answer")]),tab0:n(({value:a,isActive:l})=>[Ge,Oe,De,He]),tab1:n(({value:a,isActive:l})=>[Be,Pe,Ye]),_:1}),We,e("p",null,[s("For the input file "),t(r,{icon:"fas fa-file-lines"}),s(),Ve,s(":")]),Le,t(i,{id:"306",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[s("Question")]),title1:n(({value:a,isActive:l})=>[s("Answer")]),tab0:n(({value:a,isActive:l})=>[Me]),tab1:n(({value:a,isActive:l})=>[Xe]),_:1}),Ue,t(i,{id:"320",data:[{id:"Question"},{id:"Answer"}],active:0},{title0:n(({value:a,isActive:l})=>[s("Question")]),title1:n(({value:a,isActive:l})=>[s("Answer")]),tab0:n(({value:a,isActive:l})=>[Ke]),tab1:n(({value:a,isActive:l})=>[Ze,ze,Je]),_:1}),es,t(m)])}const ts=h(_,[["render",ss],["__file","08-control-structures.html.vue"]]),is=JSON.parse('{"path":"/cli/text-processing-w-gnu-awk/08-control-structures.html","title":"8. Control Structures","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"8. Control Structures","description":"Text Processing with GNU awk > 8. Control Structures","category":["CLI","Linux"],"tags":["crashcourse","cli","sh","shell","gnu","linux","awk"],"head":[[{"meta":null},{"property":"og:title","content":"Text Processing with GNU awk > 8. Control Structures"},{"property":"og:description","content":"8. Control Structures"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/cli/text-processing-w-gnu-awk/08-control-structures.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/cli/text-processing-w-gnu-awk/08-control-structures.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"8. Control Structures"}],["meta",{"property":"og:description","content":"Text Processing with GNU awk > 8. Control Structures"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-04-24T07:16:44.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"cli"}],["meta",{"property":"article:tag","content":"sh"}],["meta",{"property":"article:tag","content":"shell"}],["meta",{"property":"article:tag","content":"gnu"}],["meta",{"property":"article:tag","content":"linux"}],["meta",{"property":"article:tag","content":"awk"}],["meta",{"property":"article:modified_time","content":"2024-04-24T07:16:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"8. Control Structures\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-24T07:16:44.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"if-else","slug":"if-else","link":"#if-else","children":[]},{"level":2,"title":"loops","slug":"loops","link":"#loops","children":[]},{"level":2,"title":"next","slug":"next","link":"#next","children":[]},{"level":2,"title":"exit","slug":"exit","link":"#exit","children":[]},{"level":2,"title":"Summary","slug":"summary","link":"#summary","children":[]},{"level":2,"title":"Exercises","slug":"exercises","link":"#exercises","children":[{"level":3,"title":"Exercise 1","slug":"exercise-1","link":"#exercise-1","children":[]},{"level":3,"title":"Exercise 2","slug":"exercise-2","link":"#exercise-2","children":[]},{"level":3,"title":"Exercise 3","slug":"exercise-3","link":"#exercise-3","children":[]},{"level":3,"title":"Exercise 4","slug":"exercise-4","link":"#exercise-4","children":[]},{"level":3,"title":"Exercise 5","slug":"exercise-5","link":"#exercise-5","children":[]},{"level":3,"title":"Exercise 6","slug":"exercise-6","link":"#exercise-6","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1713943004000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":7}]},"readingTime":{"minutes":6.03,"words":1809},"filePathRelative":"cli/text-processing-w-gnu-awk/08-control-structures.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{ts as comp,is as data};
