import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as n,t as m,b as s,w as o,n as l,g as r,d as e,e as a,r as p,o as f}from"./app-U_bew1in.js";const g={},w={id:"frontmatter-title-관련",tabindex:"-1"},k={class:"header-anchor",href:"#frontmatter-title-관련"},v={class:"table-of-contents"},b=n("hr",null,null,-1),y=n("h2",{id:"functions",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#functions"},[n("span",null,"Functions")])],-1),_=n("p",null,"Functions let us wrap up pieces of code so they can be used in lots of places. We can send data into functions to customize how they work, and get back data that tells us the result that was calculated.",-1),x=n("p",null,"Believe it or not, function calls used to be really slow. Steve Johnson, the author of many early coding tools for the Unix operating system, said this:",-1),q=n("blockquote",null,[n("p",null,"“Dennis Ritchie (the creator of the C programming language) encouraged modularity by telling all and sundry that function calls were really, really cheap in C. Everybody started writing small functions and modularizing. Years later we found out that function calls were still expensive, and our code was often spending 50% of its time just calling them. Dennis had lied to us! But it was too late; we were all hooked...”")],-1),D=n("p",null,[n("strong",null,"Today you have 11 one-minute videos to watch, and you’ll meet things like variadic functions, throwing errors, and more."),e(" Once you’ve watched each video and optionally gone through the extra reading, there’s a short test to help make sure you’ve understood what was taught.")],-1),S=n("h3",{id:"_1-writing-functions",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-writing-functions"},[n("span",null,"1. Writing functions")])],-1),T={class:"hint-container details"},W=n("summary",null,"1. Writing functions",-1),j=a(`<p>Functions let us re-use code, which means we can write a function to do something interesting then run that function from lots of places. Repeating code is generally a bad idea, and functions help us avoid doing that.</p><p>To start with, we’re going to write a function that prints help information for users of our app. We might need this anywhere in our app, so having it as a function is a good idea.</p><p>Swift functions start with the <code>func</code> keyword, then your function name, then open and close parentheses. All the body of your function – the code that should be run when the function is requested – is placed inside braces.</p><p>Let’s write the <code>printHelp()</code> function now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">printHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;&quot;&quot;</span>
<span class="line">Welcome to MyApp!</span>
<span class="line"></span>
<span class="line">Run this app inside a directory of images and</span>
<span class="line">MyApp will resize them all into thumbnails</span>
<span class="line">&quot;&quot;&quot;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can now run that using <code>printHelp()</code> by itself:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">printHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Running a function is often referred to as calling a function.</p>`,8),P=a('<div class="hint-container info"><p class="hint-container-title">1. Writing functions - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/what-code-should-be-put-in-a-function" target="_blank" rel="noopener noreferrer">What code should be put in a function?</a></li><li>Test: <a href="https://hackingwithswift.com/review/writing-functions" target="_blank" rel="noopener noreferrer">Writing functions</a></li></ul></div><h3 id="_2-accepting-parameters" tabindex="-1"><a class="header-anchor" href="#_2-accepting-parameters"><span>2. Accepting parameters</span></a></h3>',2),A={class:"hint-container details"},F=n("summary",null,"2. Accepting parameters",-1),R=a(`<p>Functions become more powerful when they can be customized each time you run them. Swift lets you send values to a function that can then be used inside the function to change the way it behaves. We’ve used this already – we’ve been sending strings and integers to the <code>print()</code> function, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, world!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Values sent into functions this way are called parameters.</p><p>To make your own functions accept parameters, give each parameter a name, then a colon, then tell Swift the type of data it must be. All this goes inside the parentheses after your function name.</p><p>For example, we can write a function to print the square of any number:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">square</span><span class="token punctuation">(</span>number<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>number <span class="token operator">*</span> number<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That tells Swift we expect to receive an <code>Int</code>, and it should be called <code>number</code>. This name is used both inside the function when you want to refer to the parameter, but also when you run the function, like this:</p><p>square(number: 8)</p>`,8),I=a('<div class="hint-container info"><p class="hint-container-title">2. Accepting parameters - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/how-many-parameters-should-a-function-accept" target="_blank" rel="noopener noreferrer">How many parameters should a function accept?</a></li><li>Test: <a href="https://hackingwithswift.com/review/accepting-parameters" target="_blank" rel="noopener noreferrer">Accepting parameters</a></li></ul></div><h3 id="_3-returning-values" tabindex="-1"><a class="header-anchor" href="#_3-returning-values"><span>3. Returning values</span></a></h3>',2),O={class:"hint-container details"},V=n("summary",null,"3. Returning values",-1),Y=a(`<p>As well as receiving data, functions can also send back data. To do this, write a dash then a right angle bracket after your function’s parameter list, then tell Swift what kind of data will be returned.</p><p>Inside your function, you use the <code>return</code> keyword to send a value back if you have one. Your function then immediately exits, sending back that value – no other code from that function will be run.</p><p>We could rewrite our <code>square()</code> function to return a value rather than print it directly:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">square</span><span class="token punctuation">(</span>number<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> number <span class="token operator">*</span> number</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we can grab that return value when the function is run, and print it there:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">square</span><span class="token punctuation">(</span>number<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>If you need to return multiple values, this is a perfect example of when to use tuples.</p>`,7),H=a('<div class="hint-container info"><p class="hint-container-title">3. Returning values - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-is-the-return-keyword-not-needed-in-a-swift-function" target="_blank" rel="noopener noreferrer">When is the return keyword not needed in a Swift function?</a></li><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/how-can-you-return-two-or-more-values-from-a-function" target="_blank" rel="noopener noreferrer">How can you return two or more values from a function?</a></li><li>Test: <a href="https://hackingwithswift.com/review/returning-values" target="_blank" rel="noopener noreferrer">Returning values</a></li></ul></div><h3 id="_4-parameter-labels" tabindex="-1"><a class="header-anchor" href="#_4-parameter-labels"><span>4. Parameter labels</span></a></h3>',2),N={class:"hint-container details"},z=n("summary",null,"4. Parameter labels",-1),E=a(`<p>We wrote our <code>square()</code> function like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">square</span><span class="token punctuation">(</span>number<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> number <span class="token operator">*</span> number</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That names its parameter <code>number</code>, so we can use <code>number</code> inside the function to refer to it, but we must also use the name when running the function, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">square</span><span class="token punctuation">(</span>number<span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Swift lets us provide two names for each parameter: one to be used externally when calling the function, and one to be used internally inside the function. This is as simple as writing two names, separated by a space.</p><p>To demonstrate this, here’s a function that uses two names for its string parameter:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">sayHello</span><span class="token punctuation">(</span>to name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The parameter is called <code>to name</code>, which means externally it’s called <code>to</code>, but internally it’s called <code>name</code>. This gives variables a sensible name inside the function, but means calling the function reads naturally:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">sayHello</span><span class="token punctuation">(</span>to<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Taylor&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,9),C=a('<div class="hint-container info"><p class="hint-container-title">4. Parameter labels - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-use-parameter-labels" target="_blank" rel="noopener noreferrer">Why does Swift use parameter labels?</a></li><li>Test: <a href="https://hackingwithswift.com/review/parameter-labels" target="_blank" rel="noopener noreferrer">Parameter labels</a></li></ul></div><h3 id="_5-omitting-parameter-labels" tabindex="-1"><a class="header-anchor" href="#_5-omitting-parameter-labels"><span>5. Omitting parameter labels</span></a></h3>',2),M={class:"hint-container details"},B=n("summary",null,"5. Omitting parameter labels",-1),Z=a(`<p>You might have noticed that we don’t actually send any parameter names when we call <code>print()</code> – we say <code>print(&quot;Hello&quot;)</code> rather than <code>print(message: &quot;Hello&quot;)</code>.</p><p>You can get this same behavior in your own functions by using an underscore, <code>_</code>, for your external parameter name, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">greet</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> person<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">person</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can now call <code>greet()</code> without having to use the <code>person</code> parameter name:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Taylor&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>This can make some code more natural to read, but generally it’s better to give your parameters external names to avoid confusion. For example, if I say <code>setAlarm(5)</code> it’s hard to tell what that means – does it set an alarm for five o’clock, set an alarm for five hours from now, or activate pre-configured alarm number 5?</p>`,6),K=a('<div class="hint-container info"><p class="hint-container-title">5. Omitting parameter labels - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-should-you-omit-a-parameter-label" target="_blank" rel="noopener noreferrer">When should you omit a parameter label?</a></li><li>Test: <a href="https://hackingwithswift.com/review/omitting-parameter-labels" target="_blank" rel="noopener noreferrer">Omitting parameter labels</a></li></ul></div><h3 id="_6-default-parameters" tabindex="-1"><a class="header-anchor" href="#_6-default-parameters"><span>6. Default parameters</span></a></h3>',2),L={class:"hint-container details"},Q=n("summary",null,"6. Default parameters",-1),J=a(`<p>The <code>print()</code> function prints something to the screen, but always adds a new line to the end of whatever you printed, so that multiple calls to <code>print()</code> don’t all appear on the same line.</p><p>You can change that behavior if you want, so you could use spaces rather than line breaks. Most of the time, though, folks want new lines, so <code>print()</code> has a <code>terminator</code> parameter that uses new line as its default value.</p><p>You can give your own parameters a default value just by writing an <code>=</code> after its type followed by the default you want to give it. So, we could write a <code>greet()</code> function that can optionally print nice greetings:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">greet</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> person<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> nicely<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> nicely <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">person</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Oh no, it&#39;s </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">person</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> again...&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That can be called in two ways:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Taylor&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Taylor&quot;</span></span><span class="token punctuation">,</span> nicely<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,6),U=a('<div class="hint-container info"><p class="hint-container-title">6. Default parameters - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-to-use-default-parameters-for-functions" target="_blank" rel="noopener noreferrer">When to use default parameters for functions</a></li><li>Test: <a href="https://hackingwithswift.com/review/default-parameters" target="_blank" rel="noopener noreferrer">Default parameters</a></li></ul></div><h3 id="_7-variadic-functions" tabindex="-1"><a class="header-anchor" href="#_7-variadic-functions"><span>7. Variadic functions</span></a></h3>',2),X={class:"hint-container details"},G=n("summary",null,"7. Variadic functions",-1),$=a(`<p>Some functions are variadic, which is a fancy way of saying they accept any number of parameters of the same type. The <code>print()</code> function is actually variadic: if you pass lots of parameters, they are all printed on one line with spaces between them:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Haters&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;gonna&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;hate&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>You can make any parameter variadic by writing <code>...</code> after its type. So, an <code>Int</code> parameter is a single integer, whereas <code>Int...</code> is zero or more integers – potentially hundreds.</p><p>Inside the function, Swift converts the values that were passed in to an array of integers, so you can loop over them as needed.</p><p>To try this out, let’s write a <code>square()</code> function that can square many numbers:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">square</span><span class="token punctuation">(</span>numbers<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> number <span class="token keyword">in</span> numbers <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">number</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> squared is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">number <span class="token operator">*</span> number</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we can run that with lots of numbers just by passing them in separated by commas:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">square</span><span class="token punctuation">(</span>numbers<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,8),nn=a('<div class="hint-container info"><p class="hint-container-title">7. Variadic functions - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-to-use-variadic-functions" target="_blank" rel="noopener noreferrer">When to use variadic functions</a></li><li>Test: <a href="https://hackingwithswift.com/review/variadic-functions" target="_blank" rel="noopener noreferrer">Variadic functions</a></li></ul></div><h3 id="_8-writing-throwing-functions" tabindex="-1"><a class="header-anchor" href="#_8-writing-throwing-functions"><span>8. Writing throwing functions</span></a></h3>',2),sn={class:"hint-container details"},an=n("summary",null,"8. Writing throwing functions",-1),en=a(`<p>ometimes functions fail because they have bad input, or because something went wrong internally. Swift lets us throw errors from functions by marking them as <code>throws</code> before their return type, then using the <code>throw</code> keyword when something goes wrong.</p><p>First we need to define an <code>enum</code> that describes the errors we can throw. These must always be based on Swift’s existing <code>Error</code> type. We’re going to write a function that checks whether a password is good, so we’ll throw an error if the user tries an obvious password:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token class-name">PasswordError</span><span class="token punctuation">:</span> <span class="token class-name">Error</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> obvious</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we’ll write a <code>checkPassword()</code> function that will throw that error if something goes wrong. This means using the <code>throws</code> keyword before the function’s return value, then using <code>throw PasswordError.obvious</code> if their password is “password”.</p><p>Here’s that in Swift:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">checkPassword</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> password<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token operator">-&gt;</span> <span class="token class-name">Bool</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> password <span class="token operator">==</span> <span class="token string-literal"><span class="token string">&quot;password&quot;</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token class-name">PasswordError</span><span class="token punctuation">.</span>obvious</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),tn=a('<div class="hint-container info"><p class="hint-container-title">8. Writing throwing functions - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-should-you-write-throwing-functions" target="_blank" rel="noopener noreferrer">When should you write throwing functions?</a></li><li>Test: <a href="https://hackingwithswift.com/review/writing-throwing-functions" target="_blank" rel="noopener noreferrer">Writing throwing functions</a></li></ul></div><h3 id="_9-running-throwing-functions" tabindex="-1"><a class="header-anchor" href="#_9-running-throwing-functions"><span>9. Running throwing functions</span></a></h3>',2),on={class:"hint-container details"},ln=n("summary",null,"9. Running throwing functions",-1),rn=a(`<p>Swift doesn’t like errors to happen when your program runs, which means it won’t let you run an error-throwing function by accident.</p><p>Instead, you need to call these functions using three new keywords: <code>do</code> starts a section of code that might cause problems, <code>try</code> is used before every function that might throw an error, and <code>catch</code> lets you handle errors gracefully.</p><p>If any errors are thrown inside the <code>do</code> block, execution immediately jumps to the <code>catch</code> block. Let’s try calling <code>checkPassword()</code> with a parameter that throws an error:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token function">checkPassword</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;password&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;That password is good!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;You can&#39;t use that password.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When that code runs, “You can’t use that password” is printed, but “That password is good” won’t be – that code will never be reached, because the error is thrown.</p>`,5),cn=a('<div class="hint-container info"><p class="hint-container-title">9. Running throwing functions - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/why-does-swift-make-us-use-try-before-every-throwing-function" target="_blank" rel="noopener noreferrer">Why does Swift make us use try before every throwing function?</a></li><li>Test: <a href="https://hackingwithswift.com/review/running-throwing-functions" target="_blank" rel="noopener noreferrer">Running throwing functions</a></li></ul></div><h3 id="_10-inout-parameters" tabindex="-1"><a class="header-anchor" href="#_10-inout-parameters"><span>10. inout parameters</span></a></h3>',2),pn={class:"hint-container details"},un=n("summary",null,"10. inout parameters",-1),dn=a(`<p>All parameters passed into a Swift function are constants, so you can’t change them. If you want, you can pass in one or more parameters as <code>inout</code>, which means they can be changed inside your function, and those changes reflect in the original value outside the function.</p><p>For example, if you want to double a number in place – i.e., change the value directly rather than returning a new one – you might write a function like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">doubleInPlace</span><span class="token punctuation">(</span>number<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    number <span class="token operator">*=</span> <span class="token number">2</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To use that, you first need to make a variable integer – you can’t use constant integers with <code>inout</code>, because they might be changed. You also need to pass the parameter to <code>doubleInPlace</code> using an ampersand, <code>&amp;</code>, before its name, which is an explicit recognition that you’re aware it is being used as <code>inout</code>.</p><p>In code, you’d write this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> myNum <span class="token operator">=</span> <span class="token number">10</span> </span>
<span class="line"><span class="token function">doubleInPlace</span><span class="token punctuation">(</span>number<span class="token punctuation">:</span> <span class="token operator">&amp;</span>myNum<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,6),hn=a('<div class="hint-container info"><p class="hint-container-title">10. inout parameters - Additional</p><ul><li>Optional: <a href="https://hackingwithswift.com/quick-start/understanding-swift/when-should-you-use-inout-parameters" target="_blank" rel="noopener noreferrer">When should you use inout parameters?</a></li><li>Test: <a href="https://hackingwithswift.com/review/inout-parameters" target="_blank" rel="noopener noreferrer">inout parameters</a></li></ul></div><h3 id="_11-functions-summary" tabindex="-1"><a class="header-anchor" href="#_11-functions-summary"><span>11. Functions summary</span></a></h3>',2),mn={class:"hint-container details"},fn=n("summary",null,"11. Functions summary",-1),gn=a("<p>You’ve made it to the end of the fifth part of this series, so let’s summarize:</p><ol><li>Functions let us re-use code without repeating ourselves.</li><li>Functions can accept parameters – just tell Swift the type of each parameter.</li><li>Functions can return values, and again you just specify what type will be sent back. Use tuples if you want to return several things.</li><li>You can use different names for parameters externally and internally, or omit the external name entirely.</li><li>Parameters can have default values, which helps you write less code when specific values are common.</li><li>Variadic functions accept zero or more of a specific parameter, and Swift converts the input to an array.</li><li>Functions can throw errors, but you must call them using <code>try</code> and handle errors using <code>catch</code>.</li><li>You can use <code>inout</code> to change variables inside a function, but it’s usually better to return a new value.</li></ol>",2),wn=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"11. Functions summary - Additional"),n("ul",null,[n("li",null,[e("Test: "),n("a",{href:"https://hackingwithswift.com/review/functions-summary",target:"_blank",rel:"noopener noreferrer"},"Test")])])],-1),kn=n("p",null,"Do you remember the two rules of this series? You’re already being awesome at the first one because you keep coming back for more (you rock!), but don’t forget the second: post your progress online, so you can benefit from all the encouragement.",-1),vn=n("hr",null,null,-1);function bn(u,yn){const t=p("router-link"),i=p("VPCard"),c=p("VidStack");return f(),h("div",null,[n("h1",w,[n("a",k,[n("span",null,m(u.$frontmatter.title)+" 관련",1)])]),n("nav",v,[n("ul",null,[n("li",null,[s(t,{to:"#functions"},{default:o(()=>[e("Functions")]),_:1}),n("ul",null,[n("li",null,[s(t,{to:"#_1-writing-functions"},{default:o(()=>[e("1. Writing functions")]),_:1})]),n("li",null,[s(t,{to:"#_2-accepting-parameters"},{default:o(()=>[e("2. Accepting parameters")]),_:1})]),n("li",null,[s(t,{to:"#_3-returning-values"},{default:o(()=>[e("3. Returning values")]),_:1})]),n("li",null,[s(t,{to:"#_4-parameter-labels"},{default:o(()=>[e("4. Parameter labels")]),_:1})]),n("li",null,[s(t,{to:"#_5-omitting-parameter-labels"},{default:o(()=>[e("5. Omitting parameter labels")]),_:1})]),n("li",null,[s(t,{to:"#_6-default-parameters"},{default:o(()=>[e("6. Default parameters")]),_:1})]),n("li",null,[s(t,{to:"#_7-variadic-functions"},{default:o(()=>[e("7. Variadic functions")]),_:1})]),n("li",null,[s(t,{to:"#_8-writing-throwing-functions"},{default:o(()=>[e("8. Writing throwing functions")]),_:1})]),n("li",null,[s(t,{to:"#_9-running-throwing-functions"},{default:o(()=>[e("9. Running throwing functions")]),_:1})]),n("li",null,[s(t,{to:"#_10-inout-parameters"},{default:o(()=>[e("10. inout parameters")]),_:1})]),n("li",null,[s(t,{to:"#_11-functions-summary"},{default:o(()=>[e("11. Functions summary")]),_:1})])])])])]),b,s(i,l(r({title:"100 Days of Swift - Day 5",desc:"Functions",link:"https://www.hackingwithswift.com/100/5",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),y,_,x,q,D,S,n("details",T,[W,s(i,l(r({title:"100 Days of Swift - Day 5 - 1. Writing functions",desc:"1. Writing functions",link:"https://hackingwithswift.com/sixty/5/1/writing-functions",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(c,{src:"youtube/mMnth6cTjQc"}),j]),P,n("details",A,[F,s(i,l(r({title:"100 Days of Swift - Day 5 - 2. Accepting parameters",desc:"2. Accepting parameters",link:"https://hackingwithswift.com/sixty/5/2/accepting-parameters",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(c,{src:"youtube/XKZrEDzo9Lw"}),R]),I,n("details",O,[V,s(i,l(r({title:"100 Days of Swift - Day 5 - 3. Returning values",desc:"3. Returning values",link:"https://hackingwithswift.com/sixty/5/3/returning-values",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(c,{src:"youtube/iWDIZgTvHOg"}),Y]),H,n("details",N,[z,s(i,l(r({title:"100 Days of Swift - Day 5 - 4. Parameter labels",desc:"4. Parameter labels",link:"https://hackingwithswift.com/sixty/5/4/parameter-labels",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(c,{src:"youtube/FPFIxiinMn4"}),E]),C,n("details",M,[B,s(i,l(r({title:"100 Days of Swift - Day 5 - 5. Omitting parameter labels",desc:"5. Omitting parameter labels",link:"https://hackingwithswift.com/sixty/5/5/omitting-parameter-labels",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(c,{src:"youtube/IQzpZ0HiWsY"}),Z]),K,n("details",L,[Q,s(i,l(r({title:"100 Days of Swift - Day 5 - 6. Default parameters",desc:"6. Default parameters",link:"https://hackingwithswift.com/sixty/5/6/default-parameters",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(c,{src:"youtube/Sv03YVPNb0E"}),J]),U,n("details",X,[G,s(i,l(r({title:"100 Days of Swift - Day 5 - 7. Variadic functions",desc:"7. Variadic functions",link:"https://hackingwithswift.com/sixty/5/7/variadic-functions",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(c,{src:"youtube/OpRcPOVNjXE"}),$]),nn,n("details",sn,[an,s(i,l(r({title:"100 Days of Swift - Day 5 - 8. Writing throwing functions",desc:"8. Writing throwing functions",link:"https://hackingwithswift.com/sixty/5/8/writing-throwing-functions",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(c,{src:"youtube/MxaYr2VGVTo"}),en]),tn,n("details",on,[ln,s(i,l(r({title:"100 Days of Swift - Day 5 - 9. Running throwing functions",desc:"9. Running throwing functions",link:"https://hackingwithswift.com/sixty/5/9/running-throwing-functions",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(c,{src:"youtube/InmF1VfeY80"}),rn]),cn,n("details",pn,[un,s(i,l(r({title:"100 Days of Swift - Day 5 - 10. inout parameters",desc:"10. inout parameters",link:"https://hackingwithswift.com/sixty/5/10/inout-parameters",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(c,{src:"youtube/deSLFZvC9vw"}),dn]),hn,n("details",mn,[fn,s(i,l(r({title:"100 Days of Swift - Day 5 - 11. Functions summary",desc:"11. Functions summary",link:"https://hackingwithswift.com/sixty/5/11/functions-summary",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(213,52,58,0.2)"})),null,16),s(c,{src:"youtube/5PcYq4M6Qaw"}),gn]),wn,kn,vn])}const qn=d(g,[["render",bn],["__file","05.html.vue"]]),Dn=JSON.parse('{"path":"/swift/100-days-of-swift/05.html","title":"Day 05","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 05","description":"100 Days of Swift > Day 05","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of Swift > Day 05"},{"property":"og:description","content":"Day 05"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swift/05.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swift/05.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 05"}],["meta",{"property":"og:description","content":"100 Days of Swift > Day 05"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 05\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Functions","slug":"functions","link":"#functions","children":[{"level":3,"title":"1. Writing functions","slug":"_1-writing-functions","link":"#_1-writing-functions","children":[]},{"level":3,"title":"2. Accepting parameters","slug":"_2-accepting-parameters","link":"#_2-accepting-parameters","children":[]},{"level":3,"title":"3. Returning values","slug":"_3-returning-values","link":"#_3-returning-values","children":[]},{"level":3,"title":"4. Parameter labels","slug":"_4-parameter-labels","link":"#_4-parameter-labels","children":[]},{"level":3,"title":"5. Omitting parameter labels","slug":"_5-omitting-parameter-labels","link":"#_5-omitting-parameter-labels","children":[]},{"level":3,"title":"6. Default parameters","slug":"_6-default-parameters","link":"#_6-default-parameters","children":[]},{"level":3,"title":"7. Variadic functions","slug":"_7-variadic-functions","link":"#_7-variadic-functions","children":[]},{"level":3,"title":"8. Writing throwing functions","slug":"_8-writing-throwing-functions","link":"#_8-writing-throwing-functions","children":[]},{"level":3,"title":"9. Running throwing functions","slug":"_9-running-throwing-functions","link":"#_9-running-throwing-functions","children":[]},{"level":3,"title":"10. inout parameters","slug":"_10-inout-parameters","link":"#_10-inout-parameters","children":[]},{"level":3,"title":"11. Functions summary","slug":"_11-functions-summary","link":"#_11-functions-summary","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":9}]},"readingTime":{"minutes":10.09,"words":3028},"filePathRelative":"swift/100-days-of-swift/05.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{qn as comp,Dn as data};
