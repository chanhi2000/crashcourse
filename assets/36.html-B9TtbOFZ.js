import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as s,t as w,b as e,w as o,n as i,g as l,e as p,d as n,r,o as m}from"./app-U_bew1in.js";const k={},v={id:"frontmatter-title-관련",tabindex:"-1"},g={class:"header-anchor",href:"#frontmatter-title-관련"},b={class:"table-of-contents"},f=s("hr",null,null,-1),y=p('<h2 id="project-7-part-1" tabindex="-1"><a class="header-anchor" href="#project-7-part-1"><span>Project 7, part 1</span></a></h2><p>Linus Torvalds, the creator of the open source Linux operating system, was once asked if he had any advice for developers who wanted to build a large software project. Here is the response he gave:</p><blockquote><p>Nobody should start to undertake a large project. You start with a small trivial project, and you should never expect it to get large. If you do, you&#39;ll just overdesign and generally think it is more important than it likely is at that stage. Or worse, you might be scared away by the sheer size of the work you envision.</p></blockquote><p>In writing this course, I’ve already had people emailing me asking “why didn’t I use X to solve a problem in project 1?” or “Y would have been much better than Z in project 4.” They are probably right, but if I tried to teach you everything in project 1 you’d have found it overwhelming and unpleasant, so instead we built a small app. Then in project 2 we built a second small app. Then we built a third and a fourth, with each one adding to your skills.</p><p>Today you’ll start project 7, which is still most definitely a small app. However, in the process you’ll learn how to show another screen, how to share data across screens, how to load and save user data, and more – the kinds of features that really help take your SwiftUI skills to the next level.</p><p>That doesn’t mean the app is perfect – as you’ll learn later, <code>UserDefaults</code> isn’t the ideal choice for what we’re doing here, and instead something like the much bigger and more complex Core Data would be a better fit – but that’s okay. Remember, we’re setting out to build something small and work our way up, rather than just jumping into one all-encompassing mega-project.</p><p>If you’re all set, let’s get to it!</p><p><strong>Today you have seven topics to work through, in which you’ll learn about <code>@StateObject</code>, <code>sheet()</code>, <code>onDelete()</code>, and more.</strong></p><h3 id="iexpense-introduction" tabindex="-1"><a class="header-anchor" href="#iexpense-introduction"><span>iExpense: Introduction</span></a></h3>',9),S={class:"hint-container details"},j=s("summary",null,"iExpense: Introduction",-1),x=s("p",null,"Our next two projects are going to start pushing your SwiftUI skills beyond the basics, as we explore apps that have multiple screens, that load and save user data, and have more complex user interfaces.",-1),_=s("p",null,"In this project we’re going to build iExpense, which is an expense tracker that separates personal costs from business costs. At its core this is an app with a form (how much did you spend?) and a list (here are the amounts you spent), but in order to accomplish those two things you’re going to need to learn how to:",-1),U=s("ul",null,[s("li",null,"Present and dismiss a second screen of data."),s("li",null,"Delete rows from a list"),s("li",null,"Save and load user data")],-1),I=s("p",null,"…and more.",-1),D=s("p",null,"There’s lots to do, so let’s get started: create a new iOS app using the App template, naming it “iExpense”. We’ll be using that for the main project, but first lets take a closer look at the new techniques required for this project…",-1),q=s("h3",{id:"why-state-only-works-with-structs",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#why-state-only-works-with-structs"},[s("span",null,[n("Why "),s("code",null,"@State"),n(" only works with structs")])])],-1),T={class:"hint-container details"},N=s("summary",null,"Why @State only works with structs",-1),O=p(`<p>SwiftUI’s <code>State</code> property wrapper is designed for simple data that is local to the current view, but as soon as you want to share data between views it stops being useful.</p><p>Let’s break this down with some code – here’s a struct to store a user’s first and last name:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> firstName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Bilbo&quot;</span></span></span>
<span class="line">    <span class="token keyword">var</span> lastName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Baggins&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can now use that in a SwiftUI view by creating an <code>@State</code> property and attaching things to <code>$user.firstName</code> and <code>$user.lastName</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Your name is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user<span class="token punctuation">.</span>firstName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user<span class="token punctuation">.</span>lastName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;First name&quot;</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> $user<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span></span>
<span class="line">            <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Last name&quot;</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> $user<span class="token punctuation">.</span>lastName<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That all works: SwiftUI is smart enough to understand that one object contains all our data, and will update the UI when either value changes. Behind the scenes, what’s actually happening is that each time a value inside our struct changes the <em>whole</em> struct changes – it’s like a new user every time we type a key for the first or last name. That might sound wasteful, but it’s actually extremely fast.</p><p>Previously we looked at the differences between classes and structs, and there were two important differences I mentioned. First, that structs always have unique owners, whereas with classes multiple things can point to the same value. And second, that classes don’t need the <code>mutating</code> keyword before methods that change their properties, because you <em>can</em> change properties of constant classes.</p><p>In practice, what this means is that if we have two SwiftUI views and we send them both the same struct to work with, they actually each have a unique copy of that struct; if one changes it, the other won’t see that change. On the other hand, if we create an instance of a <em>class</em> and send that to both views, they <em>will</em> share changes.</p><p>For SwiftUI developers, what this means is that if we want to share data between multiple views – if we want two or more views to point to the same data so that when one changes they all get those changes – we need to use classes rather than structs.</p><p>So, please change the <code>User</code> struct to be a class. From this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>To this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now run the program again and see what you think.</p><p>Spoiler: it doesn’t work any more. Sure, we can type into the text fields just like before, but the text view above doesn’t change.</p><p>When we use <code>@State</code>, we’re asking SwiftUI to watch a property for changes. So, if we change a string, flip a Boolean, add to an array, and so on, the property has changed and SwiftUI will re-invoke the <code>body</code> property of the view.</p><p>When <code>User</code> was a struct, every time we modified a property of that struct Swift was actually creating a new instance of the struct. <code>@State</code> was able to spot that change, and automatically reloaded our view. Now that we have a class, that behavior no longer happens: Swift can just modify the value directly.</p><p>Remember how we had to use the <code>mutating</code> keyword for struct methods that modify properties? This is because if we create the struct’s properties as variable but the struct itself is constant, we can’t change the properties – Swift needs to be able to destroy and recreate the whole struct when a property changes, and that isn’t possible for constant structs. Classes <em>don’t</em> need the <code>mutating</code> keyword, because even if the class instance is marked as constant Swift can still modify variable properties.</p><p>I know that all sounds terribly theoretical, but here’s the twist: now that <code>User</code> is a class the property itself isn’t changing, so <code>@State</code> doesn’t notice anything and can’t reload the view. Yes, the values <em>inside</em> the class are changing, but <code>@State</code> doesn’t monitor those, so effectively what’s happening is that the values inside our class are being changed but the view isn’t being reloaded to reflect that change.</p><p>To fix this, it’s time to leave <code>@State</code> behind. Instead we need a more powerful property wrapper called <code>@StateObject</code> – let’s look at that now…</p>`,20),V=s("h3",{id:"sharing-swiftui-state-with-stateobject",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#sharing-swiftui-state-with-stateobject"},[s("span",null,[n("Sharing SwiftUI state with "),s("code",null,"@StateObject")])])],-1),C={class:"hint-container details"},A=s("summary",null,"Sharing SwiftUI state with @StateObject",-1),B=p(`<p>If you want to use a class with your SwiftUI data – which you <em>will</em> want to do if that data should be shared across more than one view – then SwiftUI gives us three property wrappers that are useful: <code>@StateObject</code>, <code>@ObservedObject</code>, and <code>@EnvironmentObject</code>. We’ll be looking at environment objects later on, but for now let’s focus on the first two.</p><p>Here’s some code that creates a <code>User</code> class, and shows that user data in a view:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> firstName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Bilbo&quot;</span></span></span>
<span class="line">    <span class="token keyword">var</span> lastName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Baggins&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Your name is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user<span class="token punctuation">.</span>firstName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">user<span class="token punctuation">.</span>lastName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;First name&quot;</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> $user<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span></span>
<span class="line">            <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Last name&quot;</span></span><span class="token punctuation">,</span> text<span class="token punctuation">:</span> $user<span class="token punctuation">.</span>lastName<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>However, that code won’t work as intended: we’ve marked the <code>user</code> property with <code>@State</code>, which is designed to track local structs rather than external classes. As a result, we can type into the text fields but the text view above won’t be updated.</p><p>To fix this, we need to tell SwiftUI when interesting parts of our class have changed. By “interesting parts” I mean parts that should cause SwiftUI to reload any views that are watching our class – it’s possible you might have lots of properties inside your class, but only a few should be exposed to the wider world in this way.</p><p>Our <code>User</code> class has two properties: <code>firstName</code> and <code>lastName</code>. Whenever either of those two changes, we want to notify any views that are watching our class that a change has happened so they can be reloaded. We can do this using the <code>@Published</code> property observer, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> firstName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Bilbo&quot;</span></span></span>
<span class="line">    <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> lastName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Baggins&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@Published</code> is more or less half of <code>@State</code>: it tells Swift that whenever either of those two properties changes, it should send an announcement out to any SwiftUI views that are watching that they should reload.</p><p>How do those views know which classes might send out these notifications? That’s another property wrapper, <code>@StateObject</code>, which is the other half of <code>@State</code> – it tells SwiftUI that we’re creating a new class instance that should be watched for any change announcements.</p><p>So, change the <code>user</code> property to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@StateObject</span> <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>I removed the <code>private</code> access control there, but whether or not you use it depends on your usage – if you’re intending to share that object with other views then marking it as <code>private</code> will just cause confusion.</p><p>Now that we’re using <code>@StateObject</code>, our code will no longer compile. It’s not a problem, and in fact it’s expected and easy to fix: the <code>@StateObject</code> property wrapper can only be used on types that conform to the <code>ObservableObject</code> protocol. This protocol has no requirements, and really all it means is “we want other things to be able to monitor this for changes.”</p><p>So, modify the <code>User</code> class to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">:</span> <span class="token class-name">ObservableObject</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> firstName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Bilbo&quot;</span></span></span>
<span class="line">    <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> lastName <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Baggins&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Our code will now compile again, and, even better, it will now actually <em>work</em> again – you can run the app and see the text view update when either text field is changed.</p><p>As you’ve seen, rather than just using <code>@State</code> to declare local state, we now take three steps:</p><ul><li>Make a class that conforms to the <code>ObservableObject</code> protocol.</li><li>Mark some properties with <code>@Published</code> so that any views using the class get updated when they change.</li><li>Create an instance of our class using the <code>@StateObject</code> property wrapper.</li></ul><p>The end result is that we can have our state stored in an external object, and, even better, we can now use that object in multiple views and have them all point to the same values.</p><p>However, there is a catch. Like I said earlier, <code>@StateObject</code> tells SwiftUI that we’re creating a new class instance that should be watched for any change announcements, but that should only be used when you’re <em>creating</em> the object like we are with our <code>User</code> instance.</p><p>When you want to use a class instance elsewhere – when you’ve created it in view A using <code>@StateObject</code> and want to use that same object in view B – you use a slightly different property wrapper called <code>@ObservedObject</code>. That’s the only difference: when <em>creating</em> the shared data use <code>@StateObject</code>, but when you’re just <em>using</em> it in a different view you should use <code>@ObservedObject</code> instead.</p>`,21),E=s("h3",{id:"showing-and-hiding-views",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#showing-and-hiding-views"},[s("span",null,"Showing and hiding views")])],-1),F={class:"hint-container details"},W=s("summary",null,"Showing and hiding views",-1),P=p(`<p>There are several ways of showing views in SwiftUI, and one of the most basic is a <em>sheet</em>: a new view presented on top of our existing one. On iOS this automatically gives us a card-like presentation where the current view slides away into the distance a little and the new view animates in on top.</p><p>Sheets work much like alerts, in that we don’t present them directly with code such as <code>mySheet.present()</code> or similar. Instead, we define the <em>conditions</em> under which a sheet should be shown, and when those conditions become true or false the sheet will either be presented or dismissed respectively.</p><p>Let’s start with a simple example, which will be showing one view from another using a sheet. First, we create the view we want to show inside a sheet, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">SecondView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Second View&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There’s nothing special about that view at all – it doesn’t know it’s going to be shown in a sheet, and doesn’t <em>need</em> to know it’s going to be shown in a sheet.</p><p>Next we create our initial view, which will show the second view. We’ll make it simple, then add to it:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span> </span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Show Sheet&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// show the sheet</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Filling that in requires four steps, and we’ll tackle them individually.</p><p>First, we need some state to track whether the sheet is showing. Just as with alerts, this can be a simple Boolean, so add this property to <code>ContentView</code> now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> showingSheet <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Second, we need to toggle that when our button is tapped, so replace the <code>// show the sheet</code> comment with this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line">showingSheet<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Third, we need to attach our sheet somewhere to our view hierarchy. If you remember, we show alerts using <code>isPresented</code> with a two-way binding to our state property, and we use something almost identical here: <code>sheet(isPresented:)</code>.</p><p><code>sheet()</code> is a modifier just like <code>alert()</code>, so please add this modifier to our button now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span>isPresented<span class="token punctuation">:</span> $showingSheet<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// contents of the sheet</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Fourth, we need to decide what should actually be in the sheet. In our case, we already know exactly what we want: we want to create and show an instance of <code>SecondView</code>. In code that means writing <code>SecondView()</code>, then… er… well, that’s it.</p><p>So, the finished <code>ContentView</code> struct should look like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> showingSheet <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Show Sheet&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            showingSheet<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span>isPresented<span class="token punctuation">:</span> $showingSheet<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">SecondView</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you run the program now you’ll see you can tap the button to have our second view slide upwards from the bottom, and you can then drag that down to dismiss it.</p><p>When you create a view like this, you can pass in any parameters it needs to work. For example, we could require that <code>SecondView</code> be sent a name it can display, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">SecondView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> name<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>And now just using <code>SecondView()</code> in our sheet isn’t good enough – we need to pass in a name string to be shown. For example, we could pass in my Twitter username like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span>isPresented<span class="token punctuation">:</span> $showingSheet<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">SecondView</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;@twostraws&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now the sheet will show “Hello, @twostraws”.</p><p>Swift is doing a ton of work on our behalf here: as soon as we said that <code>SecondView</code> has a name property, Swift ensured that our code wouldn’t even build until all instances of <code>SecondView()</code> became <code>SecondView(name: &quot;some name&quot;)</code>, which eliminates a whole range of possible errors.</p><p>Before we move on, there’s one more thing I want to demonstrate, which is how to make a view dismiss itself. Yes, you’ve seen that the user can just swipe downwards, but sometimes you will want to dismiss views programmatically – to make the view go away because a button was pressed, for example.</p><p>To dismiss another view we need another property wrapper – and yes, I realize that so often the solution to a problem in SwiftUI is to use another property wrapper.</p><p>Anyway, this new one is called <code>@Environment</code>, and it allows us to create properties that store values provided to us externally. Is the user in light mode or dark mode? Have they asked for smaller or larger fonts? What timezone are they on? All these and more are values that come from the environment, and in this instance we’re going to ask the environment to dismiss our view.</p><p>Yes, we need to ask the environment to dismiss our view, because it might have been presented in any number of different ways. So, we’re effectively saying “hey, figure out how my view was presented, then dismiss it appropriately.”</p><p>To try it out add this property to <code>SecondView</code>, which creates a property called <code>dismiss</code> based on a value from the environment:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@Environment</span><span class="token punctuation">(</span><span class="token punctuation">\\</span><span class="token punctuation">.</span>dismiss<span class="token punctuation">)</span> <span class="token keyword">var</span> dismiss</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Now replace the text view in <code>SecondView</code> with this button:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Dismiss&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">dismiss</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Anyway, with that button in place, you should now find you can show and hide the sheet using button presses.</p>`,34),H=s("h3",{id:"deleting-items-using-ondelete",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#deleting-items-using-ondelete"},[s("span",null,[n("Deleting items using "),s("code",null,"onDelete()")])])],-1),J={class:"hint-container details"},$=s("summary",null,"Deleting items using onDelete()",-1),R=p(`<p>SwiftUI gives us the <code>onDelete()</code> modifier for us to use to control how objects should be deleted from a collection. In practice, this is almost exclusively used with <code>List</code> and <code>ForEach</code>: we create a list of rows that are shown using <code>ForEach</code>, then attach <code>onDelete()</code> to that <code>ForEach</code> so the user can remove rows they don’t want.</p><p>This is another place where SwiftUI does a heck of a lot of work on our behalf, but it does have a few interesting quirks as you’ll see.</p><p>First, let’s construct an example we can work with: a list that shows numbers, and every time we tap the button a new number appears. Here’s the code for that:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> currentNumber <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">VStack</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">List</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">ForEach</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Row </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token short-argument">$0</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Add Number&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                numbers<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>currentNumber<span class="token punctuation">)</span></span>
<span class="line">                currentNumber <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, you might think that the <code>ForEach</code> isn’t needed – the list is made up of entirely dynamic rows, so we could write this instead:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">List</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Row </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token short-argument">$0</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That would also work, but here’s our first quirk: the <code>onDelete()</code> modifier only exists on <code>ForEach</code>, so if we want users to delete items from a list we must put the items inside a <code>ForEach</code>. This does mean a small amount of extra code for the times when we have only dynamic rows, but on the flip side it means it’s easier to create lists where only some rows can be deleted.</p><p>In order to make <code>onDelete()</code> work, we need to implement a method that will receive a single parameter of type <code>IndexSet</code>. This is a bit like a set of integers, except it’s sorted, and it’s just telling us the positions of all the items in the <code>ForEach</code> that should be removed.</p><p>Because our <code>ForEach</code> was created entirely from a single array, we can actually just pass that index set straight to our <code>numbers</code> array – it has a special <code>remove(atOffsets:)</code> method that accepts an index set.</p><p>So, add this method to <code>ContentView</code> now:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">removeRows</span><span class="token punctuation">(</span>at offsets<span class="token punctuation">:</span> <span class="token class-name">IndexSet</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    numbers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>atOffsets<span class="token punctuation">:</span> offsets<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally, we can tell SwiftUI to call that method when it wants to delete data from the <code>ForEach</code>, by modifying it to this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">ForEach</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token punctuation">\\</span><span class="token punctuation">.</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Row </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token short-argument">$0</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">.</span><span class="token function">onDelete</span><span class="token punctuation">(</span>perform<span class="token punctuation">:</span> removeRows<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now go ahead and run your app, then add a few numbers. When you’re ready, swipe from right to left across any of the rows in your list, and you should find a delete button appears. You can tap that, or you can also use iOS’s swipe to delete functionality by swiping further.</p><p>Given how easy that was, I think the result works really well. But SwiftUI has another trick up its sleeve: we can add an Edit/Done button to the navigation bar, that lets users delete several rows more easily.</p><p>First, wrap your <code>VStack</code> in a <code>NavigationView</code>, then add this modifier to the <code>VStack</code>:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token punctuation">.</span>toolbar <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">EditButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That’s literally all it takes – if you run the app you’ll see you can add some numbers, then tap Edit to start deleting those rows. When you’re ready, tap Done to exit editing mode. Not bad, given how little code it took!</p>`,18),K=s("h3",{id:"storing-user-settings-with-userdefaults",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#storing-user-settings-with-userdefaults"},[s("span",null,[n("Storing user settings with "),s("code",null,"UserDefaults")])])],-1),L={class:"hint-container details"},Y=s("summary",null,"Storing user settings with UserDefaults",-1),z=p(`<p>Most users pretty much <em>expect</em> apps to store their data so they can create more customized experiences, and as such it’s no surprise that iOS gives us several ways to read and write user data.</p><p>One common way to store a small amount of data is called <code>UserDefaults</code>, and it’s great for simple user preferences. There is no specific number attached to “a small amount”, but everything you store in <code>UserDefaults</code> will automatically be loaded when your app launches – if you store a lot in there your app launch will slow down. To give you at least an <em>idea</em>, you should aim to store no more than 512KB in there.</p><p>Tip: If you’re thinking “512KB? How much is <em>that</em>?” then let me give you a rough estimate: it’s about as much text as all the chapters you’ve read in this book so far.</p><p><code>UserDefaults</code> is perfect for storing things like when the user last launched the app, which news story they last read, or other passively collected information. Even better, SwiftUI can often wrap up <code>UserDefaults</code> inside a nice and simple property wrapper called <code>@AppStorage</code> – it only supports a subset of functionality right now, but it can be really helpful.</p><p>Enough chat – let’s look at some code. Here’s a view with a button that shows a tap count, and increments that count every time the button is tapped:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> tapCount <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Tap count: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">tapCount</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            tapCount <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As this is clearly A Very Important App, we want to save the number of taps that the user made, so when they come back to the app in the future they can pick up where they left off.</p><p>To make that happen, we need to write to <code>UserDefaults</code> inside our button’s action closure. So, add this after the <code>tapCount += 1</code> line:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">UserDefaults</span><span class="token punctuation">.</span>standard<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>tapCount<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Tap&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>In just that single line of code you can see three things in action:</p><ol><li>We need to use <code>UserDefaults.standard</code>. This is the built-in instance of <code>UserDefaults</code> that is attached to our app, but in more advanced apps you can create your own instances. For example, if you want to share defaults across several app extensions you might create your own <code>UserDefaults</code> instance.</li><li>There is a single <code>set()</code> method that accepts any kind of data – integers, Booleans, strings, and more.</li><li>We attach a string name to this data, in our case it’s the key “Tap”. This key is case-sensitive, just like regular Swift strings, and it’s important – we need to use the same key to read the data back out of <code>UserDefaults</code>.</li></ol><p>Speaking of reading the data back, rather than start with <code>tapCount</code> set to 0 we should instead make it read the value back from <code>UserDefaults</code> like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> tapCount <span class="token operator">=</span> <span class="token class-name">UserDefaults</span><span class="token punctuation">.</span>standard<span class="token punctuation">.</span><span class="token function">integer</span><span class="token punctuation">(</span>forKey<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Tap&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Notice how that uses exactly the same key name, which ensures it reads the same integer value.</p><p>Go ahead and give the app a try and see what you think – you ought to be able tap the button a few times, go back to Xcode, run the app again, and see the number exactly where you left it.</p><p>There are two things you can’t see in that code, but both matter. First, what happens if we don’t have the “Tap” key set? This will be the case the very first time the app is run, but as you just saw it works fine – if the key can’t be found it just sends back 0.</p><p>Sometimes having a default value like 0 is helpful, but other times it can be confusing. With Booleans, for example, you get back false if <code>boolean(forKey:)</code> can’t find the key you asked for, but is that false a value you set yourself, or does it mean there was no value at all?</p><p>Second, it takes iOS a little time to write your data to permanent storage – to actually save that change to the device. They don’t write updates immediately because you might make several back to back, so instead they wait some time then write out all the changes at once. How much time is another number we don’t know, but a couple of seconds ought to do it.</p><p>As a result of this, if you tap the button then quickly relaunch the app from Xcode, you’ll find your most recent tap count wasn’t saved. There used to be a way of forcing updates to be written immediately, but at this point it’s worthless – even if the user immediately started the process of terminating your app after making a choice, your defaults data would be written immediately so nothing will be lost.</p><p>Now, I mentioned that SwiftUI provides an <code>@AppStorage</code> property wrapper around <code>UserDefaults</code>, and in simple situations like this one it’s really helpful. What it does is let us effectively ignore <code>UserDefaults</code> entirely, and just use <code>@AppStorage</code> rather than <code>@State</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token attribute atrule">@AppStorage</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;tapCount&quot;</span></span><span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">var</span> tapCount <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Tap count: </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">tapCount</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            tapCount <span class="token operator">+=</span> <span class="token number">1</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Again, there are three things I want to point out in there:</p><ol><li>Our access to the <code>UserDefaults</code> system is through the <code>@AppStorage</code> property wrapper. This works like <code>@State</code>: when the value changes, it will reinvoked the body property so our UI reflects the new data.</li><li>We attach a string name, which is the <code>UserDefaults</code> key where we want to store the data. I’ve used “tapCount”, but it can be anything at all – it doesn’t need to match the property name.</li><li>The rest of the property is declared as normal, including providing a default value of 0. That will be used if there is no existing value saved inside <code>UserDefaults</code>.</li></ol><p>Clearly using <code>@AppStorage</code> is easier than <code>UserDefaults</code>: it’s one line of code rather than two, and it also means we don’t have to repeat the key name each time. However, right now at least <code>@AppStorage</code> doesn’t make it easy to handle storing complex objects such as Swift structs – perhaps because Apple wants us to remember that storing lots of data in there is a bad idea!</p>`,24),M=s("h3",{id:"archiving-swift-objects-with-codable",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#archiving-swift-objects-with-codable"},[s("span",null,[n("Archiving Swift objects with "),s("code",null,"Codable")])])],-1),Z={class:"hint-container details"},G=s("summary",null,"Archiving Swift objects with Codable",-1),X=p(`<p><code>@AppStorage</code> is great for storing simple settings such as integers and Booleans, but when it comes to complex data – custom Swift types, for example – we need to do a little more work. This is where we need to poke around directly with <code>UserDefaults</code> itself, rather than going through the <code>@AppStorage</code> property wrapper.</p><p>Here’s a simple <code>User</code> data structure we can work with:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> firstName<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">let</span> lastName<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That has two strings, but those aren’t special – they are just pieces of text. The same goes for integer (plain old numbers), <code>Boolean</code> (true or false), and <code>Double</code> (plain old numbers, just with a dot somewhere in there). Even arrays and dictionaries of those values are easy to think about: there’s one string, then another, then a third, and so on.</p><p>When working with data like this, Swift gives us a fantastic protocol called <code>Codable</code>: a protocol specifically for <em>archiving</em> and <em>unarchiving</em> data, which is a fancy way of saying “converting objects into plain text and back again.”</p><p>We’re going to be looking at <code>Codable</code> much more in future projects, but for now we’re going to keep it as simple as possible: we want to archive a custom type so we can put it into <code>UserDefaults</code>, then unarchive it when it comes back <em>out</em> from <code>UserDefaults</code>.</p><p>When working with a type that only has simple properties – strings, integers, Booleans, arrays of strings, and so on – the only thing we need to do to support archiving and unarchiving is add a conformance to <code>Codable</code>, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">struct</span> <span class="token class-name">User</span><span class="token punctuation">:</span> <span class="token class-name">Codable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> firstName<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line">    <span class="token keyword">let</span> lastName<span class="token punctuation">:</span> <span class="token class-name">String</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Swift will automatically generate some code for us that will archive and unarchive <code>User</code> instances for us as needed, but we still need to tell Swift <em>when</em> to archive and what to do with the data.</p><p>This part of the process is powered by a new type called <code>JSONEncoder</code>. Its job is to take something that conforms to <code>Codable</code> and send back that object in JavaScript Object Notation (JSON) – the name implies it’s specific to JavaScript, but in practice we all use it because it’s so fast and simple.</p><p>The <code>Codable</code> protocol doesn’t require that we use JSON, and in fact other formats are available, but it is by far the most common. In this instance, we don’t actually care <em>what</em> sort of data is used, because it’s just going to be stored in <code>UserDefaults</code>.</p><p>To convert our <code>user</code> data into JSON data, we need to call the enc<code>ode()</code> method on a <code>JSONEncoder</code>. This might throw errors, so it should be called with <code>try</code> or <code>try?</code> to handle errors neatly. For example, if we had a property to store a <code>User</code> instance, like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">(</span>firstName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Taylor&quot;</span></span><span class="token punctuation">,</span> lastName<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Swift&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Then we could create a button that archives the user and save it to <code>UserDefaults</code> like this:</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Save User&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> encoder <span class="token operator">=</span> <span class="token class-name">JSONEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">?</span> encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">UserDefaults</span><span class="token punctuation">.</span>standard<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> forKey<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;UserData&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That accesses <code>UserDefaults</code> directly rather than going through <code>@AppStorage</code>, because the <code>@AppStorage</code> property wrapper just doesn’t work here.</p><p>That <code>data</code> constant is a new data type called, perhaps confusingly, <code>Data</code>. It’s designed to store any kind of data you can think of, such as strings, images, zip files, and more. Here, though, all we care about is that it’s one of the types of data we can write straight into <code>UserDefaults</code>.</p><p>When we’re coming back the other way – when we have JSON data and we want to convert it to Swift <code>Codable</code> types – we should use <code>JSONDecoder</code> rather than <code>JSONEncoder()</code>, but the process is much the same.</p><p>That brings us to the end of our project overview, so go ahead and reset your project to its initial state ready to build on.</p>`,19),Q=s("div",{class:"hint-container tip"},[s("p",{class:"hint-container-title"},"Tips"),s("p",null,[n("It’s easy to feel overwhelmed by the various property wrappers used in SwiftUI, so you might find this article helpful: "),s("a",{href:"https://www.hackingwithswift.com/articles/227/which-swiftui-property-wrapper",target:"_blank",rel:"noopener noreferrer"},"Which SwiftUI property wrapper to choose in any situation"),n(".")])],-1),ss=s("p",null,"Don’t forget to post your progress somewhere online – we’re well past a third of the way through the course, and you’re doing great!",-1),es=s("hr",null,null,-1);function ns(u,as){const a=r("router-link"),t=r("VPCard"),c=r("VidStack");return m(),h("div",null,[s("h1",v,[s("a",g,[s("span",null,w(u.$frontmatter.title)+" 관련",1)])]),s("nav",b,[s("ul",null,[s("li",null,[e(a,{to:"#project-7-part-1"},{default:o(()=>[n("Project 7, part 1")]),_:1}),s("ul",null,[s("li",null,[e(a,{to:"#iexpense-introduction"},{default:o(()=>[n("iExpense: Introduction")]),_:1})]),s("li",null,[e(a,{to:"#why-state-only-works-with-structs"},{default:o(()=>[n("Why @State only works with structs")]),_:1})]),s("li",null,[e(a,{to:"#sharing-swiftui-state-with-stateobject"},{default:o(()=>[n("Sharing SwiftUI state with @StateObject")]),_:1})]),s("li",null,[e(a,{to:"#showing-and-hiding-views"},{default:o(()=>[n("Showing and hiding views")]),_:1})]),s("li",null,[e(a,{to:"#deleting-items-using-ondelete"},{default:o(()=>[n("Deleting items using onDelete()")]),_:1})]),s("li",null,[e(a,{to:"#storing-user-settings-with-userdefaults"},{default:o(()=>[n("Storing user settings with UserDefaults")]),_:1})]),s("li",null,[e(a,{to:"#archiving-swift-objects-with-codable"},{default:o(()=>[n("Archiving Swift objects with Codable")]),_:1})])])])])]),f,e(t,i(l({title:"100 Days of SwiftUI - Day 36",desc:"Project 7, part 1",link:"https://www.hackingwithswift.com/100/swiftui/36",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),y,s("details",S,[j,e(t,i(l({title:"100 Days of SwiftUI - Day 36 - iExpense: Introduction",desc:"iExpense: Introduction",link:"https://hackingwithswfit.com/books/ios-swiftui/iexpense-introduction",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),x,_,U,I,D]),q,s("details",T,[N,e(t,i(l({title:"100 Days of SwiftUI - Day 36 - Why @State only works with structs",desc:"Why @State only works with structs",link:"https://hackingwithswfit.com/books/ios-swiftui/why-state-only-works-with-structs",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),e(c,{src:"youtube/FXSq_4xWtrc"}),O]),V,s("details",C,[A,e(t,i(l({title:"100 Days of SwiftUI - Day 36 - Sharing SwiftUI state with @StateObject",desc:"Sharing SwiftUI state with @StateObject",link:"https://hackingwithswfit.com/books/ios-swiftui/sharing-swiftui-state-with-stateobject",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),e(c,{src:"youtube/DPrAMnMKc34"}),B]),E,s("details",F,[W,e(t,i(l({title:"100 Days of SwiftUI - Day 36 - Showing and hiding views",desc:"Showing and hiding views",link:"https://hackingwithswfit.com/books/ios-swiftui/showing-and-hiding-views",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),e(c,{src:"youtube/61O6IdqKZVg"}),P]),H,s("details",J,[$,e(t,i(l({title:"100 Days of SwiftUI - Day 36 - Deleting items using onDelete()",desc:"Deleting items using onDelete()",link:"https://hackingwithswfit.com/books/ios-swiftui/deleting-items-using-ondelete",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),e(c,{src:"youtube/dg3B9HHTGHM"}),R]),K,s("details",L,[Y,e(t,i(l({title:"100 Days of SwiftUI - Day 36 - Storing user settings with UserDefaults",desc:"Storing user settings with UserDefaults",link:"https://hackingwithswfit.com/books/ios-swiftui/storing-user-settings-with-userdefaults",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),e(c,{src:"youtube/nGmrtPNuE2Q"}),z]),M,s("details",Z,[G,e(t,i(l({title:"100 Days of SwiftUI - Day 36 - Archiving Swift objects with Codable",desc:"Archiving Swift objects with Codable",link:"https://hackingwithswfit.com/books/ios-swiftui/archiving-swift-objects-with-codable",logo:"https://www.hackingwithswift.com/favicon.svg",background:"rgba(54,94,226,0.2)"})),null,16),e(c,{src:"youtube/lZtGgb4aOdQ"}),X]),Q,ss,es])}const is=d(k,[["render",ns],["__file","36.html.vue"]]),ls=JSON.parse('{"path":"/swift/100-days-of-swiftui/36.html","title":"Day 36","lang":"ko-KR","frontmatter":{"lang":"ko-KR","title":"Day 36","description":"100 Days of SwiftUI > Day 36","category":["Swift"],"tag":["crashcourse","paul-hudson","swift","swiftui","hacking-with-swift","xcode","appstore"],"head":[[{"meta":null},{"property":"og:title","content":"100 Days of SwiftUI > Day 36"},{"property":"og:description","content":"Day 36"},{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/swift/100-days-of-swiftui/36.html"}],["meta",{"property":"og:url","content":"https://chanhi2000.github.io/crashcourse/crashcourse/swift/100-days-of-swiftui/36.html"}],["meta",{"property":"og:site_name","content":"🥁Crashcourse"}],["meta",{"property":"og:title","content":"Day 36"}],["meta",{"property":"og:description","content":"100 Days of SwiftUI > Day 36"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"ko-KR"}],["meta",{"property":"og:updated_time","content":"2024-10-03T01:20:13.000Z"}],["meta",{"property":"article:tag","content":"crashcourse"}],["meta",{"property":"article:tag","content":"paul-hudson"}],["meta",{"property":"article:tag","content":"swift"}],["meta",{"property":"article:tag","content":"swiftui"}],["meta",{"property":"article:tag","content":"hacking-with-swift"}],["meta",{"property":"article:tag","content":"xcode"}],["meta",{"property":"article:tag","content":"appstore"}],["meta",{"property":"article:modified_time","content":"2024-10-03T01:20:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Day 36\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-03T01:20:13.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Project 7, part 1","slug":"project-7-part-1","link":"#project-7-part-1","children":[{"level":3,"title":"iExpense: Introduction","slug":"iexpense-introduction","link":"#iexpense-introduction","children":[]},{"level":3,"title":"Why @State only works with structs","slug":"why-state-only-works-with-structs","link":"#why-state-only-works-with-structs","children":[]},{"level":3,"title":"Sharing SwiftUI state with @StateObject","slug":"sharing-swiftui-state-with-stateobject","link":"#sharing-swiftui-state-with-stateobject","children":[]},{"level":3,"title":"Showing and hiding views","slug":"showing-and-hiding-views","link":"#showing-and-hiding-views","children":[]},{"level":3,"title":"Deleting items using onDelete()","slug":"deleting-items-using-ondelete","link":"#deleting-items-using-ondelete","children":[]},{"level":3,"title":"Storing user settings with UserDefaults","slug":"storing-user-settings-with-userdefaults","link":"#storing-user-settings-with-userdefaults","children":[]},{"level":3,"title":"Archiving Swift objects with Codable","slug":"archiving-swift-objects-with-codable","link":"#archiving-swift-objects-with-codable","children":[]}]}],"git":{"createdTime":1703642364000,"updatedTime":1727918413000,"contributors":[{"name":"chanhi2000","email":"chanhi2000@gmail.com","commits":8}]},"readingTime":{"minutes":18.52,"words":5556},"filePathRelative":"swift/100-days-of-swiftui/36.md","localizedDate":"2023년 12월 27일","excerpt":"\\n\\n<hr>\\n"}');export{is as comp,ls as data};
